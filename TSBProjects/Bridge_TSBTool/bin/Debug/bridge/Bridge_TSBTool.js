/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2020
 * @compiler Bridge.NET 17.10.1
 */
Bridge.assembly("Bridge_TSBTool", function ($asm, globals) {
    "use strict";

    /** @namespace Bridge_TSBTool */

    /**
     * Bridge_TSBTool.App.___
     Public API 
     window.tecmoTool: {
         bool loadFile(string input): Prompts user to load a ROM; returns true when successful
         string getAllContents({options}): Get contents for the loaded ROM
         void applyData(string): Applies the data passed
         void saveFile(): save the current work to a rom.
         string ConvertToTSB1Format(string): Converts data to TSB1 Format; returns the converted data
         string ConvertToTSB2Format(string): Converts data to TSB2 Format; returns the converted data
         string ConvertToTSB3Format(string): Converts data to TSB3 Format; returns the converted data
     }
     *
     * @public
     * @class Bridge_TSBTool.App
     */
    Bridge.define("Bridge_TSBTool.App", {
        main: function Main () {
            var $t;
            var loadButton = ($t = document.createElement("input"), $t.id = "mHiddenLoadButton", $t.type = "file", $t.innerHTML = "Load File", $t.style.display = "none", $t);
            loadButton.onchange = function (ev) {
                Bridge_TSBTool.App.LoadFile(loadButton.files[0]);
            };
            document.body.appendChild(loadButton);
        },
        statics: {
            fields: {
                sButtonHeight: null,
                sButtonMargin: null,
                tool: null,
                mTextBox: null,
                applyButton: null,
                viewButton: null,
                saveButton: null
            },
            ctors: {
                init: function () {
                    this.sButtonHeight = "40px";
                    this.sButtonMargin = "5px";
                }
            },
            methods: {
                /**
                 * https://github.com/bridgedotnet/Bridge/wiki
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @return  {void}
                 */
                RenderSamplePage: function () {
                    var $t;




                    Bridge_TSBTool.App.mTextBox = ($t = document.createElement("textarea"), $t.id = "mTextBox", $t.style.marginLeft = "5px", $t.style.height = "65vh", $t.style.width = "92%", $t.style.maxWidth = "700px", $t);
                    Bridge_TSBTool.App.mTextBox.setAttribute("spellcheck", "false");
                    document.body.appendChild(Bridge_TSBTool.App.mTextBox);
                    document.body.appendChild(document.createElement("p"));

                    var loadButton = ($t = document.createElement("input"), $t.id = "mLoadButton", $t.type = "file", $t.innerHTML = "Load File", $t.style.margin = Bridge_TSBTool.App.sButtonMargin, $t.style.height = Bridge_TSBTool.App.sButtonHeight, $t);
                    loadButton.onchange = function (ev) {
                        Bridge_TSBTool.App.LoadFile(loadButton.files[0]);
                    };
                    document.body.appendChild(loadButton);

                    Bridge_TSBTool.App.viewButton = ($t = document.createElement("button"), $t.id = "mViewButton", $t.innerHTML = "View Contents", $t.style.margin = Bridge_TSBTool.App.sButtonMargin, $t.style.height = Bridge_TSBTool.App.sButtonHeight, $t);
                    Bridge_TSBTool.App.viewButton.onclick = function (ev) {
                        Bridge_TSBTool.App.ViewContents();
                    };
                    document.body.appendChild(Bridge_TSBTool.App.viewButton);

                    Bridge_TSBTool.App.applyButton = ($t = document.createElement("button"), $t.id = "mApplyButton", $t.innerHTML = "Apply To ROM", $t.style.margin = Bridge_TSBTool.App.sButtonMargin, $t.style.height = Bridge_TSBTool.App.sButtonHeight, $t);
                    Bridge_TSBTool.App.applyButton.onclick = function (ev) {
                        Bridge_TSBTool.App.ApplyToRom();
                    };
                    document.body.appendChild(Bridge_TSBTool.App.applyButton);

                    Bridge_TSBTool.App.saveButton = ($t = document.createElement("button"), $t.id = "mSaveButton", $t.innerHTML = "Save File", $t.style.margin = Bridge_TSBTool.App.sButtonMargin, $t.style.height = Bridge_TSBTool.App.sButtonHeight, $t);
                    Bridge_TSBTool.App.saveButton.onclick = function (ev) {
                        Bridge_TSBTool.App.SaveFile();
                    };
                    document.body.appendChild(Bridge_TSBTool.App.saveButton);
                    Bridge_TSBTool.App.state1();
                },
                LoadROM: function (rom) {
                    Bridge_TSBTool.App.tool = Bridge.as(TSBTool.TecmoToolFactory.GetToolForRom(rom), TSBTool.ITecmoTool);
                    if (Bridge_TSBTool.App.tool != null && Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$OutputRom != null) {
                        System.Console.WriteLine("ROM Loaded; version = " + System.Enum.toString(TSBTool.ROM_TYPE, Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$RomVersion));
                        Bridge_TSBTool.App.state2();
                    } else {
                        Bridge_TSBTool.App.state1();
                    }
                },
                state1: function () {
                    var $t;
                    if (Bridge_TSBTool.App.viewButton != null) {
                        Bridge_TSBTool.App.viewButton.disabled = ($t = (Bridge_TSBTool.App.applyButton.disabled = true, true), Bridge_TSBTool.App.saveButton.disabled = $t, $t);
                    }
                },
                state2: function () {
                    var $t;
                    if (Bridge_TSBTool.App.viewButton != null) {
                        Bridge_TSBTool.App.viewButton.disabled = ($t = (Bridge_TSBTool.App.applyButton.disabled = false, false), Bridge_TSBTool.App.saveButton.disabled = $t, $t);
                    }
                },
                ViewContents: function () {
                    Bridge_TSBTool.App.mTextBox.value = (Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$GetKey() || "") + "\n" + (Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$GetAll() || "");
                },
                ApplyToRom: function () {
                    System.Console.WriteLine("ApplyToRom() called!");
                    if (Bridge_TSBTool.App.tool != null) {
                        var stuff = Bridge_TSBTool.App.mTextBox.value;
                        Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$ProcessText(stuff);
                    }
                },
                /**
                 * used like: loadButton.OnChange = (ev) =&gt; { LoadFile(loadButton.Files[0]);  };
                 Where 'loadButton' is an input element (button)
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @param   {File}    blob
                 * @return  {void}
                 */
                LoadFile: function (blob) {
                    var reader = new FileReader();

                    reader.onload = function (ev) {
                        var arrayBuffer = reader.result;
                        var arr = new Uint8Array(arrayBuffer);
                        var rom = System.Array.init(arr.byteLength, 0, System.Byte);
                        for (var i = 0; i < arr.byteLength; i = (i + 1) | 0) {
                            rom[System.Array.index(i, rom)] = arr[i];
                        }
                        Bridge_TSBTool.App.LoadROM(rom);
                    };
                    reader.readAsArrayBuffer(blob);
                },
                /**
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @return  {void}
                 */
                PromptAndLoadFile: function () {
                    document.getElementById("mHiddenLoadButton").click();
                },
                /**
                 * Get contents for the loaded ROM
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @return  {string}
                 */
                GetAllContents: function () {
                    var retVal = "<no data loaded>";
                    if (Bridge_TSBTool.App.tool != null) {
                        retVal = Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$GetAll();
                    } else {
                        System.Console.WriteLine("No Rom Loaded");
                    }
                    return retVal;
                },
                /**
                 * Applies the data passed
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @param   {string}    data    The data to apply
                 * @return  {void}
                 */
                ApplyData: function (data) {
                    if (Bridge_TSBTool.App.tool != null) {
                        Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$ProcessText(data);
                    } else {
                        System.Console.WriteLine("No Rom Loaded");
                    }
                },
                /**
                 * save the current work to a rom, prompts user for filename.
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @return  {void}
                 */
                SaveFile: function () {
                    if (Bridge_TSBTool.App.tool != null) {
                        var fileName = window.prompt("Save file name", "");
                        var u8a = new Uint8Array(Bridge_TSBTool.App.tool.TSBTool$ITecmoTool$OutputRom);
                        var blob = window.createBlobFromArrayBuffer(u8a);
                        window.saveFile(fileName, blob);
                    } else {
                        System.Console.WriteLine("No Rom Loaded");
                    }
                },
                /**
                 * Converts data to TSB1 Format; returns the converted data
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @param   {string}    input
                 * @return  {string}
                 */
                ConvertToTSB1Format: function (input) {
                    var type = TSBTool.StaticUtils.GetContentType(input);
                    return TSBTool2.TecmoConverter.Convert(type, TSBTool.TSBContentType.TSB1, input);
                },
                /**
                 * Converts data to TSB2 Format; returns the converted data
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @param   {string}    input
                 * @return  {string}
                 */
                ConvertToTSB2Format: function (input) {
                    var type = TSBTool.StaticUtils.GetContentType(input);
                    return TSBTool2.TecmoConverter.Convert(type, TSBTool.TSBContentType.TSB2, input);
                },
                /**
                 * Converts data to TSB3 Format; returns the converted data
                 *
                 * @static
                 * @public
                 * @this Bridge_TSBTool.App
                 * @memberof Bridge_TSBTool.App
                 * @param   {string}    input
                 * @return  {string}
                 */
                ConvertToTSB3Format: function (input) {
                    var type = TSBTool.StaticUtils.GetContentType(input);
                    return TSBTool2.TecmoConverter.Convert(type, TSBTool.TSBContentType.TSB2, input);
                }
            }
        }
    });

    Bridge.define("System.Windows.Forms.DialogResult", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                OK: 1,
                Cancel: 2,
                Abort: 3,
                Retry: 4,
                Ignore: 5,
                Yes: 6,
                No: 7
            }
        }
    });

    Bridge.define("System.Windows.Forms.MessageBox", {
        statics: {
            methods: {
                Show: function (owner, text, caption, buttons, icon) {
                    System.Console.WriteLine("This should not be called!!!");
                    return System.Windows.Forms.DialogResult.Cancel;
                }
            }
        }
    });

    Bridge.define("System.Windows.Forms.MessageBoxButtons", {
        $kind: "enum",
        statics: {
            fields: {
                OK: 0,
                OKCancel: 1,
                AbortRetryIgnore: 2,
                YesNoCancel: 3,
                YesNo: 4,
                RetryCancel: 5
            }
        }
    });

    Bridge.define("System.Windows.Forms.MessageBoxIcon", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Error: 16,
                Hand: 16,
                Stop: 16,
                Question: 32,
                Exclamation: 48,
                Warning: 48,
                Information: 64,
                Asterisk: 64
            }
        }
    });

    Bridge.define("TSBTool.Conference", {
        $kind: "enum",
        statics: {
            fields: {
                AFC: 0,
                NFC: 1
            }
        }
    });

    /** @namespace TSBTool */

    /**
     * Summary description for SchedulerHelper2.
     *
     * @public
     * @class TSBTool.ScheduleHelper2
     */
    Bridge.define("TSBTool.ScheduleHelper2", {
        fields: {
            weekOneStartLoc: 0,
            end_schedule_section: 0,
            gamesPerWeekStartLoc: 0,
            weekPointersStartLoc: 0,
            teamGames: null,
            total_games_possible: 0,
            gamePerWeekLimit: 0,
            totalGameLimit: 0,
            totalWeeks: 0,
            week: 0,
            week_game_count: 0,
            total_game_count: 0,
            messages: null,
            outputRom: null,
            gameRegex: null
        },
        props: {
            /**
             * @instance
             * @public
             * @readonly
             * @memberof TSBTool.ScheduleHelper2
             * @function TotalGameCount
             * @type number
             */
            TotalGameCount: {
                get: function () {
                    return this.total_game_count;
                }
            }
        },
        ctors: {
            init: function () {
                this.weekOneStartLoc = 207323;
                this.end_schedule_section = 213006;
                this.gamesPerWeekStartLoc = 207305;
                this.weekPointersStartLoc = 207271;
                this.total_games_possible = 238;
                this.gamePerWeekLimit = 14;
                this.totalGameLimit = 224;
                this.totalWeeks = 17;
                this.week = -1;
                this.week_game_count = 0;
                this.total_game_count = 0;
            },
            ctor: function (outputRom) {
                this.$initialize();
                this.outputRom = outputRom;
                this.gameRegex = new System.Text.RegularExpressions.Regex.ctor("([0-9a-z]+)\\s+at\\s+([0-9a-z]+)");
            }
        },
        methods: {
            AddMessage: function (message) {
                if (message != null && message.length > 0) {
                    this.messages.add(message);
                }
            },
            /**
             * Applies a schedule to the rom.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {System.Collections.Generic.List$1}    lines    the contents of the schedule file.
             * @return  {void}
             */
            ApplySchedule: function (lines) {
                this.week = -1;
                this.week_game_count = 0;
                this.total_game_count = 0;
                this.messages = new (System.Collections.Generic.List$1(System.String)).$ctor2(50);

                var line;
                for (var i = 0; i < lines.Count; i = (i + 1) | 0) {
                    line = Bridge.toString(lines.getItem(i)).trim().toLowerCase();
                    try {
                        if (System.String.startsWith(line, "#") || line.length < 3) {
                        } else if (System.String.startsWith(line, "week")) {
                            if (this.week > ((this.totalWeeks - 1) | 0)) {
                                this.AddMessage("Error! You can have only 17 weeks in a season.");
                                break;
                            }
                            this.SetupWeek();
                            TSBTool.StaticUtils.WriteError(System.String.format("Scheduleing {0}", [line]));
                        } else {
                            this.ScheduleGame$1(line);
                        }
                    } catch (e) {
                        e = System.Exception.create(e);
                        TSBTool.StaticUtils.WriteError(System.String.format("Exception! with line '{0}' {1}\n{2}", line, e.Message, e.StackTrace));
                        this.AddMessage(System.String.format("Error on line '{0}'", [line]));
                    }
                }
                this.ClosePrevWeek();
                if (this.week < ((this.totalWeeks - 1) | 0)) {
                    this.AddMessage("Warning! You didn't schedule all 17 weeks. The schedule could be messed up.");
                }
                if (this.teamGames != null) {
                    for (var i1 = 0; i1 < this.teamGames.length; i1 = (i1 + 1) | 0) {
                        if (this.teamGames[System.Array.index(i1, this.teamGames)] !== 16) {
                            this.AddMessage(System.String.format("Warning! The {0} have {1} games scheduled.", TSBTool.TecmoTool.GetTeamFromIndex(i1), Bridge.box(this.teamGames[System.Array.index(i1, this.teamGames)], System.Int32)));

                        }
                    }
                }
            },
            SetupWeek: function () {
                this.ClosePrevWeek();
                this.week = (this.week + 1) | 0;
                this.total_game_count = (this.total_game_count + this.week_game_count) | 0;
                this.week_game_count = 0;
                this.SetupPointerForCurrentWeek();
            },
            ClosePrevWeek: function () {
                if (this.week > -1) {
                    var location = (this.gamesPerWeekStartLoc + this.week) | 0;
                    this.outputRom[System.Array.index(location, this.outputRom)] = this.week_game_count & 255;
                    if (this.week_game_count === 0) {
                        this.AddMessage(System.String.format("ERROR! Week {0}. You need at least 1 game in each week.", [Bridge.box(((this.week + 1) | 0), System.Int32)]));
                    }
                }
            },
            SetupPointerForCurrentWeek: function () {
                if (this.week === 0) {
                    return;
                }
                var val = ((Bridge.Int.mul(2, this.total_game_count)) + 35275) | 0;
                var location = (this.weekPointersStartLoc + (Bridge.Int.mul(this.week, 2))) | 0;
                if (this.week < 17) {
                    this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = (val >> 8) & 255;
                    this.outputRom[System.Array.index(location, this.outputRom)] = (val & 255) & 255;
                } else {
                    this.AddMessage(System.String.format("ERROR! To many Weeks {0}", [Bridge.box(((this.week + 1) | 0), System.Int32)]));
                }
            },
            /**
             * Attempts to schedule a game.
             *
             * @instance
             * @protected
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {string}     awayTeam    Away team's name.
             * @param   {string}     homeTeam    Home team's name.
             * @return  {boolean}                true on success, false on failure.
             */
            ScheduleGame: function (awayTeam, homeTeam) {
                var ret = false;
                var awayIndex = TSBTool.TecmoTool.GetTeamIndex(awayTeam);
                var homeIndex = TSBTool.TecmoTool.GetTeamIndex(homeTeam);

                if (awayIndex === -1 || homeIndex === -1) {
                    this.AddMessage(System.String.format("Error! Week {2}: Game '{0} at {1}'", awayTeam, homeTeam, Bridge.box(((this.week + 1) | 0), System.Int32)));
                    return false;
                }

                if (awayIndex === homeIndex) {
                    this.AddMessage(System.String.format("Warning! Week {0}: The {1} are scheduled to play against themselves.", Bridge.box(((this.week + 1) | 0), System.Int32), awayTeam));
                }

                var location = (this.weekOneStartLoc + (Bridge.Int.mul((((this.week_game_count + this.total_game_count) | 0)), 2))) | 0;
                if (location >= this.weekOneStartLoc && location < this.end_schedule_section) {
                    this.outputRom[System.Array.index(location, this.outputRom)] = awayIndex & 255;
                    this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = homeIndex & 255;
                    this.IncrementTeamGames(awayIndex);
                    this.IncrementTeamGames(homeIndex);
                    ret = true;
                }
                return ret;
            },
            /**
             * Attempts to schedule a game.
             *
             * @instance
             * @private
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {string}     line
             * @return  {boolean}            True on success, false on failure.
             */
            ScheduleGame$1: function (line) {
                var ret = false;
                var m = this.gameRegex.match(line);
                var awayTeam, homeTeam;

                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    awayTeam = m.getGroups().get(1).toString();
                    homeTeam = m.getGroups().get(2).toString();
                    if (this.week_game_count > ((this.gamePerWeekLimit - 1) | 0)) {
                        this.AddMessage(System.String.format("Error! Week {0}: You can have no more than {1} games in a week.", Bridge.box(((this.week + 1) | 0), System.Int32), Bridge.box(this.gamePerWeekLimit, System.Int32)));
                        ret = false;
                    } else if (this.ScheduleGame(awayTeam, homeTeam)) {
                        this.week_game_count = (this.week_game_count + 1) | 0;
                        ret = true;
                    } else {
                    }
                }
                if (((this.total_game_count + this.week_game_count) | 0) > this.totalGameLimit) {
                    this.AddMessage(System.String.format("Warning! Week {0}: There are more than {1} games scheduled.", Bridge.box(((this.week + 1) | 0), System.Int32), Bridge.box(this.gamePerWeekLimit, System.Int32)));
                }
                return ret;
            },
            /**
             * Gets the Schedule.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @return  {string}
             */
            GetSchedule: function () {
                var sb = new System.Text.StringBuilder("", 5712);
                for (var i = 0; i < 17; i = (i + 1) | 0) {
                    sb.append(System.String.format("WEEK {0}\n", [Bridge.box((((i + 1) | 0)), System.Int32)]));
                    sb.append((this.GetWeek(i) || "") + "\n");
                }
                return sb.toString();
            },
            /**
             * Gets the schedule for week 'week'.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {number}    week    The week to get.(Zero-based)
             * @return  {string}            The week as a string.
             */
            GetWeek: function (week) {
                if (week < 0 || week > ((this.totalWeeks - 1) | 0)) {
                    this.AddMessage("Programming Error! 'GetWeek' Week must be in the range 0-16.");
                    return null;
                }

                var sb = new System.Text.StringBuilder("", 168);
                var gamesInWeek = this.GetGamesInWeek(week);
                var prevGames = 0;
                for (var i = 0; i < week; i = (i + 1) | 0) {
                    prevGames = (prevGames + (this.GetGamesInWeek(i))) | 0;
                }
                var gameLocation = (this.weekOneStartLoc + (Bridge.Int.mul(2, prevGames))) | 0;
                for (var i1 = 0; i1 < gamesInWeek; i1 = (i1 + 1) | 0) {
                    sb.append(System.String.format("{0}", [this.GetGame(((gameLocation + (Bridge.Int.mul(2, i1))) | 0))]));
                }
                return sb.toString();
            },
            /**
             * Returns
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {number}    romLocation
             * @return  {string}
             */
            GetGame: function (romLocation) {
                if (romLocation < this.weekOneStartLoc) {
                    this.AddMessage(System.String.format("Programming ERROR! GetGame Invalid Game Location '0x{0}'. Valid locations are 0x{1}-0x{2}.", Bridge.box(romLocation, System.Int32), Bridge.box(this.weekOneStartLoc, System.Int32), Bridge.box(((this.weekOneStartLoc + 448) | 0), System.Int32)));
                    return null;
                }
                var away = this.outputRom[System.Array.index(romLocation, this.outputRom)];
                var home = this.outputRom[System.Array.index(((romLocation + 1) | 0), this.outputRom)];

                var awayTeam = TSBTool.TecmoTool.GetTeamFromIndex(away);
                var homeTeam = TSBTool.TecmoTool.GetTeamFromIndex(home);

                var ret = System.String.format("{0} at {1}\n", awayTeam, homeTeam);
                return ret;
            },
            /**
             * Returns the number of games in the given week.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {number}    week
             * @return  {number}
             */
            GetGamesInWeek: function (week) {
                if (week < 0 || week > ((this.totalWeeks - 1) | 0)) {
                    this.AddMessage(System.String.format("Programming Error! GetGamesInWeek Week {0} is invalid. Week range = 0-16.", [Bridge.box(week, System.Int32)]));
                    return -1;
                }
                var result = this.outputRom[System.Array.index(((this.gamesPerWeekStartLoc + week) | 0), this.outputRom)];
                return result;
            },
            /**
             * Set a geme in a week.
             To be called by the user.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @param   {number}     week        
             * @param   {number}     game        
             * @param   {string}     awayTeam    
             * @param   {string}     homeTeam
             * @return  {boolean}
             */
            SetGame: function (week, game, awayTeam, homeTeam) {
                if (week < 1 || week > this.totalWeeks) {
                    this.AddMessage("Error! valid week range is 1-17.");
                    return false;
                }
                week = (week - 1) | 0;
                var gamesInweek = this.GetGamesInWeek(week);
                if (game > gamesInweek || game < 1) {
                    this.AddMessage(System.String.format("Error! Game Number invalid. Current range for week {0} is 1 - {1}", Bridge.box(((week + 1) | 0), System.Int32), Bridge.box(gamesInweek, System.Int32)));
                    return false;
                }
                var awayIndex = TSBTool.TecmoTool.GetTeamIndex(awayTeam);
                var homeIndex = TSBTool.TecmoTool.GetTeamIndex(homeTeam);

                if (awayIndex < 0 || homeIndex < 0) {
                    this.AddMessage(System.String.format("Error! Team name invalid. Couldn't schedule game '{0} at {1}'", awayTeam, homeTeam));
                    return false;
                }
                var pointerLocation = (this.weekPointersStartLoc + (Bridge.Int.mul(2, week))) | 0;
                return false;
            },
            IncrementTeamGames: function (teamIndex) {
                if (this.teamGames == null) {
                    this.teamGames = System.Array.init(TSBTool.TecmoTool.Teams.Count, 0, System.Int32);
                }
                this.teamGames[System.Array.index(teamIndex, this.teamGames)] = (this.teamGames[System.Array.index(teamIndex, this.teamGames)] + 1) | 0;
            },
            /**
             * Returns an arraylist of error messages encountered when processing the schedule data.
             *
             * @instance
             * @public
             * @this TSBTool.ScheduleHelper2
             * @memberof TSBTool.ScheduleHelper2
             * @return  {System.Collections.Generic.List$1}
             */
            GetErrorMessages: function () {
                return this.messages;
            }
        }
    });

    Bridge.define("TSBTool.ITecmoContent", {
        $kind: "interface"
    });

    Bridge.define("TSBTool.ITecmoTool", {
        $kind: "interface"
    });

    Bridge.define("TSBTool.IAllStarPlayerControl", {
        $kind: "interface"
    });

    /**
     * Summary description for InputParser.
     *
     * @public
     * @class TSBTool.InputParser
     */
    Bridge.define("TSBTool.InputParser", {
        statics: {
            fields: {
                scheduleState: 0,
                rosterState: 0,
                teamRegex: null,
                weekRegex: null,
                gameRegex: null,
                numberRegex: null,
                posNameFaceRegex: null,
                simDataRegex: null,
                yearRegex: null,
                setRegex: null,
                returnTeamRegex: null,
                offensiveFormationRegex: null,
                playbookRegex: null,
                juiceRegex: null,
                homeRegex: null,
                awayRegex: null,
                divChampRegex: null,
                confChampRegex: null,
                uniformUsageRegex: null,
                replaceStringRegex: null,
                teamStringsRegex: null,
                KickRetMan: null,
                PuntRetMan: null
            },
            ctors: {
                init: function () {
                    this.scheduleState = 0;
                    this.rosterState = 1;
                    this.KickRetMan = new System.Text.RegularExpressions.Regex.ctor("^KR\\s*,\\s*([A-Z1-4]+)$");
                    this.PuntRetMan = new System.Text.RegularExpressions.Regex.ctor("^PR\\s*,\\s*([A-Z1-4]+)$");
                }
            },
            methods: {
                Init: function () {
                    if (TSBTool.InputParser.numberRegex == null) {
                        TSBTool.InputParser.numberRegex = new System.Text.RegularExpressions.Regex.ctor("(#[0-9]{1,2})");
                        TSBTool.InputParser.teamRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM\\s*=\\s*([0-9a-z]+)");
                        TSBTool.InputParser.simDataRegex = new System.Text.RegularExpressions.Regex.ctor("SimData=0[xX]([0-9a-fA-F][0-9a-fA-F])([0-3]?)");
                        TSBTool.InputParser.weekRegex = new System.Text.RegularExpressions.Regex.ctor("WEEK ([1-9][0\t-7]?)");
                        TSBTool.InputParser.gameRegex = new System.Text.RegularExpressions.Regex.ctor("([0-9a-z]+)\\s+at\\s+([0-9a-z]+)");
                        TSBTool.InputParser.posNameFaceRegex = new System.Text.RegularExpressions.Regex.ctor("([A-Z]+[1-4]?)\\s*,\\s*([a-zA-Z \\.\\-]+),\\s*(face=0[xX][0-9a-fA-F]+\\s*,\\s*)?");
                        TSBTool.InputParser.yearRegex = new System.Text.RegularExpressions.Regex.ctor("YEAR\\s*=\\s*([0-9]+)");
                        TSBTool.InputParser.returnTeamRegex = new System.Text.RegularExpressions.Regex.ctor("RETURN_TEAM\\s+([A-Z1-4]+)\\s*,\\s*([A-Z1-4]+)\\s*,\\s*([A-Z1-4]+)");
                        TSBTool.InputParser.setRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                        TSBTool.InputParser.offensiveFormationRegex = new System.Text.RegularExpressions.Regex.ctor("OFFENSIVE_FORMATION\\s*=\\s*([a-zA-Z1234_]+)");
                        TSBTool.InputParser.playbookRegex = new System.Text.RegularExpressions.Regex.ctor("PLAYBOOK (R[1-8]{4})\\s*,\\s*(P[1-8]{4})");
                        TSBTool.InputParser.juiceRegex = new System.Text.RegularExpressions.Regex.ctor("JUICE\\(\\s*([0-9]{1,2}|ALL)\\s*,\\s*([0-9]{1,2})\\s*\\)");
                        TSBTool.InputParser.homeRegex = new System.Text.RegularExpressions.Regex.ctor("Uniform1\\s*=\\s*0x([0-9a-fA-F]{6})");
                        TSBTool.InputParser.awayRegex = new System.Text.RegularExpressions.Regex.ctor("Uniform2\\s*=\\s*0x([0-9a-fA-F]{6})");
                        TSBTool.InputParser.divChampRegex = new System.Text.RegularExpressions.Regex.ctor("DivChamp\\s*=\\s*0x([0-9a-fA-F]{10})");
                        TSBTool.InputParser.confChampRegex = new System.Text.RegularExpressions.Regex.ctor("ConfChamp\\s*=\\s*0x([0-9a-fA-F]{8})");
                        TSBTool.InputParser.uniformUsageRegex = new System.Text.RegularExpressions.Regex.ctor("UniformUsage\\s*=\\s*0x([0-9a-fA-F]{8})");
                        TSBTool.InputParser.replaceStringRegex = new System.Text.RegularExpressions.Regex.ctor("ReplaceString\\(\\s*\"([A-Za-z0-9 .]+)\"\\s*,\\s*\"([A-Za-z .]+)\"\\s*(,\\s*([0-9]+))*\\s*\\)");
                        TSBTool.InputParser.teamStringsRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM_ABB=([0-9A-Z. ]+),TEAM_CITY=([0-9A-Za-z .]+),TEAM_NAME=([0-9A-Z .]+)");
                    }
                },
                CheckTextForRedundentSetCommands: function (input) {
                    var ret = new System.Text.StringBuilder();
                    var simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                    var mc = simpleSetRegex.matches(input);
                    var current = null;
                    var m = null;
                    var location1 = System.Int64(0);
                    var location2 = System.Int64(0);
                    var valueLength1 = 0;
                    var valueLength2 = 0;
                    for (var i = 0; i < mc.getCount(); i = (i + 1) | 0) {
                        current = mc.get(i);
                        location1 = TSBTool.StaticUtils.ParseLongFromHexString(current.getGroups().get(1).toString().substr(2));
                        valueLength1 = (Bridge.Int.div(current.getGroups().get(2).getLength(), 2)) | 0;
                        for (var j = (i + 1) | 0; j < mc.getCount(); j = (j + 1) | 0) {
                            m = mc.get(j);
                            location2 = TSBTool.StaticUtils.ParseLongFromHexString(m.getGroups().get(1).toString().substr(2));
                            valueLength2 = (Bridge.Int.div(m.getGroups().get(2).getLength(), 2)) | 0;
                            if ((location2.gte(location1) && location2.lte(location1.add(System.Int64((((valueLength1 - 2) | 0)))))) || (location1.gte(location2) && location1.lte(location2.add(System.Int64((((valueLength2 - 2) | 0))))))) {
                                if (!Bridge.referenceEquals(current.getGroups().get(0).toString(), m.getGroups().get(0).toString())) {
                                    ret.append("WARNING!\n 'SET' Commands modify same locations '");
                                    ret.append(current.getGroups().get(0));
                                    ret.append("' and '");
                                    ret.append(m.getGroups().get(0));
                                    ret.append("'\n");
                                }
                            }
                        }
                    }
                    return ret.toString();
                },
                GetInts: function (input) {
                    return TSBTool.InputParser.GetInts$1(input, false);
                },
                GetInts$1: function (input, useHex) {
                    if (input != null) {
                        var pound = System.String.indexOf(input, "#");
                        var brace = System.String.indexOf(input, "[");
                        if (pound > -1) {
                            input = input.substr(((pound + 3) | 0));
                        }
                        if (brace > -1) {
                            brace = System.String.indexOf(input, "[");
                            input = input.substr(0, brace);
                        }
                        var seps = System.Array.init([32, 44, 9], System.Char);
                        var nums = System.String.split(input, seps.map(function (i) {{ return String.fromCharCode(i); }}));
                        var j, count = 0;
                        for (j = 0; j < nums.length; j = (j + 1) | 0) {
                            if (nums[System.Array.index(j, nums)].length > 0) {
                                count = (count + 1) | 0;
                            }
                        }
                        var result = System.Array.init(count, 0, System.Int32);
                        j = 0;

                        var s = "";
                        var i = 0;
                        try {
                            for (i = 0; i < nums.length; i = (i + 1) | 0) {
                                s = nums[System.Array.index(i, nums)];
                                if (s != null && s.length > 0) {
                                    if (useHex) {
                                        result[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), result)] = TSBTool.StaticUtils.ParseIntFromHexString(s);
                                    } else {
                                        result[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), result)] = System.Int32.parse(s);
                                    }
                                }
                            }
                            return result;
                        } catch (e) {
                            e = System.Exception.create(e);
                            var error = System.String.format("Error with input '{0}', {1}, was jersey number specified?", input, e.Message);
                            TSBTool.StaticUtils.AddError(error);
                        }
                    }
                    return null;
                },
                GetJerseyNumber: function (line) {
                    var ret = -1;
                    var jerseyRegex = new System.Text.RegularExpressions.Regex.ctor("#([0-9]+)");
                    var num = jerseyRegex.match(line).getGroups().get(1).toString();
                    try {
                        ret = TSBTool.StaticUtils.ParseIntFromHexString(num);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        ret = -1;
                    }
                    return ret;
                },
                GetFace: function (line) {
                    var ret = -1;
                    var hexRegex = new System.Text.RegularExpressions.Regex.ctor("0[xX]([A-Fa-f0-9]+)");
                    var m = hexRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var num = m.getGroups().get(1).toString();
                        try {
                            ret = TSBTool.StaticUtils.ParseIntFromHexString(num);
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            ret = -1;
                            TSBTool.StaticUtils.AddError(System.String.format("Face ERROR line '{0}'", [line]));
                        }
                    }

                    return ret;
                },
                GetLastName: function (line) {
                    var ret = "";
                    var m = TSBTool.InputParser.posNameFaceRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var name = m.getGroups().get(2).toString().trim();
                        var index = name.lastIndexOf(" ");
                        ret = name.substr(((index + 1) | 0));
                    }
                    return ret;
                },
                GetFirstName: function (line) {
                    var ret = "";
                    var m = TSBTool.InputParser.posNameFaceRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var name = m.getGroups().get(2).toString().trim();
                        var index = name.lastIndexOf(" ");
                        if (index > -1 && index < name.length) {
                            ret = name.substr(0, index);
                        }
                    }
                    return ret;
                },
                /**
                 * @static
                 * @public
                 * @this TSBTool.InputParser
                 * @memberof TSBTool.InputParser
                 * @param   {string}            byteString    String in the format of a hex string (0123456789ABCDEF), must have
                 an even number of characters.
                 * @return  {Array.<number>}                  The bytes.
                 */
                GetBytesFromString: function (byteString) {
                    var ret = null;
                    var tmp = null;
                    var b;
                    if (byteString != null && byteString.length > 1 && (byteString.length % 2) === 0) {
                        tmp = System.Array.init(((Bridge.Int.div(byteString.length, 2)) | 0), 0, System.Byte);
                        for (var i = 0; i < tmp.length; i = (i + 1) | 0) {
                            b = byteString.substr(Bridge.Int.mul(i, 2), 2);
                            tmp[System.Array.index(i, tmp)] = TSBTool.StaticUtils.ParseByteFromHexString(b);
                        }
                        ret = tmp;
                    }
                    return ret;
                },
                GetHomeUniformColorString: function (line) {
                    TSBTool.InputParser.Init();
                    var tmp = "";
                    var match = TSBTool.InputParser.homeRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetAwayUniformColorString: function (line) {
                    TSBTool.InputParser.Init();
                    var tmp = "";
                    var match = TSBTool.InputParser.awayRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetConfChampColorString: function (line) {
                    TSBTool.InputParser.Init();
                    var tmp = "";
                    var match = TSBTool.InputParser.confChampRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetDivChampColorString: function (line) {
                    TSBTool.InputParser.Init();
                    var tmp = "";
                    var match = TSBTool.InputParser.divChampRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetUniformUsageString: function (line) {
                    TSBTool.InputParser.Init();
                    var tmp = "";
                    var match = TSBTool.InputParser.uniformUsageRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                /**
                 * Returns the text string passed, without thr trailing commas.
                 *
                 * @static
                 * @public
                 * @this TSBTool.InputParser
                 * @memberof TSBTool.InputParser
                 * @param   {string}    text
                 * @return  {string}
                 */
                DeleteTrailingCommas: function (text) {
                    var rs = new System.Text.RegularExpressions.Regex.ctor(",+\n");
                    var rrs = new System.Text.RegularExpressions.Regex.ctor(",+$");
                    var ret = rs.replace(text, "\n");
                    ret = rrs.replace(ret, "");

                    return ret;
                }
            }
        },
        fields: {
            tool: null,
            currentState: 0,
            showSimError: false,
            currentTeam: null,
            scheduleList: null
        },
        ctors: {
            init: function () {
                this.currentState = 2;
                this.showSimError = false;
            },
            $ctor1: function (tool) {
                this.$initialize();
                this.tool = tool;
                this.currentTeam = "bills";
                TSBTool.InputParser.Init();
            },
            ctor: function () {
                this.$initialize();
                this.currentTeam = "bills";
                TSBTool.InputParser.Init();
            }
        },
        methods: {
            ProcessFile: function (fileName) {
                try {
                    var sr = new System.IO.StreamReader.$ctor7(fileName);
                    var contents = sr.ReadToEnd();
                    sr.Close();
                    var chars = System.String.toCharArray(("\n\r"), 0, ("\n\r").length);
                    var lines = System.String.split(contents, chars.map(function (i) {{ return String.fromCharCode(i); }}));
                    this.ProcessLines(lines);
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(e.Message);
                }
            },
            ProcessLines: function (lines) {
                var i = 0;
                try {
                    for (i = 0; i < lines.length; i = (i + 1) | 0) {
                        this.ProcessLine(lines[System.Array.index(i, lines)]);
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    this.ApplySchedule();
                } catch (e) {
                    e = System.Exception.create(e);
                    var sb = new System.Text.StringBuilder("", 150);
                    sb.append("Error! ");
                    if (i < lines.length) {
                        sb.append(System.String.format("line #{0}:\t'{1}'", Bridge.box(i, System.Int32), lines[System.Array.index(i, lines)]));
                    }
                    sb.append(e.Message);
                    sb.append("\n");
                    sb.append(e.StackTrace);
                    sb.append("\n\nOperation aborted at this point. Data not applied.");
                    TSBTool.StaticUtils.ShowError(sb.toString());
                }
            },
            ApplySchedule: function () {
                if (this.scheduleList != null) {
                    this.tool.TSBTool$ITecmoTool$ApplySchedule(this.scheduleList);
                    TSBTool.StaticUtils.ShowErrors();
                    this.scheduleList = null;
                }
            },
            ReadFromStdin: function () {
                var line = "";
                var lineNumber = 0;
                System.Console.WriteLine("Reading from standard in...");
                try {
                    while (((line = prompt())) != null) {
                        lineNumber = (lineNumber + 1) | 0;
                        this.ProcessLine(line);
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    this.ApplySchedule();
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(System.String.format("Error Processing line {0}:'{1}'.\n{2}\n{3}", Bridge.box(lineNumber, System.Int32), line, e.Message, e.StackTrace));
                }
            },
            /**
             * @instance
             * @protected
             * @this TSBTool.InputParser
             * @memberof TSBTool.InputParser
             * @param   {string}    line
             * @return  {void}
             */
            ProcessLine: function (line) {
                line = line.trim();
                var m;

                if (System.String.startsWith(line, "#") || Bridge.referenceEquals(line, "") || System.String.startsWith(line.toLowerCase().trim(), "schedule")) {
                    return;
                } else {
                    if (System.String.startsWith(line, "SET")) {
                        this.tool.TSBTool$ITecmoTool$ApplySet(line);
                    } else if (!Bridge.referenceEquals(((m = TSBTool.InputParser.playbookRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                            var runs = m.getGroups().get(1).toString();
                            var passes = m.getGroups().get(2).toString();
                            this.tool.TSBTool$ITecmoTool$SetPlaybook(this.currentTeam, runs, passes);
                        } else {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR Setting playbook for team {0}. Line '{1}' is Invalid", this.currentTeam, line));
                        }
                    } else if (!Bridge.referenceEquals(((m = TSBTool.InputParser.juiceRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        var juiceWeek = m.getGroups().get(1).toString();
                        var juiceAmt = System.Int32.parse(m.getGroups().get(2).toString());

                        if (Bridge.referenceEquals(juiceWeek, "ALL")) {
                            for (var i = 0; i < 17; i = (i + 1) | 0) {
                                this.tool.TSBTool$ITecmoTool$ApplyJuice(((i + 1) | 0), juiceAmt);
                            }
                        } else {
                            var week = (System.Int32.parse(juiceWeek) - 1) | 0;
                            if (!this.tool.TSBTool$ITecmoTool$ApplyJuice(week, juiceAmt)) {
                                TSBTool.StaticUtils.AddError(System.String.format("ERROR! Line = '{0}'", [line]));
                            }
                        }
                    } else if (!Bridge.referenceEquals(((m = TSBTool.InputParser.replaceStringRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        var find = "";
                        var replace = "";
                        var occur = { v : -1 };
                        if (m.getGroups().getCount() > 1) {
                            find = m.getGroups().get(1).toString();
                            replace = m.getGroups().get(2).toString();
                            if (m.getGroups().getCount() > 3) {
                                System.Int32.tryParse(m.getGroups().get(4).toString(), occur);
                                occur.v = (occur.v - 1) | 0;
                            }
                            var msg = TSBTool.StaticUtils.ReplaceStringInRom(this.tool.TSBTool$ITecmoTool$OutputRom, find, replace, occur.v);
                            if (System.String.startsWith(msg, "Error")) {
                                TSBTool.StaticUtils.AddError(msg);
                            } else {
                                System.Console.WriteLine(msg);
                            }
                        } else {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Not enough info to use 'ReplaceString' function.Line={0}", [line]));
                        }
                    } else if (!Bridge.referenceEquals(((m = TSBTool.InputParser.teamStringsRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        var teamAbb = m.getGroups().get(1).toString();
                        var teamCity = m.getGroups().get(2).toString();
                        var teamName = m.getGroups().get(3).toString();
                        var index = TSBTool.TecmoTool.GetTeamIndex(this.currentTeam);
                        this.tool.TSBTool$ITecmoTool$SetTeamAbbreviation(index, teamAbb);
                        this.tool.TSBTool$ITecmoTool$SetTeamCity(index, teamCity);
                        this.tool.TSBTool$ITecmoTool$SetTeamName(index, teamName);
                    } else if (System.String.startsWith(line, "COLORS")) {
                        var tmp;

                        var home = TSBTool.InputParser.homeRegex.match(line);
                        var away = TSBTool.InputParser.awayRegex.match(line);
                        var confChamp = TSBTool.InputParser.confChampRegex.match(line);
                        var divChamp = TSBTool.InputParser.divChampRegex.match(line);
                        var uniUsage = TSBTool.InputParser.uniformUsageRegex.match(line);
                        if (!Bridge.referenceEquals(home, System.Text.RegularExpressions.Match.getEmpty())) {
                            tmp = home.getGroups().get(1).getValue();
                            this.tool.TSBTool$ITecmoTool$SetHomeUniform(this.currentTeam, tmp);
                        }
                        if (!Bridge.referenceEquals(away, System.Text.RegularExpressions.Match.getEmpty())) {
                            tmp = away.getGroups().get(1).getValue();
                            this.tool.TSBTool$ITecmoTool$SetAwayUniform(this.currentTeam, tmp);
                        }
                        if (!Bridge.referenceEquals(confChamp, System.Text.RegularExpressions.Match.getEmpty())) {
                            tmp = confChamp.getGroups().get(1).getValue();
                            this.tool.TSBTool$ITecmoTool$SetConfChampColors(this.currentTeam, tmp);
                        }
                        if (!Bridge.referenceEquals(divChamp, System.Text.RegularExpressions.Match.getEmpty())) {
                            tmp = divChamp.getGroups().get(1).getValue();
                            this.tool.TSBTool$ITecmoTool$SetDivChampColors(this.currentTeam, tmp);
                        }
                        if (!Bridge.referenceEquals(uniUsage, System.Text.RegularExpressions.Match.getEmpty())) {
                            tmp = uniUsage.getGroups().get(1).getValue();
                            this.tool.TSBTool$ITecmoTool$SetUniformUsage(this.currentTeam, tmp);
                        }
                    } else if (!Bridge.referenceEquals(TSBTool.InputParser.teamRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        System.Console.WriteLine(System.String.format("'{0}' ", line));
                        this.currentState = TSBTool.InputParser.rosterState;
                        var team = this.GetTeam(line);
                        var ret = this.SetCurrentTeam(team);
                        if (!ret) {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                            TSBTool.StaticUtils.AddError(System.String.format("Team input must be in the form 'TEAM = team SimData=0x1F'", null));
                            return;
                        }
                        var simData = this.GetSimData(line);
                        if (simData != null) {
                            if (simData[System.Array.index(0, simData)] > -1) {
                                this.tool.TSBTool$ITecmoTool$SetTeamSimData(this.currentTeam, ((simData[System.Array.index(0, simData)]) & 255));
                            } else {
                                TSBTool.StaticUtils.AddError(System.String.format("Warning: No sim data for team {0}", [team]));
                            }

                            if (simData[System.Array.index(1, simData)] > -1) {
                                this.tool.TSBTool$ITecmoTool$SetTeamSimOffensePref(this.currentTeam, simData[System.Array.index(1, simData)]);
                            }
                        } else {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                        }

                        var oFormMatch = TSBTool.InputParser.offensiveFormationRegex.match(line);
                        if (!Bridge.referenceEquals(oFormMatch, System.Text.RegularExpressions.Match.getEmpty())) {
                            var formation = oFormMatch.getGroups().get(1).toString();
                            this.tool.TSBTool$ITecmoTool$SetTeamOffensiveFormation(team, formation);
                        }
                    } else if (!Bridge.referenceEquals(TSBTool.InputParser.weekRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        this.currentState = TSBTool.InputParser.scheduleState;
                        if (this.scheduleList == null) {
                            this.scheduleList = new (System.Collections.Generic.List$1(System.String)).$ctor2(300);
                        }
                        this.scheduleList.add(line);
                    } else if (!Bridge.referenceEquals(TSBTool.InputParser.yearRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        this.SetYear(line);
                    } else if (System.String.startsWith(line, "AFC") || System.String.startsWith(line, "NFC")) {
                        var parts = System.String.split(System.String.replaceAll(line, " ", ""), System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                        if (parts != null && parts.length > 3) {
                            try {
                                this.tool.TSBTool$ITecmoTool$SetProBowlPlayer(System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(TSBTool.Conference, parts[System.Array.index(0, parts)]), TSBTool.Conference), System.Int32)), parts[System.Array.index(1, parts)], parts[System.Array.index(2, parts)], System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(TSBTool.TSBPlayer, parts[System.Array.index(3, parts)]), TSBTool.TSBPlayer), System.Int32)));
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                                TSBTool.StaticUtils.AddError("Error processing line > " + (line || ""));
                            }
                        }
                    } else if (this.currentState === TSBTool.InputParser.scheduleState) {
                        if (this.scheduleList != null) {
                            this.scheduleList.add(line);
                        }
                    } else if (this.currentState === TSBTool.InputParser.rosterState) {
                        this.UpdateRoster(line);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("Garbage/orphin line not applied \"{0}\"", [line]));
                    }
                }
            },
            SetYear: function (line) {
                var m = TSBTool.InputParser.yearRegex.match(line);
                var year = m.getGroups().get(1).toString();
                if (year.length < 1) {
                    TSBTool.StaticUtils.AddError(System.String.format("'{0}' is not valid.", [line]));
                } else {
                    this.tool.TSBTool$ITecmoTool$SetYear(year);
                    System.Console.WriteLine(System.String.format("Year set to '{0}'", year));
                }
            },
            GetTeam: function (line) {
                var m = TSBTool.InputParser.teamRegex.match(line);
                var team = m.getGroups().get(1).toString();
                return team;
            },
            GetSimData: function (line) {
                var m = TSBTool.InputParser.simDataRegex.match(line);
                var data = m.getGroups().get(1).toString();
                var simOffensePref = m.getGroups().get(2).toString();
                var ret = System.Array.init([-1, -1], System.Int32);

                if (data.length > 0) {
                    try {
                        var simData = TSBTool.StaticUtils.ParseIntFromHexString(data);
                        ret[System.Array.index(0, ret)] = simData;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        TSBTool.StaticUtils.AddError(System.String.format("Error getting SimData with line '{0}'.", [line]));
                    }
                }

                if (simOffensePref.length > 0) {
                    try {
                        var so = System.Int32.parse(simOffensePref);
                        ret[System.Array.index(1, ret)] = so;
                    } catch ($e2) {
                        $e2 = System.Exception.create($e2);
                        TSBTool.StaticUtils.AddError(System.String.format("Error getting SimData with line '{0}'.", [line]));
                    }
                }
                return ret;
            },
            GetAwayTeam: function (line) {
                var m = TSBTool.InputParser.gameRegex.match(line);
                var awayTeam = m.getGroups().get(1).toString();
                return awayTeam;
            },
            GetHomeTeam: function (line) {
                var m = TSBTool.InputParser.gameRegex.match(line);
                var team = m.getGroups().get(2).toString();
                return team;
            },
            GetWeek: function (line) {
                var m = TSBTool.InputParser.weekRegex.match(line);
                var week_str = m.getGroups().get(1).toString();
                var ret = -1;
                try {
                    ret = System.Int32.parse(week_str);
                    ret = (ret - 1) | 0;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    TSBTool.StaticUtils.AddError(System.String.format("Week '{0}' is invalid.", [week_str]));
                }
                return ret;
            },
            SetCurrentTeam: function (team) {
                if (TSBTool.TecmoTool.GetTeamIndex(team) < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is Invalid.", [team]));
                    return false;
                } else {
                    this.currentTeam = team;
                }
                return true;
            },
            UpdateRoster: function (line) {
                if (System.String.startsWith(line, "KR")) {
                    this.SetKickReturnMan(line);
                } else {
                    if (System.String.startsWith(line, "PR")) {
                        this.SetPuntReturnMan(line);
                    } else {
                        if (System.String.startsWith(line, "RETURN_TEAM")) {
                            var m = TSBTool.InputParser.returnTeamRegex.match(line);
                            if (Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                                TSBTool.StaticUtils.AddError(System.String.format("Error with line '{0}'.\n\tCorrect Syntax ='RETURN_TEAM POS1, POS2, POS3'", [line]));
                            } else {
                                var pos1 = m.getGroups().get(1).toString();
                                var pos2 = m.getGroups().get(2).toString();
                                var pos3 = m.getGroups().get(3).toString();
                                this.tool.TSBTool$ITecmoTool$SetReturnTeam(this.currentTeam, pos1, pos2, pos3);
                            }
                        } else {
                            var m1 = TSBTool.InputParser.posNameFaceRegex.match(line);
                            if (System.String.indexOf(line, "#") > -1) {
                                if (Bridge.referenceEquals(TSBTool.InputParser.numberRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (jersey number) Line  {0}", [line]));
                                    return;
                                }
                            }
                            var p = m1.getGroups().get(1).toString();
                            if (!Bridge.referenceEquals(m1, System.Text.RegularExpressions.Match.getEmpty()) && this.tool.TSBTool$ITecmoTool$IsValidPosition(p)) {
                                if (System.String.startsWith(line, "QB")) {
                                    this.SetQB(line);
                                } else {
                                    if (System.String.startsWith(line, "WR") || System.String.startsWith(line, "RB") || System.String.startsWith(line, "TE")) {
                                        this.SetSkillPlayer(line);
                                    } else {
                                        if (System.String.startsWith(line, "C") || System.String.startsWith(line, "RG") || System.String.startsWith(line, "LG") || System.String.startsWith(line, "RT") || System.String.startsWith(line, "LT")) {
                                            this.SetOLPlayer(line);
                                        } else if (System.String.indexOf(line, "LB") === 2 || System.String.indexOf(line, "CB") === 1 || System.String.startsWith(line, "RE") || System.String.startsWith(line, "LE") || System.String.startsWith(line, "NT") || System.String.startsWith(line, "SS") || System.String.startsWith(line, "FS") || System.String.startsWith(line, "DB")) {
                                            this.SetDefensivePlayer(line);
                                        } else if (System.String.startsWith(line, "P") || System.String.startsWith(line, "K")) {
                                            this.SetKickPlayer(line);
                                        }
                                    }
                                }
                            } else {
                                TSBTool.StaticUtils.AddError(System.String.format("ERROR! With line \"{0}\"     team = {1}", line, this.currentTeam));
                            }
                        }
                    }
                }
            },
            SetQB: function (line) {
                var fname = TSBTool.InputParser.GetFirstName(line);
                var lname = TSBTool.InputParser.GetLastName(line);
                var pos = this.GetPosition(line);
                var face = TSBTool.InputParser.GetFace(line);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(line);
                if (face > -1) {
                    this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                }
                if (jerseyNumber < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error with jersey number for '{0} {1}', setting to 0.", fname, lname));
                    jerseyNumber = 0;
                }
                this.tool.TSBTool$ITecmoTool$InsertPlayer(this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                var vals = TSBTool.InputParser.GetInts(line);
                var simVals = this.GetSimVals(line);
                if (vals != null && vals.length > 7) {
                    this.tool.TSBTool$ITecmoTool$SetQBAbilities(this.currentTeam, pos, vals[System.Array.index(0, vals)], vals[System.Array.index(1, vals)], vals[System.Array.index(2, vals)], vals[System.Array.index(3, vals)], vals[System.Array.index(4, vals)], vals[System.Array.index(5, vals)], vals[System.Array.index(6, vals)], vals[System.Array.index(7, vals)]);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! could not set ability data for {0} {1},", this.currentTeam, pos));
                }
                if (face > -1) {
                    this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                }
                if (simVals != null) {
                    this.tool.TSBTool$ITecmoTool$SetQBSimData(this.currentTeam, pos, simVals);
                } else {
                    if (this.showSimError) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                    }
                }
            },
            SetSkillPlayer: function (line) {
                var fname = TSBTool.InputParser.GetFirstName(line);
                var lname = TSBTool.InputParser.GetLastName(line);
                var pos = this.GetPosition(line);
                var face = TSBTool.InputParser.GetFace(line);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(line);
                this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                this.tool.TSBTool$ITecmoTool$InsertPlayer(this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                var vals = TSBTool.InputParser.GetInts(line);
                var simVals = this.GetSimVals(line);
                if (vals != null && vals.length > 5) {
                    this.tool.TSBTool$ITecmoTool$SetSkillPlayerAbilities(this.currentTeam, pos, vals[System.Array.index(0, vals)], vals[System.Array.index(1, vals)], vals[System.Array.index(2, vals)], vals[System.Array.index(3, vals)], vals[System.Array.index(4, vals)], vals[System.Array.index(5, vals)]);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No player data specified.", [line]));
                }
                if (simVals != null && simVals.length > 3) {
                    this.tool.TSBTool$ITecmoTool$SetSkillSimData(this.currentTeam, pos, simVals);
                } else {
                    if (this.showSimError) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                    }
                }
            },
            SetOLPlayer: function (line) {
                var fname = TSBTool.InputParser.GetFirstName(line);
                var lname = TSBTool.InputParser.GetLastName(line);
                var pos = this.GetPosition(line);
                var face = TSBTool.InputParser.GetFace(line);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.InputParser.GetInts(line);

                this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                this.tool.TSBTool$ITecmoTool$InsertPlayer(this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                if (vals != null && vals.length > 3) {
                    this.tool.TSBTool$ITecmoTool$SetOLPlayerAbilities(this.currentTeam, pos, vals[System.Array.index(0, vals)], vals[System.Array.index(1, vals)], vals[System.Array.index(2, vals)], vals[System.Array.index(3, vals)]);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No player data specified.", [line]));
                }

            },
            SetDefensivePlayer: function (line) {
                var fname = TSBTool.InputParser.GetFirstName(line);
                var lname = TSBTool.InputParser.GetLastName(line);
                var pos = this.GetPosition(line);
                var face = TSBTool.InputParser.GetFace(line);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.InputParser.GetInts(line);
                var simVals = this.GetSimVals(line);

                this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                this.tool.TSBTool$ITecmoTool$InsertPlayer(this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                if (vals != null && vals.length > 5) {
                    this.tool.TSBTool$ITecmoTool$SetDefensivePlayerAbilities(this.currentTeam, pos, vals[System.Array.index(0, vals)], vals[System.Array.index(1, vals)], vals[System.Array.index(2, vals)], vals[System.Array.index(3, vals)], vals[System.Array.index(4, vals)], vals[System.Array.index(5, vals)]);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. Invalid player attributes.", [line]));
                }
                if (simVals != null && simVals.length > 1) {
                    this.tool.TSBTool$ITecmoTool$SetDefensiveSimData(this.currentTeam, pos, simVals);
                } else {
                    if (this.showSimError) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                    }
                }
            },
            SetKickPlayer: function (line) {
                var fname = TSBTool.InputParser.GetFirstName(line);
                var lname = TSBTool.InputParser.GetLastName(line);
                var pos = this.GetPosition(line);
                var face = TSBTool.InputParser.GetFace(line);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.InputParser.GetInts(line);
                var simVals = this.GetSimVals(line);

                this.tool.TSBTool$ITecmoTool$SetFace(this.currentTeam, pos, face);
                this.tool.TSBTool$ITecmoTool$InsertPlayer(this.currentTeam, pos, fname, lname, (jerseyNumber & 255));
                if (vals != null && vals.length > 5) {
                    this.tool.TSBTool$ITecmoTool$SetKickPlayerAbilities(this.currentTeam, pos, vals[System.Array.index(0, vals)], vals[System.Array.index(1, vals)], vals[System.Array.index(2, vals)], vals[System.Array.index(3, vals)], vals[System.Array.index(4, vals)], vals[System.Array.index(5, vals)]);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No player data specified.", [line]));
                }
                if (simVals != null && Bridge.referenceEquals(pos, "P")) {
                    this.tool.TSBTool$ITecmoTool$SetPuntingSimData(this.currentTeam, simVals[System.Array.index(0, simVals)]);
                } else {
                    if (simVals != null && Bridge.referenceEquals(pos, "K")) {
                        this.tool.TSBTool$ITecmoTool$SetKickingSimData(this.currentTeam, simVals[System.Array.index(0, simVals)]);
                    } else {
                        if (this.showSimError) {
                            TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                        }
                    }
                }
            },
            SetKickReturnMan: function (line) {
                var m = TSBTool.InputParser.KickRetMan.match(line);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pos = m.getGroups().get(1).toString();
                    if (this.tool.TSBTool$ITecmoTool$IsValidPosition(pos)) {
                        this.tool.TSBTool$ITecmoTool$SetKickReturner(this.currentTeam, pos);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                    }
                }
            },
            SetPuntReturnMan: function (line) {
                var m = TSBTool.InputParser.PuntRetMan.match(line);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pos = m.getGroups().get(1).toString();
                    if (this.tool.TSBTool$ITecmoTool$IsValidPosition(pos)) {
                        this.tool.TSBTool$ITecmoTool$SetPuntReturner(this.currentTeam, pos);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                    }
                }
            },
            /**
             * Expect line like '   [8, 9, 0 ]'
             *
             * @instance
             * @public
             * @this TSBTool.InputParser
             * @memberof TSBTool.InputParser
             * @param   {string}            input
             * @return  {Array.<number>}
             */
            GetSimVals: function (input) {
                if (input != null) {
                    var stuff = input.trim();
                    var start = System.String.indexOf(stuff, "[");
                    var end = System.String.indexOf(stuff, "]");
                    if (start > -1 && end > -1) {
                        stuff = stuff.substr(((start + 1) | 0), ((((end - start) | 0) - 1) | 0));
                        return TSBTool.InputParser.GetInts(stuff);
                    }
                }
                return null;
            },
            GetPosition: function (line) {
                var pos = TSBTool.InputParser.posNameFaceRegex.match(line).getGroups().get(1).toString();
                return pos;
            }
        }
    });

    Bridge.define("TSBTool.MainClass", {
        statics: {
            fields: {
                GUI_MODE: false
            },
            ctors: {
                init: function () {
                    this.GUI_MODE = false;
                }
            }
        }
    });

    Bridge.define("TSBTool.ROM_TYPE", {
        $kind: "enum",
        statics: {
            fields: {
                NONE: 0,
                NES_ORIGINAL_TSB: 1,
                CXROM_v105: 2,
                CXROM_v111: 3,
                SNES_TSB1: 4,
                SNES_TSB2: 5,
                SNES_TSB3: 6,
                READ_ONLY_ERROR: 7
            }
        }
    });

    Bridge.define("TSBTool.SimAverages", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new TSBTool.SimAverages(); }
            }
        },
        fields: {
            QB_ave: 0,
            RB_ave: 0,
            WR_ave: 0,
            TE_ave: 0,
            OL_ave: 0,
            DL_run_ave: 0,
            DL_pass_ave: 0,
            LB_run_ave: 0,
            LB_pass_ave: 0,
            DB_run_ave: 0,
            DB_pass_ave: 0,
            TOTAL_RUN_DEFENSE: 0,
            TOTAL_PASS_DEFENSE: 0,
            MIN_RUN_DEFENSE: 0,
            MAX_RUN_DEFENSE: 0,
            MIN_PASS_DEFENSE: 0,
            MAX_PASS_DEFENSE: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([2740139056, this.QB_ave, this.RB_ave, this.WR_ave, this.TE_ave, this.OL_ave, this.DL_run_ave, this.DL_pass_ave, this.LB_run_ave, this.LB_pass_ave, this.DB_run_ave, this.DB_pass_ave, this.TOTAL_RUN_DEFENSE, this.TOTAL_PASS_DEFENSE, this.MIN_RUN_DEFENSE, this.MAX_RUN_DEFENSE, this.MIN_PASS_DEFENSE, this.MAX_PASS_DEFENSE]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, TSBTool.SimAverages)) {
                    return false;
                }
                return Bridge.equals(this.QB_ave, o.QB_ave) && Bridge.equals(this.RB_ave, o.RB_ave) && Bridge.equals(this.WR_ave, o.WR_ave) && Bridge.equals(this.TE_ave, o.TE_ave) && Bridge.equals(this.OL_ave, o.OL_ave) && Bridge.equals(this.DL_run_ave, o.DL_run_ave) && Bridge.equals(this.DL_pass_ave, o.DL_pass_ave) && Bridge.equals(this.LB_run_ave, o.LB_run_ave) && Bridge.equals(this.LB_pass_ave, o.LB_pass_ave) && Bridge.equals(this.DB_run_ave, o.DB_run_ave) && Bridge.equals(this.DB_pass_ave, o.DB_pass_ave) && Bridge.equals(this.TOTAL_RUN_DEFENSE, o.TOTAL_RUN_DEFENSE) && Bridge.equals(this.TOTAL_PASS_DEFENSE, o.TOTAL_PASS_DEFENSE) && Bridge.equals(this.MIN_RUN_DEFENSE, o.MIN_RUN_DEFENSE) && Bridge.equals(this.MAX_RUN_DEFENSE, o.MAX_RUN_DEFENSE) && Bridge.equals(this.MIN_PASS_DEFENSE, o.MIN_PASS_DEFENSE) && Bridge.equals(this.MAX_PASS_DEFENSE, o.MAX_PASS_DEFENSE);
            },
            $clone: function (to) {
                var s = to || new TSBTool.SimAverages();
                s.QB_ave = this.QB_ave;
                s.RB_ave = this.RB_ave;
                s.WR_ave = this.WR_ave;
                s.TE_ave = this.TE_ave;
                s.OL_ave = this.OL_ave;
                s.DL_run_ave = this.DL_run_ave;
                s.DL_pass_ave = this.DL_pass_ave;
                s.LB_run_ave = this.LB_run_ave;
                s.LB_pass_ave = this.LB_pass_ave;
                s.DB_run_ave = this.DB_run_ave;
                s.DB_pass_ave = this.DB_pass_ave;
                s.TOTAL_RUN_DEFENSE = this.TOTAL_RUN_DEFENSE;
                s.TOTAL_PASS_DEFENSE = this.TOTAL_PASS_DEFENSE;
                s.MIN_RUN_DEFENSE = this.MIN_RUN_DEFENSE;
                s.MAX_RUN_DEFENSE = this.MAX_RUN_DEFENSE;
                s.MIN_PASS_DEFENSE = this.MIN_PASS_DEFENSE;
                s.MAX_PASS_DEFENSE = this.MAX_PASS_DEFENSE;
                return s;
            }
        }
    });

    /**
     * Summary description for SimStuff.
     *
     * @public
     * @class TSBTool.SimStuff
     */
    Bridge.define("TSBTool.SimStuff", {
        statics: {
            fields: {
                FRONT_7_SIM_POINT_POOL: 0,
                FRONT_7_MIN_SIM_PASS_RUSH: 0
            },
            ctors: {
                init: function () {
                    this.FRONT_7_SIM_POINT_POOL = 200;
                    this.FRONT_7_MIN_SIM_PASS_RUSH = 13;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Returns the SimPocket value when passed the QB's
             MS.
             *
             * @instance
             * @public
             * @this TSBTool.SimStuff
             * @memberof TSBTool.SimStuff
             * @param   {number}    MS
             * @return  {number}
             */
            SimPocket: function (MS) {
                var ret = 0;
                switch (MS) {
                    case 100: 
                    case 94: 
                    case 88: 
                    case 81: 
                    case 75: 
                    case 69: 
                    case 63: 
                    case 56: 
                    case 50: 
                        ret = 0;
                        break;
                    case 44: 
                    case 38: 
                        ret = 1;
                        break;
                    case 31: 
                    case 25: 
                        ret = 2;
                        break;
                    default: 
                        ret = 3;
                        break;
                }
                return ret;
            },
            SimPass: function (PC, APB, PS) {
                var ret = 0;

                if (PC > 75) {
                    ret = 13;
                } else {
                    if (PC > 44) {
                        ret = (Bridge.Int.div((((((PS + PC) | 0) + APB) | 0)), 17)) | 0;
                    } else {
                        ret = (Bridge.Int.div((((PC + APB) | 0)), 14)) | 0;
                    }
                }
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            QbSimRun: function (MS) {
                var ret = (Bridge.Int.div(MS, 5)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            SimKickRet: function (MS) {
                var ret = (Bridge.Int.div(MS, 4)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            SimPuntRet: function (MS) {
                var ret = (Bridge.Int.div(MS, 4)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            RbSimCatch: function (REC) {
                var ret = 0;
                if (REC > 44) {
                    ret = (Bridge.Int.div(REC, 6)) | 0;
                } else {
                    ret = (Bridge.Int.div(REC, 10)) | 0;
                }

                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            RbSimRush: function (MS, HP, BC, RS) {
                var ret = 0;
                if (HP < 50) {
                    ret = ((((Bridge.Int.div((((MS + BC) | 0)), 11)) | 0)) - 2) | 0;
                } else {
                    ret = (Bridge.Int.div((((RS + HP) | 0)), 15)) | 0;
                }
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            WrTeSimCatch: function (REC) {
                var ret = (Bridge.Int.div(REC, 6)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            WrTeSimRush: function () {
                return 2;
            },
            PKSimKick: function (KA, AKB) {
                var ret = (Bridge.Int.div((((KA + (((Bridge.Int.div(AKB, 2)) | 0))) | 0)), 11)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            /**
             * Use PI
             *
             * @instance
             * @public
             * @this TSBTool.SimStuff
             * @memberof TSBTool.SimStuff
             * @param   {number}            rolbInts    
             * @param   {number}            rilbInts    
             * @param   {number}            lilbInts    
             * @param   {number}            lolbInts    
             * @param   {number}            rcbInts     
             * @param   {number}            lcbInts     
             * @param   {number}            fsInts      
             * @param   {number}            ssInts
             * @return  {Array.<number>}
             */
            GetSimPassDefense: function (rolbInts, rilbInts, lilbInts, lolbInts, rcbInts, lcbInts, fsInts, ssInts) {
                var totalInts = (((((((((((((rolbInts + rilbInts) | 0) + lilbInts) | 0) + lolbInts) | 0) + rcbInts) | 0) + lcbInts) | 0) + fsInts) | 0) + ssInts) | 0;
                var totalSimPoints = 254;
                var rolbPoints, rilbPoints, lilbPoints, lolbPoints, rcbPoints, lcbPoints, fsPoints, ssPoints;

                rolbPoints = Bridge.Int.clip32((rolbInts / totalInts) * totalSimPoints);
                rilbPoints = Bridge.Int.clip32((rilbInts / totalInts) * totalSimPoints);
                lolbPoints = Bridge.Int.clip32((lolbInts / totalInts) * totalSimPoints);
                rcbPoints = Bridge.Int.clip32((rcbInts / totalInts) * totalSimPoints);
                lcbPoints = Bridge.Int.clip32((lcbInts / totalInts) * totalSimPoints);
                fsPoints = Bridge.Int.clip32((fsInts / totalInts) * totalSimPoints);
                ssPoints = Bridge.Int.clip32((ssInts / totalInts) * totalSimPoints);

                lilbPoints = (1 + Bridge.Int.clip32((totalSimPoints - (((((((((((((rcbPoints + lcbPoints) | 0) + fsPoints) | 0) + rolbPoints) | 0) + ssPoints) | 0) + rilbPoints) | 0) + lolbPoints) | 0))))) | 0;

                var ret = System.Array.init(8, 0, System.Int32);
                ret[System.Array.index(0, ret)] = rolbPoints;
                ret[System.Array.index(1, ret)] = rilbPoints;
                ret[System.Array.index(2, ret)] = lilbPoints;
                ret[System.Array.index(3, ret)] = lolbPoints;
                ret[System.Array.index(4, ret)] = rcbPoints;
                ret[System.Array.index(5, ret)] = lcbPoints;
                ret[System.Array.index(6, ret)] = fsPoints;
                ret[System.Array.index(7, ret)] = ssPoints;

                return ret;
            },
            /**
             * use HP instead of sacks
             *
             * @instance
             * @public
             * @this TSBTool.SimStuff
             * @memberof TSBTool.SimStuff
             * @param   {number}            reSacks      
             * @param   {number}            ntSacks      
             * @param   {number}            leSacks      
             * @param   {number}            rolbSacks    
             * @param   {number}            rilbSacks    
             * @param   {number}            lilbSacks    
             * @param   {number}            lolbSacks
             * @return  {Array.<number>}
             */
            GetSimPassRush: function (reSacks, ntSacks, leSacks, rolbSacks, rilbSacks, lilbSacks, lolbSacks) {
                var totalSacks = reSacks + ntSacks + leSacks + rolbSacks + rilbSacks + lilbSacks + lolbSacks;

                var totalSimPoints = TSBTool.SimStuff.FRONT_7_SIM_POINT_POOL;
                var minPr = TSBTool.SimStuff.FRONT_7_MIN_SIM_PASS_RUSH;

                var rePoints, ntPoints, lePoints, rolbPoints, rilbPoints, lilbPoints, lolbPoints, ssPoints;
                var dbPoints = 0;
                var cbPoints = 0;
                var front7Points = 0;

                if (totalSacks === 0) {
                    rePoints = (ntPoints = (lePoints = (rolbPoints = (rilbPoints = (lilbPoints = (lolbPoints = (ssPoints = 31)))))));
                    rePoints = (rePoints + 4) | 0;
                } else {
                    rePoints = Math.max(Bridge.Int.clip32((reSacks / totalSacks) * totalSimPoints), minPr);
                    lePoints = Math.max(Bridge.Int.clip32((leSacks / totalSacks) * totalSimPoints), minPr);
                    ntPoints = Math.max(Bridge.Int.clip32((ntSacks / totalSacks) * totalSimPoints), minPr);
                    rolbPoints = Math.max(Bridge.Int.clip32((rolbSacks / totalSacks) * totalSimPoints), minPr);
                    rilbPoints = Math.max(Bridge.Int.clip32((rilbSacks / totalSacks) * totalSimPoints), minPr);
                    lilbPoints = Math.max(Bridge.Int.clip32((lilbSacks / totalSacks) * totalSimPoints), minPr);
                    lolbPoints = Math.max(Bridge.Int.clip32((lolbSacks / totalSacks) * totalSimPoints), minPr);

                    front7Points = (((((((((((rePoints + lePoints) | 0) + ntPoints) | 0) + rolbPoints) | 0) + rilbPoints) | 0) + lilbPoints) | 0) + lolbPoints) | 0;

                    dbPoints = ((255 - front7Points) | 0);

                    cbPoints = (Bridge.Int.div(dbPoints, 4)) | 0;
                    ssPoints = ((255 - ((((Bridge.Int.mul(3, cbPoints)) + front7Points) | 0))) | 0);
                }
                var ret = System.Array.init(8, 0, System.Int32);

                ret[System.Array.index(0, ret)] = rePoints;
                ret[System.Array.index(1, ret)] = ntPoints;
                ret[System.Array.index(2, ret)] = lePoints;
                ret[System.Array.index(3, ret)] = rolbPoints;
                ret[System.Array.index(4, ret)] = rilbPoints;
                ret[System.Array.index(5, ret)] = lilbPoints;
                ret[System.Array.index(6, ret)] = lolbPoints;
                ret[System.Array.index(7, ret)] = ssPoints;

                return ret;
            },
            GetSimOffense: function (QB1SimPass, RB1SimRush, RB2SimRush, WR1SimCatch, WR2SimCatch) {
                var f1, f2;
                if (RB1SimRush > RB2SimRush) {
                    f1 = RB1SimRush;
                } else {
                    f1 = RB2SimRush;
                }
                if (WR1SimCatch > WR2SimCatch) {
                    f2 = WR1SimCatch;
                } else {
                    f2 = WR2SimCatch;
                }

                var ret = (Bridge.Int.div((((((QB1SimPass + f1) | 0) + f2) | 0)), 3)) | 0;
                return ret;
            }
        }
    });

    /**
     * Summary description for ScheduleHelper.
     *
     * @public
     * @class TSBTool.SNES_ScheduleHelper
     */
    Bridge.define("TSBTool.SNES_ScheduleHelper", {
        statics: {
            fields: {
                weekOneStartLoc: 0
            },
            ctors: {
                init: function () {
                    this.weekOneStartLoc = 1438654;
                }
            }
        },
        fields: {
            teamGames: null,
            week: 0,
            week_game_count: 0,
            total_game_count: 0,
            gameRegex: null,
            gamesPerWeek: null,
            outputRom: null
        },
        ctors: {
            init: function () {
                this.gameRegex = new System.Text.RegularExpressions.Regex.ctor("([0-9a-z]+)\\s+at\\s+([0-9a-z]+)");
                this.gamesPerWeek = System.Array.init([
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14
                ], System.Int32);
            },
            ctor: function (outputRom) {
                this.$initialize();
                this.outputRom = outputRom;
            }
        },
        methods: {
            CloseWeek: function () {
                if (this.week > -1) {
                    var i = this.week_game_count;
                    while (i < 14) {
                        this.ScheduleGame$2(255, 255, this.week, i);
                        i = (i + 1) | 0;
                    }
                }
                this.week = (this.week + 1) | 0;
                this.total_game_count = (this.total_game_count + this.week_game_count) | 0;
                this.week_game_count = 0;
            },
            /**
             * Applies a schedule to the rom.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_ScheduleHelper
             * @memberof TSBTool.SNES_ScheduleHelper
             * @param   {System.Collections.Generic.List$1}    lines    the contents of the schedule file.
             * @return  {void}
             */
            ApplySchedule: function (lines) {
                this.week = -1;
                this.week_game_count = 0;
                this.total_game_count = 0;

                if (TSBTool.SNES_TecmoTool.AUTO_CORRECT_SCHEDULE) {
                    lines = this.Ensure18Weeks(lines);
                }

                var line;
                for (var i = 0; i < lines.Count; i = (i + 1) | 0) {
                    line = Bridge.toString(lines.getItem(i)).trim().toLowerCase();
                    if (System.String.startsWith(line, "#") || line.length < 3) {
                    } else if (System.String.startsWith(line, "week")) {
                        if (this.week > 18) {
                            TSBTool.StaticUtils.AddError("Error! You can have only 18 weeks in a season.");
                            break;
                        }
                        this.CloseWeek();
                        TSBTool.StaticUtils.WriteError(System.String.format("Scheduleing {0}", [line]));
                    } else {
                        this.ScheduleGame$1(line);
                    }
                }
                this.CloseWeek();

                if (this.week < 18) {
                    TSBTool.StaticUtils.AddError("Warning! You didn't schedule all 18 weeks. The schedule could be messed up.");
                }
                if (this.teamGames != null) {
                    for (var i1 = 0; i1 < this.teamGames.length; i1 = (i1 + 1) | 0) {
                        if (this.teamGames[System.Array.index(i1, this.teamGames)] !== 16) {
                            TSBTool.StaticUtils.AddError(System.String.format("Warning! The {0} have {1} games scheduled.", TSBTool.TecmoTool.GetTeamFromIndex(i1), Bridge.box(this.teamGames[System.Array.index(i1, this.teamGames)], System.Int32)));
                        }
                    }
                }
            },
            /**
             * Attempts to schedule a game.
             *
             * @instance
             * @private
             * @this TSBTool.SNES_ScheduleHelper
             * @memberof TSBTool.SNES_ScheduleHelper
             * @param   {string}     line
             * @return  {boolean}            True on success, false on failure.
             */
            ScheduleGame$1: function (line) {
                var ret = false;
                var m = this.gameRegex.match(line);
                var awayTeam, homeTeam;

                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    awayTeam = m.getGroups().get(1).toString();
                    homeTeam = m.getGroups().get(2).toString();
                    if (this.week_game_count > 13) {
                        TSBTool.StaticUtils.AddError(System.String.format("Error! Week {0}: You can have no more than 14 games in a week.", [Bridge.box(((this.week + 1) | 0), System.Int32)]));
                        ret = false;
                    } else if (this.ScheduleGame(awayTeam, homeTeam, this.week, this.week_game_count)) {
                        this.week_game_count = (this.week_game_count + 1) | 0;
                        ret = true;
                    }

                }
                if (((this.total_game_count + this.week_game_count) | 0) > 224) {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! Week {0}: There are more than 224 games scheduled.", [Bridge.box(((this.week + 1) | 0), System.Int32)]));
                }
                return ret;
            },
            /**
             * @instance
             * @public
             * @this TSBTool.SNES_ScheduleHelper
             * @memberof TSBTool.SNES_ScheduleHelper
             * @param   {string}     awayTeam      
             * @param   {string}     homeTeam      
             * @param   {number}     week          Week is 0-16 (0 = week 1).
             * @param   {number}     gameOfWeek
             * @return  {boolean}
             */
            ScheduleGame: function (awayTeam, homeTeam, week, gameOfWeek) {
                var awayIndex = TSBTool.TecmoTool.GetTeamIndex(awayTeam);
                var homeIndex = TSBTool.TecmoTool.GetTeamIndex(homeTeam);

                if (awayIndex === -1 || homeIndex === -1) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error! Week {2}: Game '{0} at {1}'", awayTeam, homeTeam, Bridge.box(((week + 1) | 0), System.Int32)));
                    return false;
                }

                if (awayIndex === homeIndex && awayIndex < 28) {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! Week {0}: The {1} are scheduled to play against themselves.", Bridge.box(((week + 1) | 0), System.Int32), awayTeam));
                }

                if (week < 0 || week > 17) {
                    TSBTool.StaticUtils.AddError(System.String.format("Week {0} is not valid. Weeks range 1 - 18.", [Bridge.box(((week + 1) | 0), System.Int32)]));
                    return false;
                }
                if (this.GameLocation(week, gameOfWeek) < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Game {0} for week {1} is not valid. Valid games for week {1} are 0-{2}.", Bridge.box(gameOfWeek, System.Int32), Bridge.box(week, System.Int32), Bridge.box(((this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)] - 1) | 0), System.Int32)));
                    TSBTool.StaticUtils.AddError(System.String.format("{0} at {1}", awayTeam, homeTeam));
                }

                this.ScheduleGame$2(awayIndex, homeIndex, week, gameOfWeek);

                if (Bridge.referenceEquals(awayTeam, "null") || Bridge.referenceEquals(homeTeam, "null")) {
                    return false;
                }
                return true;
            },
            ScheduleGame$2: function (awayTeamIndex, homeTeamIndex, week, gameOfWeek) {
                var location = this.GameLocation(week, gameOfWeek);
                if (location > 0) {
                    this.outputRom[System.Array.index(location, this.outputRom)] = awayTeamIndex & 255;
                    this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = homeTeamIndex & 255;
                    if (awayTeamIndex < 28) {
                        this.IncrementTeamGames(awayTeamIndex);
                        this.IncrementTeamGames(homeTeamIndex);
                    }
                }
                /* else
                			{
                				StaticUtils.AddError(string.Format("INVALID game for ROM. Week={0} Game of Week ={1}",
                					week,gameOfWeek);
                			}*/
            },
            /**
             * Returns a string like "49ers at giants", for a valid week, game of week combo.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_ScheduleHelper
             * @memberof TSBTool.SNES_ScheduleHelper
             * @param   {number}    week          The week in question.
             * @param   {number}    gameOfWeek    The game to get.
             * @return  {string}                  Returns a string like "49ers at giants", for a valid week, game of week combo, returns null
             upon error.
             */
            GetGame: function (week, gameOfWeek) {
                var location = this.GameLocation(week, gameOfWeek);
                if (location === -1) {
                    return null;
                }
                var awayIndex = this.outputRom[System.Array.index(location, this.outputRom)];
                var homeIndex = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)];
                var ret = "";

                if (awayIndex < 28) {
                    ret = System.String.format("{0} at {1}", TSBTool.TecmoTool.GetTeamFromIndex(awayIndex), TSBTool.TecmoTool.GetTeamFromIndex(homeIndex));
                }
                return ret;
            },
            /**
             * Returns a week from the season.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_ScheduleHelper
             * @memberof TSBTool.SNES_ScheduleHelper
             * @param   {number}    week    The week to get [0-16] (0= week 1).
             * @return  {string}
             */
            GetWeek: function (week) {
                if (week < 0 || week > ((this.gamesPerWeek.length - 1) | 0)) {
                    return null;
                }
                var sb = new System.Text.StringBuilder("", 280);
                sb.append(System.String.format("WEEK {0}\n", [Bridge.box(((week + 1) | 0), System.Int32)]));

                var game;

                for (var i = 0; i < this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)]; i = (i + 1) | 0) {
                    game = this.GetGame(week, i);
                    if (game != null && game.length > 0) {
                        sb.append(System.String.format("{0}\n", [game]));
                    }
                }
                sb.append("\n");
                return sb.toString();
            },
            GetSchedule: function () {
                var sb = new System.Text.StringBuilder("", 5040);
                for (var week = 0; week < this.gamesPerWeek.length; week = (week + 1) | 0) {
                    sb.append(this.GetWeek(week));
                }

                return sb.toString();
            },
            GameLocation: function (week, gameOfweek) {
                if (week < 0 || week > ((this.gamesPerWeek.length - 1) | 0) || gameOfweek > this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)] || gameOfweek < 0) {
                    return -1;
                }

                var offset = 0;
                for (var i = 0; i < week; i = (i + 1) | 0) {
                    offset = (offset + (Bridge.Int.mul(this.gamesPerWeek[System.Array.index(i, this.gamesPerWeek)], 2))) | 0;
                }

                offset = (offset + (Bridge.Int.mul(gameOfweek, 2))) | 0;
                var location = (TSBTool.SNES_ScheduleHelper.weekOneStartLoc + offset) | 0;
                return location;
            },
            IncrementTeamGames: function (teamIndex) {
                if (this.teamGames == null) {
                    this.teamGames = System.Array.init(28, 0, System.Int32);
                }
                if (teamIndex < this.teamGames.length) {
                    this.teamGames[System.Array.index(teamIndex, this.teamGames)] = (this.teamGames[System.Array.index(teamIndex, this.teamGames)] + 1) | 0;
                }

            },
            Ensure18Weeks: function (lines) {

                var wks = this.CountWeeks(lines);
                var line1, line2;
                for (var i = (lines.Count - 2) | 0; i > 0; i = (i - 2) | 0) {
                    line1 = Bridge.toString(lines.getItem(i));
                    line2 = Bridge.toString(lines.getItem(((i + 1) | 0)));
                    if (wks > 17) {
                        break;
                    } else if (System.String.indexOf(line1, "at") > -1 && System.String.indexOf(line2, "at") > -1) {
                        lines.insert(((i + 1) | 0), "WEEK ");
                        i = (i - 1) | 0;
                        wks = (wks + 1) | 0;
                    }
                }

                return lines;
            },
            CountWeeks: function (lines) {
                var $t;
                var count = 0;
                $t = Bridge.getEnumerator(lines);
                try {
                    while ($t.moveNext()) {
                        var line = $t.Current;
                        if (System.String.indexOf(line.toLowerCase(), "week") > -1) {
                            count = (count + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return count;
            }
        }
    });

    /**
     * Static utility functions that I don't want to clutter up other files with.
     *
     * @static
     * @abstract
     * @public
     * @class TSBTool.StaticUtils
     */
    Bridge.define("TSBTool.StaticUtils", {
        statics: {
            fields: {
                simpleSetRegex: null,
                sErrors: null,
                tsb1QB1Regex: null,
                tsb2QB1Regex: null,
                tsb3QB1Regex: null
            },
            props: {
                RomVersion: {
                    get: function () {
                        return "SNES_TSB2";
                    }
                }
            },
            ctors: {
                init: function () {
                    this.sErrors = new (System.Collections.Generic.List$1(System.String)).ctor();
                    this.tsb1QB1Regex = new System.Text.RegularExpressions.Regex.ctor("^QB1\\s*,[a-zA-Z 0-9]+\\s*,\\s*Face=0x[0-9]{1,2}\\s*,\\s*#[0-9]{1,2}\\s*,(\\s*[0-9]{1,2}\\s*,){7}(\\s*[0-9]{1,2}\\s*,?){1}(\\s*\\[|\\s*$)", 2);
                    this.tsb2QB1Regex = new System.Text.RegularExpressions.Regex.ctor("^QB1\\s*,[a-zA-Z 0-9]+\\s*,\\s*Face=0x[0-9]{1,2}\\s*,\\s*#[0-9]{1,2}\\s*,(\\s*[0-9]{1,2}\\s*,){9}(\\s*[0-9]{1,2}\\s*,?){1}(\\s*\\[|\\s*$)", 2);
                    this.tsb3QB1Regex = new System.Text.RegularExpressions.Regex.ctor("^QB1\\s*,[a-zA-Z 0-9\\.]+\\s*,\\s*Face=0x[08][0-9A-Fa-f]{1}\\s*,\\s*#[0-9]{1,2}\\s*,(\\s*[0-9]{1,2}\\s*,){10}(\\s*[0-9]{1,2}\\s*,?){1}(\\s*\\[|\\s*$)", 2);
                }
            },
            methods: {
                /**
                 * takes a math string, returns a value
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {string}    formula
                 * @return  {string}
                 */
                Compute: function (formula) {
                    return eval(formula);
                },
                ParseIntFromHexString: function (input) {
                    var retVal = System.Int32.parse(input, 16);
                    return retVal;
                },
                ParseLongFromHexString: function (input) {
                    var retVal = System.Int64(TSBTool.StaticUtils.ParseIntFromHexString(input));
                    return retVal;
                },
                ParseByteFromHexString: function (input) {
                    var retVal = System.Byte.parse(input, 16);
                    return retVal;
                },
                WriteError: function (input) {
                    System.Console.WriteLine(input);
                },
                /**
                 * Returns a string starting with 'Error!' on error condition, the locations of the replacements otherwise.
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {Array.<number>}    outputRom     
                 * @param   {string}            searchStr     The string to search for.
                 * @param   {string}            replaceStr    The string to replace it with.
                 * @param   {number}            occurence     The occurence you wish to replace, -1 for all occurences.
                 * @return  {string}
                 */
                ReplaceStringInRom: function (outputRom, searchStr, replaceStr, occurence) {
                    if (replaceStr.length > searchStr.length) {
                        return System.String.format("Error! Replace({0},{1}), cannot replace a string with a longer string", searchStr, replaceStr);
                    }
                    while (replaceStr.length < searchStr.length) {
                        replaceStr = (replaceStr || "") + " ";
                    }

                    var locs = TSBTool.StaticUtils.FindStringInFile(searchStr, outputRom, 0, outputRom.length);
                    var builder = new System.Text.StringBuilder();
                    builder.append(System.String.format("Replaced '{0}' with '{1}' at location(s):", searchStr, replaceStr));
                    for (var i = 0; i < locs.Count; i = (i + 1) | 0) {
                        if (occurence < 0 || occurence === i) {
                            builder.append(System.String.format("0x{0:x},", [locs.getItem(i)]));
                            var stringLoc = System.Int64.clip32(locs.getItem(i));
                            for (var j = 0; j < replaceStr.length; j = (j + 1) | 0) {
                                outputRom[System.Array.index(stringLoc, outputRom)] = (replaceStr.charCodeAt(j)) & 255;
                                stringLoc = (stringLoc + 1) | 0;
                            }
                        }
                    }
                    return builder.toString();
                },
                /**
                 * Find string 'str' (unicode string) in the data byte array.
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {string}                               str      The string to look for
                 * @param   {Array.<number>}                       data     The data to search through.
                 * @param   {number}                               start    where to start in 'data'
                 * @param   {number}                               end      Where to end in 'data'
                 * @return  {System.Collections.Generic.List$1}             a list of addresses
                 */
                FindStringInFile: function (str, data, start, end) {
                    return TSBTool.StaticUtils.FindStringInFile$1(str, data, start, end, false);
                },
                /**
                 * Find string 'str' (unicode string) in the data byte array.
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {string}                               str         The string to look for
                 * @param   {Array.<number>}                       data        The data to search through.
                 * @param   {number}                               start       where to start in 'data'
                 * @param   {number}                               end         Where to end in 'data'
                 * @param   {boolean}                              nullByte    True to append the null byte at the end.
                 * @return  {System.Collections.Generic.List$1}                a list of addresses
                 */
                FindStringInFile$1: function (str, data, start, end, nullByte) {
                    var $t;
                    var retVal = new (System.Collections.Generic.List$1(System.Int64)).ctor();
                    var length = str.length;
                    if (nullByte) {
                        length = (length + 1) | 0;
                    }

                    var target = System.Array.init(length, 0, System.Byte);
                    var i = 0;
                    System.Array.fill(target, 0, 0, target.length);
                    $t = Bridge.getEnumerator(str);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            target[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), target)] = c & 255;
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return TSBTool.StaticUtils.FindByesInFile(target, data, start, end);
                },
                /**
                 * Find an array of bytes in the data byte array.
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {Array.<number>}                       target    
                 * @param   {Array.<number>}                       data      The data to search through.
                 * @param   {number}                               start     where to start in 'data'
                 * @param   {number}                               end       Where to end in 'data'
                 * @return  {System.Collections.Generic.List$1}              a list of addresses
                 */
                FindByesInFile: function (target, data, start, end) {
                    var retVal = new (System.Collections.Generic.List$1(System.Int64)).ctor();

                    if (data != null && data.length > 80) {
                        if (start < 0) {
                            start = 0;
                        }
                        if (end > data.length) {
                            end = (data.length - 1) | 0;
                        }

                        var num = System.Int64(((end - target.length) | 0));
                        for (var num3 = System.Int64(start); num3.lt(num); num3 = num3.add(System.Int64(1))) {
                            if (TSBTool.StaticUtils.Check(target, num3, data)) {
                                retVal.add(num3);
                            }
                        }
                    }
                    return retVal;
                },
                Check: function (target, location, data) {
                    var i;
                    for (i = 0; i < target.length; i = (i + 1) | 0) {
                        if (target[System.Array.index(i, target)] !== data[System.Array.index(System.Int64.toNumber(location.add(System.Int64(i))), data)]) {
                            break;
                        }
                    }
                    return i === target.length;
                },
                MapAttributes: function (attrs) {
                    var $t;
                    var builder = new System.Text.StringBuilder();
                    $t = Bridge.getEnumerator(attrs);
                    try {
                        while ($t.moveNext()) {
                            var b = $t.Current;
                            builder.append(Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(b)));
                            builder.append(",");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return builder.toString();
                },
                GetTsbAbilities: function (abilities) {
                    var retVal = System.Array.init(abilities.length, 0, System.Byte);
                    for (var i = 0; i < retVal.length; i = (i + 1) | 0) {
                        retVal[System.Array.index(i, retVal)] = TSBTool.StaticUtils.GetTSBAbility(abilities[System.Array.index(i, abilities)]);
                    }
                    return retVal;
                },
                /**
                 * Get the index (0-F) ability for the input
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {number}    ab    the ability
                 * @return  {number}          (0x0-0xF)
                 */
                GetTSBAbility: function (ab) {
                    var ret = 0;
                    switch (ab) {
                        case 6: 
                            ret = 0;
                            break;
                        case 13: 
                            ret = 1;
                            break;
                        case 19: 
                            ret = 2;
                            break;
                        case 25: 
                            ret = 3;
                            break;
                        case 31: 
                            ret = 4;
                            break;
                        case 38: 
                            ret = 5;
                            break;
                        case 44: 
                            ret = 6;
                            break;
                        case 50: 
                            ret = 7;
                            break;
                        case 56: 
                            ret = 8;
                            break;
                        case 63: 
                            ret = 9;
                            break;
                        case 69: 
                            ret = 10;
                            break;
                        case 75: 
                            ret = 11;
                            break;
                        case 81: 
                            ret = 12;
                            break;
                        case 88: 
                            ret = 13;
                            break;
                        case 94: 
                            ret = 14;
                            break;
                        case 100: 
                            ret = 15;
                            break;
                    }
                    return ret;
                },
                /**
                 * takes 0x03 --&gt; 25
                 *
                 * @static
                 * @public
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {number}    ab    0x00 - 0x0F
                 * @return  {number}          A TSB ability (6,13,19,25,31,38,44,50,56,63,69,75,81,88,94,100)
                 */
                MapAbilityToTSBValue: function (ab) {
                    var ret = 0;
                    switch (ab) {
                        case 0: 
                            ret = 6;
                            break;
                        case 1: 
                            ret = 13;
                            break;
                        case 2: 
                            ret = 19;
                            break;
                        case 3: 
                            ret = 25;
                            break;
                        case 4: 
                            ret = 31;
                            break;
                        case 5: 
                            ret = 38;
                            break;
                        case 6: 
                            ret = 44;
                            break;
                        case 7: 
                            ret = 50;
                            break;
                        case 8: 
                            ret = 56;
                            break;
                        case 9: 
                            ret = 63;
                            break;
                        case 10: 
                            ret = 69;
                            break;
                        case 11: 
                            ret = 75;
                            break;
                        case 12: 
                            ret = 81;
                            break;
                        case 13: 
                            ret = 88;
                            break;
                        case 14: 
                            ret = 94;
                            break;
                        case 15: 
                            ret = 100;
                            break;
                    }
                    return ret;
                },
                CombineNibbles: function (first, second) {
                    var retVal = first << 4;
                    retVal = (retVal + second) | 0;
                    return (retVal & 255);
                },
                GetFirstNibble: function (b) {
                    var retVal = (b >> 4) & 255;
                    return retVal;
                },
                GetSecondNibble: function (b) {
                    var retVal = (b & 15) & 255;
                    return retVal;
                },
                CheckTSB2Args: function (season, team) {
                    if (season < 1 || season > 3) {
                        throw new System.ArgumentException.$ctor1("Invalid season! " + season);
                    }
                    if (TSBTool2.TSB2Tool.teams.indexOf(team) < 0) {
                        throw new System.ArgumentException.$ctor1("Invalid team! " + (team || ""));
                    }
                },
                CheckTSB2Args$1: function (season, team, position) {
                    TSBTool.StaticUtils.CheckTSB2Args(season, team);
                    if (TSBTool.TecmoTool.positionNames.indexOf(position) < 0) {
                        throw new System.ArgumentException.$ctor1("Invalid position! " + (position || ""));
                    }
                },
                ApplySet: function (line, tool) {
                    if (TSBTool.StaticUtils.simpleSetRegex == null) {
                        TSBTool.StaticUtils.simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                    }

                    if (!Bridge.referenceEquals(TSBTool.StaticUtils.simpleSetRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.ApplySimpleSet(line, Bridge.as(tool, TSBTool.ITecmoContent));
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR with line \"{0}\"", [line]));
                    }
                },
                ApplySimpleSet: function (line, tool) {
                    if (TSBTool.StaticUtils.simpleSetRegex == null) {
                        TSBTool.StaticUtils.simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                    }

                    var m = TSBTool.StaticUtils.simpleSetRegex.match(line);
                    if (Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.ShowError(System.String.format("SET function not used properly. incorrect syntax>'{0}'", [line]));
                        return;
                    }
                    var loc = m.getGroups().get(1).toString().toLowerCase();
                    var val = m.getGroups().get(2).toString().toLowerCase();
                    loc = loc.substr(2);
                    val = val.substr(2);
                    if (val.length % 2 !== 0) {
                        val = "0" + (val || "");
                    }

                    try {
                        var location = TSBTool.StaticUtils.ParseIntFromHexString(loc);
                        var bytes = TSBTool.StaticUtils.GetHexBytes(val);
                        if (((location + bytes.length) | 0) > tool.TSBTool$ITecmoContent$OutputRom.length) {
                            TSBTool.StaticUtils.ShowError(System.String.format("ApplySet:> Error with line {0}. Data falls off the end of rom.\n", [line]));
                        } else if (location < 0) {
                            TSBTool.StaticUtils.ShowError(System.String.format("ApplySet:> Error with line {0}. location is negative.\n", [line]));
                        } else {
                            for (var i = 0; i < bytes.length; i = (i + 1) | 0) {
                                tool.TSBTool$ITecmoContent$SetByte(((location + i) | 0), bytes[System.Array.index(i, bytes)]);
                            }
                        }
                    } catch (e) {
                        e = System.Exception.create(e);
                        TSBTool.StaticUtils.ShowError(System.String.format("ApplySet:> Error with line {0}.\n{1}", line, e.Message));
                    }
                },
                GetHexBytes: function (input) {
                    if (input == null) {
                        return null;
                    }
                    if (input.length > 2 && (System.String.startsWith(input, "0x") || System.String.startsWith(input, "0X"))) {
                        input = input.substr(2);
                    }

                    var ret = System.Array.init(((Bridge.Int.div(input.length, 2)) | 0), 0, System.Byte);
                    var b = "";
                    var tmp = 0;
                    var j = 0;

                    for (var i = 0; i < input.length; i = (i + 2) | 0) {
                        b = input.substr(i, 2);
                        tmp = TSBTool.StaticUtils.ParseIntFromHexString(b);
                        ret[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), ret)] = tmp & 255;
                    }
                    return ret;
                },
                AddError: function (error) {
                    TSBTool.StaticUtils.sErrors.add(error);
                },
                ClearErrors: function () {
                    TSBTool.StaticUtils.sErrors.clear();
                },
                ShowErrors: function () {
                    var $t;
                    if (TSBTool.StaticUtils.sErrors != null && TSBTool.StaticUtils.sErrors.Count > 0) {
                        var sb = new System.Text.StringBuilder("", 500);
                        $t = Bridge.getEnumerator(TSBTool.StaticUtils.sErrors);
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                sb.append((e || "") + "\n");
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        TSBTool.StaticUtils.ShowError(sb.toString());
                        TSBTool.StaticUtils.ClearErrors();
                    }
                },
                ShowError: function (error) {
                    System.Console.WriteLine(error);
                },
                ReadRom: function (filename) {
                    var outputRom = null;
                    var s1 = null;
                    try {
                        s1 = new System.IO.FileStream.$ctor1(filename, 3);
                        var len = s1.Length;
                        outputRom = System.Array.init(System.Int64.clip32(len), 0, System.Byte);
                        s1.Read(outputRom, 0, System.Int64.clip32(len));
                    } catch (e) {
                        e = System.Exception.create(e);
                        TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                    } finally {
                        if (s1 != null) {
                            s1.Close();
                        }
                    }
                    return outputRom;
                },
                SaveRom: function (filename, outputRom) {
                    if (filename != null) {
                        try {
                            var len = System.Int64(outputRom.length);
                            var s1 = new System.IO.FileStream.$ctor1(filename, 4);
                            s1.Write(outputRom, 0, System.Int64.clip32(len));
                            s1.Close();
                        } catch (e) {
                            e = System.Exception.create(e);
                            TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                        }
                    } else {
                        TSBTool.StaticUtils.AddError("ERROR! You passed a null filename");
                    }
                },
                /**
                 * Updates strng pointers
                 *
                 * @static
                 * @private
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {Array.<number>}    rom                     
                 * @param   {number}            firstPointerLocation    
                 * @param   {number}            change                  the amount of change
                 * @param   {number}            lastPointerLocation
                 * @return  {void}
                 */
                AdjustDataPointers: function (rom, firstPointerLocation, change, lastPointerLocation) {
                    var low, hi;
                    var word;
                    var i = 0;
                    var end = (lastPointerLocation + 1) | 0;
                    for (i = (firstPointerLocation + 2) | 0; i < end; i = (i + 2) | 0) {
                        low = rom[System.Array.index(i, rom)];
                        hi = rom[System.Array.index(((i + 1) | 0), rom)];
                        word = hi;
                        word = word << 8;
                        word = (word + low) | 0;
                        word = (word + change) | 0;
                        low = (word & 255) & 255;
                        word = word >> 8;
                        hi = word & 255;
                        rom[System.Array.index(i, rom)] = low;
                        rom[System.Array.index(((i + 1) | 0), rom)] = hi;
                    }
                },
                ShiftDataUp: function (startPos, endPos, shiftAmount, data) {
                    if (startPos < 0 || endPos < 0) {
                        throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataUp:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                    }

                    var i;
                    if (shiftAmount > 0) {
                        System.Console.WriteLine("positive shift amount in ShiftDataUp");
                    }

                    for (i = startPos; i <= endPos; i = (i + 1) | 0) {
                        data[System.Array.index(((i + shiftAmount) | 0), data)] = data[System.Array.index(i, data)];
                    }

                    /* i += shiftAmount;
                    while (outputRom[i] != 0xff && i < 0x300f) { // with this commented out, there will be junk at the end that looks kinda valid, but is just left over
                       SetByte(i, 0xff);
                       i++;
                    }*/
                },
                ShiftDataDown: function (startPos, endPos, shiftAmount, data) {
                    if (startPos < 0 || endPos < 0) {
                        throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataDown:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                    }

                    for (var i = (endPos + shiftAmount) | 0; i > startPos; i = (i - 1) | 0) {
                        data[System.Array.index(i, data)] = data[System.Array.index(((i - shiftAmount) | 0), data)];
                    }
                },
                SetStringTableString: function (rom, stringIndex, newValue, firstPointer, offset, numberOfStringsInTable, stringTableSizeInBytes) {
                    var junk = { };
                    var oldValue = TSBTool.StaticUtils.GetStringTableString(rom, stringIndex, firstPointer, offset);
                    if (Bridge.referenceEquals(oldValue, newValue)) {
                        return;
                    }
                    var shiftAmount = (newValue.length - oldValue.length) | 0;
                    if (shiftAmount !== 0) {
                        var currentPointerLocation = (firstPointer + Bridge.Int.mul(2, stringIndex)) | 0;
                        var lastPointerLocation = (firstPointer + Bridge.Int.mul(2, numberOfStringsInTable)) | 0;
                        TSBTool.StaticUtils.AdjustDataPointers(rom, currentPointerLocation, shiftAmount, lastPointerLocation);
                        var startPosition = TSBTool.StaticUtils.GetStringTableStringLocation(rom, ((Bridge.Int.mul((((stringIndex + 1) | 0)), 2) + firstPointer) | 0), junk, offset);
                        var endPosition = (firstPointer + stringTableSizeInBytes) | 0;
                        if (shiftAmount < 0) {
                            TSBTool.StaticUtils.ShiftDataUp(startPosition, endPosition, shiftAmount, rom);
                        } else {
                            if (shiftAmount > 0) {
                                TSBTool.StaticUtils.ShiftDataDown(startPosition, endPosition, shiftAmount, rom);
                            }
                        }
                    }
                    var startLoc = TSBTool.StaticUtils.GetStringTableStringLocation(rom, ((Bridge.Int.mul(stringIndex, 2) + firstPointer) | 0), junk, offset);
                    for (var i = 0; i < newValue.length; i = (i + 1) | 0) {
                        if (newValue.charCodeAt(i) === 42) {
                            rom[System.Array.index(((startLoc + i) | 0), rom)] = 0;
                        } else {
                            rom[System.Array.index(((startLoc + i) | 0), rom)] = (newValue.charCodeAt(i)) & 255;
                        }
                    }
                },
                GetStringTableString: function (rom, string_index, firstPointer, offset) {
                    var retVal = "";
                    var pointer = (Bridge.Int.mul(string_index, 2) + firstPointer) | 0;
                    var length = { v : -1 };

                    var location = TSBTool.StaticUtils.GetStringTableStringLocation(rom, pointer, length, offset);
                    if (length.v > 0) {
                        var stringChars = System.Array.init(length.v, 0, System.Char);
                        for (var i = 0; i < stringChars.length; i = (i + 1) | 0) {
                            stringChars[System.Array.index(i, stringChars)] = rom[System.Array.index(((location + i) | 0), rom)];
                            if (stringChars[System.Array.index(i, stringChars)] === 0) {
                                stringChars[System.Array.index(i, stringChars)] = 42;
                            }
                        }
                        retVal = System.String.fromCharArray(stringChars);
                    }
                    return retVal;
                },
                GetStringTableStringLocation: function (rom, pointerLocation, length, offset) {
                    var pointer_loc = pointerLocation;
                    var b1 = rom[System.Array.index(((pointer_loc + 1) | 0), rom)];
                    var b2 = rom[System.Array.index(pointer_loc, rom)];
                    var b3 = rom[System.Array.index(((pointer_loc + 3) | 0), rom)];
                    var b4 = rom[System.Array.index(((pointer_loc + 2) | 0), rom)];
                    length.v = (((((b3 << 8) + b4) | 0)) - ((((b1 << 8) + b2) | 0))) | 0;
                    var pointerVal = ((b1 << 8) + b2) | 0;
                    var stringStartingLocation = (pointerVal + offset) | 0;
                    return stringStartingLocation;
                },
                AreEqual: function (str1, str2) {
                    var retVal = "";
                    if (!Bridge.referenceEquals(str1, str2)) {
                        retVal = System.String.format("AreEqual:Failure '{0}' and '{1}'\n", str1, str2);
                        System.Diagnostics.Debugger.Log(1, "TEST", retVal);
                    }
                    return retVal;
                },
                IsTSB1Content: function (data) {
                    var retVal = false;
                    var mc = TSBTool.StaticUtils.tsb1QB1Regex.matches(data);
                    if (mc.getCount() > 0) {
                        retVal = true;
                    }
                    return retVal;
                },
                IsTSB2Content: function (data) {
                    var retVal = false;
                    var mc = TSBTool.StaticUtils.tsb2QB1Regex.matches(data);
                    if (mc.getCount() > 0) {
                        retVal = true;
                    }
                    return retVal;
                },
                IsTSB3Content: function (data) {
                    var retVal = false;
                    var mc = TSBTool.StaticUtils.tsb3QB1Regex.matches(data);
                    if (mc.getCount() > 0) {
                        retVal = true;
                    }
                    return retVal;
                },
                /**
                 * Returns the content type (TSB1, TSB2, TSB3, Unknown)
                 *
                 * @static
                 * @this TSBTool.StaticUtils
                 * @memberof TSBTool.StaticUtils
                 * @param   {string}                    data
                 * @return  {TSBTool.TSBContentType}
                 */
                GetContentType: function (data) {
                    if (TSBTool.StaticUtils.IsTSB1Content(data)) {
                        return TSBTool.TSBContentType.TSB1;
                    }
                    if (TSBTool.StaticUtils.IsTSB2Content(data)) {
                        return TSBTool.TSBContentType.TSB2;
                    }
                    if (TSBTool.StaticUtils.IsTSB3Content(data)) {
                        return TSBTool.TSBContentType.TSB3;
                    }
                    return TSBTool.TSBContentType.Unknown;
                }
            }
        }
    });

    Bridge.define("TSBTool.TeamRatings", {
        fields: {
            team: null,
            qbRating: 0,
            rb1Rating: 0,
            rb2Rating: 0,
            wr1Rating: 0,
            wr2Rating: 0,
            teRating: 0,
            olRating: 0,
            dlRunDefenseRating: 0,
            dlPassDefenseRating: 0,
            lbRunDefenseRating: 0,
            lbPassDefenseRating: 0,
            dbRunDefenseRating: 0,
            dbPassDefenseRating: 0,
            totalRunD: 0,
            totalPassD: 0
        }
    });

    /**
     * Summary description for SimStuff.
     *
     * @public
     * @class TSBTool.TecmonsterSimStuff
     */
    Bridge.define("TSBTool.TecmonsterSimStuff", {
        statics: {
            fields: {
                FRONT_7_SIM_POINT_POOL: 0,
                FRONT_7_MIN_SIM_PASS_RUSH: 0
            },
            ctors: {
                init: function () {
                    this.FRONT_7_SIM_POINT_POOL = 200;
                    this.FRONT_7_MIN_SIM_PASS_RUSH = 13;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            /**
             * Returns the SimPocket value when passed the QB's
             MS.
             *
             * @instance
             * @public
             * @this TSBTool.TecmonsterSimStuff
             * @memberof TSBTool.TecmonsterSimStuff
             * @param   {number}    RS    
             * @param   {number}    MS
             * @return  {number}
             */
            SimPocket: function (RS, MS) {
                var ret = 0;
                if (((RS + MS) | 0) > 99) {
                    ret = 0;
                } else {
                    if (((RS + MS) | 0) > 81) {
                        ret = 1;
                    } else {
                        ret = 3;
                    }
                }
                return ret;
            },
            SimPass: function (PS, PC, PA, APB) {
                var ret = Bridge.Int.clip32(Bridge.Math.round((((PS - 50.0) + (PC - 31.0) + (PA - 31.0) + (APB - 31.0)) / 177) * 15, 0, 6));
                if (ret < 0) {
                    ret = 0;
                }
                return ret;
            },
            QbSimRun: function (RS, RP, MS) {
                var ret = Bridge.Int.clip32(Bridge.Math.round((((RS - 31.0) + (RP - 25.0) + (MS - 13.0)) / 93) * 15, 0, 6));
                if (ret < 0) {
                    ret = 0;
                }
                return ret;
            },
            SimYPC: function (MS, REC) {
                var ret = Bridge.Int.clip32(Bridge.Math.round(((((MS - 31.0) + (REC - 13.0)) / 106.0)) * 15, 0, 6));
                if (ret < 0) {
                    ret = 0;
                }
                return ret;
            },
            SimTargets: function (MS) {
                var ret = (Bridge.Int.div(MS, 4)) | 0;
                if (ret > 15) {
                    ret = 15;
                }
                return ret;
            },
            SimCatch: function (REC) {
                var ret = Bridge.Int.clip32(Bridge.Math.round((((REC - 13.0) / 68)) * 15, 0, 6));
                return ret;
            },
            RbSimRush: function (RS, RP, MS, HP) {
                var ret = 0;
                ret = Bridge.Int.clip32(Bridge.Math.round((((RS - 31.0) + (RP - 19.0) + (MS - 31.0) + (HP - 13.0)) / 176) * 15, 0, 6));
                if (ret < 0) {
                    ret = 0;
                }
                return ret;
            },
            PKSimKick: function (KA, AKB) {
                var ret = Bridge.Int.clip32(Bridge.Math.round(((KA - 38.0) / 43) * 15, 0, 6));
                return ret;
            },
            GetSimPassDefense: function (rolbInts, rilbInts, lilbInts, lolbInts, rcbInts, lcbInts, fsInts, ssInts) {
                var totalInts = (((((((((((((rolbInts + rilbInts) | 0) + lilbInts) | 0) + lolbInts) | 0) + rcbInts) | 0) + lcbInts) | 0) + fsInts) | 0) + ssInts) | 0;
                var totalSimPoints = 254;
                var rolbPoints, rilbPoints, lilbPoints, lolbPoints, rcbPoints, lcbPoints, fsPoints, ssPoints;

                rolbPoints = Bridge.Int.clip32((rolbInts / totalInts) * totalSimPoints);
                rilbPoints = Bridge.Int.clip32((rilbInts / totalInts) * totalSimPoints);
                lolbPoints = Bridge.Int.clip32((lolbInts / totalInts) * totalSimPoints);
                rcbPoints = Bridge.Int.clip32((rcbInts / totalInts) * totalSimPoints);
                lcbPoints = Bridge.Int.clip32((lcbInts / totalInts) * totalSimPoints);
                fsPoints = Bridge.Int.clip32((fsInts / totalInts) * totalSimPoints);
                ssPoints = Bridge.Int.clip32((ssInts / totalInts) * totalSimPoints);

                lilbPoints = (1 + Bridge.Int.clip32((totalSimPoints - (((((((((((((rcbPoints + lcbPoints) | 0) + fsPoints) | 0) + rolbPoints) | 0) + ssPoints) | 0) + rilbPoints) | 0) + lolbPoints) | 0))))) | 0;

                var ret = System.Array.init(8, 0, System.Int32);
                ret[System.Array.index(0, ret)] = rolbPoints;
                ret[System.Array.index(1, ret)] = rilbPoints;
                ret[System.Array.index(2, ret)] = lilbPoints;
                ret[System.Array.index(3, ret)] = lolbPoints;
                ret[System.Array.index(4, ret)] = rcbPoints;
                ret[System.Array.index(5, ret)] = lcbPoints;
                ret[System.Array.index(6, ret)] = fsPoints;
                ret[System.Array.index(7, ret)] = ssPoints;

                return ret;
            },
            GetSimPassRush: function (reSacks, ntSacks, leSacks, rolbSacks, rilbSacks, lilbSacks, lolbSacks) {
                var totalSacks = reSacks + ntSacks + leSacks + rolbSacks + rilbSacks + lilbSacks + lolbSacks;

                var totalSimPoints = TSBTool.TecmonsterSimStuff.FRONT_7_SIM_POINT_POOL;
                var minPr = TSBTool.TecmonsterSimStuff.FRONT_7_MIN_SIM_PASS_RUSH;

                var rePoints, ntPoints, lePoints, rolbPoints, rilbPoints, lilbPoints, lolbPoints, ssPoints;
                var dbPoints = 0;
                var cbPoints = 0;
                var front7Points = 0;

                if (totalSacks === 0) {
                    rePoints = (ntPoints = (lePoints = (rolbPoints = (rilbPoints = (lilbPoints = (lolbPoints = (ssPoints = 31)))))));
                    rePoints = (rePoints + 4) | 0;
                } else {
                    rePoints = Math.max(Bridge.Int.clip32((reSacks / totalSacks) * totalSimPoints), minPr);
                    lePoints = Math.max(Bridge.Int.clip32((leSacks / totalSacks) * totalSimPoints), minPr);
                    ntPoints = Math.max(Bridge.Int.clip32((ntSacks / totalSacks) * totalSimPoints), minPr);
                    rolbPoints = Math.max(Bridge.Int.clip32((rolbSacks / totalSacks) * totalSimPoints), minPr);
                    rilbPoints = Math.max(Bridge.Int.clip32((rilbSacks / totalSacks) * totalSimPoints), minPr);
                    lilbPoints = Math.max(Bridge.Int.clip32((lilbSacks / totalSacks) * totalSimPoints), minPr);
                    lolbPoints = Math.max(Bridge.Int.clip32((lolbSacks / totalSacks) * totalSimPoints), minPr);

                    front7Points = (((((((((((rePoints + lePoints) | 0) + ntPoints) | 0) + rolbPoints) | 0) + rilbPoints) | 0) + lilbPoints) | 0) + lolbPoints) | 0;

                    dbPoints = ((255 - front7Points) | 0);

                    cbPoints = (Bridge.Int.div(dbPoints, 4)) | 0;
                    ssPoints = ((255 - ((((Bridge.Int.mul(3, cbPoints)) + front7Points) | 0))) | 0);
                }
                var ret = System.Array.init(8, 0, System.Int32);

                ret[System.Array.index(0, ret)] = rePoints;
                ret[System.Array.index(1, ret)] = ntPoints;
                ret[System.Array.index(2, ret)] = lePoints;
                ret[System.Array.index(3, ret)] = rolbPoints;
                ret[System.Array.index(4, ret)] = rilbPoints;
                ret[System.Array.index(5, ret)] = lilbPoints;
                ret[System.Array.index(6, ret)] = lolbPoints;
                ret[System.Array.index(7, ret)] = ssPoints;

                return ret;
            }
        }
    });

    Bridge.define("TSBTool.TecmonsterTeamSim", {
        fields: {
            TextData: null
        },
        methods: {
            AutoUpdateSeasonSimData: function (season, textData) {
                this.TextData = textData;
                var teamsForSeason = this.GetTeams(season);
                var ratings = this.GetTeamsRatings(season, teamsForSeason);
                var averages = { v : this.CalculateSimAverages(ratings) };
                this.CalculateSimDefenses(ratings, averages);
                for (var i = 0; i < ratings.Count; i = (i + 1) | 0) {
                    this.UpdateTeamSimData(season, ratings.getItem(i), averages.v.$clone());
                }
                return this.TextData;
            },
            CalculateSimDefenses: function (ratings, averages) {
                var $t;
                $t = Bridge.getEnumerator(ratings);
                try {
                    while ($t.moveNext()) {
                        var rat = $t.Current;
                        rat.totalRunD = (rat.dlRunDefenseRating / averages.v.DL_run_ave) * 0.4 + (rat.lbRunDefenseRating / averages.v.LB_run_ave) * 0.4 + (rat.dbRunDefenseRating / averages.v.DB_run_ave) * 0.2;
                        rat.totalPassD = (rat.dlPassDefenseRating / averages.v.DL_pass_ave) * 0.2 + (rat.lbPassDefenseRating / averages.v.LB_pass_ave) * 0.2 + (rat.dbPassDefenseRating / averages.v.DB_pass_ave) * 0.6;
                        averages.v.TOTAL_RUN_DEFENSE += rat.totalRunD;
                        averages.v.TOTAL_PASS_DEFENSE += rat.totalPassD;

                        if (averages.v.MIN_PASS_DEFENSE === 0 || rat.totalPassD < averages.v.MIN_PASS_DEFENSE) {
                            averages.v.MIN_PASS_DEFENSE = rat.totalPassD;
                        }
                        if (averages.v.MIN_RUN_DEFENSE === 0 || rat.totalRunD < averages.v.MIN_RUN_DEFENSE) {
                            averages.v.MIN_RUN_DEFENSE = rat.totalRunD;
                        }
                        if (rat.totalPassD > averages.v.MAX_PASS_DEFENSE) {
                            averages.v.MAX_PASS_DEFENSE = rat.totalPassD;
                        }
                        if (rat.totalRunD > averages.v.MAX_RUN_DEFENSE) {
                            averages.v.MAX_RUN_DEFENSE = rat.totalRunD;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            UpdateTeamSimData: function (season, ratings, averages) {
                var spread = averages.MAX_RUN_DEFENSE - averages.MIN_RUN_DEFENSE;
                var simRunDefense = Bridge.Math.round(((ratings.totalRunD - averages.MIN_RUN_DEFENSE) / spread) * 15, 0, 6);
                spread = averages.MAX_PASS_DEFENSE - averages.MIN_PASS_DEFENSE;
                var simPassDefense = Bridge.Math.round(((ratings.totalPassD - averages.MIN_PASS_DEFENSE) / spread) * 15, 0, 6);
                if (simRunDefense > 15) {
                    simRunDefense = 15;
                }
                if (simPassDefense > 15) {
                    simPassDefense = 15;
                }
                var sim_def = System.String.format("{0:x}{1:x}", Bridge.box(Bridge.Int.clip32(simRunDefense), System.Int32), Bridge.box(Bridge.Int.clip32(simPassDefense), System.Int32));

                var pattern = System.String.format("TEAM\\s*=\\s*{0}\\s*,?\\s*SimData\\s*=\\s*0x([0-9a-fA-F]{{2}})", [ratings.team]);
                var teamSimRegex = new System.Text.RegularExpressions.Regex.ctor(pattern);
                var seasonIndex = this.GetSeasonIndex(season);
                var m = teamSimRegex.match(this.TextData, seasonIndex);
                var old = m.getGroups().get(1).toString();
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var start = this.TextData.substr(0, m.getGroups().get(1).getIndex());
                    var last = this.TextData.substr(((m.getGroups().get(1).getIndex() + 2) | 0));
                    var tmp = new System.Text.StringBuilder("", ((this.TextData.length + 20) | 0));
                    tmp.append(start);
                    tmp.append(sim_def);
                    tmp.append(last);
                    this.TextData = tmp.toString();
                }
            },
            GetSeasonIndex: function (season) {
                var retVal = 0;
                if (TSBTool.StaticUtils.IsTSB2Content(this.TextData)) {
                    var pattern = System.String.format("^\\s*SEASON\\s+{0}", [Bridge.box(season, System.Int32)]);
                    var seasonRegex = new System.Text.RegularExpressions.Regex.ctor(pattern);
                    var m = seasonRegex.match(this.TextData);
                    if (m.getSuccess()) {
                        retVal = m.getIndex();
                    }
                }
                return retVal;
            },
            CalculateSimAverages: function (ratings) {
                var $t;
                var retVal = new TSBTool.SimAverages();
                $t = Bridge.getEnumerator(ratings);
                try {
                    while ($t.moveNext()) {
                        var rat = $t.Current;
                        retVal.QB_ave += rat.qbRating;
                        retVal.RB_ave += rat.rb1Rating;
                        retVal.WR_ave += (rat.wr1Rating + rat.wr2Rating);
                        retVal.TE_ave += rat.teRating;
                        retVal.OL_ave += rat.olRating;
                        retVal.DL_run_ave += rat.dlRunDefenseRating;
                        retVal.DL_pass_ave += rat.dlPassDefenseRating;
                        retVal.LB_run_ave += rat.lbRunDefenseRating;
                        retVal.LB_pass_ave += rat.lbPassDefenseRating;
                        retVal.DB_run_ave += rat.dbRunDefenseRating;
                        retVal.DB_pass_ave += rat.dbPassDefenseRating;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                retVal.QB_ave = retVal.QB_ave / ratings.Count;
                retVal.RB_ave = retVal.RB_ave / ratings.Count;
                retVal.WR_ave = retVal.WR_ave / (Bridge.Int.mul(ratings.Count, 2));
                retVal.TE_ave = retVal.TE_ave / ratings.Count;
                retVal.OL_ave = retVal.OL_ave / ratings.Count;
                retVal.DL_run_ave = retVal.DL_run_ave / ratings.Count;
                retVal.DL_pass_ave = retVal.DL_pass_ave / ratings.Count;
                retVal.LB_run_ave = retVal.LB_run_ave / ratings.Count;
                retVal.LB_pass_ave = retVal.LB_pass_ave / ratings.Count;
                retVal.DB_run_ave = retVal.DB_run_ave / ratings.Count;
                retVal.DB_pass_ave = retVal.DB_pass_ave / ratings.Count;
                return retVal.$clone();
            },
            GetTeamsRatings: function (season, teams) {
                var $t;
                var retVal = new (System.Collections.Generic.List$1(TSBTool.TeamRatings)).$ctor2(teams.Count);
                var seasonChunk = this.GetSeasonText(season);
                $t = Bridge.getEnumerator(teams);
                try {
                    while ($t.moveNext()) {
                        var team = $t.Current;
                        retVal.add(this.GetTeamRatings(seasonChunk, team));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return retVal;
            },
            GetTeamRatings: function (textData, team) {
                var retVal = new TSBTool.TeamRatings();
                var RS = 0, RP = 1, MS = 2, HP = 3, PS = 4, PC = 5, PA = 6, APB = 7, BC = 4, RC = 5, PI = 4, QU = 5;
                if (TSBTool.StaticUtils.GetContentType(this.TextData) === TSBTool.TSBContentType.TSB2) {
                    PS = 5;
                    PC = 6;
                    PA = 7;
                    APB = 8;
                    BC = 5;
                    RC = 6;
                    PI = 5;
                    QU = 6;
                } else if (TSBTool.StaticUtils.GetContentType(this.TextData) === TSBTool.TSBContentType.TSB3) {
                    PS = 6;
                    PC = 7;
                    PA = 8;
                    APB = 9;
                    BC = 6;
                    RC = 7;
                    PI = 6;
                    QU = 7;
                }

                var qb1 = this.GetPlayerInts(textData, team, "QB1");
                var rb1 = this.GetPlayerInts(textData, team, "RB1");
                var rb2 = this.GetPlayerInts(textData, team, "RB2");
                var wr1 = this.GetPlayerInts(textData, team, "WR1");
                var wr2 = this.GetPlayerInts(textData, team, "WR2");
                var te1 = this.GetPlayerInts(textData, team, "TE1");

                var center = this.GetPlayerInts(textData, team, "C");
                var lg = this.GetPlayerInts(textData, team, "LG");
                var rg = this.GetPlayerInts(textData, team, "RG");
                var lt = this.GetPlayerInts(textData, team, "LT");
                var rt = this.GetPlayerInts(textData, team, "RT");

                var re = this.GetPlayerInts(textData, team, "RE");
                var nt = this.GetPlayerInts(textData, team, "NT");
                var le = this.GetPlayerInts(textData, team, "LE");

                var rolb = this.GetPlayerInts(textData, team, "ROLB");
                var rilb = this.GetPlayerInts(textData, team, "RILB");
                var lilb = this.GetPlayerInts(textData, team, "LILB");
                var lolb = this.GetPlayerInts(textData, team, "LOLB");

                var rcb = this.GetPlayerInts(textData, team, "RCB");
                var lcb = this.GetPlayerInts(textData, team, "LCB");
                var fs = this.GetPlayerInts(textData, team, "FS");
                var ss = this.GetPlayerInts(textData, team, "SS");

                retVal.team = team;
                retVal.qbRating = (qb1[System.Array.index(RS, qb1)] * 0.06) + (qb1[System.Array.index(RP, qb1)] * 0.02) + (qb1[System.Array.index(MS, qb1)] * 0.12) + (qb1[System.Array.index(HP, qb1)] * 0.02) + (qb1[System.Array.index(PS, qb1)] * 0.22) + (qb1[System.Array.index(PC, qb1)] * 0.23) + (qb1[System.Array.index(PA, qb1)] * 0.23) + (qb1[System.Array.index(APB, qb1)] * 0.1);
                retVal.rb1Rating = (rb1[System.Array.index(RS, rb1)] * 0.15) + (rb1[System.Array.index(RP, rb1)] * 0.15) + (rb1[System.Array.index(MS, rb1)] * 0.4) + (rb1[System.Array.index(HP, rb1)] * 0.25) + (rb1[System.Array.index(BC, rb1)] * 0.02) + (rb1[System.Array.index(RC, rb1)] * 0.03);
                retVal.rb2Rating = (rb2[System.Array.index(RS, rb2)] * 0.15) + (rb2[System.Array.index(RP, rb2)] * 0.15) + (rb2[System.Array.index(MS, rb2)] * 0.4) + (rb2[System.Array.index(HP, rb2)] * 0.25) + (rb2[System.Array.index(BC, rb2)] * 0.02) + (rb2[System.Array.index(RC, rb2)] * 0.03);
                retVal.wr1Rating = (wr1[System.Array.index(RS, wr1)] * 0.2) + (wr1[System.Array.index(RP, wr1)] * 0.15) + (wr1[System.Array.index(MS, wr1)] * 0.25) + (wr1[System.Array.index(HP, wr1)] * 0.03) + (wr1[System.Array.index(BC, wr1)] * 0.02) + (wr1[System.Array.index(RC, wr1)] * 0.35);
                retVal.wr2Rating = (wr2[System.Array.index(RS, wr2)] * 0.2) + (wr2[System.Array.index(RP, wr2)] * 0.15) + (wr2[System.Array.index(MS, wr2)] * 0.25) + (wr2[System.Array.index(HP, wr2)] * 0.03) + (wr2[System.Array.index(BC, wr2)] * 0.02) + (wr2[System.Array.index(RC, wr2)] * 0.35);
                retVal.teRating = (te1[System.Array.index(RS, te1)] * 0.18) + (te1[System.Array.index(RP, te1)] * 0.1) + (te1[System.Array.index(MS, te1)] * 0.25) + (te1[System.Array.index(HP, te1)] * 0.25) + (te1[System.Array.index(BC, te1)] * 0.02) + (te1[System.Array.index(RC, te1)] * 0.2);
                retVal.olRating = (center[System.Array.index(RS, center)] * 0.02) + (center[System.Array.index(RP, center)] * 0.01) + (center[System.Array.index(MS, center)] * 0.02) + (center[System.Array.index(HP, center)] * 0.95) + (lg[System.Array.index(RS, lg)] * 0.02) + (lg[System.Array.index(RP, lg)] * 0.01) + (lg[System.Array.index(MS, lg)] * 0.02) + (lg[System.Array.index(HP, lg)] * 0.95) + (rg[System.Array.index(RS, rg)] * 0.02) + (rg[System.Array.index(RP, rg)] * 0.01) + (rg[System.Array.index(MS, rg)] * 0.02) + (rg[System.Array.index(HP, rg)] * 0.95) + (lt[System.Array.index(RS, lt)] * 0.02) + (lt[System.Array.index(RP, lt)] * 0.01) + (lt[System.Array.index(MS, lt)] * 0.02) + (lt[System.Array.index(HP, lt)] * 0.95) + (rt[System.Array.index(RS, rt)] * 0.02) + (rt[System.Array.index(RP, rt)] * 0.01) + (rt[System.Array.index(MS, rt)] * 0.02) + (rt[System.Array.index(HP, rt)] * 0.95);
                retVal.dlRunDefenseRating = (re[System.Array.index(RS, re)] * 0.05) + (re[System.Array.index(RP, re)] * 0.05) + (re[System.Array.index(MS, re)] * 0.05) + (re[System.Array.index(HP, re)] * 0.85) + (nt[System.Array.index(RS, nt)] * 0.05) + (nt[System.Array.index(RP, nt)] * 0.05) + (nt[System.Array.index(MS, nt)] * 0.05) + (nt[System.Array.index(HP, nt)] * 0.85) + (le[System.Array.index(RS, le)] * 0.05) + (le[System.Array.index(RP, le)] * 0.05) + (le[System.Array.index(MS, le)] * 0.05) + (le[System.Array.index(HP, le)] * 0.85);
                retVal.dlPassDefenseRating = (re[System.Array.index(RS, re)] * 0.05) + (re[System.Array.index(RP, re)] * 0.05) + (re[System.Array.index(MS, re)] * 0.05) + (re[System.Array.index(HP, re)] * 0.75) + (re[System.Array.index(PI, re)] * 0.05) + (re[System.Array.index(QU, re)] * 0.05) + (nt[System.Array.index(RS, nt)] * 0.05) + (nt[System.Array.index(RP, nt)] * 0.05) + (nt[System.Array.index(MS, nt)] * 0.05) + (nt[System.Array.index(HP, nt)] * 0.75) + (nt[System.Array.index(PI, nt)] * 0.05) + (nt[System.Array.index(QU, nt)] * 0.05) + (le[System.Array.index(RS, le)] * 0.05) + (le[System.Array.index(RP, le)] * 0.05) + (le[System.Array.index(MS, le)] * 0.05) + (le[System.Array.index(HP, le)] * 0.75) + (le[System.Array.index(PI, le)] * 0.05) + (le[System.Array.index(QU, le)] * 0.05);
                retVal.lbRunDefenseRating = (rolb[System.Array.index(RS, rolb)] * 0.25) + (rolb[System.Array.index(RP, rolb)] * 0.25) + (rolb[System.Array.index(MS, rolb)] * 0.1) + (rolb[System.Array.index(HP, rolb)] * 0.4) + (rilb[System.Array.index(RS, rilb)] * 0.25) + (rilb[System.Array.index(RP, rilb)] * 0.25) + (rilb[System.Array.index(MS, rilb)] * 0.1) + (rilb[System.Array.index(HP, rilb)] * 0.4) + (lilb[System.Array.index(RS, lilb)] * 0.25) + (lilb[System.Array.index(RP, lilb)] * 0.25) + (lilb[System.Array.index(MS, lilb)] * 0.1) + (lilb[System.Array.index(HP, lilb)] * 0.4) + (lolb[System.Array.index(RS, lolb)] * 0.25) + (lolb[System.Array.index(RP, lolb)] * 0.25) + (lolb[System.Array.index(MS, lolb)] * 0.1) + (lolb[System.Array.index(HP, lolb)] * 0.4);
                retVal.lbPassDefenseRating = (rolb[System.Array.index(RS, rolb)] * 0.15) + (rolb[System.Array.index(RP, rolb)] * 0.15) + (rolb[System.Array.index(MS, rolb)] * 0.1) + (rolb[System.Array.index(PI, rolb)] * 0.3) + (rolb[System.Array.index(QU, rolb)] * 0.3) + (rilb[System.Array.index(RS, rilb)] * 0.15) + (rilb[System.Array.index(RP, rilb)] * 0.15) + (rilb[System.Array.index(MS, rilb)] * 0.1) + (rilb[System.Array.index(PI, rilb)] * 0.3) + (rilb[System.Array.index(QU, rilb)] * 0.3) + (lilb[System.Array.index(RS, lilb)] * 0.15) + (lilb[System.Array.index(RP, lilb)] * 0.15) + (lilb[System.Array.index(MS, lilb)] * 0.1) + (lilb[System.Array.index(PI, lilb)] * 0.3) + (lilb[System.Array.index(QU, lilb)] * 0.3) + (lolb[System.Array.index(RS, lolb)] * 0.15) + (lolb[System.Array.index(RP, lolb)] * 0.15) + (lolb[System.Array.index(MS, lolb)] * 0.1) + (lolb[System.Array.index(PI, lolb)] * 0.3) + (lolb[System.Array.index(QU, lolb)] * 0.3);
                retVal.dbRunDefenseRating = (rcb[System.Array.index(RS, rcb)] * 0.25) + (rcb[System.Array.index(RP, rcb)] * 0.25) + (rcb[System.Array.index(MS, rcb)] * 0.1) + (rcb[System.Array.index(HP, rcb)] * 0.4) + (lcb[System.Array.index(RS, lcb)] * 0.25) + (lcb[System.Array.index(RP, lcb)] * 0.25) + (lcb[System.Array.index(MS, lcb)] * 0.1) + (lcb[System.Array.index(HP, lcb)] * 0.4) + (fs[System.Array.index(RS, fs)] * 0.25) + (fs[System.Array.index(RP, fs)] * 0.25) + (fs[System.Array.index(MS, fs)] * 0.1) + (fs[System.Array.index(HP, fs)] * 0.4) + (ss[System.Array.index(RS, ss)] * 0.25) + (ss[System.Array.index(RP, ss)] * 0.25) + (ss[System.Array.index(MS, ss)] * 0.1) + (ss[System.Array.index(HP, ss)] * 0.4);
                retVal.dbPassDefenseRating = (rcb[System.Array.index(RS, rcb)] * 0.15) + (rcb[System.Array.index(RP, rcb)] * 0.15) + (rcb[System.Array.index(MS, rcb)] * 0.1) + (rcb[System.Array.index(PI, rcb)] * 0.3) + (rcb[System.Array.index(QU, rcb)] * 0.3) + (lcb[System.Array.index(RS, lcb)] * 0.15) + (lcb[System.Array.index(RP, lcb)] * 0.15) + (lcb[System.Array.index(MS, lcb)] * 0.1) + (lcb[System.Array.index(PI, lcb)] * 0.3) + (lcb[System.Array.index(QU, lcb)] * 0.3) + (fs[System.Array.index(RS, fs)] * 0.15) + (fs[System.Array.index(RP, fs)] * 0.15) + (fs[System.Array.index(MS, fs)] * 0.1) + (fs[System.Array.index(PI, fs)] * 0.3) + (fs[System.Array.index(QU, fs)] * 0.3) + (ss[System.Array.index(RS, ss)] * 0.15) + (ss[System.Array.index(RP, ss)] * 0.15) + (ss[System.Array.index(MS, ss)] * 0.1) + (ss[System.Array.index(PI, ss)] * 0.3) + (ss[System.Array.index(QU, ss)] * 0.3);
                return retVal;
            },
            /**
             * Gets a player 'line' from m_Data from 'team' playing 'position'.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTeamSim
             * @memberof TSBTool.TecmonsterTeamSim
             * @param   {string}            seasonChunk    
             * @param   {string}            team           
             * @param   {string}            position
             * @return  {Array.<number>}
             */
            GetPlayerInts: function (seasonChunk, team, position) {
                var pattern = "TEAM\\s*=\\s*" + (team || "");
                var findTeamRegex = new System.Text.RegularExpressions.Regex.ctor(pattern);
                var m = findTeamRegex.match(seasonChunk);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var teamIndex = m.getIndex();
                    if (teamIndex === -1) {
                        return null;
                    }
                    var playerIndex = -1;
                    var endLineRegex = new System.Text.RegularExpressions.Regex.ctor(System.String.format("\n\\s*{0}\\s*,", [position]));
                    var eol = endLineRegex.match(seasonChunk, teamIndex);
                    if (!Bridge.referenceEquals(eol, System.Text.RegularExpressions.Match.getEmpty())) {
                        playerIndex = eol.getIndex();
                    }
                    playerIndex = (playerIndex + 1) | 0;

                    if (playerIndex === 0) {
                        return null;
                    }
                    var lineEnd = System.String.indexOf(seasonChunk, "\n", playerIndex);
                    var playerLine = seasonChunk.substr(playerIndex, ((lineEnd - playerIndex) | 0));
                    return TSBTool.InputParser.GetInts$1(playerLine, false);
                }
                return null;
            },
            GetTeams: function (season) {
                var $t;
                var seasonChunk = this.GetSeasonText(season);
                var retVal = new (System.Collections.Generic.List$1(System.String)).$ctor2(35);
                var teamRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM\\s*=\\s*([a-z0-9]+)");
                var mc = teamRegex.matches(seasonChunk);
                $t = Bridge.getEnumerator(mc);
                try {
                    while ($t.moveNext()) {
                        var m = Bridge.cast($t.Current, System.Text.RegularExpressions.Match);
                        var team = m.getGroups().get(1).getValue();
                        retVal.add(team);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return retVal;
            },
            GetSeasonText: function (season) {
                var start = 0;
                var end = this.TextData.length;
                var reg = new System.Text.RegularExpressions.Regex.ctor(System.String.format("^\\s*SEASON\\s+({0})", [Bridge.box(season, System.Int32)]));
                var m = reg.match(this.TextData);
                if (m.getSuccess()) {
                    var index = System.String.indexOf(this.TextData, "SEASON", ((m.getIndex() + 50) | 0));
                    if (index > -1) {
                        end = index;
                    }
                }
                var seasonChunk = this.TextData.substr(start, end);
                return seasonChunk;
            }
        }
    });

    Bridge.define("TSBTool.TecmonsterTSB1SimAutoUpdater", {
        statics: {
            fields: {
                PositionNames: null
            },
            ctors: {
                init: function () {
                    this.PositionNames = function (_o1) {
                            _o1.add("QB1");
                            _o1.add("QB2");
                            _o1.add("RB1");
                            _o1.add("RB2");
                            _o1.add("RB3");
                            _o1.add("RB4");
                            _o1.add("WR1");
                            _o1.add("WR2");
                            _o1.add("WR3");
                            _o1.add("WR4");
                            _o1.add("TE1");
                            _o1.add("TE2");
                            _o1.add("C");
                            _o1.add("LG");
                            _o1.add("RG");
                            _o1.add("LT");
                            _o1.add("RT");
                            _o1.add("RE");
                            _o1.add("NT");
                            _o1.add("LE");
                            _o1.add("ROLB");
                            _o1.add("RILB");
                            _o1.add("LILB");
                            _o1.add("LOLB");
                            _o1.add("RCB");
                            _o1.add("LCB");
                            _o1.add("FS");
                            _o1.add("SS");
                            _o1.add("K");
                            _o1.add("P");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            },
            methods: {
                AutoUpdatePlayerSimData: function (input) {
                    var tmp = new TSBTool.TecmonsterTSB1SimAutoUpdater();
                    tmp.Data = input;
                    tmp.AutoUpdatePlayerSim();
                    return tmp.Data;
                }
            }
        },
        fields: {
            mTeams: null,
            mSimStuff: null,
            mData: null,
            m_SimRegex: null
        },
        props: {
            /**
             * The text data to work on and retrieve.
             *
             * @instance
             * @protected
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @function Data
             * @type string
             */
            Data: {
                get: function () {
                    return this.mData;
                },
                set: function (value) {
                    var $t;
                    this.mTeams.clear();
                    this.mData = value;
                    var findTeamRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM\\s*=\\s*([a-z49]+)");
                    var mc = findTeamRegex.matches(this.mData);
                    $t = Bridge.getEnumerator(mc);
                    try {
                        while ($t.moveNext()) {
                            var m = Bridge.cast($t.Current, System.Text.RegularExpressions.Match);
                            this.mTeams.add(m.getGroups().get(1).toString());
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                }
            }
        },
        ctors: {
            init: function () {
                this.mTeams = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.mSimStuff = new TSBTool.TecmonsterSimStuff();
                this.mData = "";
            }
        },
        methods: {
            /**
             * Gets a player 'line' from m_Data from 'team' playing 'position'.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTSB1SimAutoUpdater
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {string}
             */
            GetPlayerString: function (team, position) {
                var pattern = "TEAM\\s*=\\s*" + (team || "");
                var findTeamRegex = new System.Text.RegularExpressions.Regex.ctor(pattern);
                var m = findTeamRegex.match(this.mData);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var teamIndex = m.getIndex();
                    if (teamIndex === -1) {
                        return null;
                    }
                    var playerIndex = -1;
                    var endLineRegex = new System.Text.RegularExpressions.Regex.ctor(System.String.format("\n\\s*{0}\\s*,", [position]));
                    var eol = endLineRegex.match(this.mData, teamIndex);
                    if (!Bridge.referenceEquals(eol, System.Text.RegularExpressions.Match.getEmpty())) {
                        playerIndex = eol.getIndex();
                    }
                    playerIndex = (playerIndex + 1) | 0;

                    if (playerIndex === 0) {
                        return null;
                    }
                    var lineEnd = System.String.indexOf(this.mData, "\n", playerIndex);
                    var playerLine = this.mData.substr(playerIndex, ((lineEnd - playerIndex) | 0));
                    return playerLine;
                }
                return null;
            },
            ReplacePlayer: function (team, oldPlayer, newPlayer) {
                var nextTeamIndex = -1;
                var currentTeamIndex = -1;
                var nextTeam = null;

                var findTeamRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM\\s*=\\s*" + (team || ""));

                var m = findTeamRegex.match(this.mData);
                if (!m.getSuccess()) {
                    return;
                }

                currentTeamIndex = m.getGroups().get(1).getIndex();

                var test = this.mTeams.indexOf(team);

                if (test !== ((this.mTeams.Count - 1) | 0)) {
                    nextTeam = System.String.format("TEAM\\s*=\\s*{0}", [this.mTeams.getItem(((test + 1) | 0))]);
                    var nextTeamRegex = new System.Text.RegularExpressions.Regex.ctor(nextTeam);
                    var nt = nextTeamRegex.match(this.mData);
                    if (nt.getSuccess()) {
                        nextTeamIndex = nt.getIndex();
                    }
                }
                if (nextTeamIndex < 0) {
                    nextTeamIndex = this.mData.length;
                }


                var playerIndex = System.String.indexOf(this.mData, oldPlayer, currentTeamIndex);
                if (playerIndex > -1) {
                    var endLine = System.String.indexOf(this.mData, String.fromCharCode(10), playerIndex);
                    var start = this.mData.substr(0, playerIndex);
                    var last = this.mData.substr(endLine);

                    var tmp = new System.Text.StringBuilder("", ((this.mData.length + 200) | 0));
                    tmp.append(start);
                    tmp.append(newPlayer);
                    tmp.append(last);

                    this.mData = tmp.toString();
                } else {
                    var error = System.String.format("An error occured looking up player\r\n     '{0}'\r\nPlease verify that this player's attributes are correct.", [oldPlayer]);
                    TSBTool.StaticUtils.AddError(error);
                }
            },
            /**
             * Update all players sim attributes.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTSB1SimAutoUpdater
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @return  {void}
             */
            AutoUpdatePlayerSim: function () {
                var $t;
                $t = Bridge.getEnumerator(this.mTeams);
                try {
                    while ($t.moveNext()) {
                        var team = $t.Current;
                        this.AutoUpdatePlayers(team);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /**
             * Auto update a team's players sim attributs.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTSB1SimAutoUpdater
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @param   {string}    team
             * @return  {void}
             */
            AutoUpdatePlayers: function (team) {
                var $t;
                var pattern = "TEAM\\s*=\\s*" + (team || "");
                var findTeamRegex = new System.Text.RegularExpressions.Regex.ctor(pattern);
                var m = findTeamRegex.match(this.mData);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    $t = Bridge.getEnumerator(TSBTool.TecmonsterTSB1SimAutoUpdater.PositionNames);
                    try {
                        while ($t.moveNext()) {
                            var position = $t.Current;
                            if (Bridge.referenceEquals(position, "C")) {
                                break;
                            }
                            this.AutoUpdatePlayerSimData(team, position);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this.AutoUpdatePlayerSimData(team, "P");
                    this.AutoUpdatePlayerSimData(team, "K");
                    this.UpdateTeamSimPassDefense(team);
                    this.UpdateTeamSimPassRush(team);
                }
            },
            /**
             * Auto update a player's sim data.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTSB1SimAutoUpdater
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {void}
             */
            AutoUpdatePlayerSimData: function (team, position) {
                var oldValue = this.GetPlayerString(team, position);
                var newValue = null;

                if (oldValue == null || Bridge.referenceEquals(oldValue, "")) {
                    return;
                }
                var fName = TSBTool.InputParser.GetFirstName(oldValue);
                var lName = TSBTool.InputParser.GetLastName(oldValue);
                var face = TSBTool.InputParser.GetFace(oldValue);
                var jerseyNumber = TSBTool.InputParser.GetJerseyNumber(oldValue);

                var attrs = System.Array.init(4, 0, System.Int32);
                try {
                    attrs = TSBTool.InputParser.GetInts$1(oldValue, false);
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError("Oh oh!" + (e.Message || ""));
                }
                var simPass, simRush, simPocket, simCatch, simTargets, simYPC, simKA;

                switch (position) {
                    case "QB1": 
                    case "QB2": 
                        if (attrs != null && attrs.length > 7) {
                            simRush = this.mSimStuff.QbSimRun(attrs[System.Array.index(0, attrs)], attrs[System.Array.index(1, attrs)], attrs[System.Array.index(2, attrs)]);
                            simPass = this.mSimStuff.SimPass(attrs[System.Array.index(4, attrs)], attrs[System.Array.index(5, attrs)], attrs[System.Array.index(6, attrs)], attrs[System.Array.index(7, attrs)]);
                            simPocket = this.mSimStuff.SimPocket(attrs[System.Array.index(0, attrs)], attrs[System.Array.index(2, attrs)]);
                            newValue = System.String.format("{0}, {1} {2}, Face=0x{3:x}, #{4:x}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12} ,[{13}, {14}, {15} ]", position, fName, lName, Bridge.box(face, System.Int32), Bridge.box(jerseyNumber, System.Int32), Bridge.box(attrs[System.Array.index(0, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(1, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(2, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(3, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(4, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(5, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(6, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(7, attrs)], System.Int32), Bridge.box(simRush, System.Int32), Bridge.box(simPass, System.Int32), Bridge.box(simPocket, System.Int32));
                        }
                        break;
                    case "RB1": 
                    case "RB2": 
                    case "RB3": 
                    case "RB4": 
                        if (attrs != null && attrs.length > 5) {
                            simRush = this.mSimStuff.RbSimRush(attrs[System.Array.index(0, attrs)], attrs[System.Array.index(1, attrs)], attrs[System.Array.index(3, attrs)], attrs[System.Array.index(4, attrs)]);
                            simCatch = this.mSimStuff.SimCatch(attrs[System.Array.index(5, attrs)]);
                            simYPC = this.mSimStuff.SimYPC(attrs[System.Array.index(2, attrs)], attrs[System.Array.index(5, attrs)]);
                            simTargets = this.mSimStuff.SimTargets(attrs[System.Array.index(2, attrs)]);
                            newValue = System.String.format("{0}, {1} {2}, Face=0x{3:x}, #{4:x}, {5}, {6}, {7}, {8}, {9}, {10} ,[{11}, {12} ,{13}, {14} ]", position, fName, lName, Bridge.box(face, System.Int32), Bridge.box(jerseyNumber, System.Int32), Bridge.box(attrs[System.Array.index(0, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(1, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(2, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(3, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(4, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(5, attrs)], System.Int32), Bridge.box(simRush, System.Int32), Bridge.box(simCatch, System.Int32), Bridge.box(simYPC, System.Int32), Bridge.box(simCatch, System.Int32));
                        }
                        break;
                    case "WR1": 
                    case "WR2": 
                    case "WR3": 
                    case "WR4": 
                    case "TE1": 
                    case "TE2": 
                        if (attrs != null && attrs.length > 5) {
                            simRush = 0;
                            simCatch = this.mSimStuff.SimCatch(attrs[System.Array.index(5, attrs)]);
                            simYPC = this.mSimStuff.SimYPC(attrs[System.Array.index(2, attrs)], attrs[System.Array.index(5, attrs)]);
                            simTargets = this.mSimStuff.SimTargets(attrs[System.Array.index(2, attrs)]);
                            newValue = System.String.format("{0}, {1} {2}, Face=0x{3:x}, #{4:x}, {5}, {6}, {7}, {8}, {9}, {10} ,[{11}, {12} ,{13}, {14} ]", position, fName, lName, Bridge.box(face, System.Int32), Bridge.box(jerseyNumber, System.Int32), Bridge.box(attrs[System.Array.index(0, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(1, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(2, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(3, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(4, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(5, attrs)], System.Int32), Bridge.box(simRush, System.Int32), Bridge.box(simCatch, System.Int32), Bridge.box(simYPC, System.Int32), Bridge.box(simCatch, System.Int32));
                        }
                        break;
                    case "P": 
                    case "K": 
                        if (attrs != null && attrs.length > 5) {
                            simKA = this.mSimStuff.PKSimKick(attrs[System.Array.index(4, attrs)], attrs[System.Array.index(5, attrs)]);
                            newValue = System.String.format("{0}, {1} {2}, Face=0x{3:x}, #{4:x}, {5}, {6}, {7}, {8}, {9}, {10} ,[{11} ]", position, fName, lName, Bridge.box(face, System.Int32), Bridge.box(jerseyNumber, System.Int32), Bridge.box(attrs[System.Array.index(0, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(1, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(2, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(3, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(4, attrs)], System.Int32), Bridge.box(attrs[System.Array.index(5, attrs)], System.Int32), Bridge.box(simKA, System.Int32));
                        }
                        break;
                }
                if (newValue != null) {
                    this.ReplacePlayer(team, oldValue, newValue);
                }
            },
            UpdateTeamSimPassDefense: function (team) {
                var re = this.GetPlayerString(team, "RE");
                var le = this.GetPlayerString(team, "LE");
                var nt = this.GetPlayerString(team, "NT");
                var lolb = this.GetPlayerString(team, "LOLB");
                var lilb = this.GetPlayerString(team, "LILB");
                var rilb = this.GetPlayerString(team, "RILB");
                var rolb = this.GetPlayerString(team, "ROLB");
                var rcb = this.GetPlayerString(team, "RCB");
                var lcb = this.GetPlayerString(team, "LCB");
                var fs = this.GetPlayerString(team, "FS");
                var ss = this.GetPlayerString(team, "SS");

                if (re == null || le == null || nt == null || lolb == null || lilb == null || rilb == null || rolb == null || rcb == null || lcb == null || fs == null || ss == null) {
                    return;
                }
                var reAttrs = TSBTool.InputParser.GetInts$1(re, false);
                var leAttrs = TSBTool.InputParser.GetInts$1(le, false);
                var ntAttrs = TSBTool.InputParser.GetInts$1(nt, false);
                var lolbAttrs = TSBTool.InputParser.GetInts$1(lolb, false);
                var lilbAttrs = TSBTool.InputParser.GetInts$1(lilb, false);
                var rilbAttrs = TSBTool.InputParser.GetInts$1(rilb, false);
                var rolbAttrs = TSBTool.InputParser.GetInts$1(rolb, false);
                var rcbAttrs = TSBTool.InputParser.GetInts$1(rcb, false);
                var lcbAttrs = TSBTool.InputParser.GetInts$1(lcb, false);
                var fsAttrs = TSBTool.InputParser.GetInts$1(fs, false);
                var ssAttrs = TSBTool.InputParser.GetInts$1(ss, false);

                var passDef = this.mSimStuff.GetSimPassDefense(rolbAttrs[System.Array.index(4, rolbAttrs)], rilbAttrs[System.Array.index(4, rilbAttrs)], lilbAttrs[System.Array.index(4, lilbAttrs)], lolbAttrs[System.Array.index(4, lolbAttrs)], rcbAttrs[System.Array.index(4, rcbAttrs)], lcbAttrs[System.Array.index(4, lcbAttrs)], fsAttrs[System.Array.index(4, fsAttrs)], ssAttrs[System.Array.index(4, ssAttrs)]);

                this.ReplacePlayer(team, re, this.ReplaceSimAttr(re, 2, 0));
                this.ReplacePlayer(team, nt, this.ReplaceSimAttr(nt, 2, 0));
                this.ReplacePlayer(team, le, this.ReplaceSimAttr(le, 2, 0));
                this.ReplacePlayer(team, rolb, this.ReplaceSimAttr(rolb, 2, passDef[System.Array.index(0, passDef)]));
                this.ReplacePlayer(team, rilb, this.ReplaceSimAttr(rilb, 2, passDef[System.Array.index(1, passDef)]));
                this.ReplacePlayer(team, lilb, this.ReplaceSimAttr(lilb, 2, passDef[System.Array.index(2, passDef)]));
                this.ReplacePlayer(team, lolb, this.ReplaceSimAttr(lolb, 2, passDef[System.Array.index(3, passDef)]));
                this.ReplacePlayer(team, rcb, this.ReplaceSimAttr(rcb, 2, passDef[System.Array.index(4, passDef)]));
                this.ReplacePlayer(team, lcb, this.ReplaceSimAttr(lcb, 2, passDef[System.Array.index(5, passDef)]));
                this.ReplacePlayer(team, fs, this.ReplaceSimAttr(fs, 2, passDef[System.Array.index(6, passDef)]));
                this.ReplacePlayer(team, ss, this.ReplaceSimAttr(ss, 2, passDef[System.Array.index(7, passDef)]));

                var overallSimPassDef = 0;
                if (reAttrs[System.Array.index(2, reAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (reAttrs[System.Array.index(4, reAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (leAttrs[System.Array.index(2, leAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (leAttrs[System.Array.index(4, leAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (ntAttrs[System.Array.index(2, ntAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (ntAttrs[System.Array.index(4, ntAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lolbAttrs[System.Array.index(2, lolbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lolbAttrs[System.Array.index(4, lolbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lilbAttrs[System.Array.index(2, lilbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lilbAttrs[System.Array.index(4, lilbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rilbAttrs[System.Array.index(2, rilbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rilbAttrs[System.Array.index(4, rilbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rolbAttrs[System.Array.index(2, rolbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rolbAttrs[System.Array.index(4, rolbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rcbAttrs[System.Array.index(2, rcbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (rcbAttrs[System.Array.index(4, rcbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lcbAttrs[System.Array.index(2, lcbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (lcbAttrs[System.Array.index(4, lcbAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (fsAttrs[System.Array.index(2, fsAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (fsAttrs[System.Array.index(4, fsAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (ssAttrs[System.Array.index(2, ssAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
                if (ssAttrs[System.Array.index(4, ssAttrs)] > 49) {
                    overallSimPassDef = (overallSimPassDef + 1) | 0;
                }
            },
            UpdateTeamSimPassRush: function (team) {
                var re = this.GetPlayerString(team, "RE");
                var le = this.GetPlayerString(team, "LE");
                var nt = this.GetPlayerString(team, "NT");
                var lolb = this.GetPlayerString(team, "LOLB");
                var lilb = this.GetPlayerString(team, "LILB");
                var rilb = this.GetPlayerString(team, "RILB");
                var rolb = this.GetPlayerString(team, "ROLB");
                var rcb = this.GetPlayerString(team, "RCB");
                var lcb = this.GetPlayerString(team, "LCB");
                var fs = this.GetPlayerString(team, "FS");
                var ss = this.GetPlayerString(team, "SS");

                if (re == null || le == null || nt == null || lolb == null || lilb == null || rilb == null || rolb == null || rcb == null || lcb == null || fs == null || ss == null) {
                    return;
                }
                var reAttrs = TSBTool.InputParser.GetInts$1(re, false);
                var leAttrs = TSBTool.InputParser.GetInts$1(le, false);
                var ntAttrs = TSBTool.InputParser.GetInts$1(nt, false);
                var lolbAttrs = TSBTool.InputParser.GetInts$1(lolb, false);
                var lilbAttrs = TSBTool.InputParser.GetInts$1(lilb, false);
                var rilbAttrs = TSBTool.InputParser.GetInts$1(rilb, false);
                var rolbAttrs = TSBTool.InputParser.GetInts$1(rolb, false);
                var rcbAttrs = TSBTool.InputParser.GetInts$1(rcb, false);
                var lcbAttrs = TSBTool.InputParser.GetInts$1(lcb, false);
                var fsAttrs = TSBTool.InputParser.GetInts$1(fs, false);
                var ssAttrs = TSBTool.InputParser.GetInts$1(ss, false);

                var rushDef = this.mSimStuff.GetSimPassRush(((reAttrs[System.Array.index(2, reAttrs)] + reAttrs[System.Array.index(3, reAttrs)]) | 0), ((ntAttrs[System.Array.index(2, ntAttrs)] + ntAttrs[System.Array.index(3, ntAttrs)]) | 0), ((leAttrs[System.Array.index(2, leAttrs)] + leAttrs[System.Array.index(3, leAttrs)]) | 0), ((rolbAttrs[System.Array.index(2, rolbAttrs)] + rolbAttrs[System.Array.index(3, rolbAttrs)]) | 0), ((rilbAttrs[System.Array.index(2, rilbAttrs)] + rilbAttrs[System.Array.index(3, rilbAttrs)]) | 0), ((lilbAttrs[System.Array.index(2, lilbAttrs)] + lilbAttrs[System.Array.index(3, lilbAttrs)]) | 0), ((lolbAttrs[System.Array.index(2, lolbAttrs)] + lolbAttrs[System.Array.index(3, lolbAttrs)]) | 0));

                this.ReplacePlayer(team, re, this.ReplaceSimAttr(re, 1, rushDef[System.Array.index(0, rushDef)]));
                this.ReplacePlayer(team, nt, this.ReplaceSimAttr(nt, 1, rushDef[System.Array.index(1, rushDef)]));
                this.ReplacePlayer(team, le, this.ReplaceSimAttr(le, 1, rushDef[System.Array.index(2, rushDef)]));
                this.ReplacePlayer(team, rolb, this.ReplaceSimAttr(rolb, 1, rushDef[System.Array.index(3, rushDef)]));
                this.ReplacePlayer(team, rilb, this.ReplaceSimAttr(rilb, 1, rushDef[System.Array.index(4, rushDef)]));
                this.ReplacePlayer(team, lilb, this.ReplaceSimAttr(lilb, 1, rushDef[System.Array.index(5, rushDef)]));
                this.ReplacePlayer(team, lolb, this.ReplaceSimAttr(lolb, 1, rushDef[System.Array.index(6, rushDef)]));
                this.ReplacePlayer(team, rcb, this.ReplaceSimAttr(rcb, 1, 0));
                this.ReplacePlayer(team, lcb, this.ReplaceSimAttr(lcb, 1, 0));
                this.ReplacePlayer(team, fs, this.ReplaceSimAttr(fs, 1, 0));
                this.ReplacePlayer(team, ss, this.ReplaceSimAttr(ss, 1, rushDef[System.Array.index(7, rushDef)]));
            },
            /**
             * replaces the sim attribute specified.
             *
             * @instance
             * @private
             * @this TSBTool.TecmonsterTSB1SimAutoUpdater
             * @memberof TSBTool.TecmonsterTSB1SimAutoUpdater
             * @param   {string}    line        Like: 
             "LOLB, trev ALBERTS, Face=0x26, #51, 25, 31, 31, 31, 38, 31 ,[30, 20 ]"
             * @param   {number}    num         1 -&gt; '30', 2-&gt;'20' above.
             * @param   {number}    newValue    the new value
             * @return  {string}                The input string with the specified replacement.
             */
            ReplaceSimAttr: function (line, num, newValue) {
                var ret = line;
                if (this.m_SimRegex == null) {
                    this.m_SimRegex = new System.Text.RegularExpressions.Regex.ctor("\\[\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*\\]");
                }
                var m = this.m_SimRegex.match(line);
                if (m != null) {
                    var index = m.getGroups().get(num).getIndex();
                    var len = m.getGroups().get(num).toString().length;
                    ret = System.String.format("{0}{1}{2}", line.substr(0, index), Bridge.box(newValue, System.Int32), line.substr(((index + len) | 0)));
                }
                return ret;
            }
        }
    });

    /**
     * Summary description for TecmoToolFactory.
     *
     * @public
     * @class TSBTool.TecmoToolFactory
     */
    Bridge.define("TSBTool.TecmoToolFactory", {
        statics: {
            fields: {
                ORIG_NES_TSB1_LEN: 0,
                CXROM_V105_LEN: 0,
                CXROM_V111_LEN: 0,
                SNES_TSB1_LEN: 0
            },
            ctors: {
                init: function () {
                    this.ORIG_NES_TSB1_LEN = 393232;
                    this.CXROM_V105_LEN = 524304;
                    this.CXROM_V111_LEN = 786448;
                    this.SNES_TSB1_LEN = 1572864;
                }
            },
            methods: {
                GetToolForRom: function (rom) {
                    var tool = null;
                    var type = TSBTool.ROM_TYPE.NONE;
                    try {
                        type = TSBTool.TecmoToolFactory.CheckRomType(rom);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        var e;
                        if (Bridge.is($e1, System.UnauthorizedAccessException)) {
                            type = TSBTool.ROM_TYPE.READ_ONLY_ERROR;
                            TSBTool.StaticUtils.ShowError("ERROR opening ROM, Please check ROM to make sure it's not 'read-only'.");
                            return null;
                        } else {
                            e = $e1;
                            TSBTool.StaticUtils.ShowError(System.String.format("ERROR determining ROM type. Exception=\n{0}\n{1}", e.Message, e.StackTrace));
                            return null;
                        }
                    }

                    if (type === TSBTool.ROM_TYPE.CXROM_v105 || type === TSBTool.ROM_TYPE.CXROM_v111) {
                        TSBTool.TecmoTool.Teams = function (_o1) {
                                _o1.add("bills");
                                _o1.add("dolphins");
                                _o1.add("patriots");
                                _o1.add("jets");
                                _o1.add("bengals");
                                _o1.add("browns");
                                _o1.add("ravens");
                                _o1.add("steelers");
                                _o1.add("colts");
                                _o1.add("texans");
                                _o1.add("jaguars");
                                _o1.add("titans");
                                _o1.add("broncos");
                                _o1.add("chiefs");
                                _o1.add("raiders");
                                _o1.add("chargers");
                                _o1.add("redskins");
                                _o1.add("giants");
                                _o1.add("eagles");
                                _o1.add("cowboys");
                                _o1.add("bears");
                                _o1.add("lions");
                                _o1.add("packers");
                                _o1.add("vikings");
                                _o1.add("buccaneers");
                                _o1.add("saints");
                                _o1.add("falcons");
                                _o1.add("panthers");
                                _o1.add("AFC");
                                _o1.add("NFC");
                                _o1.add("49ers");
                                _o1.add("rams");
                                _o1.add("seahawks");
                                _o1.add("cardinals");
                                return _o1;
                            }(new (System.Collections.Generic.List$1(System.String)).ctor());
                        var cxt = new TSBTool.CXRomTSBTool(rom, type);
                        tool = cxt;
                        if (type === TSBTool.ROM_TYPE.CXROM_v111) {
                            var test = cxt.GetName("49ers", "QB1");
                            if (test == null) {
                                tool = new TSBTool.CXRomTSBTool(rom, TSBTool.ROM_TYPE.CXROM_v105);
                            }
                        }
                    } else if (type === TSBTool.ROM_TYPE.SNES_TSB1) {
                        TSBTool.TecmoTool.Teams = function (_o2) {
                                _o2.add("bills");
                                _o2.add("colts");
                                _o2.add("dolphins");
                                _o2.add("patriots");
                                _o2.add("jets");
                                _o2.add("bengals");
                                _o2.add("browns");
                                _o2.add("oilers");
                                _o2.add("steelers");
                                _o2.add("broncos");
                                _o2.add("chiefs");
                                _o2.add("raiders");
                                _o2.add("chargers");
                                _o2.add("seahawks");
                                _o2.add("cowboys");
                                _o2.add("giants");
                                _o2.add("eagles");
                                _o2.add("cardinals");
                                _o2.add("redskins");
                                _o2.add("bears");
                                _o2.add("lions");
                                _o2.add("packers");
                                _o2.add("vikings");
                                _o2.add("buccaneers");
                                _o2.add("falcons");
                                _o2.add("rams");
                                _o2.add("saints");
                                _o2.add("49ers");
                                return _o2;
                            }(new (System.Collections.Generic.List$1(System.String)).ctor());
                        tool = new TSBTool.SNES_TecmoTool(rom);
                    } else if (type === TSBTool.ROM_TYPE.SNES_TSB2) {
                        tool = new TSBTool2.TSB2Tool.$ctor1(rom);
                    } else if (type === TSBTool.ROM_TYPE.SNES_TSB3) {
                        tool = new TSBTool2.TSB3Tool.$ctor1(rom);
                    } else {
                        TSBTool.TecmoTool.Teams = function (_o3) {
                                _o3.add("bills");
                                _o3.add("colts");
                                _o3.add("dolphins");
                                _o3.add("patriots");
                                _o3.add("jets");
                                _o3.add("bengals");
                                _o3.add("browns");
                                _o3.add("oilers");
                                _o3.add("steelers");
                                _o3.add("broncos");
                                _o3.add("chiefs");
                                _o3.add("raiders");
                                _o3.add("chargers");
                                _o3.add("seahawks");
                                _o3.add("redskins");
                                _o3.add("giants");
                                _o3.add("eagles");
                                _o3.add("cardinals");
                                _o3.add("cowboys");
                                _o3.add("bears");
                                _o3.add("lions");
                                _o3.add("packers");
                                _o3.add("vikings");
                                _o3.add("buccaneers");
                                _o3.add("49ers");
                                _o3.add("rams");
                                _o3.add("saints");
                                _o3.add("falcons");
                                return _o3;
                            }(new (System.Collections.Generic.List$1(System.String)).ctor());
                        tool = new TSBTool.TecmoTool.$ctor1(rom);
                    }
                    return tool;
                },
                /**
                 * returns 0 if regular NES TSB rom
                         1 if it's cxrom TSBROM type.
                 Throws exceptions (UnauthorizedAccessException and others)
                 *
                 * @static
                 * @public
                 * @this TSBTool.TecmoToolFactory
                 * @memberof TSBTool.TecmoToolFactory
                 * @param   {Array.<number>}      rom
                 * @return  {TSBTool.ROM_TYPE}
                 */
                CheckRomType: function (rom) {
                    var ret = TSBTool.ROM_TYPE.NONE;
                    var s1 = null;
                    try {
                        var len = System.Int64(rom.length);
                        if (len.equals(System.Int64(TSBTool.TecmoToolFactory.ORIG_NES_TSB1_LEN))) {
                            ret = TSBTool.ROM_TYPE.NES_ORIGINAL_TSB;
                        } else if (len.equals(System.Int64(TSBTool.TecmoToolFactory.CXROM_V105_LEN))) {
                            ret = TSBTool.ROM_TYPE.CXROM_v105;
                        } else if (len.equals(System.Int64(TSBTool.TecmoToolFactory.CXROM_V111_LEN))) {
                            ret = TSBTool.ROM_TYPE.CXROM_v111;
                        } else if (len.equals(System.Int64(TSBTool.TecmoToolFactory.SNES_TSB1_LEN))) {
                            ret = TSBTool.ROM_TYPE.SNES_TSB1;
                        } else if (TSBTool2.TSB2Tool.IsTecmoSuperBowl2Rom(rom)) {
                            ret = TSBTool.ROM_TYPE.SNES_TSB2;
                        } else if (TSBTool2.TSB3Tool.IsTecmoSuperBowl3Rom(rom)) {
                            ret = TSBTool.ROM_TYPE.SNES_TSB3;
                        }
                        TSBTool.StaticUtils.WriteError("ROM Type = " + (System.Enum.toString(TSBTool.ROM_TYPE, ret) || ""));
                    } finally {
                        if (s1 != null) {
                            s1.Close();
                        }
                    }
                    return ret;
                }
            }
        }
    });

    Bridge.define("TSBTool.TSBContentType", {
        $kind: "enum",
        statics: {
            fields: {
                Unknown: 0,
                TSB1: 1,
                TSB2: 2,
                TSB3: 3
            }
        }
    });

    Bridge.define("TSBTool.TSBPlayer", {
        $kind: "enum",
        statics: {
            fields: {
                QB1: 0,
                QB2: 1,
                RB1: 2,
                RB2: 3,
                RB3: 4,
                RB4: 5,
                WR1: 6,
                WR2: 7,
                WR3: 8,
                WR4: 9,
                TE1: 10,
                TE2: 11,
                C: 12,
                LG: 13,
                RG: 14,
                LT: 15,
                RT: 16,
                RE: 17,
                NT: 18,
                LE: 19,
                ROLB: 20,
                RILB: 21,
                LILB: 22,
                LOLB: 23,
                RCB: 24,
                LCB: 25,
                FS: 26,
                SS: 27,
                K: 28,
                P: 29
            }
        }
    });

    Bridge.define("TSBTool2.Conference", {
        $kind: "enum",
        statics: {
            fields: {
                AFC: 0,
                NFC: 1
            }
        }
    });

    /** @namespace TSBTool2 */

    /**
     * Summary description for InputParser.
     *
     * @public
     * @class TSBTool2.InputParser
     */
    Bridge.define("TSBTool2.InputParser", {
        statics: {
            fields: {
                scheduleState: 0,
                rosterState: 0,
                numberRegex: null,
                teamRegex: null,
                simDataRegex: null,
                weekRegex: null,
                gameRegex: null,
                posNameFaceRegex: null,
                yearRegex: null,
                returnTeamRegex: null,
                setRegex: null,
                offensiveFormationRegex: null,
                playbookRegex: null,
                juiceRegex: null,
                homeRegex: null,
                awayRegex: null,
                divChampRegex: null,
                confChampRegex: null,
                uniformUsageRegex: null,
                replaceStringRegex: null,
                teamStringsRegex: null,
                seasonRegex: null,
                KickRetMan: null,
                PuntRetMan: null
            },
            ctors: {
                init: function () {
                    this.scheduleState = 0;
                    this.rosterState = 1;
                    this.numberRegex = new System.Text.RegularExpressions.Regex.ctor("(#[0-9]{1,2})");
                    this.teamRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM\\s*=\\s*([0-9a-zAT]+)");
                    this.simDataRegex = new System.Text.RegularExpressions.Regex.ctor("SimData=0[xX]([0-9a-fA-F][0-9a-fA-F])([0-3]?)");
                    this.weekRegex = new System.Text.RegularExpressions.Regex.ctor("WEEK ([1-9][0\t-7]?)");
                    this.gameRegex = new System.Text.RegularExpressions.Regex.ctor("([0-9a-z]+)\\s+at\\s+([0-9a-z]+)");
                    this.posNameFaceRegex = new System.Text.RegularExpressions.Regex.ctor("([A-Z]+[1-5]?)\\s*,\\s*([a-zA-Z \\.\\-]+),\\s*(Face=0[xX][0-9a-fA-F]+\\s*,\\s*)");
                    this.yearRegex = new System.Text.RegularExpressions.Regex.ctor("YEAR\\s*=\\s*([0-9]+)");
                    this.returnTeamRegex = new System.Text.RegularExpressions.Regex.ctor("RETURN_TEAM\\s+([A-Z1-4]+)\\s*,\\s*([A-Z1-4]+)\\s*,\\s*([A-Z1-4]+)");
                    this.setRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                    this.offensiveFormationRegex = new System.Text.RegularExpressions.Regex.ctor("OFFENSIVE_FORMATION\\s*=\\s*([a-zA-Z1234_]+)");
                    this.playbookRegex = new System.Text.RegularExpressions.Regex.ctor("PLAYBOOK\\s+(R[0-9A-Fa-f]+)\\s*,\\s*(P[0-9A-Fa-f]+)");
                    this.juiceRegex = new System.Text.RegularExpressions.Regex.ctor("JUICE\\(\\s*([0-9]{1,2}|ALL)\\s*,\\s*([0-9]{1,2})\\s*\\)");
                    this.homeRegex = new System.Text.RegularExpressions.Regex.ctor("Uniform1\\s*=\\s*0x([0-9a-fA-F]{6})");
                    this.awayRegex = new System.Text.RegularExpressions.Regex.ctor("Uniform2\\s*=\\s*0x([0-9a-fA-F]{6})");
                    this.divChampRegex = new System.Text.RegularExpressions.Regex.ctor("DivChamp\\s*=\\s*0x([0-9a-fA-F]{10})");
                    this.confChampRegex = new System.Text.RegularExpressions.Regex.ctor("ConfChamp\\s*=\\s*0x([0-9a-fA-F]{8})");
                    this.uniformUsageRegex = new System.Text.RegularExpressions.Regex.ctor("UniformUsage\\s*=\\s*0x([0-9a-fA-F]{8})");
                    this.replaceStringRegex = new System.Text.RegularExpressions.Regex.ctor("ReplaceString\\(\\s*\"([A-Za-z0-9 .]+)\"\\s*,\\s*\"([A-Za-z .]+)\"\\s*(,\\s*([0-9]+))*\\s*\\)");
                    this.teamStringsRegex = new System.Text.RegularExpressions.Regex.ctor("TEAM_ABB=([0-9A-Za-z. ]+),TEAM_CITY=([0-9A-Za-z .]+),TEAM_NAME=([0-9A-Za-z .]+)");
                    this.seasonRegex = new System.Text.RegularExpressions.Regex.ctor("^\\s*SEASON\\s+([1-3])");
                    this.KickRetMan = new System.Text.RegularExpressions.Regex.ctor("^KR\\s*,\\s*([A-Z1-4]+)$");
                    this.PuntRetMan = new System.Text.RegularExpressions.Regex.ctor("^PR\\s*,\\s*([A-Z1-4]+)$");
                }
            },
            methods: {
                CheckTextForRedundentSetCommands: function (input) {
                    var ret = new System.Text.StringBuilder();
                    var simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                    var mc = simpleSetRegex.matches(input);
                    var current = null;
                    var m = null;
                    var location1 = System.Int64(0);
                    var location2 = System.Int64(0);
                    var valueLength1 = 0;
                    var valueLength2 = 0;
                    for (var i = 0; i < mc.getCount(); i = (i + 1) | 0) {
                        current = mc.get(i);
                        location1 = TSBTool.StaticUtils.ParseLongFromHexString(current.getGroups().get(1).toString().substr(2));
                        valueLength1 = (Bridge.Int.div(current.getGroups().get(2).getLength(), 2)) | 0;
                        for (var j = (i + 1) | 0; j < mc.getCount(); j = (j + 1) | 0) {
                            m = mc.get(j);
                            location2 = TSBTool.StaticUtils.ParseLongFromHexString(m.getGroups().get(1).toString().substr(2));
                            valueLength2 = (Bridge.Int.div(m.getGroups().get(2).getLength(), 2)) | 0;
                            if ((location2.gte(location1) && location2.lte(location1.add(System.Int64((((valueLength1 - 2) | 0)))))) || (location1.gte(location2) && location1.lte(location2.add(System.Int64((((valueLength2 - 2) | 0))))))) {
                                if (!Bridge.referenceEquals(current.getGroups().get(0).toString(), m.getGroups().get(0).toString())) {
                                    ret.append("WARNING!\n 'SET' Commands modify same locations '");
                                    ret.append(current.getGroups().get(0));
                                    ret.append("' and '");
                                    ret.append(m.getGroups().get(0));
                                    ret.append("'\n");
                                }
                            }
                        }
                    }
                    return ret.toString();
                },
                GetTeam: function (line) {
                    var m = TSBTool2.InputParser.teamRegex.match(line);
                    var team = m.getGroups().get(1).toString();
                    return team;
                },
                GetSimData: function (line) {
                    var m = TSBTool2.InputParser.simDataRegex.match(line);
                    var data = m.getGroups().get(1).toString();
                    var simOffensePref = m.getGroups().get(2).toString();
                    var ret = System.Array.init([-1, -1], System.Int32);

                    if (data.length > 0) {
                        try {
                            var simData = TSBTool.StaticUtils.ParseIntFromHexString(data);
                            ret[System.Array.index(0, ret)] = simData;
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            TSBTool.StaticUtils.AddError(System.String.format("Error getting SimData with line '{0}'.", [line]));
                        }
                    }

                    if (simOffensePref.length > 0) {
                        try {
                            var so = System.Int32.parse(simOffensePref);
                            ret[System.Array.index(1, ret)] = so;
                        } catch ($e2) {
                            $e2 = System.Exception.create($e2);
                            TSBTool.StaticUtils.AddError(System.String.format("Error getting SimData with line '{0}'.", [line]));
                        }
                    }
                    return ret;
                },
                /**
                 * Expect line like '   [8, 9, 0 ]'
                 *
                 * @static
                 * @public
                 * @this TSBTool2.InputParser
                 * @memberof TSBTool2.InputParser
                 * @param   {string}            input     
                 * @param   {boolean}           useHex
                 * @return  {Array.<number>}
                 */
                GetSimVals: function (input, useHex) {
                    if (input != null) {
                        var stuff = input.trim();
                        var start = System.String.indexOf(stuff, "[");
                        var end = System.String.indexOf(stuff, "]");
                        if (start > -1 && end > -1) {
                            stuff = stuff.substr(((start + 1) | 0), ((((end - start) | 0) - 1) | 0));
                            return TSBTool2.InputParser.GetInts$1(stuff, useHex);
                        }
                    }
                    return null;
                },
                GetInts: function (input) {
                    return TSBTool2.InputParser.GetInts$1(input, false);
                },
                GetInts$1: function (input, useHex) {
                    if (input != null) {
                        var pound = System.String.indexOf(input, "#");
                        var brace = System.String.indexOf(input, "[");
                        if (pound > -1) {
                            input = input.substr(((pound + 3) | 0));
                        }
                        if (brace > -1) {
                            brace = System.String.indexOf(input, "[");
                            input = input.substr(0, brace);
                        }
                        var seps = System.Array.init([32, 44, 9], System.Char);
                        var nums = System.String.split(input, seps.map(function (i) {{ return String.fromCharCode(i); }}));
                        var j, count = 0;
                        for (j = 0; j < nums.length; j = (j + 1) | 0) {
                            if (nums[System.Array.index(j, nums)].length > 0) {
                                count = (count + 1) | 0;
                            }
                        }
                        var result = System.Array.init(count, 0, System.Int32);
                        j = 0;

                        var s = "";
                        var i = 0;
                        try {
                            for (i = 0; i < nums.length; i = (i + 1) | 0) {
                                s = nums[System.Array.index(i, nums)];
                                if (s != null && s.length > 0) {
                                    if (useHex) {
                                        result[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), result)] = TSBTool.StaticUtils.ParseIntFromHexString(s);
                                    } else {
                                        result[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), result)] = System.Int32.parse(s);
                                    }
                                }
                            }
                            return result;
                        } catch (e) {
                            e = System.Exception.create(e);
                            var error = System.String.format("Error with input '{0}', {1}, was jersey number specified?", input, e.Message);
                            TSBTool.StaticUtils.AddError(error);
                        }
                    }
                    return null;
                },
                GetJerseyNumber: function (line) {
                    var ret = -1;
                    var jerseyRegex = new System.Text.RegularExpressions.Regex.ctor("#([0-9]+)");
                    var num = jerseyRegex.match(line).getGroups().get(1).toString();
                    try {
                        ret = TSBTool.StaticUtils.ParseIntFromHexString(num);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        ret = -1;
                    }
                    return ret;
                },
                GetFace: function (line) {
                    var ret = -1;
                    var hexRegex = new System.Text.RegularExpressions.Regex.ctor("0[xX]([A-Fa-f0-9]+)");
                    var m = hexRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var num = m.getGroups().get(1).toString();
                        try {
                            ret = TSBTool.StaticUtils.ParseIntFromHexString(num);
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            ret = -1;
                            TSBTool.StaticUtils.AddError(System.String.format("Face ERROR line '{0}'", [line]));
                        }
                    }

                    return ret;
                },
                GetPosition: function (line) {
                    var pos = TSBTool2.InputParser.posNameFaceRegex.match(line).getGroups().get(1).toString();
                    return pos;
                },
                GetLastName: function (line) {
                    var ret = "";
                    var m = TSBTool2.InputParser.posNameFaceRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var name = m.getGroups().get(2).toString().trim();
                        var index = name.lastIndexOf(" ");
                        ret = name.substr(((index + 1) | 0));
                    }
                    return ret;
                },
                GetFirstName: function (line) {
                    var ret = "";
                    var m = TSBTool2.InputParser.posNameFaceRegex.match(line);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        var name = m.getGroups().get(2).toString().trim();
                        var index = name.lastIndexOf(" ");
                        if (index > -1 && index < name.length) {
                            ret = name.substr(0, index);
                        }
                    }
                    return ret;
                },
                /**
                 * @static
                 * @public
                 * @this TSBTool2.InputParser
                 * @memberof TSBTool2.InputParser
                 * @param   {string}            byteString    String in the format of a hex string (0123456789ABCDEF), must have
                 an even number of characters.
                 * @return  {Array.<number>}                  The bytes.
                 */
                GetBytesFromString: function (byteString) {
                    var ret = null;
                    var tmp = null;
                    var b;
                    if (byteString != null && byteString.length > 1 && (byteString.length % 2) === 0) {
                        tmp = System.Array.init(((Bridge.Int.div(byteString.length, 2)) | 0), 0, System.Byte);
                        for (var i = 0; i < tmp.length; i = (i + 1) | 0) {
                            b = byteString.substr(Bridge.Int.mul(i, 2), 2);
                            tmp[System.Array.index(i, tmp)] = TSBTool.StaticUtils.ParseByteFromHexString(b);
                        }
                        ret = tmp;
                    }
                    return ret;
                },
                GetHomeUniformColorString: function (line) {
                    var tmp = "";
                    var match = TSBTool2.InputParser.homeRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetAwayUniformColorString: function (line) {
                    var tmp = "";
                    var match = TSBTool2.InputParser.awayRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetConfChampColorString: function (line) {
                    var tmp = "";
                    var match = TSBTool2.InputParser.confChampRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetDivChampColorString: function (line) {
                    var tmp = "";
                    var match = TSBTool2.InputParser.divChampRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                GetUniformUsageString: function (line) {
                    var tmp = "";
                    var match = TSBTool2.InputParser.uniformUsageRegex.match(line);
                    if (!Bridge.referenceEquals(match, System.Text.RegularExpressions.Match.getEmpty())) {
                        tmp = match.getGroups().get(1).getValue();
                    }
                    return tmp;
                },
                /**
                 * Returns the text string passed, without thr trailing commas.
                 *
                 * @static
                 * @public
                 * @this TSBTool2.InputParser
                 * @memberof TSBTool2.InputParser
                 * @param   {string}    text
                 * @return  {string}
                 */
                DeleteTrailingCommas: function (text) {
                    var rs = new System.Text.RegularExpressions.Regex.ctor(",+\n");
                    var rrs = new System.Text.RegularExpressions.Regex.ctor(",+$");
                    var ret = rs.replace(text, "\n");
                    ret = rrs.replace(ret, "");

                    return ret;
                }
            }
        },
        fields: {
            tool: null,
            currentState: 0,
            showSimError: false,
            season: 0,
            currentTeam: null,
            scheduleList: null
        },
        ctors: {
            init: function () {
                this.currentState = 2;
                this.showSimError = false;
                this.season = 1;
            },
            $ctor1: function (tool) {
                this.$initialize();
                this.tool = tool;
                this.currentTeam = "bills";
            },
            ctor: function () {
                this.$initialize();
                this.currentTeam = "bills";
            }
        },
        methods: {
            ProcessFile: function (fileName) {
                try {
                    var sr = new System.IO.StreamReader.$ctor7(fileName);
                    var contents = sr.ReadToEnd();
                    sr.Close();
                    var chars = System.String.toCharArray(("\n\r"), 0, ("\n\r").length);
                    var lines = System.String.split(contents, chars.map(function (i) {{ return String.fromCharCode(i); }}));
                    this.ProcessLines(lines);
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(e.Message);
                }
            },
            ProcessText: function (content) {
                content = System.String.replaceAll(content, "\r\n", "\n");
                var lines = System.String.split(content, System.Array.init([10], System.Char).map(function (i) {{ return String.fromCharCode(i); }}));
                this.ProcessLines(lines);
            },
            ProcessLines: function (lines) {
                var i = 0;
                try {
                    for (i = 0; i < lines.length; i = (i + 1) | 0) {
                        this.ProcessLine(lines[System.Array.index(i, lines)]);
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    this.ApplySchedule();
                } catch (e) {
                    e = System.Exception.create(e);
                    var sb = new System.Text.StringBuilder("", 150);
                    sb.append("Error! ");
                    if (i < lines.length) {
                        sb.append(System.String.format("line #{0}:\t'{1}'", Bridge.box(i, System.Int32), lines[System.Array.index(i, lines)]));
                    }
                    sb.append(e.Message);
                    sb.append("\n");
                    sb.append(e.StackTrace);
                    sb.append("\n\nOperation aborted at this point. Data not applied.");
                    TSBTool.StaticUtils.ShowError(sb.toString());
                }
            },
            ApplySchedule: function () {
                if (this.scheduleList != null) {
                    this.tool.TSBTool2$ITecmoTool$ApplySchedule(this.season, this.scheduleList);
                    TSBTool.StaticUtils.ShowErrors();
                    this.scheduleList = null;
                }
            },
            ReadFromStdin: function () {
                var line = "";
                var lineNumber = 0;
                System.Console.WriteLine("Reading from standard in...");
                try {
                    while (((line = prompt())) != null) {
                        lineNumber = (lineNumber + 1) | 0;
                        this.ProcessLine(line);
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    this.ApplySchedule();
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(System.String.format("Error Processing line {0}:'{1}'.\n{2}\n{3}", Bridge.box(lineNumber, System.Int32), line, e.Message, e.StackTrace));
                }
            },
            /**
             * @instance
             * @protected
             * @this TSBTool2.InputParser
             * @memberof TSBTool2.InputParser
             * @param   {string}    line
             * @return  {void}
             */
            ProcessLine: function (line) {
                line = line.trim();
                var m;

                if (System.String.startsWith(line, "#") || Bridge.referenceEquals(line, "") || System.String.startsWith(line.toLowerCase().trim(), "schedule")) {
                    return;
                } else {
                    if (System.String.startsWith(line, "SET")) {
                        this.tool.TSBTool2$ITecmoTool$ApplySet(line);
                    } else if (!Bridge.referenceEquals(((m = TSBTool2.InputParser.seasonRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        if (this.scheduleList != null && this.scheduleList.Count > 0) {
                            this.ApplySchedule();
                        }
                        System.Int32.tryParse(m.getGroups().get(1).toString(), Bridge.ref(this, "season"));
                    } else if (!Bridge.referenceEquals(((m = TSBTool2.InputParser.playbookRegex.match(line))), System.Text.RegularExpressions.Match.getEmpty())) {
                        var runs = m.getGroups().get(1).toString();
                        var passes = m.getGroups().get(2).toString();
                        this.tool.TSBTool2$ITecmoTool$SetPlaybook(this.season, this.currentTeam, runs, passes);
                    } else if (System.String.startsWith(line, "ReplaceString")) {
                        var repMatch = TSBTool2.InputParser.replaceStringRegex.match(line);
                        var find = "";
                        var replace = "";
                        var occur = { v : -1 };
                        if (repMatch.getGroups().getCount() > 1) {
                            find = repMatch.getGroups().get(1).toString();
                            replace = repMatch.getGroups().get(2).toString();
                            if (repMatch.getGroups().getCount() > 3) {
                                System.Int32.tryParse(repMatch.getGroups().get(4).toString(), occur);
                                occur.v = (occur.v - 1) | 0;
                            }
                            var msg = TSBTool.StaticUtils.ReplaceStringInRom(this.tool.TSBTool2$ITecmoTool$OutputRom, find, replace, occur.v);
                            if (System.String.startsWith(msg, "Error")) {
                                TSBTool.StaticUtils.AddError(msg);
                            } else {
                                System.Console.WriteLine(msg);
                            }
                        } else {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Not enough info to use 'ReplaceString' function.Line={0}", [line]));
                        }
                    } else if (System.String.startsWith(line, "TEAM_ABB")) {
                        var teamStringsMatch = TSBTool2.InputParser.teamStringsRegex.match(line);
                        if (!Bridge.referenceEquals(teamStringsMatch, System.Text.RegularExpressions.Match.getEmpty())) {
                            var teamAbb = teamStringsMatch.getGroups().get(1).toString();
                            var teamCity = teamStringsMatch.getGroups().get(2).toString();
                            var teamName = teamStringsMatch.getGroups().get(3).toString();
                            var index = TSBTool2.TSB2Tool.GetTeamIndex(this.currentTeam);
                            this.tool.TSBTool2$ITecmoTool$SetTeamAbbreviation(index, teamAbb);
                            this.tool.TSBTool2$ITecmoTool$SetTeamCity(index, teamCity);
                            this.tool.TSBTool2$ITecmoTool$SetTeamName(index, teamName);
                        }
                    } else if (!Bridge.referenceEquals(TSBTool2.InputParser.teamRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {

                        this.currentState = TSBTool2.InputParser.rosterState;
                        var team = TSBTool2.InputParser.GetTeam(line);
                        var ret = this.SetCurrentTeam(team);
                        if (!ret) {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                            TSBTool.StaticUtils.AddError(System.String.format("Team input must be in the form 'TEAM = team SimData=0x1F'", null));
                            return;
                        }
                        this.HandleSimData(line);
                        /* int[] simData = GetSimData(line);
                        if (simData != null)
                        {
                           if (simData[0] > -1)
                               tool.SetTeamSimData(currentTeam, (byte)simData[0]);
                           else
                               TSBTool.StaticUtils.AddError(string.Format("Warning: No sim data for team {0}", team));

                           if (simData[1] > -1)
                               tool.SetTeamSimOffensePref(currentTeam, simData[1]);
                        }
                        else
                           TSBTool.StaticUtils.AddError(string.Format("ERROR with line '{0}'.", line));

                        /*Match oFormMatch = offensiveFormationRegex.Match(line);
                        if (oFormMatch != Match.Empty)
                        {
                           string formation = oFormMatch.Groups[1].ToString();
                           tool.SetTeamOffensiveFormation(team, formation);
                        }*/
                    } else if (!Bridge.referenceEquals(TSBTool2.InputParser.weekRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        this.currentState = TSBTool2.InputParser.scheduleState;
                        if (this.scheduleList == null) {
                            this.scheduleList = new (System.Collections.Generic.List$1(System.String)).$ctor2(300);
                        }
                        this.scheduleList.add(line);
                    } else if (!Bridge.referenceEquals(TSBTool2.InputParser.yearRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        this.SetYear(line);
                    } else if (System.String.startsWith(line, "AFC") || System.String.startsWith(line, "NFC")) {
                        var parts = System.String.split(System.String.replaceAll(line, " ", ""), System.Array.init([44], System.Char).map(function (i) {{ return String.fromCharCode(i); }}), null, 1);
                        if (parts != null && parts.length > 3) {
                            try {
                                this.tool.TSBTool2$ITecmoTool$SetProBowlPlayer(this.season, System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(TSBTool2.Conference, parts[System.Array.index(0, parts)]), TSBTool2.Conference), System.Int32)), parts[System.Array.index(1, parts)], parts[System.Array.index(2, parts)], System.Nullable.getValue(Bridge.cast(Bridge.unbox(System.Enum.parse(TSBTool2.TSBPlayer, parts[System.Array.index(3, parts)]), TSBTool2.TSBPlayer), System.Int32)));
                            } catch ($e1) {
                                $e1 = System.Exception.create($e1);
                                TSBTool.StaticUtils.AddError("Error processing line > " + (line || ""));
                            }
                        }
                    } else if (this.currentState === TSBTool2.InputParser.scheduleState) {
                        if (this.scheduleList != null) {
                            this.scheduleList.add(line);
                        }
                    } else if (this.currentState === TSBTool2.InputParser.rosterState) {
                        this.UpdateRoster(line);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("Garbage/orphin line not applied \"{0}\"", [line]));
                    }
                }
            },
            SetYear: function (line) {
                var m = TSBTool2.InputParser.yearRegex.match(line);
                var year = m.getGroups().get(1).toString();
                if (year.length < 1) {
                    TSBTool.StaticUtils.AddError(System.String.format("'{0}' is not valid.", [line]));
                } else {
                    this.tool.TSBTool2$ITecmoTool$SetYear(year);
                    System.Console.WriteLine(System.String.format("Year set to '{0}'", year));
                }
            },
            HandleSimData: function (line) {
                var simDataRegex = new System.Text.RegularExpressions.Regex.ctor("SimData\\s*=\\s*0[xX]([0-9a-fA-F]{2})");
                var m = simDataRegex.match(line);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var stuff = m.getGroups().get(1).toString();
                    this.tool.TSBTool2$ITecmoTool$SetTeamSimData(this.season, this.currentTeam, stuff);
                }
            },
            GetAwayTeam: function (line) {
                var m = TSBTool2.InputParser.gameRegex.match(line);
                var awayTeam = m.getGroups().get(1).toString();
                return awayTeam;
            },
            GetHomeTeam: function (line) {
                var m = TSBTool2.InputParser.gameRegex.match(line);
                var team = m.getGroups().get(2).toString();
                return team;
            },
            GetWeek: function (line) {
                var m = TSBTool2.InputParser.weekRegex.match(line);
                var week_str = m.getGroups().get(1).toString();
                var ret = -1;
                try {
                    ret = System.Int32.parse(week_str);
                    ret = (ret - 1) | 0;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    TSBTool.StaticUtils.AddError(System.String.format("Week '{0}' is invalid.", [week_str]));
                }
                return ret;
            },
            SetCurrentTeam: function (team) {
                if (TSBTool2.TSB2Tool.GetTeamIndex(team) < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is Invalid.", [team]));
                    return false;
                } else {
                    this.currentTeam = team;
                }
                return true;
            },
            UpdateRoster: function (line) {
                if (System.String.startsWith(line, "KR")) {
                    this.SetKickReturnMan(line);
                } else {
                    if (System.String.startsWith(line, "PR")) {
                        this.SetPuntReturnMan(line);
                    } else {
                        var m = TSBTool2.InputParser.posNameFaceRegex.match(line);
                        if (System.String.indexOf(line, "#") > -1) {
                            if (Bridge.referenceEquals(TSBTool2.InputParser.numberRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                                TSBTool.StaticUtils.AddError(System.String.format("ERROR! (jersey number) Line  {0}", [line]));
                                return;
                            }
                        }
                        var p = m.getGroups().get(1).toString();
                        if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty()) && this.tool.TSBTool2$ITecmoTool$IsValidPosition(p)) {
                            if (System.String.startsWith(line, "QB")) {
                                this.SetQB(line);
                            } else {
                                if (System.String.startsWith(line, "WR") || System.String.startsWith(line, "RB") || System.String.startsWith(line, "TE")) {
                                    this.SetSkillPlayer(line);
                                } else {
                                    if (System.String.startsWith(line, "C") || System.String.startsWith(line, "RG") || System.String.startsWith(line, "LG") || System.String.startsWith(line, "RT") || System.String.startsWith(line, "LT")) {
                                        this.SetOLPlayer(line);
                                    } else if (System.String.indexOf(line, "LB") === 2 || System.String.indexOf(line, "CB") === 1 || System.String.startsWith(line, "RE") || System.String.startsWith(line, "LE") || System.String.startsWith(line, "NT") || System.String.startsWith(line, "SS") || System.String.startsWith(line, "FS") || System.String.startsWith(line, "DB")) {
                                        this.SetDefensivePlayer(line);
                                    } else if (System.String.startsWith(line, "P") || System.String.startsWith(line, "K")) {
                                        this.SetKickPlayer(line);
                                    }
                                }
                            }
                        } else {
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! With line \"{0}\"     team = {1}", line, this.currentTeam));
                        }
                    }
                }
            },
            SetQB: function (line) {
                var fname = TSBTool2.InputParser.GetFirstName(line);
                var lname = TSBTool2.InputParser.GetLastName(line);
                var pos = TSBTool2.InputParser.GetPosition(line);
                var face = TSBTool2.InputParser.GetFace(line);
                var jerseyNumber = TSBTool2.InputParser.GetJerseyNumber(line);
                if (face > -1) {
                    this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                }
                if (jerseyNumber < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error with jersey number for '{0} {1}', setting to 0.", fname, lname));
                    jerseyNumber = 0;
                }
                this.tool.TSBTool2$ITecmoTool$InsertPlayerName(this.season, this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                var vals = TSBTool.StaticUtils.GetTsbAbilities(TSBTool2.InputParser.GetInts$1(line, false));
                var simVals = TSBTool2.InputParser.GetSimVals(line, true);
                if (vals != null && vals.length > 9) {
                    this.tool.TSBTool2$ITecmoTool$SetQBAbilities(this.season, this.currentTeam, pos, vals);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! could not set ability data for {0} {1},", this.currentTeam, pos));
                }
                if (face > -1) {
                    this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                } else {
                    if (this.showSimError) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                    }
                }
            },
            SetSkillPlayer: function (line) {
                var fname = TSBTool2.InputParser.GetFirstName(line);
                var lname = TSBTool2.InputParser.GetLastName(line);
                var pos = TSBTool2.InputParser.GetPosition(line);
                var face = TSBTool2.InputParser.GetFace(line);
                var jerseyNumber = TSBTool2.InputParser.GetJerseyNumber(line);
                this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                this.tool.TSBTool2$ITecmoTool$InsertPlayerName(this.season, this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                var vals = TSBTool.StaticUtils.GetTsbAbilities(TSBTool2.InputParser.GetInts$1(line, false));
                var simVals = TSBTool2.InputParser.GetSimVals(line, true);
                if (vals != null && vals.length > 6) {
                    this.tool.TSBTool2$ITecmoTool$SetSkillPlayerAbilities(this.season, this.currentTeam, pos, vals);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No player data specified.", [line]));
                }
                /* if(simVals!= null&& simVals.Length > 3)
                   tool.SetSkillSimData(currentTeam,pos,simVals);
                else  if(showSimError)
                   TSBTool.StaticUtils.AddError(string.Format("Warning! On line '{0}'. No sim data specified.",line));*/
            },
            SetOLPlayer: function (line) {
                var fname = TSBTool2.InputParser.GetFirstName(line);
                var lname = TSBTool2.InputParser.GetLastName(line);
                var pos = TSBTool2.InputParser.GetPosition(line);
                var face = TSBTool2.InputParser.GetFace(line);
                var jerseyNumber = TSBTool2.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.StaticUtils.GetTsbAbilities(TSBTool2.InputParser.GetInts$1(line, false));

                this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                this.tool.TSBTool2$ITecmoTool$InsertPlayerName(this.season, this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                if (vals != null && vals.length > 3) {
                    this.tool.TSBTool2$ITecmoTool$SetOLPlayerAbilities(this.season, this.currentTeam, pos, vals);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No player data specified.", [line]));
                }
            },
            SetDefensivePlayer: function (line) {
                var fname = TSBTool2.InputParser.GetFirstName(line);
                var lname = TSBTool2.InputParser.GetLastName(line);
                var pos = TSBTool2.InputParser.GetPosition(line);
                var face = TSBTool2.InputParser.GetFace(line);
                var jerseyNumber = TSBTool2.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.StaticUtils.GetTsbAbilities(TSBTool2.InputParser.GetInts$1(line, false));
                var simVals = TSBTool2.InputParser.GetSimVals(line, true);

                this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                this.tool.TSBTool2$ITecmoTool$InsertPlayerName(this.season, this.currentTeam, pos, fname, lname, (jerseyNumber & 255));

                if (vals != null && vals.length > 5) {
                    this.tool.TSBTool2$ITecmoTool$SetDefensivePlayerAbilities(this.season, this.currentTeam, pos, vals);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. Invalid player attributes.", [line]));
                }
                if (simVals != null && simVals.length > 1) {
                    this.tool.TSBTool2$ITecmoTool$SetDefensiveSimData(this.season, this.currentTeam, pos, simVals);
                } else {
                    if (this.showSimError) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning! On line '{0}'. No sim data specified.", [line]));
                    }
                }
            },
            SetKickPlayer: function (line) {
                var fname = TSBTool2.InputParser.GetFirstName(line);
                var lname = TSBTool2.InputParser.GetLastName(line);
                var pos = TSBTool2.InputParser.GetPosition(line);
                var face = TSBTool2.InputParser.GetFace(line);
                var jerseyNumber = TSBTool2.InputParser.GetJerseyNumber(line);
                var vals = TSBTool.StaticUtils.GetTsbAbilities(TSBTool2.InputParser.GetInts$1(line, false));
                var simVals = TSBTool2.InputParser.GetSimVals(line, true);

                this.tool.TSBTool2$ITecmoTool$SetFace(this.season, this.currentTeam, pos, face);
                this.tool.TSBTool2$ITecmoTool$InsertPlayerName(this.season, this.currentTeam, pos, fname, lname, (jerseyNumber & 255));
                if (System.String.startsWith(line, "K")) {
                    if (vals != null && vals.length > 7) {
                        this.tool.TSBTool2$ITecmoTool$SetKickerAbilities(this.season, this.currentTeam, pos, vals);
                    }
                } else {
                    if (vals != null && vals.length > 6) {
                        this.tool.TSBTool2$ITecmoTool$SetPunterAbilities(this.season, this.currentTeam, pos, vals);
                    }
                }

            },
            SetKickReturnMan: function (line) {
                var m = TSBTool2.InputParser.KickRetMan.match(line);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pos = m.getGroups().get(1).toString();
                    if (this.tool.TSBTool2$ITecmoTool$IsValidPosition(pos)) {
                        this.tool.TSBTool2$ITecmoTool$SetKickReturner(this.season, this.currentTeam, pos);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                    }
                }
            },
            SetPuntReturnMan: function (line) {
                var m = TSBTool2.InputParser.PuntRetMan.match(line);
                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pos = m.getGroups().get(1).toString();
                    if (this.tool.TSBTool2$ITecmoTool$IsValidPosition(pos)) {
                        this.tool.TSBTool2$ITecmoTool$SetPuntReturner(this.season, this.currentTeam, pos);
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR with line '{0}'.", [line]));
                    }
                }
            }
        }
    });

    Bridge.define("TSBTool2.ITecmoTool", {
        $kind: "interface"
    });

    /**
     * Summary description for ScheduleHelper.
     *
     * @public
     * @class TSBTool2.SNES_ScheduleHelper
     */
    Bridge.define("TSBTool2.SNES_ScheduleHelper", {
        statics: {
            fields: {
                AUTO_CORRECT_SCHEDULE: false
            },
            ctors: {
                init: function () {
                    this.AUTO_CORRECT_SCHEDULE = true;
                }
            }
        },
        fields: {
            weekOneStartLoc: 0,
            teamGames: null,
            week: 0,
            week_game_count: 0,
            total_game_count: 0,
            gameRegex: null,
            gamesPerWeek: null,
            mTool: null,
            Teams: null
        },
        ctors: {
            init: function () {
                this.weekOneStartLoc = 1438654;
                this.gameRegex = new System.Text.RegularExpressions.Regex.ctor("([0-9a-z]+)\\s+at\\s+([0-9a-z]+)");
                this.gamesPerWeek = System.Array.init([
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14, 
                    14
                ], System.Int32);
            },
            ctor: function (tool) {
                this.$initialize();
                this.mTool = tool;
            }
        },
        methods: {
            GetTeamIndex: function (team) {
                return this.Teams.indexOf(team);
            },
            GetTeamFromIndex: function (index) {
                return this.Teams.getItem(index);
            },
            SetWeekOneLocation: function (loc, gamesPerWeek, teams) {
                this.weekOneStartLoc = loc;
                this.gamesPerWeek = gamesPerWeek;
                this.Teams = teams;
            },
            CloseWeek: function () {
                if (this.week > -1) {
                    var i = this.week_game_count;
                    while (i < 14) {
                        this.ScheduleGame$2(255, 255, this.week, i);
                        i = (i + 1) | 0;
                    }
                }
                this.week = (this.week + 1) | 0;
                this.total_game_count = (this.total_game_count + this.week_game_count) | 0;
                this.week_game_count = 0;
            },
            /**
             * Applies a schedule to the rom.
             *
             * @instance
             * @public
             * @this TSBTool2.SNES_ScheduleHelper
             * @memberof TSBTool2.SNES_ScheduleHelper
             * @param   {System.Collections.Generic.List$1}    lines    the contents of the schedule file.
             * @return  {void}
             */
            ApplySchedule: function (lines) {
                this.week = -1;
                this.week_game_count = 0;
                this.total_game_count = 0;

                if (TSBTool2.SNES_ScheduleHelper.AUTO_CORRECT_SCHEDULE && this.gamesPerWeek.length === 18) {
                    lines = this.Ensure18Weeks(lines);
                }

                var line;
                for (var i = 0; i < lines.Count; i = (i + 1) | 0) {
                    line = Bridge.toString(lines.getItem(i)).trim().toLowerCase();
                    if (System.String.startsWith(line, "#") || line.length < 3) {
                    } else if (System.String.startsWith(line, "week")) {
                        if (this.week > 18) {
                            TSBTool.StaticUtils.AddError("Error! You can have a maximum of 18 weeks in a season.");
                            break;
                        }
                        this.CloseWeek();
                        TSBTool.StaticUtils.WriteError(System.String.format("Scheduleing {0}", [line]));
                    } else {
                        this.ScheduleGame$1(line);
                    }
                }
                this.CloseWeek();

                if (this.week < 18 && this.gamesPerWeek.length === 18) {
                    TSBTool.StaticUtils.AddError("Warning! You didn't schedule all 18 weeks. The schedule could be messed up.");
                }
                if (this.teamGames != null) {
                    for (var i1 = 0; i1 < this.teamGames.length; i1 = (i1 + 1) | 0) {
                        if (this.teamGames[System.Array.index(i1, this.teamGames)] !== 16) {
                            TSBTool.StaticUtils.AddError(System.String.format("Warning! The {0} have {1} games scheduled.", this.GetTeamFromIndex(i1), Bridge.box(this.teamGames[System.Array.index(i1, this.teamGames)], System.Int32)));
                        }
                    }
                }
            },
            /**
             * Attempts to schedule a game.
             *
             * @instance
             * @private
             * @this TSBTool2.SNES_ScheduleHelper
             * @memberof TSBTool2.SNES_ScheduleHelper
             * @param   {string}     line
             * @return  {boolean}            True on success, false on failure.
             */
            ScheduleGame$1: function (line) {
                var ret = false;
                var m = this.gameRegex.match(line);
                var awayTeam, homeTeam;

                if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                    awayTeam = m.getGroups().get(1).toString();
                    homeTeam = m.getGroups().get(2).toString();
                    if (this.week_game_count > ((Bridge.Int.div(this.Teams.Count, 2)) | 0)) {
                        TSBTool.StaticUtils.AddError(System.String.format("Error! Week {0}: You can have no more than {1} games in a week.", Bridge.box(((this.week + 1) | 0), System.Int32), Bridge.box(((Bridge.Int.div(this.Teams.Count, 2)) | 0), System.Int32)));
                        ret = false;
                    } else if (this.ScheduleGame(awayTeam, homeTeam, this.week, this.week_game_count)) {
                        this.week_game_count = (this.week_game_count + 1) | 0;
                        ret = true;
                    }

                }
                var total_possible_games = Bridge.Int.mul((((Bridge.Int.div(this.Teams.Count, 2)) | 0)), 16);
                if (((this.total_game_count + this.week_game_count) | 0) > total_possible_games) {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! Week {0}: There are more than {1} games scheduled.", Bridge.box(((this.week + 1) | 0), System.Int32), Bridge.box(total_possible_games, System.Int32)));
                }
                return ret;
            },
            /**
             * @instance
             * @public
             * @this TSBTool2.SNES_ScheduleHelper
             * @memberof TSBTool2.SNES_ScheduleHelper
             * @param   {string}     awayTeam      
             * @param   {string}     homeTeam      
             * @param   {number}     week          Week is 0-16 (0 = week 1).
             * @param   {number}     gameOfWeek
             * @return  {boolean}
             */
            ScheduleGame: function (awayTeam, homeTeam, week, gameOfWeek) {
                var awayIndex = this.GetTeamIndex(awayTeam);
                var homeIndex = this.GetTeamIndex(homeTeam);

                if (awayIndex === -1 || homeIndex === -1) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error! Week {2}: Game '{0} at {1}'", awayTeam, homeTeam, Bridge.box(((week + 1) | 0), System.Int32)));
                    return false;
                }

                if (awayIndex === homeIndex && awayIndex < this.Teams.Count) {
                    TSBTool.StaticUtils.AddError(System.String.format("Warning! Week {0}: The {1} are scheduled to play against themselves.", Bridge.box(((week + 1) | 0), System.Int32), awayTeam));
                }

                if (week < 0 || week > 17) {
                    TSBTool.StaticUtils.AddError(System.String.format("Week {0} is not valid. Weeks range 1 - 18.", [Bridge.box(((week + 1) | 0), System.Int32)]));
                    return false;
                }
                if (this.GameLocation(week, gameOfWeek) < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("Game {0} for week {1} is not valid. Valid games for week {1} are 0-{2}.", Bridge.box(gameOfWeek, System.Int32), Bridge.box(week, System.Int32), Bridge.box(((this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)] - 1) | 0), System.Int32)));
                    TSBTool.StaticUtils.AddError(System.String.format("{0} at {1}", awayTeam, homeTeam));
                }

                this.ScheduleGame$2(awayIndex, homeIndex, week, gameOfWeek);

                if (Bridge.referenceEquals(awayTeam, "null") || Bridge.referenceEquals(homeTeam, "null")) {
                    return false;
                }
                return true;
            },
            ScheduleGame$2: function (awayTeamIndex, homeTeamIndex, week, gameOfWeek) {
                var location = this.GameLocation(week, gameOfWeek);
                if (location > 0) {
                    this.mTool.TSBTool2$ITecmoTool$SetByte(location, (awayTeamIndex & 255));
                    this.mTool.TSBTool2$ITecmoTool$SetByte(((location + 1) | 0), (homeTeamIndex & 255));
                    if (awayTeamIndex < this.Teams.Count) {
                        this.IncrementTeamGames(awayTeamIndex);
                        this.IncrementTeamGames(homeTeamIndex);
                    }
                }
                /* else
                {
                   TSBTool.StaticUtils.AddError(string.Format("INVALID game for ROM. Week={0} Game of Week ={1}",
                       week,gameOfWeek);
                }*/
            },
            /**
             * Returns a string like "49ers at giants", for a valid week, game of week combo.
             *
             * @instance
             * @public
             * @this TSBTool2.SNES_ScheduleHelper
             * @memberof TSBTool2.SNES_ScheduleHelper
             * @param   {number}    week          The week in question.
             * @param   {number}    gameOfWeek    The game to get.
             * @return  {string}                  Returns a string like "49ers at giants", for a valid week, game of week combo, returns null
             upon error.
             */
            GetGame: function (week, gameOfWeek) {
                var $t, $t1;
                var location = this.GameLocation(week, gameOfWeek);
                if (location === -1) {
                    return null;
                }
                var awayIndex = ($t = this.mTool.TSBTool2$ITecmoTool$OutputRom)[System.Array.index(location, $t)];
                var homeIndex = ($t1 = this.mTool.TSBTool2$ITecmoTool$OutputRom)[System.Array.index(((location + 1) | 0), $t1)];
                var ret = "";

                if (awayIndex < this.Teams.Count) {
                    ret = System.String.format("{0} at {1}", this.GetTeamFromIndex(awayIndex), this.GetTeamFromIndex(homeIndex));
                }
                return ret;
            },
            /**
             * Returns a week from the season.
             *
             * @instance
             * @public
             * @this TSBTool2.SNES_ScheduleHelper
             * @memberof TSBTool2.SNES_ScheduleHelper
             * @param   {number}    week    The week to get [0-16] (0= week 1).
             * @return  {string}
             */
            GetWeek: function (week) {
                if (week < 0 || week > ((this.gamesPerWeek.length - 1) | 0)) {
                    return null;
                }
                var sb = new System.Text.StringBuilder("", 280);
                sb.append(System.String.format("WEEK {0}\n", [Bridge.box(((week + 1) | 0), System.Int32)]));

                var game;

                for (var i = 0; i < this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)]; i = (i + 1) | 0) {
                    game = this.GetGame(week, i);
                    if (game != null && game.length > 0) {
                        sb.append(System.String.format("{0}\n", [game]));
                    }
                }
                sb.append("\n");
                return sb.toString();
            },
            GetSchedule: function () {
                var sb = new System.Text.StringBuilder("", 5040);
                for (var week = 0; week < this.gamesPerWeek.length; week = (week + 1) | 0) {
                    sb.append(this.GetWeek(week));
                }

                return sb.toString();
            },
            GameLocation: function (week, gameOfweek) {
                if (week < 0 || week > ((this.gamesPerWeek.length - 1) | 0) || gameOfweek > this.gamesPerWeek[System.Array.index(week, this.gamesPerWeek)] || gameOfweek < 0) {
                    return -1;
                }

                var offset = 0;
                for (var i = 0; i < week; i = (i + 1) | 0) {
                    offset = (offset + (Bridge.Int.mul(this.gamesPerWeek[System.Array.index(i, this.gamesPerWeek)], 2))) | 0;
                }

                offset = (offset + (Bridge.Int.mul(gameOfweek, 2))) | 0;
                var location = (this.weekOneStartLoc + offset) | 0;
                return location;
            },
            IncrementTeamGames: function (teamIndex) {
                if (this.teamGames == null) {
                    this.teamGames = System.Array.init(this.Teams.Count, 0, System.Int32);
                }
                if (teamIndex < this.teamGames.length) {
                    this.teamGames[System.Array.index(teamIndex, this.teamGames)] = (this.teamGames[System.Array.index(teamIndex, this.teamGames)] + 1) | 0;
                }

            },
            Ensure18Weeks: function (lines) {

                var wks = this.CountWeeks(lines);
                var line1, line2;
                for (var i = (lines.Count - 2) | 0; i > 0; i = (i - 2) | 0) {
                    line1 = Bridge.toString(lines.getItem(i));
                    line2 = Bridge.toString(lines.getItem(((i + 1) | 0)));
                    if (wks > 17) {
                        break;
                    } else if (System.String.indexOf(line1, "at") > -1 && System.String.indexOf(line2, "at") > -1) {
                        lines.insert(((i + 1) | 0), "WEEK ");
                        i = (i - 1) | 0;
                        wks = (wks + 1) | 0;
                    }
                }

                return lines;
            },
            CountWeeks: function (lines) {
                var $t;
                var count = 0;
                $t = Bridge.getEnumerator(lines);
                try {
                    while ($t.moveNext()) {
                        var line = $t.Current;
                        if (System.String.indexOf(line.toLowerCase(), "week") > -1) {
                            count = (count + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                return count;
            }
        }
    });

    Bridge.define("TSBTool2.TecmoConverter", {
        statics: {
            methods: {
                Convert: function (from, to, content) {
                    if (from === to) {
                        return content;
                    }
                    var retVal = "";
                    if (from === TSBTool.TSBContentType.TSB1 && to === TSBTool.TSBContentType.TSB2) {
                        retVal = TSBTool2.TSB2Converter.ConvertToTSB2FromTSB1(content);
                    } else if (from === TSBTool.TSBContentType.TSB1 && to === TSBTool.TSBContentType.TSB3) {
                        retVal = TSBTool2.TSB2Converter.ConvertToTSB2FromTSB1(content);
                        retVal = TSBTool2.TSB3Converter.ConvertToTSB3FromTSB2(retVal);
                    } else if (from === TSBTool.TSBContentType.TSB2 && to === TSBTool.TSBContentType.TSB3) {
                        retVal = TSBTool2.TSB3Converter.ConvertToTSB3FromTSB2(content);
                    } else if (from === TSBTool.TSBContentType.TSB2 && to === TSBTool.TSBContentType.TSB1) {
                        retVal = TSBTool2.TSB1Converter.ConvertToTSB1FromTSB2(content);
                    } else if (from === TSBTool.TSBContentType.TSB3 && to === TSBTool.TSBContentType.TSB1) {
                        retVal = TSBTool2.TSB2Converter.ConvertToTSB2FromTSB3(content);
                        retVal = TSBTool2.TSB1Converter.ConvertToTSB1FromTSB2(retVal);
                    } else if (from === TSBTool.TSBContentType.TSB3 && to === TSBTool.TSBContentType.TSB2) {
                        retVal = TSBTool2.TSB2Converter.ConvertToTSB2FromTSB3(content);
                    }
                    return retVal;
                }
            }
        }
    });

    Bridge.define("TSBTool2.TSB1Converter", {
        statics: {
            fields: {
                CONVERT_MSG: null
            },
            ctors: {
                init: function () {
                    this.CONVERT_MSG = "Converting between TSB1, TSB2 and TSB3 data is not exact and one does not 'un-do' the other.\r\nWhen converting from TSB1 --> TSB2 a 'Auto-update' sim data operation is performed (feature taken from TSBToolSupreme).\r\n\r\n";
                }
            },
            methods: {
                ConvertToTSB1FromTSB2: function (input) {
                    var $t;
                    input = System.String.replaceAll(input, "\r\n", "\n");
                    var lines = System.String.split(input, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    var builder = new System.Text.StringBuilder("", ((input.length + Bridge.Int.mul(lines.length, 2)) | 0));
                    var tmp = "";
                    $t = Bridge.getEnumerator(lines);
                    try {
                        while ($t.moveNext()) {
                            var line = $t.Current;
                            if (TSBTool2.TSB1Converter.IsPlayerLine(line)) {
                                tmp = TSBTool2.TSB1Converter.ConvertToTSB1Player(line);
                                builder.append(tmp);
                            } else if (System.String.startsWith(line, "SEASON")) {
                                builder.append("#" + (line || ""));
                            } else if (System.String.startsWith(line, "PLAYBOOK")) {
                                tmp = TSBTool2.TSB1Converter.ConvertPlaybook(line);
                                builder.append(tmp);
                            } else if (System.String.startsWith(line, "#COLORS")) {
                                builder.append(line.substr(1));
                            } else if (System.String.startsWith(line, "TEAM_ABB")) {
                                builder.append(line.toUpperCase());
                            } else {
                                builder.append(line);
                            }
                            builder.append("\n");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    var retVal = TSBTool.TecmonsterTSB1SimAutoUpdater.AutoUpdatePlayerSimData(builder.toString());
                    return retVal;
                },
                ConvertPlaybook: function (line) {
                    return "#" + (line || "");
                },
                IsPlayerLine: function (line) {
                    var index = System.String.indexOf(line, String.fromCharCode(44));
                    var pos = "";
                    if (index > 1) {
                        pos = line.substr(0, index);
                    }
                    return TSBTool2.TSB2Tool.positionNames.indexOf(pos) > -1;
                },
                ConvertToTSB1Player: function (tsb2PlayerLine) {
                    var simIndex = System.String.indexOf(tsb2PlayerLine, "[");
                    var simString = "";
                    var parts = null;
                    if (simIndex > -1) {
                        simString = tsb2PlayerLine.substr(simIndex);
                        parts = System.String.split(tsb2PlayerLine.substr(0, ((simIndex - 1) | 0)), System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    } else {
                        parts = System.String.split(tsb2PlayerLine, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    }

                    var rs = parts[System.Array.index(4, parts)];
                    var rp = parts[System.Array.index(5, parts)];
                    parts[System.Array.index(5, parts)] = rs;
                    parts[System.Array.index(4, parts)] = rp;

                    var attrs = new (System.Collections.Generic.List$1(System.String)).$ctor1(parts);

                    var sb = new System.Text.StringBuilder("", 60);
                    var pos = parts[System.Array.index(0, parts)].trim();
                    switch (pos) {
                        case "QB1": 
                        case "QB2": 
                            attrs.removeAt(13);
                            attrs.removeAt(8);
                            break;
                        case "K": 
                            attrs.removeAt(9);
                            attrs.removeAt(8);
                            break;
                        case "LB5": 
                        case "DB3": 
                        case "RE2": 
                        case "NT2": 
                        case "LE2": 
                            return "#" + (tsb2PlayerLine || "");
                        default: 
                            attrs.removeAt(8);
                            break;
                    }
                    for (var i = 0; i < attrs.Count; i = (i + 1) | 0) {
                        sb.append(attrs.getItem(i));
                        sb.append(",");
                    }
                    if (System.String.indexOf(("RE,NT,LE,ROLB,RILB,LILB,LOLB,RCB,LCB,FS,SS"), pos) > -1) {
                        sb.append("[2,2]");
                    }
                    var retVal = sb.toString();

                    return System.String.replaceAll(retVal, ",,", ",");
                },
                TestQbTSB1Conversion: function () {
                    var retVal = "";
                    var joe = "QB1,joe MONTANA,Face=0x01,#16,25,69,19,13,25,56,81,81,75,81,[51,00,06]";
                    var resultJoe = "QB1,joe MONTANA,Face=0x01,#16,69,25,19,13,56,81,81,75,";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(joe);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultJoe, test)) || "");

                    var vinny = "QB1,vinny TESTAVERDE,Face=0x03,#14,25,69,31,13,25,31,56,44,44,44,[51,00,06]";
                    var resultVinny = "QB1,vinny TESTAVERDE,Face=0x03,#14,69,25,31,13,31,56,44,44,";
                    test = TSBTool2.TSB1Converter.ConvertToTSB1Player(vinny);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultVinny, test)) || "");
                    return retVal;
                },
                TestRbTSB1Conversion: function () {
                    var retVal = "";
                    var thruman = "RB1,thurman THOMAS,Face=0x83,#34,38,69,63,25,63,75,50,[1A,00,06,05]";
                    var resultThurman = "RB1,thurman THOMAS,Face=0x83,#34,69,38,63,25,75,50,";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(thruman);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultThurman, test)) || "");

                    var roger = "RB1,roger CRAIG,Face=0x80,#33,38,69,50,25,50,50,44,[1A,00,06,05]";
                    var resultRoger = "RB1,roger CRAIG,Face=0x80,#33,69,38,50,25,50,44,";
                    test = TSBTool2.TSB1Converter.ConvertToTSB1Player(roger);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultRoger, test)) || "");
                    return retVal;
                },
                TestDbTSB1Conversion: function () {
                    var retVal = "";
                    var deion = "RCB,deion SANDERS,Face=0x8e,#21,44,56,75,56,75,56,50,[02,B1,02]";
                    var resultDeion = "RCB,deion SANDERS,Face=0x8e,#21,56,44,75,56,56,50,[2,2]";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(deion);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultDeion, test)) || "");
                    return retVal;
                },
                TestLbTSB1Conversion: function () {
                    var retVal = "";
                    var ray = "RILB,ray BENTLEY,Face=0x00,#50,25,31,38,38,19,31,56,[1A,1E,1A]";
                    var resultRay = "RILB,ray BENTLEY,Face=0x00,#50,31,25,38,38,31,56,[2,2]";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(ray);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultRay, test)) || "");
                    return retVal;
                },
                TestDlTSB1Conversion: function () {
                    var retVal = "";
                    var target = "LE,leon SEALS,Face=0x8c,#96,25,31,38,44,13,31,50,[32,36,32]";
                    var resultTarget = "LE,leon SEALS,Face=0x8c,#96,31,25,38,44,31,50,[2,2]";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestOlTSB1Conversion: function () {
                    var retVal = "";
                    var target = "LG,jim RITCHER,Face=0x07,#51,25,69,38,56,13,";
                    var resultTarget = "LG,jim RITCHER,Face=0x07,#51,69,25,38,56,";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestKickerTSB1Conversion: function () {
                    var retVal = "";
                    var target = "K,scott NORWOOD,Face=0x09,#11,56,81,81,31,13,44,44,44,[6]";
                    var resultTarget = "K,scott NORWOOD,Face=0x09,#11,81,56,81,31,44,44,";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestPunterTSB1Conversion: function () {
                    var retVal = "";
                    var target = "P,chris MOHR,Face=0x09,#9,81,25,44,31,13,13,44,69,[8]";
                    var resultTarget = "P,chris MOHR,Face=0x09,#9,25,81,44,31,13,44,69,";

                    var test = TSBTool2.TSB1Converter.ConvertToTSB1Player(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                }
            }
        }
    });

    /**
     * @public
     * @class TSBTool2.TSB2Converter
     */
    Bridge.define("TSBTool2.TSB2Converter", {
        statics: {
            methods: {
                ConvertToTSB2FromTSB3: function (input) {
                    var $t;
                    input = System.String.replaceAll(input, "\r\n", "\n");
                    var lines = System.String.split(input, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    var builder = new System.Text.StringBuilder("", ((input.length + Bridge.Int.mul(lines.length, 2)) | 0));
                    var tmp = "";
                    var line = "";
                    $t = Bridge.getEnumerator(lines);
                    try {
                        while ($t.moveNext()) {
                            var theLine = $t.Current;
                            line = theLine;
                            if (TSBTool2.TSB2Converter.ShouldConvertTSB3Player(line)) {
                                tmp = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB3(line);
                                builder.append(tmp);
                            } else {
                                builder.append(line);
                            }
                            builder.append("\n");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    var retVal = builder.toString();
                    return retVal;
                },
                ConvertToTSB2FromTSB1: function (input) {
                    var $t;
                    input = System.String.replaceAll(input, "\r\n", "\n");
                    input = System.String.replaceAll(input, "titans", "oilers");
                    var lines = System.String.split(input, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    var builder = new System.Text.StringBuilder("", ((input.length + Bridge.Int.mul(lines.length, 2)) | 0));
                    var tmp = "";
                    var line = "";

                    $t = Bridge.getEnumerator(lines);
                    try {
                        while ($t.moveNext()) {
                            var theLine = $t.Current;
                            line = theLine;
                            if (System.String.startsWith(line, "#RE2") || System.String.startsWith(line, "#NT2") || System.String.startsWith(line, "#LE2") || System.String.startsWith(line, "#LB5") || System.String.startsWith(line, "#DB3")) {
                                builder.append(line.substr(1));
                            } else if (System.String.startsWith(line, "#PLAYBOOK") && !Bridge.referenceEquals(TSBTool2.InputParser.playbookRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                                builder.append(line.substr(1));
                            } else if (System.String.startsWith(line.trim(), "#")) {
                                builder.append(line);
                            } else if (System.String.startsWith(line, "COLORS")) {
                                builder.append("#" + (line || ""));
                            } else if (TSBTool2.TSB2Converter.ShouldConvertTSB1Player(line)) {
                                tmp = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(line);
                                builder.append(tmp);
                            } else if (System.String.startsWith(line, "PLAYBOOK")) {
                                tmp = TSBTool2.TSB2Converter.ConvertPlaybook(line);
                                builder.append(tmp);
                            } else {
                                builder.append(line);
                            }
                            builder.append("\n");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    var retVal = builder.toString();
                    retVal = TSBTool2.TSBXSimAutoUpdater.AutoUpdatePlayerSimData(retVal, TSBTool.TSBContentType.TSB2);
                    return retVal;
                },
                ShouldConvertTSB1Player: function (line) {
                    var index = System.String.indexOf(line, String.fromCharCode(44));
                    var pos = "";
                    if (index > 0) {
                        pos = line.substr(0, index);
                    }
                    return TSBTool2.TSB2Tool.positionNames.indexOf(pos) > -1;
                },
                ShouldConvertTSB3Player: function (line) {
                    var index = System.String.indexOf(line, String.fromCharCode(44));
                    var pos = "";
                    if (index > 0) {
                        pos = line.substr(0, index);
                    }
                    return TSBTool2.TSB2Tool.positionNames.indexOf(pos) > -1;
                },
                ConvertPlaybook: function (line) {
                    var m = TSBTool2.InputParser.playbookRegex.match(line);
                    var runs = m.getGroups().get(1).toString();
                    var passes = m.getGroups().get(2).toString();

                    runs = runs.substr(1);
                    passes = passes.substr(1);
                    var retVal = System.String.format("PLAYBOOK R{0}{0}, P{1}{1}", runs, passes);

                    return retVal;
                },
                ConvertToTSB2PlayerFromTSB3: function (tsb1PlayerLine) {
                    var simIndex = System.String.indexOf(tsb1PlayerLine, "[");
                    var simString = "";
                    var parts = null;
                    if (simIndex > -1) {
                        simString = tsb1PlayerLine.substr(simIndex);
                        parts = System.String.split(tsb1PlayerLine.substr(0, ((simIndex - 1) | 0)), System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    } else {
                        parts = System.String.split(tsb1PlayerLine, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    }

                    var sb = new System.Text.StringBuilder("", 60);
                    var pos = parts[System.Array.index(0, parts)].trim();
                    for (var i = 0; i < parts.length; i = (i + 1) | 0) {
                        if (i !== 5) {
                            sb.append(parts[System.Array.index(i, parts)].trim());
                            sb.append(",");
                        }
                    }
                    sb.append(simString);
                    return sb.toString();
                },
                /**
                 * @static
                 * @this TSBTool2.TSB2Converter
                 * @memberof TSBTool2.TSB2Converter
                 * @param   {string}    tsb1PlayerLine
                 * @return  {string}
                 */
                ConvertToTSB2PlayerFromTSB1: function (tsb1PlayerLine) {
                    var simIndex = System.String.indexOf(tsb1PlayerLine, "[");
                    var simString = "";
                    var parts = null;
                    if (simIndex > -1) {
                        simString = tsb1PlayerLine.substr(((simIndex - 1) | 0));
                        parts = System.String.split(tsb1PlayerLine.substr(0, ((simIndex - 1) | 0)), System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    } else {
                        parts = System.String.split(tsb1PlayerLine, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    }
                    var sb = new System.Text.StringBuilder("", 60);
                    var pos = parts[System.Array.index(0, parts)].trim();
                    var rs = parts[System.Array.index(4, parts)];
                    var rp = parts[System.Array.index(5, parts)];
                    parts[System.Array.index(5, parts)] = rs;
                    parts[System.Array.index(4, parts)] = rp;
                    for (var i = 0; i < parts.length; i = (i + 1) | 0) {
                        switch (i) {
                            case 2: 
                                sb.append(TSBTool2.TSB2Converter.ConvertFaceToTSB2(parts[System.Array.index(i, parts)].trim()));
                                break;
                            case 7: 
                                sb.append((parts[System.Array.index(i, parts)].trim() || "") + ",");
                                sb.append(TSBTool2.TSB2Converter.GetBB(pos, parts[System.Array.index(6, parts)].trim()));
                                break;
                            case 8: 
                                switch (pos) {
                                    case "K": 
                                        sb.append((parts[System.Array.index(i, parts)].trim() || "") + ",");
                                        sb.append(parts[System.Array.index(i, parts)].trim());
                                        break;
                                    default: 
                                        sb.append(parts[System.Array.index(i, parts)].trim());
                                        break;
                                }
                                break;
                            case 11: 
                                sb.append((parts[System.Array.index(i, parts)].trim() || "") + ",");
                                sb.append(TSBTool2.TSB2Converter.GetCoolness(parts[System.Array.index(1, parts)], parts[System.Array.index(10, parts)].trim()));
                                break;
                            default: 
                                sb.append(parts[System.Array.index(i, parts)].trim());
                                break;
                        }
                        sb.append(",");
                    }
                    TSBTool2.TSB2Converter.AddSimValues(pos, simString, sb);
                    return sb.toString();
                },
                AddSimValues: function (pos, simString, sb) {
                    var vals = TSBTool2.InputParser.GetSimVals(simString, false);
                    var simVals = "";
                    switch (pos) {
                        case "QB1": 
                        case "QB2": 
                            simVals = "[51,00,06]";
                            break;
                        case "RB1": 
                            simVals = "[1A,00,06,05]";
                            break;
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                            simVals = "[00,03,00,00]";
                            break;
                        case "WR1": 
                        case "WR2": 
                            simVals = "[00,07,0A,00]";
                            break;
                        case "WR3": 
                        case "WR4": 
                            simVals = "[0A,00,01,05]";
                            break;
                        case "TE1": 
                        case "TE2": 
                            simVals = "[03,00,00,00]";
                            break;
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "RE2": 
                        case "NT2": 
                        case "LE2": 
                        case "ROLB": 
                        case "RILB": 
                        case "LILB": 
                        case "LOLB": 
                        case "LB5": 
                        case "RCB": 
                        case "LCB": 
                        case "DB1": 
                        case "DB2": 
                        case "FS": 
                        case "SS": 
                        case "DB3": 
                            if (simVals.length > 1) {
                                simVals = System.String.format("[{0:X2},{1:X2},{2:X2}]", Bridge.box(Bridge.Int.mul(vals[System.Array.index(0, vals)], 2), System.Int32), Bridge.box(Bridge.Int.mul(vals[System.Array.index(1, vals)], 3), System.Int32), Bridge.box(Bridge.Int.mul(vals[System.Array.index(0, vals)], 2), System.Int32));
                            } else {
                                simVals = "[10,10,10]";
                            }
                            break;
                        case "K": 
                        case "P": 
                            simVals = "[" + vals[System.Array.index(0, vals)] + "]";
                            break;
                    }
                    sb.append(simVals);
                },
                GetCoolness: function (name, pa) {
                    var space = System.String.indexOf(name, String.fromCharCode(32));
                    if (space > -1) {
                        var lastName = name.substr(space).toUpperCase();
                        var coolGuys = " KELLY KOSAR MOON YOUNG ELWAY FAVRE MARINO MONTANA MANNING BRADY BREES MAHOMES RODGERS ROETHLISBERGER BRADSHAW WILSON STAUBACH FOLES UNITAS TARKENTON TESTAVERDE ";
                        if (System.String.indexOf(coolGuys, lastName) > -1) {
                            return "81";
                        }
                    }
                    return pa;
                },
                GetBB: function (pos, ms) {
                    var retVal = "13";
                    var ms_i = System.Int32.parse(ms);
                    switch (pos) {
                        case "RCB": 
                        case "LCB": 
                        case "DB1": 
                        case "DB2": 
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                            retVal = ms;
                            break;
                        case "LOLB": 
                        case "LILB": 
                        case "RILB": 
                        case "ROLB": 
                        case "LB5": 
                            retVal = "19";
                            break;
                        case "SS": 
                        case "FS": 
                            retVal = "25";
                            break;
                        case "QB1": 
                        case "QB2": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                            if (ms_i > 44) {
                                retVal = "44";
                            } else {
                                retVal = "25";
                            }
                            break;
                    }
                    return retVal;
                },
                ConvertFaceToTSB2: function (input) {
                    var tmp = System.String.replaceAll(input, "Face=0x", "");
                    var number = TSBTool.StaticUtils.ParseIntFromHexString(tmp);
                    if (number < 128) {
                        number = number & 15;
                    } else {
                        number = (128 + (number & 15)) | 0;
                    }
                    var retVal = System.String.format("Face=0x{0:x2}", [Bridge.box(number, System.Int32)]);
                    return retVal;
                },
                TestQbTSB2Conversion: function () {
                    var retVal = "";
                    var joe = "QB1,joe MONTANA,Face=0x1, #16, 25, 69, 19, 13, 56, 81, 81, 75 ,[3, 12, 2 ]";
                    var resultJoe = "QB1,joe MONTANA,Face=0x01,#16,69,25,19,13,25,56,81,81,75,81,[51,00,06]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(joe);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultJoe, test)) || "");

                    var vinny = "QB1, vinny TESTAVERDE, Face=0x23, #14, 25, 69, 31, 13, 31, 56, 44, 44 ,[5, 4, 0 ]";
                    var resultVinny = "QB1,vinny TESTAVERDE,Face=0x03,#14,69,25,31,13,25,31,56,44,44,44,[51,00,06]";
                    test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(vinny);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultVinny, test)) || "");
                    return retVal;
                },
                TestRbTSB2Conversion: function () {
                    var retVal = "";
                    var thruman = "RB1, thurman THOMAS, Face=0x83, #34, 38,  69,63,25,75,50 ,[10, 7, 8, 8 ]";
                    var resultThurman = "RB1,thurman THOMAS,Face=0x83,#34,69,38,63,25,63,75,50,[1A,00,06,05]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(thruman);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultThurman, test)) || "");

                    var roger = "RB1, roger CRAIG,Face=0xd0,#33,38,69,50,25,50,44,[6, 7, 7, 2 ]";
                    var resultRoger = "RB1,roger CRAIG,Face=0x80,#33,69,38,50,25,50,50,44,[1A,00,06,05]";
                    test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(roger);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultRoger, test)) || "");
                    return retVal;
                },
                TestDbTSB2Conversion: function () {
                    var retVal = "";
                    var deion = "RCB, deion SANDERS, Face=0x9e, #21,44,56,75,56,56,50,[1, 59 ]";
                    var resultDeion = "RCB,deion SANDERS,Face=0x8e,#21,56,44,75,56,75,56,50,[02,B1,02]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(deion);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultDeion, test)) || "");
                    return retVal;
                },
                TestLbTSB2Conversion: function () {
                    var retVal = "";
                    var ray = "RILB, ray BENTLEY, Face=0x30, #50, 25, 31, 38, 38, 31, 56 ,[13, 10 ]";
                    var resultRay = "RILB,ray BENTLEY,Face=0x00,#50,31,25,38,38,19,31,56,[1A,1E,1A]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(ray);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultRay, test)) || "");
                    return retVal;
                },
                TestDlTSB2Conversion: function () {
                    var retVal = "";
                    var target = "LE, leon SEALS, Face=0xac, #96, 25, 31, 38, 44, 31, 50 ,[25, 18 ]";
                    var resultTarget = "LE,leon SEALS,Face=0x8c,#96,31,25,38,44,13,31,50,[32,36,32]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestOlTSB2Conversion: function () {
                    var retVal = "";
                    var target = "LG, jim RITCHER, Face=0x7, #51, 25, 69, 38, 56";
                    var resultTarget = "LG,jim RITCHER,Face=0x07,#51,69,25,38,56,13,";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestKickerTSB2Conversion: function () {
                    var retVal = "";
                    var target = "K, scott NORWOOD, Face=0x29, #11, 56, 81, 81, 31, 44, 44 ,[6 ]";
                    var resultTarget = "K,scott NORWOOD,Face=0x09,#11,81,56,81,31,13,44,44,44,[6]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                },
                TestPunterTSB2Conversion: function () {
                    var retVal = "";
                    var target = "P,chris MOHR,Face=0x09,#9,81,25,44,31,13,44,69,[8]";
                    var resultTarget = "P,chris MOHR,Face=0x09,#9,25,81,44,31,13,13,44,69,[8]";

                    var test = TSBTool2.TSB2Converter.ConvertToTSB2PlayerFromTSB1(target);
                    retVal = (retVal || "") + ((TSBTool.StaticUtils.AreEqual(resultTarget, test)) || "");
                    return retVal;
                }
            }
        }
    });

    Bridge.define("TSBTool2.TSB3Converter", {
        statics: {
            fields: {
                sFormulaString: null
            },
            props: {
                FormulaString: {
                    get: function () {
                        if (TSBTool2.TSB3Converter.sFormulaString == null) {
                            TSBTool2.TSB3Converter.sFormulaString = "# Free Agent point formulas\r\n\r\nFAP_QB: (PS+PC+AR)/15\r\nFAP_RB: ((MS+BC+RC)-110)/4\r\nFAP_WR: ((RC -38 + MS - 38)/3) -2\r\nFAP_TE: ((RC -25 + MS - 25)/3) +1\r\nFAP_OL: (HP -44)/2\r\nFAP_DL: (MS + HP -50) / 6\r\nFAP_LB: (MS-31 + HP-31)/4\r\nFAP_CB: (MS-31 + PI-25)/5\r\nFAP_S: (MS-31 + PI-25 + HP-31)/7\r\nFAP_K: KA/6\r\nFAP_P: (KP-31)/6\r\n";
                        }
                        return TSBTool2.TSB3Converter.sFormulaString;
                    }
                }
            },
            methods: {
                ReloadFormulas: function () {
                    TSBTool2.TSB3Converter.sFormulaString = null;
                },
                ConvertToTSB3FromTSB2: function (input) {
                    var $t;
                    TSBTool2.TSB3Converter.ReloadFormulas();
                    input = System.String.replaceAll(input, "\r\n", "\n");
                    var lines = System.String.split(input, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    var builder = new System.Text.StringBuilder("", ((input.length + Bridge.Int.mul(lines.length, 2)) | 0));
                    var tmp = "";
                    var line = "";
                    $t = Bridge.getEnumerator(lines);
                    try {
                        while ($t.moveNext()) {
                            var theLine = $t.Current;
                            line = theLine;
                            if (TSBTool2.TSB3Converter.ShouldConvertTSB3Player(line)) {
                                tmp = TSBTool2.TSB3Converter.ConvertToTSB3PlayerFromTSB2(line);
                                builder.append(tmp);
                            } else {
                                builder.append(line);
                            }
                            builder.append("\n");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    TSBTool.StaticUtils.ShowErrors();
                    var retVal = builder.toString();
                    return retVal;
                },
                ShouldConvertTSB3Player: function (line) {
                    var index = System.String.indexOf(line, String.fromCharCode(44));
                    var pos = "";
                    if (index > 0) {
                        pos = line.substr(0, index);
                    }
                    return TSBTool2.TSB2Tool.positionNames.indexOf(pos) > -1;
                },
                ConvertToTSB3PlayerFromTSB2: function (input) {
                    var retVal = "";
                    var simIndex = System.String.indexOf(input, "[");
                    var simString = "";
                    var parts = null;
                    if (simIndex > -1) {
                        simString = input.substr(simIndex);
                        parts = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.String.split(input.substr(0, ((simIndex - 1) | 0)), System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }})));
                    } else {
                        parts = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.String.split(input, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }})));
                    }
                    var sb = new System.Text.StringBuilder("", 60);
                    var pos = parts.getItem(0).trim();
                    var hp = parts.getItem(7).trim();
                    var ms = parts.getItem(6).trim();
                    var ag = TSBTool2.TSB3Converter.GetAG(pos, ms, hp);
                    parts.insert(9, ag);
                    for (var i = 0; i < parts.Count; i = (i + 1) | 0) {
                        sb.append(parts.getItem(i).trim());
                        sb.append(",");
                    }
                    sb.append(simString);
                    retVal = TSBTool2.TSB3Converter.UpdateFreeAgentValue(System.String.replaceAll(sb.toString(), ",,", ","));
                    return retVal;
                },
                UpdateFreeAgentValue: function (input) {
                    var simIndex = System.String.indexOf(input, "[");
                    var simString = "";
                    var parts = null;
                    if (simIndex > -1) {
                        simString = input.substr(simIndex);
                        parts = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.String.split(input.substr(0, ((simIndex - 1) | 0)), System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }})));
                    } else {
                        parts = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.String.split(input, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }})));
                    }

                    var pos = parts.getItem(0).trim();
                    var substitutionString = { v : "" };
                    var formula = TSBTool2.TSB3Converter.GetFreeAgentPointFormula(pos, substitutionString);
                    var sub_parts = System.String.split(substitutionString.v, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    for (var i = 4; i < sub_parts.length; i = (i + 1) | 0) {
                        formula = System.String.replaceAll(formula, sub_parts[System.Array.index(i, sub_parts)].trim(), parts.getItem(i));
                    }
                    var result = 0;
                    try {
                        var r = Bridge.toString(TSBTool.StaticUtils.Compute(formula));
                        result = System.Double.parse(r);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        throw new System.ArgumentException.$ctor1(System.String.format("Error calculating FreeAgentPoints for '{0}' Tried to compute:'{1}'", input, formula));
                    }
                    var fap = Bridge.Int.clipu8(Bridge.Math.round(result, 0, 6));
                    if (fap < 0) {
                        fap = 0;
                    } else {
                        if (fap > 15) {
                            fap = 15;
                        }
                    }

                    var face = (parts.getItem(2).trim().substr(0, ((parts.getItem(2).length - 1) | 0)) || "") + (System.Byte.format(fap, "X") || "");
                    return System.String.replaceAll(input, parts.getItem(2), face);
                },
                GetFreeAgentPointFormula: function (position, substitutionString) {
                    var retVal = null;
                    var searchStr = "FAP_OL";
                    substitutionString.v = "OL,name      ,face    , JN,RS,RP,MS,HP,BB";
                    switch (position) {
                        case "QB1": 
                        case "QB2": 
                            searchStr = "FAP_QB";
                            substitutionString.v = "QB,name       ,face    , JN,RS,RP,MS,HP,BB,AG,PS,PC,PA,AR,CO";
                            break;
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                            searchStr = "FAP_RB";
                            substitutionString.v = "SKILL,name ,face    , JN,RS,RP,MS,HP,BB,AG,BC,RC";
                            break;
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                            searchStr = "FAP_WR";
                            substitutionString.v = "SKILL,name ,face    , JN,RS,RP,MS,HP,BB,AG,BC,RC";
                            break;
                        case "TE1": 
                        case "TE2": 
                            searchStr = "FAP_TE";
                            substitutionString.v = "SKILL,name ,face    , JN,RS,RP,MS,HP,BB,AG,BC,RC";
                            break;
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "RE2": 
                        case "NT2": 
                        case "LE2": 
                            searchStr = "FAP_DL";
                            substitutionString.v = "DL,name      ,face    , JN,RS,RP,MS,HP,BB,AG,PI,QU";
                            break;
                        case "ROLB": 
                        case "RILB": 
                        case "LILB": 
                        case "LOLB": 
                        case "LB5": 
                            searchStr = "FAP_LB";
                            substitutionString.v = "DEF,name      ,face    , JN,RS,RP,MS,HP,BB,AG,PI,QU";
                            break;
                        case "RCB": 
                        case "LCB": 
                        case "DB1": 
                        case "DB2": 
                            searchStr = "FAP_CB";
                            substitutionString.v = "DEF,name      ,face    , JN,RS,RP,MS,HP,BB,AG,PI,QU";
                            break;
                        case "FS": 
                        case "SS": 
                        case "DB3": 
                            searchStr = "FAP_S";
                            substitutionString.v = "DEF,name      ,face    , JN,RS,RP,MS,HP,BB,AG,PI,QU";
                            break;
                        case "K": 
                            searchStr = "FAP_K";
                            substitutionString.v = "K,name         ,face    , JN,RS,RP,MS,HP,BB,AG,KP,KA,AB";
                            break;
                        case "P": 
                            searchStr = "FAP_P";
                            substitutionString.v = "P,name         ,face    , JN,RS,RP,MS,HP,BB,AG,KP,AB";
                            break;
                    }
                    var pattern = System.String.format("{0}\\s*:\\s*(.*)$", [searchStr]);
                    var reg = new System.Text.RegularExpressions.Regex.ctor(pattern, 2);
                    var m = reg.match(TSBTool2.TSB3Converter.FormulaString);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        retVal = m.getGroups().get(1).toString();
                    }
                    return retVal;
                },
                GetAG: function (pos, ms, hp) {
                    var retval = "31";
                    var maxSpeed = System.Int32.parse(ms);
                    var msIndex = TSBTool.StaticUtils.GetTSBAbility(maxSpeed);
                    var hpIndex = TSBTool.StaticUtils.GetTSBAbility(System.Int32.parse(hp));

                    switch (pos) {
                        case "QB1": 
                        case "QB2": 
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "RE2": 
                        case "LE2": 
                        case "NT2": 
                        case "SS": 
                        case "FS": 
                        case "DB3": 
                            if (msIndex < 14) {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(((msIndex + 1) | 0)));
                            } else {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(msIndex));
                            }
                            break;
                        case "TE1": 
                        case "TE2": 
                            if (maxSpeed < 38) {
                                retval = "19";
                            }
                            break;
                        case "C": 
                        case "RG": 
                        case "LG": 
                        case "RT": 
                        case "LT": 
                            if (msIndex < 14) {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(((hpIndex + 2) | 0)));
                            } else {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(hpIndex));
                            }
                            break;
                        case "ROLB": 
                        case "RILB": 
                        case "LILB": 
                        case "LOLB": 
                        case "LB5": 
                            retval = ms;
                            break;
                        case "LCB": 
                        case "RCB": 
                        case "DB1": 
                        case "DB2": 
                            if (msIndex < 14) {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(((msIndex + 2) | 0)));
                            } else {
                                retval = Bridge.toString(TSBTool.StaticUtils.MapAbilityToTSBValue(msIndex));
                            }
                            break;
                        case "K": 
                        case "P": 
                            retval = "38";
                            break;
                    }
                    return retval;
                }
            }
        }
    });

    Bridge.define("TSBTool2.TSBPlayer", {
        $kind: "enum",
        statics: {
            fields: {
                QB1: 0,
                QB2: 1,
                RB1: 2,
                RB2: 3,
                RB3: 4,
                RB4: 5,
                WR1: 6,
                WR2: 7,
                WR3: 8,
                WR4: 9,
                TE1: 10,
                TE2: 11,
                C: 12,
                LG: 13,
                RG: 14,
                LT: 15,
                RT: 16,
                RE: 17,
                NT: 18,
                LE: 19,
                RE2: 20,
                NT2: 21,
                LE2: 22,
                ROLB: 23,
                RILB: 24,
                LILB: 25,
                LOLB: 26,
                LB5: 27,
                RCB: 28,
                LCB: 29,
                DB1: 30,
                DB2: 31,
                FS: 32,
                SS: 33,
                DB3: 34,
                K: 35,
                P: 36
            }
        }
    });

    Bridge.define("TSBTool2.TSBXSimAutoUpdater", {
        statics: {
            fields: {
                sSimFormulas: null,
                sSubLines: null,
                sSubLinesTSB3: null,
                sSubLinesTSB2: null,
                sSubLinesTSB1: null
            },
            props: {
                SimFormulas: {
                    get: function () {
                        if (TSBTool2.TSBXSimAutoUpdater.sSimFormulas == null) {
                            TSBTool2.TSBXSimAutoUpdater.sSimFormulas = " SIM_Formulas.txt\r\nQB_SIM_CARY: IIF(MS > 43,10, IIF(MS > 37,8, IIF(MS > 30, 6, IIF(MS > 24, 4,IIF(MS > 18, 2, 0)))))\r\nQB_SIM_RUSHING: MS /5\r\nQB_SIM_PASSING: (PS -38 + PC -31 + AR -38) / 6\r\nQB_SIM_SCRAMBLE: MS /16\r\n\r\nRB_SIM_RUSHING: ((MS - 31)*2 + (HP-31)*2 + (RP-3)*2)+10\r\nRB_SIM_CARRIES: (((MS - 31)*2 + (HP-31)*2 + (RP-3)*2)+10) /10\r\nRB_SIM_RETURN: (MS+HP)/10 -3\r\nRB_SIM_YPC: 4\r\nRB_SIM_CATCH: RC / 5 -1\r\n\r\nWR_SIM_RUSHING: 1\r\nWR_SIM_CARRIES: 2\r\nWR_SIM_RETURN: (MS+HP)/10 -3\r\nWR_SIM_YPC: (MS + RC) / 10\r\nWR_SIM_CATCH:  RC / 5 -1\r\n\r\nTE_SIM_RUSHING: 0\r\nTE_SIM_CARRIES: 2\r\nTE_SIM_RETURN: (MS+HP)/10 -3\r\nTE_SIM_YPC:( MS + RC) / 10\r\nTE_SIM_CATCH:  RC / 5 -1\r\n\r\nDL_SIM_SACKING: (QU-44 + HP-50) * 1.3\r\nDL_SIM_INT: 0\r\nDL_SIM_TACKLING: 1+ (HP /10) \r\n\r\nLB_SIM_SACKING: (HP - 38)*1.3\r\nLB_SIM_INT: (PI - 6) * 0.45\r\nLB_SIM_TACKLING: (HP /7) \r\n\r\nCB_SIM_SACKING: (HP-44)*2\r\nCB_SIM_INT: PI * 0.66\r\nCB_SIM_TACKLING: RP/10\r\n\r\nS_SIM_SACKING: (HP-44)*2\r\nS_SIM_INT: PI * 0.66\r\nS_SIM_TACKLING: QU /10\r\n\r\n\r\nK_SIM_ABILITY: KA/ 7\r\nP_SIM_ABILITY: KP / 7\r\n";
                        }
                        return TSBTool2.TSBXSimAutoUpdater.sSimFormulas;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.sSubLinesTSB3 = function (_o1) {
                            _o1.add("QB", "QB,name       ,face    , JN,RS,RP,MS,HP,BB,AG,PS,PC,PA,AR,CO");
                            _o1.add("SKILL", "SKILL,name ,face    , JN,RS,RP,MS,HP,BB,AG,BC,RC");
                            _o1.add("OL", "OL,name      ,face    , JN,RS,RP,MS,HP,BB,AG");
                            _o1.add("DEF", "DEF,name     ,face    , JN,RS,RP,MS,HP,BB,AG,PI,QU");
                            _o1.add("K", "K,name         ,face    , JN,RS,RP,MS,HP,BB,AG,KP,KA,AB");
                            _o1.add("P", "P,name         ,face    , JN,RS,RP,MS,HP,BB,AG,KP,AB");
                            return _o1;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
                    this.sSubLinesTSB2 = function (_o2) {
                            _o2.add("QB", "QB,name       ,face    , JN,RS,RP,MS,HP,BB,PS,PC,PA,AR,CO");
                            _o2.add("SKILL", "SKILL,name ,face    , JN,RS,RP,MS,HP,BB,BC,RC");
                            _o2.add("OL", "OL,name      ,face    , JN,RS,RP,MS,HP,BB");
                            _o2.add("DEF", "DEF,name     ,face    , JN,RS,RP,MS,HP,BB,PI,QU");
                            _o2.add("K", "K,name         ,face    , JN,RS,RP,MS,HP,BB,KP,KA,AB");
                            _o2.add("P", "P,name         ,face    , JN,RS,RP,MS,HP,BB,KP,AB");
                            return _o2;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
                    this.sSubLinesTSB1 = function (_o3) {
                            _o3.add("QB", "QB,name       ,face    , JN,RS,RP,MS,HP,PS,PC,PA,AR");
                            _o3.add("SKILL", "SKILL,name ,face    , JN,RS,RP,MS,HP,BC,RC");
                            _o3.add("OL", "OL,name      ,face    , JN,RS,RP,MS,HP");
                            _o3.add("DEF", "DEF,name     ,face    , JN,RS,RP,MS,HP,PI,QU");
                            _o3.add("K", "K,name         ,face    , JN,RS,RP,MS,HP,KP,KA,AB");
                            _o3.add("P", "P,name         ,face    , JN,RS,RP,MS,HP,KP,AB");
                            return _o3;
                        }(new (System.Collections.Generic.Dictionary$2(System.String,System.String)).ctor());
                }
            },
            methods: {
                ReloadFormulas: function () {
                    TSBTool2.TSBXSimAutoUpdater.sSimFormulas = null;
                },
                AutoUpdatePlayerSimData: function (text, gameVersion) {
                    var $t;
                    TSBTool2.TSBXSimAutoUpdater.ReloadFormulas();
                    switch (gameVersion) {
                        case TSBTool.TSBContentType.TSB2: 
                            TSBTool2.TSBXSimAutoUpdater.sSubLines = TSBTool2.TSBXSimAutoUpdater.sSubLinesTSB2;
                            break;
                        case TSBTool.TSBContentType.TSB3: 
                            TSBTool2.TSBXSimAutoUpdater.sSubLines = TSBTool2.TSBXSimAutoUpdater.sSubLinesTSB3;
                            break;
                        default: 
                            throw new System.ArgumentException.$ctor1("TSBXSimAutoUpdater: Incorrect version " + (System.Enum.toString(TSBTool.TSBContentType, gameVersion) || ""));
                    }

                    TSBTool2.TSB3Converter.ReloadFormulas();
                    var builder = new System.Text.StringBuilder("", text.length);
                    var lines = System.String.split(text, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    $t = Bridge.getEnumerator(lines);
                    try {
                        while ($t.moveNext()) {
                            var line = $t.Current;
                            if (System.String.startsWith(line, "#")) {
                                builder.append(line);
                            } else {
                                if (TSBTool2.TSBXSimAutoUpdater.IsPlayerLine(line)) {
                                    try {
                                        builder.append(TSBTool2.TSBXSimAutoUpdater.UpdatePlayerSimValues(line, gameVersion));
                                    } catch (ex) {
                                        ex = System.Exception.create(ex);
                                        TSBTool.StaticUtils.ShowError("Error Processing line: " + (line || "") + "\nOperation not applied" + (Bridge.toString(ex) || ""));
                                        return text;
                                    }
                                } else {
                                    builder.append(line);
                                }
                            }

                            builder.append("\n");
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return builder.toString();
                },
                IsPlayerLine: function (line) {
                    if (!Bridge.referenceEquals(TSBTool2.InputParser.posNameFaceRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                        return true;
                    }
                    return false;
                },
                UpdatePlayerSimValues: function (playerLine, gameVersion) {
                    var $t;
                    var simIndex = System.String.indexOf(playerLine, "[");
                    var parts = null;
                    var playerNoSim = null;
                    if (simIndex > -1) {
                        playerNoSim = playerLine.substr(0, ((simIndex - 1) | 0));
                        parts = System.String.split(playerNoSim, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    } else {
                        playerNoSim = playerLine;
                        parts = System.String.split(playerLine, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    }
                    var simVals = new (System.Collections.Generic.List$1(System.Byte)).ctor();
                    var pos = parts[System.Array.index(0, parts)];
                    var sim3, sim4;
                    switch (pos) {
                        case "QB1": 
                        case "QB2": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("QB_SIM_CARY", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("QB"), parts, 0, 28)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("QB_SIM_RUSHING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("QB"), parts, 0, 8)));
                            sim3 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("QB_SIM_PASSING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("QB"), parts, 1, 15));
                            sim4 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("QB_SIM_SCRAMBLE", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("QB"), parts, 0, 3));
                            simVals.add(((sim3 << ((4 + sim4) | 0)) & 255));
                            break;
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("RB_SIM_RUSHING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 173)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("RB_SIM_CARRIES", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 11)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("RB_SIM_RETURN", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 255)));
                            sim3 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("RB_SIM_YPC", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            sim4 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("RB_SIM_CATCH", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            simVals.add(((sim3 << ((8 + sim4) | 0)) & 255));
                            break;
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("WR_SIM_RUSHING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 173)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("WR_SIM_CARRIES", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 11)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("WR_SIM_RETURN", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 255)));
                            sim3 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("WR_SIM_YPC", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            sim4 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("WR_SIM_CATCH", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            simVals.add(((sim3 << ((8 + sim4) | 0)) & 255));
                            break;
                        case "TE1": 
                        case "TE2": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("TE_SIM_RUSHING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 173)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("TE_SIM_CARRIES", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 11)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("TE_SIM_RETURN", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 255)));
                            sim3 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("TE_SIM_YPC", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            sim4 = Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("TE_SIM_CATCH", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("SKILL"), parts, 0, 15));
                            simVals.add(((sim3 << ((8 + sim4) | 0)) & 255));
                            break;
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "RE2": 
                        case "NT2": 
                        case "LE2": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("DL_SIM_SACKING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("DL_SIM_INT", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("DL_SIM_TACKLING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 10)));
                            break;
                        case "ROLB": 
                        case "RILB": 
                        case "LILB": 
                        case "LOLB": 
                        case "LB5": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("LB_SIM_SACKING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("LB_SIM_INT", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("LB_SIM_TACKLING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 10)));
                            break;
                        case "RCB": 
                        case "LCB": 
                        case "DB1": 
                        case "DB2": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("CB_SIM_SACKING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("CB_SIM_INT", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("CB_SIM_TACKLING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 10)));
                            break;
                        case "FS": 
                        case "SS": 
                        case "DB3": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("S_SIM_SACKING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("S_SIM_INT", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 255)));
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("S_SIM_TACKLING", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("DEF"), parts, 0, 10)));
                            break;
                        case "K": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("K_SIM_ABILITY", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("K"), parts, 0, 15)));
                            break;
                        case "P": 
                            simVals.add(Bridge.Int.clipu8(TSBTool2.TSBXSimAutoUpdater.Calculate("P_SIM_ABILITY", TSBTool2.TSBXSimAutoUpdater.sSubLines.getItem("P"), parts, 0, 15)));
                            break;
                    }
                    var sb = new System.Text.StringBuilder("", 30);
                    sb.append(playerNoSim);
                    if (simVals.Count > 0) {
                        sb.append(",[");
                        $t = Bridge.getEnumerator(simVals);
                        try {
                            while ($t.moveNext()) {
                                var b = $t.Current;
                                sb.append(System.Byte.format(b, "X2"));
                                sb.append(",");
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        sb.remove(((sb.getLength() - 1) | 0), 1);
                        sb.append("]");
                    }
                    var retVal = sb.toString();
                    if (gameVersion === TSBTool.TSBContentType.TSB3) {
                        retVal = TSBTool2.TSB3Converter.UpdateFreeAgentValue(retVal);
                    }
                    return retVal;
                },
                Calculate: function (formulaName, substString, playerParts, min, max) {
                    var result = 0;
                    var formula = TSBTool2.TSBXSimAutoUpdater.GetFormula(formulaName);
                    var sub_parts = System.String.split(substString, System.String.toCharArray((","), 0, (",").length).map(function (i) {{ return String.fromCharCode(i); }}));
                    for (var i = 4; i < sub_parts.length; i = (i + 1) | 0) {
                        formula = System.String.replaceAll(formula, sub_parts[System.Array.index(i, sub_parts)].trim(), playerParts[System.Array.index(i, playerParts)]);
                    }
                    try {
                        var r = Bridge.toString(TSBTool.StaticUtils.Compute(formula));
                        result = System.Double.parse(r);
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        throw new System.ArgumentException.$ctor1(System.String.format("Error processing formula '{0}'\nTrying to calculate:'{1}'", formulaName, formula));
                    }
                    if (result < min) {
                        result = min;
                    } else {
                        if (result > max) {
                            result = max;
                        }
                    }
                    return result;
                },
                GetFormula: function (formulaName) {
                    var retVal = "";
                    var formulaRegex = new System.Text.RegularExpressions.Regex.ctor(System.String.format("^\\s*{0}\\s*:\\s*(.*)$", [formulaName]), 2);
                    var m = formulaRegex.match(TSBTool2.TSBXSimAutoUpdater.SimFormulas);
                    if (!Bridge.referenceEquals(m, System.Text.RegularExpressions.Match.getEmpty())) {
                        retVal = m.getGroups().get(1).toString().trim();
                    }
                    return retVal;
                }
            }
        }
    });

    Bridge.define("TSBTool2_UI.IAllStarPlayerControl", {
        $kind: "interface"
    });

    /**
     * Summary description for CXRomScheduleHelper.
     *
     * @public
     * @class TSBTool.CXRomScheduleHelper
     * @augments TSBTool.ScheduleHelper2
     */
    Bridge.define("TSBTool.CXRomScheduleHelper", {
        inherits: [TSBTool.ScheduleHelper2],
        ctors: {
            ctor: function (outputRom) {
                this.$initialize();
                TSBTool.ScheduleHelper2.ctor.call(this, outputRom);
                this.end_schedule_section = 213006;
                this.weekPointersStartLoc = 207271;
                this.total_games_possible = 256;
                this.gamePerWeekLimit = 16;
                this.totalGameLimit = 256;
            }
        },
        methods: {
            AddMessage: function (message) {
                if (System.String.indexOf(message, "AFC") === -1 && System.String.indexOf(message, "NFC") === -1) {
                    TSBTool.ScheduleHelper2.prototype.AddMessage.call(this, message);
                }
            },
            ScheduleGame: function (awayTeam, homeTeam) {
                var ret = false;
                if (this.TotalGameCount < this.total_games_possible) {
                    ret = TSBTool.ScheduleHelper2.prototype.ScheduleGame.call(this, awayTeam, homeTeam);
                } else {
                    this.AddMessage(System.String.format("ERROR! maximum game limit reached ({0}) {1} at {1} will not be scheduled", Bridge.box(this.total_games_possible, System.Int32), awayTeam, homeTeam));
                }
                return ret;
            }
        }
    });

    /**
     * Summary description for TecmoTool.
     Location = pointer - 0x8000 + 0x0010;
     Where pointer is of the 'swapped' format like '0x86dd'
     *
     * @public
     * @class TSBTool.TecmoTool
     * @implements  TSBTool.ITecmoTool
     * @implements  TSBTool.ITecmoContent
     */
    Bridge.define("TSBTool.TecmoTool", {
        inherits: [TSBTool.ITecmoTool,TSBTool.ITecmoContent],
        statics: {
            fields: {
                m2RB_2WR_1TE: null,
                m1RB_3WR_1TE: null,
                m1RB_4WR: null,
                positionNames: null,
                teams: null,
                ShowTeamFormation: false,
                ShowPlaybook: false,
                ShowColors: false,
                ShowTeamStrings: false,
                ShowProBowlRosters: false
            },
            props: {
                PositionNames: {
                    get: function () {
                        return TSBTool.TecmoTool.positionNames;
                    },
                    set: function (value) {
                        TSBTool.TecmoTool.positionNames = value;
                    }
                },
                Teams: {
                    get: function () {
                        return TSBTool.TecmoTool.teams;
                    },
                    set: function (value) {
                        TSBTool.TecmoTool.teams = value;
                    }
                }
            },
            ctors: {
                init: function () {
                    this.m2RB_2WR_1TE = "2RB_2WR_1TE";
                    this.m1RB_3WR_1TE = "1RB_3WR_1TE";
                    this.m1RB_4WR = "1RB_4WR";
                    this.positionNames = function (_o1) {
                            _o1.add("QB1");
                            _o1.add("QB2");
                            _o1.add("RB1");
                            _o1.add("RB2");
                            _o1.add("RB3");
                            _o1.add("RB4");
                            _o1.add("WR1");
                            _o1.add("WR2");
                            _o1.add("WR3");
                            _o1.add("WR4");
                            _o1.add("TE1");
                            _o1.add("TE2");
                            _o1.add("C");
                            _o1.add("LG");
                            _o1.add("RG");
                            _o1.add("LT");
                            _o1.add("RT");
                            _o1.add("RE");
                            _o1.add("NT");
                            _o1.add("LE");
                            _o1.add("ROLB");
                            _o1.add("RILB");
                            _o1.add("LILB");
                            _o1.add("LOLB");
                            _o1.add("RCB");
                            _o1.add("LCB");
                            _o1.add("FS");
                            _o1.add("SS");
                            _o1.add("K");
                            _o1.add("P");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                    this.teams = function (_o2) {
                            _o2.add("bills");
                            _o2.add("colts");
                            _o2.add("dolphins");
                            _o2.add("patriots");
                            _o2.add("jets");
                            _o2.add("bengals");
                            _o2.add("browns");
                            _o2.add("oilers");
                            _o2.add("steelers");
                            _o2.add("broncos");
                            _o2.add("chiefs");
                            _o2.add("raiders");
                            _o2.add("chargers");
                            _o2.add("seahawks");
                            _o2.add("redskins");
                            _o2.add("giants");
                            _o2.add("eagles");
                            _o2.add("cardinals");
                            _o2.add("cowboys");
                            _o2.add("bears");
                            _o2.add("lions");
                            _o2.add("packers");
                            _o2.add("vikings");
                            _o2.add("buccaneers");
                            _o2.add("49ers");
                            _o2.add("rams");
                            _o2.add("saints");
                            _o2.add("falcons");
                            return _o2;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                    this.ShowTeamFormation = false;
                    this.ShowPlaybook = false;
                    this.ShowColors = false;
                    this.ShowTeamStrings = false;
                    this.ShowProBowlRosters = false;
                }
            },
            methods: {
                GetTeamIndex: function (teamName) {
                    var ret = -1;
                    if (Bridge.referenceEquals(teamName.toLowerCase(), "null")) {
                        return 255;
                    }
                    for (var i = 0; i < TSBTool.TecmoTool.teams.Count; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(TSBTool.TecmoTool.teams.getItem(i), teamName)) {
                            ret = i;
                            break;
                        }
                    }
                    return ret;
                },
                /**
                 * Returns the team specified by the index passed. (0= bills).
                 *
                 * @static
                 * @public
                 * @this TSBTool.TecmoTool
                 * @memberof TSBTool.TecmoTool
                 * @param   {number}    index
                 * @return  {string}             team name on success, null on failure
                 */
                GetTeamFromIndex: function (index) {
                    if (index === 255) {
                        return "null";
                    }
                    if (index < 0 || index > ((TSBTool.TecmoTool.teams.Count - 1) | 0)) {
                        return null;
                    }
                    return TSBTool.TecmoTool.teams.getItem(index);
                }
            }
        },
        fields: {
            outputRom: null,
            namePointersStart: 0,
            lastPlayerNamePointer: 0,
            teamSimOffensivePrefStart: 0,
            mBillsPuntKickReturnerPos: 0,
            dataPositionOffset: 0,
            mNameRegex: null,
            mShowOffPref: false,
            maxNameLength: 0,
            gameYearLocations: null,
            billsQB1SimLoc: 0,
            billsRESimLoc: 0,
            billsTeamSimLoc: 0,
            teamSimOffset: 0,
            billsQB1AbilityStart: 0,
            teamAbilityOffset: 0,
            abilityOffsets: null,
            faceOffsets: null,
            faceTeamOffsets: null,
            simpleSetRegex: null,
            mTeamFormationHackLoc: 0,
            mTeamFormationsStartingLoc: 0,
            mTeamFormationsStartingLoc2: 0,
            mPlaybookStartLoc: 0,
            runRegex: null,
            passRegex: null,
            JUICE_LOCATION: 0,
            m_JuiceArray: null,
            mBillsUniformLoc: 0,
            mBillsActionSeqLoc: 0,
            mBillsDivChampLoc: 0,
            mBillsConfChampLoc: 0,
            
            mProwbowlStartingLoc: 0
        },
        props: {
            /**
             * Returns the rom version
             *
             * @instance
             * @public
             * @readonly
             * @memberof TSBTool.TecmoTool
             * @function RomVersion
             * @type TSBTool.ROM_TYPE
             */
            RomVersion: {
                get: function () {
                    return TSBTool.ROM_TYPE.NES_ORIGINAL_TSB;
                }
            },
            OutputRom: {
                get: function () {
                    return this.outputRom;
                },
                set: function (value) {
                    this.outputRom = value;
                }
            },
            ShowOffPref: {
                get: function () {
                    return this.mShowOffPref;
                },
                set: function (value) {
                    this.mShowOffPref = value;
                }
            },
            NameRegex: {
                get: function () {
                    if (this.mNameRegex == null) {
                        this.mNameRegex = new System.Text.RegularExpressions.Regex.ctor("[a-zA-Z \\.]+");
                    }
                    return this.mNameRegex;
                }
            },
            NumberOfStringsInTeamStringTable: {
                get: function () {
                    return 119;
                }
            },
            BillsUniformLoc: {
                get: function () {
                    return this.mBillsUniformLoc;
                },
                set: function (value) {
                    this.mBillsUniformLoc = value;
                }
            },
            BillsActionSeqLoc: {
                get: function () {
                    return this.mBillsActionSeqLoc;
                },
                set: function (value) {
                    this.mBillsActionSeqLoc = value;
                }
            },
            BillsDivChampLoc: {
                get: function () {
                    return this.mBillsDivChampLoc;
                },
                set: function (value) {
                    this.mBillsDivChampLoc = value;
                }
            },
            BillsConfChampLoc: {
                get: function () {
                    return this.mBillsConfChampLoc;
                },
                set: function (value) {
                    this.mBillsConfChampLoc = value;
                }
            }
        },
        alias: [
            "RomVersion", "TSBTool$ITecmoContent$RomVersion",
            "RomVersion", "TSBTool$ITecmoTool$RomVersion",
            "OutputRom", "TSBTool$ITecmoContent$OutputRom",
            "OutputRom", "TSBTool$ITecmoTool$OutputRom",
            "ShowOffPref", "TSBTool$ITecmoContent$ShowOffPref",
            "ShowOffPref", "TSBTool$ITecmoTool$ShowOffPref",
            "SetByte", "TSBTool$ITecmoContent$SetByte",
            "IsValidPosition", "TSBTool$ITecmoTool$IsValidPosition",
            "SaveRom", "TSBTool$ITecmoContent$SaveRom",
            "SaveRom", "TSBTool$ITecmoTool$SaveRom",
            "GetPlayerStuff", "TSBTool$ITecmoTool$GetPlayerStuff",
            "GetSchedule", "TSBTool$ITecmoTool$GetSchedule",
            "SetYear", "TSBTool$ITecmoTool$SetYear",
            "InsertPlayer", "TSBTool$ITecmoTool$InsertPlayer",
            "GetKey", "TSBTool$ITecmoContent$GetKey",
            "GetKey", "TSBTool$ITecmoTool$GetKey",
            "GetTeamPlayers", "TSBTool$ITecmoTool$GetTeamPlayers",
            "GetTeamName", "TSBTool$ITecmoTool$GetTeamName",
            "GetTeamCity", "TSBTool$ITecmoTool$GetTeamCity",
            "GetTeamAbbreviation", "TSBTool$ITecmoTool$GetTeamAbbreviation",
            "GetTeamStringTableString", "TSBTool$ITecmoTool$GetTeamStringTableString",
            "SetTeamStringTableString", "TSBTool$ITecmoTool$SetTeamStringTableString",
            "NumberOfStringsInTeamStringTable", "TSBTool$ITecmoTool$NumberOfStringsInTeamStringTable",
            "SetTeamAbbreviation", "TSBTool$ITecmoTool$SetTeamAbbreviation",
            "SetTeamName", "TSBTool$ITecmoTool$SetTeamName",
            "SetTeamCity", "TSBTool$ITecmoTool$SetTeamCity",
            "GetAll$1", "TSBTool$ITecmoContent$GetAll",
            "GetProBowlPlayers$1", "TSBTool$ITecmoContent$GetProBowlPlayers",
            "GetSchedule$1", "TSBTool$ITecmoContent$GetSchedule",
            "GetAll", "TSBTool$ITecmoTool$GetAll",
            "SetQBAbilities", "TSBTool$ITecmoTool$SetQBAbilities",
            "SetSkillPlayerAbilities", "TSBTool$ITecmoTool$SetSkillPlayerAbilities",
            "SetKickPlayerAbilities", "TSBTool$ITecmoTool$SetKickPlayerAbilities",
            "SetDefensivePlayerAbilities", "TSBTool$ITecmoTool$SetDefensivePlayerAbilities",
            "SetOLPlayerAbilities", "TSBTool$ITecmoTool$SetOLPlayerAbilities",
            "SetTeamSimData", "TSBTool$ITecmoTool$SetTeamSimData",
            "SetTeamSimOffensePref", "TSBTool$ITecmoTool$SetTeamSimOffensePref",
            "SetKickingSimData", "TSBTool$ITecmoTool$SetKickingSimData",
            "SetPuntingSimData", "TSBTool$ITecmoTool$SetPuntingSimData",
            "SetDefensiveSimData", "TSBTool$ITecmoTool$SetDefensiveSimData",
            "SetSkillSimData", "TSBTool$ITecmoTool$SetSkillSimData",
            "SetQBSimData", "TSBTool$ITecmoTool$SetQBSimData",
            "SetFace", "TSBTool$ITecmoTool$SetFace",
            "SetPuntReturner", "TSBTool$ITecmoTool$SetPuntReturner",
            "SetKickReturner", "TSBTool$ITecmoTool$SetKickReturner",
            "ApplySet", "TSBTool$ITecmoContent$ApplySet",
            "ApplySet", "TSBTool$ITecmoTool$ApplySet",
            "SetTeamOffensiveFormation", "TSBTool$ITecmoTool$SetTeamOffensiveFormation",
            "SetPlaybook", "TSBTool$ITecmoTool$SetPlaybook",
            "ApplyJuice", "TSBTool$ITecmoTool$ApplyJuice",
            "ApplySchedule", "TSBTool$ITecmoTool$ApplySchedule",
            "SetHomeUniform", "TSBTool$ITecmoTool$SetHomeUniform",
            "SetAwayUniform", "TSBTool$ITecmoTool$SetAwayUniform",
            "GetGameUniform", "TSBTool$ITecmoTool$GetGameUniform",
            "SetDivChampColors", "TSBTool$ITecmoTool$SetDivChampColors",
            "GetDivChampColors", "TSBTool$ITecmoTool$GetDivChampColors",
            "SetConfChampColors", "TSBTool$ITecmoTool$SetConfChampColors",
            "GetChampColors", "TSBTool$ITecmoTool$GetChampColors",
            "GetConfChampColors", "TSBTool$ITecmoTool$GetConfChampColors",
            "GetUniformUsage", "TSBTool$ITecmoTool$GetUniformUsage",
            "SetUniformUsage", "TSBTool$ITecmoTool$SetUniformUsage",
            "SetReturnTeam", "TSBTool$ITecmoTool$SetReturnTeam",
            "SetProBowlPlayer", "TSBTool$ITecmoTool$SetProBowlPlayer",
            "GetProBowlPlayers", "TSBTool$ITecmoTool$GetProBowlPlayers",
            "ProcessText", "TSBTool$ITecmoContent$ProcessText",
            "ProcessText", "TSBTool$ITecmoTool$ProcessText"
        ],
        ctors: {
            init: function () {
                this.namePointersStart = 72;
                this.lastPlayerNamePointer = 1752;
                this.teamSimOffensivePrefStart = 161062;
                this.mBillsPuntKickReturnerPos = 207059;
                this.dataPositionOffset = -32752;
                this.mShowOffPref = false;
                this.maxNameLength = 16;
                this.gameYearLocations = System.Array.init([
                    50404, 
                    123176, 
                    123530, 
                    123581, 
                    129179, 
                    49449
                ], System.Int32);
                this.billsQB1SimLoc = 98659;
                this.billsRESimLoc = 98683;
                this.billsTeamSimLoc = 98706;
                this.teamSimOffset = 48;
                this.billsQB1AbilityStart = 12304;
                this.teamAbilityOffset = 117;
                this.abilityOffsets = System.Array.init([
                    0, 
                    5, 
                    10, 
                    14, 
                    18, 
                    22, 
                    26, 
                    30, 
                    34, 
                    38, 
                    42, 
                    46, 
                    50, 
                    53, 
                    56, 
                    59, 
                    62, 
                    65, 
                    69, 
                    73, 
                    77, 
                    81, 
                    85, 
                    89, 
                    93, 
                    97, 
                    101, 
                    105, 
                    109, 
                    113
                ], System.Int32);
                this.faceOffsets = System.Array.init([
                    0, 
                    5, 
                    10, 
                    14, 
                    18, 
                    22, 
                    26, 
                    30, 
                    34, 
                    38, 
                    42, 
                    46, 
                    50, 
                    53, 
                    56, 
                    59, 
                    62, 
                    65, 
                    69, 
                    73, 
                    77, 
                    81, 
                    85, 
                    89, 
                    93, 
                    97, 
                    101, 
                    105, 
                    109, 
                    113
                ], System.Int32);
                this.faceTeamOffsets = System.Array.init([
                    12306, 
                    12423, 
                    12540, 
                    12657, 
                    12774, 
                    12891, 
                    13008, 
                    13125, 
                    13242, 
                    13359, 
                    13476, 
                    13593, 
                    13710, 
                    13827, 
                    14412, 
                    14061, 
                    14178, 
                    14295, 
                    13944, 
                    14529, 
                    14646, 
                    14763, 
                    14880, 
                    14997, 
                    15114, 
                    15231, 
                    15348, 
                    15465
                ], System.Int32);
                this.mTeamFormationHackLoc = 136770;
                this.mTeamFormationsStartingLoc = 139232;
                this.mTeamFormationsStartingLoc2 = 204416;
                this.mPlaybookStartLoc = 119568;
                this.JUICE_LOCATION = 122640;
                this.m_JuiceArray = System.Array.init([
                    0, 
                    1, 
                    0, 
                    0, 
                    0, 
                    1, 
                    2, 
                    1, 
                    1, 
                    1, 
                    1, 
                    2, 
                    1, 
                    2, 
                    2, 
                    1, 
                    2, 
                    1, 
                    3, 
                    2, 
                    2, 
                    2, 
                    2, 
                    3, 
                    3, 
                    2, 
                    2, 
                    2, 
                    4, 
                    3, 
                    2, 
                    2, 
                    2, 
                    4, 
                    4, 
                    2, 
                    2, 
                    2, 
                    5, 
                    4, 
                    2, 
                    2, 
                    3, 
                    5, 
                    5, 
                    2, 
                    2, 
                    3, 
                    6, 
                    5, 
                    2, 
                    2, 
                    4, 
                    6, 
                    6, 
                    3, 
                    2, 
                    4, 
                    7, 
                    6, 
                    3, 
                    3, 
                    4, 
                    7, 
                    7, 
                    3, 
                    3, 
                    5, 
                    8, 
                    7, 
                    3, 
                    3, 
                    5, 
                    8, 
                    8, 
                    3, 
                    3, 
                    5, 
                    9, 
                    8, 
                    3, 
                    4, 
                    6, 
                    9, 
                    9
                ], System.Byte);
                this.mBillsUniformLoc = 180964;
                this.mBillsActionSeqLoc = 213720;
                this.mBillsDivChampLoc = 213992;
                this.mBillsConfChampLoc = 214164;
                this.mProwbowlStartingLoc = 206931;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (rom) {
                this.$initialize();
                this.Init(rom);
            }
        },
        methods: {
            SetByte: function (location, b) {
                var $t;
                ($t = this.OutputRom)[System.Array.index(location, $t)] = b;
            },
            /**
             * Will ensure that the headder is correct.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @return  {void}
             */
            FixHeadder: function () {
                if (this.outputRom == null) {
                    return;
                }

                var correctHeadder = System.Array.init([
                    78, 
                    69, 
                    83, 
                    26, 
                    16, 
                    16, 
                    66, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0, 
                    0
                ], System.Byte);

                for (var i = 0; i < correctHeadder.length; i = (i + 1) | 0) {
                    this.outputRom[System.Array.index(i, this.outputRom)] = correctHeadder[System.Array.index(i, correctHeadder)];
                }
            },
            IsValidPosition: function (pos) {
                var ret = false;
                for (var i = 0; i < TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(pos, TSBTool.TecmoTool.positionNames.getItem(i))) {
                        ret = true;
                        break;
                    }
                }
                return ret;
            },
            IsValidTeam: function (team) {
                var ret = false;
                for (var i = 0; i < TSBTool.TecmoTool.teams.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(team, TSBTool.TecmoTool.teams.getItem(i))) {
                        ret = true;
                        break;
                    }
                }
                return ret;
            },
            Init: function (rom) {
                return this.InitRom(rom);
            },
            Test2: function () {
                var team = "bills";
                for (var i = 0; i < TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                    this.InsertPlayer(team, TSBTool.TecmoTool.positionNames.getItem(i), "player", team, ((i % 10) & 255));
                    switch (TSBTool.TecmoTool.positionNames.getItem(i)) {
                        case "QB1": 
                        case "QB2": 
                            this.SetQBAbilities(team, TSBTool.TecmoTool.positionNames.getItem(i), 31, 31, 31, 31, 31, 31, 31, 31);
                            break;
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                        case "TE1": 
                        case "TE2": 
                            this.SetSkillPlayerAbilities(team, TSBTool.TecmoTool.positionNames.getItem(i), 31, 31, 31, 31, 31, 31);
                            break;
                        case "C": 
                        case "RG": 
                        case "LG": 
                        case "RT": 
                        case "LT": 
                            this.SetOLPlayerAbilities(team, TSBTool.TecmoTool.positionNames.getItem(i), 31, 31, 31, 31);
                            break;
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "LOLB": 
                        case "LILB": 
                        case "RILB": 
                        case "ROLB": 
                        case "RCB": 
                        case "LCB": 
                        case "FS": 
                        case "SS": 
                            this.SetDefensivePlayerAbilities(team, TSBTool.TecmoTool.positionNames.getItem(i), 31, 31, 31, 31, 31, 31);
                            break;
                        case "K": 
                        case "P": 
                            this.SetKickPlayerAbilities(team, TSBTool.TecmoTool.positionNames.getItem(i), 31, 31, 31, 31, 31, 31);
                            break;
                    }
                }
            },
            shiftTest: function () {
                var stuff = System.Array.init([
                    255, 
                    255, 
                    255, 
                    255, 
                    255, 
                    74, 
                    76, 
                    78, 
                    80, 
                    82, 
                    84, 
                    86, 
                    88, 
                    90, 
                    92, 
                    94, 
                    96, 
                    98, 
                    100, 
                    102, 
                    104, 
                    106, 
                    108, 
                    110, 
                    112, 
                    114, 
                    255, 
                    255, 
                    255, 
                    255, 
                    255
                ], System.Byte);
                for (var i = 0; i < stuff.length; i = (i + 1) | 0) {
                    System.Console.Write(System.String.format(" {0:x} ", Bridge.box(stuff[System.Array.index(i, stuff)], System.Byte)));
                }
                System.Console.WriteLine();
                System.Console.WriteLine("shift 3");
                this.ShiftDataDown(6, ((stuff.length - 7) | 0), 3, stuff);
                for (var i1 = 0; i1 < stuff.length; i1 = (i1 + 1) | 0) {
                    System.Console.Write(System.String.format(" {0:x} ", Bridge.box(stuff[System.Array.index(i1, stuff)], System.Byte)));
                }
                System.Console.WriteLine();

            },
            IsValidRomSize: function (len) {
                var ret = false;
                if (len.equals(System.Int64(TSBTool.TecmoToolFactory.ORIG_NES_TSB1_LEN))) {
                    ret = true;
                }
                return ret;
            },
            InitRom: function (rom) {
                var ret = false;
                try {
                    var result = System.Windows.Forms.DialogResult.Yes;
                    var len = System.Int64(rom.length);
                    if (!this.IsValidRomSize(len)) {
                        if (TSBTool.MainClass.GUI_MODE) {
                            result = System.Windows.Forms.MessageBox.Show(null, System.String.format("Warning! \r\n\r\nThe input Rom is not the correct Size. [{0} size = {1}]\r\n\r\nYou should only continue if you know for sure that you are loading a nes TSB ROM.\r\n\r\nSupported sizes are[{2}, {3}, {4}]\r\n\r\nDo you want to continue?", "<file>", len, Bridge.box(TSBTool.TecmoToolFactory.ORIG_NES_TSB1_LEN, System.Int32), Bridge.box(TSBTool.TecmoToolFactory.CXROM_V105_LEN, System.Int32), Bridge.box(TSBTool.TecmoToolFactory.CXROM_V111_LEN, System.Int32)), "WARNING!", System.Windows.Forms.MessageBoxButtons.YesNo, System.Windows.Forms.MessageBoxIcon.Warning);
                        } else {
                            var msg = System.String.format("ERROR! ROM '{0}' is not the correct length.  \r\n    Supported sizes are [{1}, {2}, or {3}] bytes long.\r\n    If you know this is really a nes TSB ROM, you can force TSBToolSupreme to load it in GUI mode.", "<file>", Bridge.box(TSBTool.TecmoToolFactory.ORIG_NES_TSB1_LEN, System.Int32), Bridge.box(TSBTool.TecmoToolFactory.CXROM_V105_LEN, System.Int32), Bridge.box(TSBTool.TecmoToolFactory.CXROM_V111_LEN, System.Int32));
                            TSBTool.StaticUtils.AddError(msg);
                        }
                    }

                    if (result === System.Windows.Forms.DialogResult.Yes) {
                        this.outputRom = rom;
                        ret = true;
                    }
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                }
                return ret;
            },
            SaveRom: function (filename) {
                if (filename != null) {
                    try {
                        var len = System.Int64(this.outputRom.length);
                        var s1 = new System.IO.FileStream.$ctor1(filename, 4);
                        s1.Write(this.outputRom, 0, System.Int64.clip32(len));
                        s1.Close();
                    } catch (e) {
                        e = System.Exception.create(e);
                        TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                    }
                } else {
                    TSBTool.StaticUtils.AddError("ERROR! You passed a null filename");
                }
            },
            /**
             * Returns a string consisting of number, name\n for all players in the game.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {boolean}    jerseyNumber_b    
             * @param   {boolean}    name_b            
             * @param   {boolean}    face_b            
             * @param   {boolean}    abilities_b       
             * @param   {boolean}    simData_b
             * @return  {string}
             */
            GetPlayerStuff: function (jerseyNumber_b, name_b, face_b, abilities_b, simData_b) {
                var sb = new System.Text.StringBuilder("", 40320);
                var team = "";
                for (var i = 0; i < TSBTool.TecmoTool.teams.Count; i = (i + 1) | 0) {
                    team = TSBTool.TecmoTool.teams.getItem(i);
                    sb.append(System.String.format("TEAM={0}\n", [team]));
                    for (var j = 0; j < TSBTool.TecmoTool.positionNames.Count; j = (j + 1) | 0) {
                        sb.append((this.GetPlayerData(team, TSBTool.TecmoTool.positionNames.getItem(j), abilities_b, jerseyNumber_b, face_b, name_b, simData_b) || "") + "\n");
                    }
                }
                return sb.toString();
            },
            GetSchedule: function () {
                var ret = "";
                if (this.outputRom != null) {
                    var sh2 = new TSBTool.ScheduleHelper2(this.outputRom);
                    ret = sh2.GetSchedule();
                    TSBTool.StaticUtils.ShowErrors();
                }
                return ret;
            },
            GetSchedule$1: function (season) {
                return this.GetSchedule();
            },
            SetYear: function (year) {
                if (year == null || year.length !== 4) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) {0} is not a valid year.", [year]));
                    return;
                }
                var location;
                for (var i = 0; i < this.gameYearLocations.length; i = (i + 1) | 0) {
                    location = this.gameYearLocations[System.Array.index(i, this.gameYearLocations)];
                    this.outputRom[System.Array.index(location, this.outputRom)] = (year.charCodeAt(0)) & 255;
                    this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = (year.charCodeAt(1)) & 255;
                    this.outputRom[System.Array.index(((location + 2) | 0), this.outputRom)] = (year.charCodeAt(2)) & 255;
                    this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = (year.charCodeAt(3)) & 255;
                }
            },
            GetYear: function () {
                var location = this.gameYearLocations[System.Array.index(0, this.gameYearLocations)];
                var ret = "";
                for (var i = location; i < ((location + 4) | 0); i = (i + 1) | 0) {
                    ret = (ret || "") + String.fromCharCode(this.outputRom[System.Array.index(i, this.outputRom)]);
                }

                return ret;
            },
            InsertPlayer: function (team, position, fname, lname, number) {
                if (!this.IsValidPosition(position) || fname == null || lname == null || fname.length < 1 || lname.length < 1) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) InsertPlayer:: Player name or position invalid. team:'{0}'; position:'{1}'; fname:'{2}'; lname:'{3}'", team, position, fname, lname));
                } else {
                    if (Bridge.referenceEquals(this.NameRegex.match((fname || "") + (lname || "")), System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.ShowError(System.String.format("Error on name {0} {1}", fname, lname));
                        return;
                    }

                    fname = fname.toLowerCase();
                    lname = lname.toUpperCase();
                    if (((lname.length + fname.length) | 0) > this.maxNameLength) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning!! There is a 15 character limit for names\n '{0} {1}' is {2} characters long.", fname, lname, Bridge.box(((fname.length + lname.length) | 0), System.Int32)));
                        if (lname.length > ((this.maxNameLength - 2) | 0)) {
                            lname = lname.substr(0, 12);
                            fname = System.String.format("{0}.", [Bridge.box(fname.charCodeAt(0), System.Char, String.fromCharCode, System.Char.getHashCode)]);
                        } else {
                            fname = System.String.format("{0}.", [Bridge.box(fname.charCodeAt(0), System.Char, String.fromCharCode, System.Char.getHashCode)]);
                        }

                        TSBTool.StaticUtils.AddError(System.String.format("Name will be {0} {1}", fname, lname));
                    }
                    if (fname.length < 1) {
                        fname = "Joe";
                    }
                    if (lname.length < 1) {
                        lname = "Nobody";
                    }

                    var oldName = this.GetName(team, position);
                    var bytes = System.Array.init(((((1 + fname.length) | 0) + lname.length) | 0), 0, System.Byte);
                    var change = (bytes.length - oldName.length) | 0;
                    var i = 0;
                    bytes[System.Array.index(0, bytes)] = number;
                    for (i = 1; i < ((fname.length + 1) | 0); i = (i + 1) | 0) {
                        bytes[System.Array.index(i, bytes)] = (fname.charCodeAt(((i - 1) | 0))) & 255;
                    }
                    for (var j = 0; j < lname.length; j = (j + 1) | 0) {
                        bytes[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), bytes)] = (lname.charCodeAt(j)) & 255;
                    }
                    var pos = this.GetPointerPosition(team, position);

                    this.UpdatePlayerData(team, position, bytes, change);
                    this.AdjustDataPointers(pos, change, this.lastPlayerNamePointer);
                }
            },
            /**
             * Updates strng pointers
             *
             * @instance
             * @protected
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {number}    firstPointerLocation    
             * @param   {number}    change                  the amount of change
             * @param   {number}    lastPointerLocation
             * @return  {void}
             */
            AdjustDataPointers: function (firstPointerLocation, change, lastPointerLocation) {
                var low, hi;
                var word;

                var i = 0;
                var end = (lastPointerLocation + 1) | 0;
                for (i = (firstPointerLocation + 2) | 0; i < end; i = (i + 2) | 0) {
                    low = this.outputRom[System.Array.index(i, this.outputRom)];
                    hi = this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)];
                    word = hi;
                    word = word << 8;
                    word = (word + low) | 0;
                    word = (word + change) | 0;
                    low = (word & 255) & 255;
                    word = word >> 8;
                    hi = word & 255;
                    this.outputRom[System.Array.index(i, this.outputRom)] = low;
                    this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)] = hi;
                }
            },
            /**
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        The team the player is assigned to.
             * @param   {string}    position    The player's position ('QB1', 'WR1' ...)
             * @return  {string}
             */
            GetName: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetName:: team '{0}' or position '{1}' is invalid.", team, position));
                    return null;
                }
                var pos = this.GetDataPosition(team, position);
                if (Bridge.referenceEquals(position, "P") && Bridge.referenceEquals(team, "falcons")) {
                    position = position;
                }
                var nextPos = this.GetNextDataPosition(team, position);
                if (nextPos === -1) {
                    var pointerLocation = this.lastPlayerNamePointer;
                    var lowByte = this.outputRom[System.Array.index(pointerLocation, this.outputRom)];
                    var hiByte = this.outputRom[System.Array.index(((pointerLocation + 1) | 0), this.outputRom)];
                    hiByte = hiByte << 8;
                    hiByte = (hiByte + lowByte) | 0;

                    nextPos = (hiByte + this.dataPositionOffset) | 0;
                }
                var name = "";

                if (pos < 0) {
                    return "ERROR!";
                }
                if (nextPos > 0) {
                    for (var i = (pos + 1) | 0; i < nextPos; i = (i + 1) | 0) {
                        name = (name || "") + String.fromCharCode(this.outputRom[System.Array.index(i, this.outputRom)]);
                    }
                }
                var split = 1;
                for (var i1 = 0; i1 < name.length; i1 = (i1 + 1) | 0) {
                    if (((name.charCodeAt(i1)) & 255) > 64 && ((name.charCodeAt(i1)) & 255) < 91) {
                        split = i1;
                        break;
                    }
                }

                var first, last, full;
                full = null;
                try {
                    first = name.substr(0, split);
                    last = name.substr(split);
                    full = (first || "") + " " + (last || "");
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return full;
                }
                return full;
            },
            GetPlayerData: function (team, position, ability_b, jerseyNumber_b, face_b, name_b, simData_b) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Team {0} is invalid.", [team]));
                    return null;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) position {0} is invalid.", [position]));
                    return null;
                }

                var result = new System.Text.StringBuilder();

                result.append(System.String.format("{0}, ", [position]));
                if (name_b) {
                    result.append(System.String.format("{0}, ", [this.GetName(team, position)]));
                }
                if (face_b) {
                    result.append(System.String.format("Face=0x{0:x}, ", [Bridge.box(this.GetFace(team, position), System.Int32)]));
                }
                var location = this.GetDataPosition(team, position);

                if (location < 0) {
                    return "Messed Up Pointer";
                }

                var jerseyNumber = System.String.format("#{0:x}, ", [Bridge.box(this.outputRom[System.Array.index(location, this.outputRom)], System.Byte)]);
                if (jerseyNumber_b) {
                    result.append(jerseyNumber);
                }
                if (ability_b) {
                    result.append(this.GetAbilityString(team, position));
                }
                var simData = this.GetPlayerSimData(team, position);
                if (simData != null && simData_b) {
                    result.append(System.String.format(",[{0}]", [this.StringifyArray(simData)]));
                }
                return result.toString();
            },
            GetKey: function () {
                return System.String.format("# TSBTool Forum: https://tecmobowl.org/forums/topic/11106-tsb-editor-tsbtool-supreme-season-generator/\r\n# Editing:  Tecmo Super Bowl (nes) [{0}]\r\n# Key\r\n# TEAM:\r\n#  name, SimData  0x<offense><defense><offense preference>\r\n#  Offensive pref values 0-3. \r\n#     0 = Little more rushing, 1 = Heavy Rushing,\r\n#     2 = little more passing, 3 = Heavy Passing.\r\n# credit to Jstout for figuring out 'offense preference'\r\n# -- Quarterbacks:\r\n# Position, First name Last name, FaceID, Jersey number, RS, RP, MS, HP, PS, PC, PA, APB, [Sim rush, Sim pass, Sim Pocket].\r\n# -- Offensive Skill players (non-QB):\r\n# Position, First name Last name, FaceID, Jersey number, RS, RP, MS, HP, BC, REC, [Sim rush, Sim catch, Sim punt Ret, Sim kick ret].\r\n# -- Offensive Linemen:\r\n# Position, First name Last name, FaceID, Jersey number, RS, RP, MS, HP\r\n# -- Defensive Players:\r\n# Position, First name Last name, FaceID, Jersey number, RS, RP, MS, HP, PI, QU, [Sim pass rush, Sim coverage].\r\n# -- Punters and Kickers:\r\n# Position, First name Last name, FaceID, Jersey number, RS, RP, MS, HP, KA, AKB,[ Sim kicking ability].", [Bridge.box(this.RomVersion, TSBTool.ROM_TYPE, System.Enum.toStringFn(TSBTool.ROM_TYPE))]);
            },
            GetTeamPlayers: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetTeamPlayers:: team {0} is invalid.", [team]));
                    return null;
                }

                var result = new System.Text.StringBuilder("", Bridge.Int.mul(41, TSBTool.TecmoTool.positionNames.Count));
                var pos;
                var teamSimData = this.GetTeamSimData(team);
                var data = "";
                if (teamSimData < 15) {
                    data = System.String.format("0{0:x}", [Bridge.box(teamSimData, System.Byte)]);
                } else {
                    data = System.String.format("{0:x}", [Bridge.box(teamSimData, System.Byte)]);
                }
                if (this.ShowOffPref) {
                    data = (data || "") + (this.GetTeamSimOffensePref(team));
                }

                var teamString = System.String.format("TEAM = {0} SimData=0x{1}", team, data);
                result.append(teamString);

                if (TSBTool.TecmoTool.ShowTeamFormation) {
                    result.append(System.String.format(", {0}", [this.GetTeamOffensiveFormation(team)]));
                }
                result.append("\n");

                if (TSBTool.TecmoTool.ShowPlaybook) {
                    result.append(System.String.format("{0}\n", [this.GetPlaybook(team)]));
                }
                if (TSBTool.TecmoTool.ShowTeamStrings) {
                    var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                    result.append(System.String.format("TEAM_ABB={0},TEAM_CITY={1},TEAM_NAME={2}\n", this.GetTeamAbbreviation(teamIndex), this.GetTeamCity(teamIndex), this.GetTeamName(teamIndex)));
                }
                if (TSBTool.TecmoTool.ShowColors) {
                    result.append(System.String.format("COLORS {0}, {1}, {2}\n", this.GetGameUniform(team), this.GetChampColors(team), this.GetUniformUsage(team)));
                }

                for (var i = 0; i < TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                    pos = TSBTool.TecmoTool.positionNames.getItem(i);
                    result.append(System.String.format("{0}\n", [this.GetPlayerData(team, pos, true, true, true, true, true)]));
                }
                result.append(System.String.format("KR, {0}\nPR, {1}\n", this.GetKickReturner(team), this.GetPuntReturner(team)));
                result.append("\n");
                return result.toString();
            },
            GetTeamName: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(((teamIndex + 64) | 0));
                return retVal;
            },
            GetTeamCity: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(((teamIndex + 32) | 0));
                return retVal;
            },
            GetTeamAbbreviation: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(teamIndex);
                return retVal;
            },
            GetTeamStringTableString: function (stringIndex) {
                var $t;
                var length = { v : 0 };
                var stringStartingLocation = this.GetTeamStringTableLocation(stringIndex, length);

                var stringChars = System.Array.init(length.v, 0, System.Char);
                for (var i = 0; i < stringChars.length; i = (i + 1) | 0) {
                    stringChars[System.Array.index(i, stringChars)] = ($t = this.OutputRom)[System.Array.index(((stringStartingLocation + i) | 0), $t)];
                }
                var retVal = System.String.fromCharArray(stringChars);
                return retVal;
            },
            /**
             * Returns the location of the 'Team' string table. This string table 
             contains the city abbreviations, city names and team names.
             *
             * @instance
             * @private
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {number}          stringIndex    The index of the string to get.
             * @param   {System.Int32}    length         out param stores the length.
             * @return  {number}                         Returns the location of the string at the specified index.
             */
            GetTeamStringTableLocation: function (stringIndex, length) {
                var $t, $t1, $t2, $t3;
                var team_string_table_loc = this.GetTeamStringTableStart();
                var pointer_loc = (team_string_table_loc + Bridge.Int.mul(2, stringIndex)) | 0;
                var b1 = ($t = this.OutputRom)[System.Array.index(((pointer_loc + 1) | 0), $t)];
                var b2 = ($t1 = this.OutputRom)[System.Array.index(pointer_loc, $t1)];
                var b3 = ($t2 = this.OutputRom)[System.Array.index(((pointer_loc + 3) | 0), $t2)];
                var b4 = ($t3 = this.OutputRom)[System.Array.index(((pointer_loc + 2) | 0), $t3)];
                length.v = (((((b3 << 8) + b4) | 0)) - ((((b1 << 8) + b2) | 0))) | 0;
                var pointerVal = ((b1 << 8) + b2) | 0;
                pointerVal = (pointerVal - 48128) | 0;
                var stringStartingLocation = (team_string_table_loc + pointerVal) | 0;
                return stringStartingLocation;
            },
            SetTeamStringTableString: function (stringIndex, newValue) {
                var $t;
                var junk = { v : 0 };
                var oldValue = this.GetTeamStringTableString(stringIndex);
                if (Bridge.referenceEquals(oldValue, newValue)) {
                    return;
                }
                var shiftAmount = { v : (newValue.length - oldValue.length) | 0 };
                if (shiftAmount.v !== 0) {
                    var currentPointerLocation = (this.GetTeamStringTableStart() + Bridge.Int.mul(2, stringIndex)) | 0;
                    var lastPointerLocation = (this.GetTeamStringTableStart() + Bridge.Int.mul(2, this.NumberOfStringsInTeamStringTable)) | 0;
                    this.AdjustDataPointers(currentPointerLocation, shiftAmount.v, lastPointerLocation);
                    var startPosition = (this.GetTeamStringTableLocation(((stringIndex + 1) | 0), junk) - 1) | 0;
                    var endPosition = 131072;
                    if (shiftAmount.v < 0) {
                        this.ShiftDataUp(startPosition, endPosition, shiftAmount.v, this.outputRom);
                    } else {
                        if (shiftAmount.v > 0) {
                            this.ShiftDataDown(startPosition, endPosition, shiftAmount.v, this.outputRom);
                        }
                    }
                }
                var startLoc = this.GetTeamStringTableLocation(stringIndex, shiftAmount);
                for (var i = 0; i < newValue.length; i = (i + 1) | 0) {
                    ($t = this.OutputRom)[System.Array.index(((startLoc + i) | 0), $t)] = (newValue.charCodeAt(i)) & 255;
                }
            },
            SetTeamAbbreviation: function (teamIndex, abb) {
                if (abb != null && abb.length === 4) {
                    this.SetTeamStringTableString(teamIndex, abb);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting team abbreviation, teamIndex={0}; value length must == 4; {1}", Bridge.box(teamIndex, System.Int32), abb));
                }
            },
            SetTeamName: function (teamIndex, name) {
                if (name.length > 1) {
                    this.SetTeamStringTableString(((teamIndex + 64) | 0), name);
                } else {
                    TSBTool.StaticUtils.AddError("'SetTeamCity': team name must not be empty");
                }
            },
            SetTeamCity: function (teamIndex, city) {
                if (city.length > 1) {
                    this.SetTeamStringTableString(((teamIndex + 32) | 0), city);
                } else {
                    TSBTool.StaticUtils.AddError("'SetTeamCity': city name must not be empty");
                }
            },
            GetTeamStringTableStart: function () {
                var team_string_table_loc = 130064;
                return team_string_table_loc;
            },
            GetAll$1: function (season) {
                return this.GetAll();
            },
            GetAll: function () {
                var team;
                var all = new System.Text.StringBuilder("", Bridge.Int.mul(1230, TSBTool.TecmoTool.positionNames.Count));
                var year = System.String.format("YEAR={0}\n", [this.GetYear()]);
                all.append(year);
                for (var i = 0; i < TSBTool.TecmoTool.teams.Count; i = (i + 1) | 0) {
                    team = TSBTool.TecmoTool.teams.getItem(i);
                    all.append(this.GetTeamPlayers(team));
                }

                return all.toString();
            },
            GetProBowlPlayers$1: function (season) {
                return this.GetProBowlPlayers();
            },
            GetProBowlPlayers: function () {
                var builder = new System.Text.StringBuilder("", 1000);
                builder.append("# AFC ProBowl players\r\n");
                builder.append(this.GetConferenceProBowlPlayers(TSBTool.Conference.AFC));
                builder.append("\r\n");

                builder.append("# NFC ProBowl players\r\n");
                builder.append(this.GetConferenceProBowlPlayers(TSBTool.Conference.NFC));
                builder.append("\r\n");
                return builder.toString();
            },
            /**
             * Gets the point in the player number name data that a player's data begins.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetDataPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetDataPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var guy = (Bridge.Int.mul(teamIndex, TSBTool.TecmoTool.positionNames.Count) + positionIndex) | 0;
                var pointerLocation = (this.namePointersStart + (Bridge.Int.mul(2, guy))) | 0;
                var lowByte = this.outputRom[System.Array.index(pointerLocation, this.outputRom)];
                var hiByte = this.outputRom[System.Array.index(((pointerLocation + 1) | 0), this.outputRom)];
                hiByte = hiByte << 8;
                hiByte = (hiByte + lowByte) | 0;

                var ret = (hiByte + this.dataPositionOffset) | 0;
                return ret;
            },
            /**
             * Get the starting point of the guy AFTER the one passed to this method.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetNextDataPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetNextDataPosition:: either team {0} or position {1} is invalid.", team, position));
                }

                var ti = TSBTool.TecmoTool.GetTeamIndex(team);
                var pi = this.GetPositionIndex(position);
                pi = (pi + 1) | 0;
                if (Bridge.referenceEquals(position, TSBTool.TecmoTool.positionNames.getItem(((TSBTool.TecmoTool.positionNames.Count - 1) | 0)))) {
                    ti = (ti + 1) | 0;
                    pi = 0;
                }
                if (ti === 28 && Bridge.referenceEquals(position, TSBTool.TecmoTool.positionNames.getItem(((TSBTool.TecmoTool.positionNames.Count - 1) | 0)))) {
                    return -1;
                } else {
                    return this.GetDataPosition(TSBTool.TecmoTool.teams.getItem(ti), TSBTool.TecmoTool.positionNames.getItem(pi));
                }
            },
            GetPointerPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetPointerPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var playerSpot = (Bridge.Int.mul(teamIndex, TSBTool.TecmoTool.positionNames.Count) + positionIndex) | 0;
                if (Bridge.referenceEquals(team, TSBTool.TecmoTool.teams.getItem(((TSBTool.TecmoTool.teams.Count - 1) | 0))) && Bridge.referenceEquals(position, TSBTool.TecmoTool.positionNames.getItem(((TSBTool.TecmoTool.positionNames.Count - 1) | 0)))) {
                    return ((this.lastPlayerNamePointer - 2) | 0);
                }
                if (positionIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Position '{0}' does not exist. Valid positions are:", [position]));
                    for (var i = 1; i <= TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                        TSBTool.StaticUtils.WriteError(System.String.format("{0}\t", [TSBTool.TecmoTool.positionNames.getItem(((i - 1) | 0))]));
                    }
                    return -1;
                }
                var ret = (this.namePointersStart + (Bridge.Int.mul(2, playerSpot))) | 0;
                return ret;
            },
            /**
             * Sets the player data (jersey number, player name) in the data segment.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}            team        The team the player is assigned to.
             * @param   {string}            position    The position the player is assigned to.
             * @param   {Array.<number>}    bytes       The player's number and name data.
             * @param   {number}            change
             * @return  {void}
             */
            UpdatePlayerData: function (team, position, bytes, change) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) UpdatePlayerData:: either team {0} or position {1} is invalid.", team, position));
                }
                if (bytes == null) {
                    return;
                }

                var dataStart = this.GetDataPosition(team, position);
                this.ShiftDataAfter(team, position, change);
                var j = 0;
                for (var i = dataStart; j < bytes.length; i = (i + 1) | 0) {
                    this.outputRom[System.Array.index(i, this.outputRom)] = bytes[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), bytes)];
                }
            },
            ShiftDataAfter: function (team, position, shiftAmount) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataAfter:: either team {0} or position {1} is invalid.", team, position));
                }

                if (Bridge.referenceEquals(team, TSBTool.TecmoTool.teams.getItem(((TSBTool.TecmoTool.teams.Count - 1) | 0))) && Bridge.referenceEquals(position, "P")) {
                    return;
                }

                var endPosition = 12303;
                while (this.outputRom[System.Array.index(endPosition, this.outputRom)] === 255) {
                    endPosition = (endPosition - 1) | 0;
                }

                endPosition = (endPosition + 1) | 0;

                var startPosition = this.GetNextDataPosition(team, position);
                if (shiftAmount < 0) {
                    this.ShiftDataUp(startPosition, endPosition, shiftAmount, this.outputRom);
                } else {
                    if (shiftAmount > 0) {
                        this.ShiftDataDown(startPosition, endPosition, shiftAmount, this.outputRom);
                    }
                }
            },
            ShiftDataUp: function (startPos, endPos, shiftAmount, data) {
                if (startPos < 0 || endPos < 0) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataUp:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                }

                var i;
                if (shiftAmount > 0) {
                    System.Console.WriteLine("positive shift amount in ShiftDataUp");
                }

                for (i = startPos; i <= endPos; i = (i + 1) | 0) {
                    data[System.Array.index(((i + shiftAmount) | 0), data)] = data[System.Array.index(i, data)];
                }
                /* i--;
                			for(int j=shiftAmount; j < 0; j++) 
                				data[i++] = 0xff; */

                i = (i + shiftAmount) | 0;
                while (this.outputRom[System.Array.index(i, this.outputRom)] !== 255 && i < 12303) {
                    this.outputRom[System.Array.index(i, this.outputRom)] = 255;
                    i = (i + 1) | 0;
                }

            },
            ShiftDataDown: function (startPos, endPos, shiftAmount, data) {
                if (startPos < 0 || endPos < 0) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataDown:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                }

                for (var i = (endPos + shiftAmount) | 0; i > startPos; i = (i - 1) | 0) {
                    data[System.Array.index(i, data)] = data[System.Array.index(((i - shiftAmount) | 0), data)];
                }
            },
            GetDataAfter: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetDataAfter:: either team {0} or position {1} is invalid.", team, position));
                }

                if (Bridge.referenceEquals(team, TSBTool.TecmoTool.teams.getItem(((TSBTool.TecmoTool.teams.Count - 1) | 0))) && Bridge.referenceEquals(position, "P")) {
                    return null;
                }

                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                positionIndex = (positionIndex + 1) | 0;
                if (Bridge.referenceEquals(position, "P")) {
                    teamIndex = (teamIndex + 1) | 0;
                    positionIndex = 0;
                }
                var endPosition = 12303;
                while (this.outputRom[System.Array.index(endPosition, this.outputRom)] === 255) {
                    endPosition = (endPosition - 1) | 0;
                }

                endPosition = (endPosition + 1) | 0;
                var startPosition = this.GetDataPosition(TSBTool.TecmoTool.teams.getItem(teamIndex), TSBTool.TecmoTool.positionNames.getItem(positionIndex));
                var retBytes = System.Array.init(((endPosition - startPosition) | 0), 0, System.Byte);

                var j = 0;
                for (var i = startPosition; i < ((endPosition + 1) | 0); i = (i + 1) | 0) {
                    retBytes[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), retBytes)] = this.outputRom[System.Array.index(i, this.outputRom)];
                }

                return retBytes;
            },
            /**
             * @instance
             * @protected
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    positionName    like 'QB1', 'K','P' ...
             * @return  {number}
             */
            GetPositionIndex: function (positionName) {
                var ret = -1;
                for (var i = 0; i < TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(TSBTool.TecmoTool.positionNames.getItem(i), positionName)) {
                        ret = i;
                        break;
                    }
                }
                return ret;
            },
            /**
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team              
             * @param   {string}    qb                Either 'QB1' or 'QB2'
             * @param   {number}    runningSpeed      
             * @param   {number}    rushingPower      
             * @param   {number}    maxSpeed          
             * @param   {number}    hittingPower      
             * @param   {number}    passingSpeed      
             * @param   {number}    passControl       
             * @param   {number}    accuracy          
             * @param   {number}    avoidPassBlock
             * @return  {void}
             */
            SetQBAbilities: function (team, qb, runningSpeed, rushingPower, maxSpeed, hittingPower, passingSpeed, passControl, accuracy, avoidPassBlock) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }
                if (!Bridge.referenceEquals(qb, "QB1") && !Bridge.referenceEquals(qb, "QB2")) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Cannot set qb ablities for {0}", [qb]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                passingSpeed = this.GetAbility(passingSpeed);
                passControl = this.GetAbility(passControl);
                accuracy = this.GetAbility(accuracy);
                avoidPassBlock = this.GetAbility(avoidPassBlock);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(passingSpeed) || !this.IsValidAbility(passControl) || !this.IsValidAbility(accuracy) || !this.IsValidAbility(avoidPassBlock)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Abilities for {0} on {1} were not set.", qb, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, qb, runningSpeed, rushingPower, maxSpeed, hittingPower, passingSpeed, passControl);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(qb);
                var location = this.GetAttributeLocation(teamIndex, posIndex);
                var lastByte = accuracy << 4;
                lastByte = (lastByte + avoidPassBlock) | 0;
                this.outputRom[System.Array.index(((location + 4) | 0), this.outputRom)] = lastByte & 255;
                lastByte = passingSpeed << 4;
                lastByte = (lastByte + passControl) | 0;
                this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = lastByte & 255;
            },
            SetSkillPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, ballControl, receptions) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "RB1") && !Bridge.referenceEquals(pos, "RB2") && !Bridge.referenceEquals(pos, "RB3") && !Bridge.referenceEquals(pos, "RB4") && !Bridge.referenceEquals(pos, "WR1") && !Bridge.referenceEquals(pos, "WR2") && !Bridge.referenceEquals(pos, "WR3") && !Bridge.referenceEquals(pos, "WR4") && !Bridge.referenceEquals(pos, "TE1") && !Bridge.referenceEquals(pos, "TE2")) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Cannot set skill player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                ballControl = this.GetAbility(ballControl);
                receptions = this.GetAbility(receptions);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(receptions) || !this.IsValidAbility(ballControl)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Invalid attribute. Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, ballControl, receptions);
            },
            SetKickPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, kickingAbility, avoidKickBlock) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "K") && !Bridge.referenceEquals(pos, "P")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set kick player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                kickingAbility = this.GetAbility(kickingAbility);
                avoidKickBlock = this.GetAbility(avoidKickBlock);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(kickingAbility) || !this.IsValidAbility(avoidKickBlock)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, kickingAbility, avoidKickBlock);
            },
            SetDefensivePlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, passRush, interceptions) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "RE") && !Bridge.referenceEquals(pos, "NT") && !Bridge.referenceEquals(pos, "LE") && !Bridge.referenceEquals(pos, "ROLB") && !Bridge.referenceEquals(pos, "RILB") && !Bridge.referenceEquals(pos, "LILB") && !Bridge.referenceEquals(pos, "LOLB") && !Bridge.referenceEquals(pos, "RCB") && !Bridge.referenceEquals(pos, "LCB") && !Bridge.referenceEquals(pos, "SS") && !Bridge.referenceEquals(pos, "FS")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set defensive player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                passRush = this.GetAbility(passRush);
                interceptions = this.GetAbility(interceptions);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(passRush) || !this.IsValidAbility(interceptions)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, passRush, interceptions);
            },
            SetOLPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "C") && !Bridge.referenceEquals(pos, "RG") && !Bridge.referenceEquals(pos, "LG") && !Bridge.referenceEquals(pos, "RT") && !Bridge.referenceEquals(pos, "LT")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set OL player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, -1, -1);
            },
            SaveAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, bc, rec) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SaveAbilities:: team {0} is invalid", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SaveAbilities:: position {0} is invalid", [pos]));
                    return;
                }

                var byte1, byte2, byte3;
                byte1 = rushingPower & 255;
                byte1 = byte1 << 4;
                byte1 = (byte1 + (runningSpeed & 255)) | 0;
                byte2 = maxSpeed & 255;
                byte2 = byte2 << 4;
                byte2 = (byte2 + (hittingPower & 255)) | 0;
                byte3 = bc & 255;
                byte3 = byte3 << 4;
                byte3 = (byte3 + (rec & 255)) | 0;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(pos);
                var location = this.GetAttributeLocation(teamIndex, posIndex);

                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;

                if (bc > -1 && rec > -1) {
                    this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = byte3 & 255;
                }
            },
            IsValidAbility: function (ab) {
                return ab >= 0 && ab <= 15;
            },
            GetAbility: function (ab) {
                var ret = 0;
                switch (ab) {
                    case 6: 
                        ret = 0;
                        break;
                    case 13: 
                        ret = 1;
                        break;
                    case 19: 
                        ret = 2;
                        break;
                    case 25: 
                        ret = 3;
                        break;
                    case 31: 
                        ret = 4;
                        break;
                    case 38: 
                        ret = 5;
                        break;
                    case 44: 
                        ret = 6;
                        break;
                    case 50: 
                        ret = 7;
                        break;
                    case 56: 
                        ret = 8;
                        break;
                    case 63: 
                        ret = 9;
                        break;
                    case 69: 
                        ret = 10;
                        break;
                    case 75: 
                        ret = 11;
                        break;
                    case 81: 
                        ret = 12;
                        break;
                    case 88: 
                        ret = 13;
                        break;
                    case 94: 
                        ret = 14;
                        break;
                    case 100: 
                        ret = 15;
                        break;
                }
                return ret;
            },
            MapAbality: function (ab) {
                var ret = 0;
                switch (ab) {
                    case 0: 
                        ret = 6;
                        break;
                    case 1: 
                        ret = 13;
                        break;
                    case 2: 
                        ret = 19;
                        break;
                    case 3: 
                        ret = 25;
                        break;
                    case 4: 
                        ret = 31;
                        break;
                    case 5: 
                        ret = 38;
                        break;
                    case 6: 
                        ret = 44;
                        break;
                    case 7: 
                        ret = 50;
                        break;
                    case 8: 
                        ret = 56;
                        break;
                    case 9: 
                        ret = 63;
                        break;
                    case 10: 
                        ret = 69;
                        break;
                    case 11: 
                        ret = 75;
                        break;
                    case 12: 
                        ret = 81;
                        break;
                    case 13: 
                        ret = 88;
                        break;
                    case 14: 
                        ret = 94;
                        break;
                    case 15: 
                        ret = 100;
                        break;
                }
                return ret;
            },
            /**
             * Returns an array of ints mapping to a player's abilities.
             Like { 13, 13, 50, 56, 31, 25}. The length of the array returned varies depending
             on position.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}            team        Team name like 'oilers'.
             * @param   {string}            position    Position name like 'RB4'.
             * @return  {Array.<number>}                an array of ints.
             */
            GetAbilities: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    return null;
                }

                var ret = System.Array.init([0], System.Int32);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(position);
                var location = this.GetAttributeLocation(teamIndex, posIndex);
                var runningSpeed, rushingPower, maxSpeed, hittingPower, wild1, wild2, accuracy, avoidPassBlock;
                var b1, b2, b3, b4;
                b1 = this.outputRom[System.Array.index(location, this.outputRom)];
                b2 = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)];
                b3 = this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)];
                b4 = this.outputRom[System.Array.index(((location + 4) | 0), this.outputRom)];
                runningSpeed = b1 & 15;
                runningSpeed = this.MapAbality(runningSpeed);
                rushingPower = b1 & 240;
                rushingPower = this.MapAbality(rushingPower >> 4);
                maxSpeed = b2 & 240;
                maxSpeed = this.MapAbality(maxSpeed >> 4);
                hittingPower = b2 & 15;
                hittingPower = this.MapAbality(hittingPower);
                wild1 = b3 & 240;
                wild1 = this.MapAbality(wild1 >> 4);
                wild2 = b3 & 15;
                wild2 = this.MapAbality(wild2);
                accuracy = b4 & 240;
                accuracy = this.MapAbality(accuracy >> 4);
                avoidPassBlock = b4 & 15;
                avoidPassBlock = this.MapAbality(avoidPassBlock);
                switch (position) {
                    case "C": 
                    case "RG": 
                    case "LG": 
                    case "RT": 
                    case "LT": 
                        ret = System.Array.init(4, 0, System.Int32);
                        break;
                    case "QB1": 
                    case "QB2": 
                        ret = System.Array.init(8, 0, System.Int32);
                        ret[System.Array.index(4, ret)] = wild1;
                        ret[System.Array.index(5, ret)] = wild2;
                        ret[System.Array.index(6, ret)] = accuracy;
                        ret[System.Array.index(7, ret)] = avoidPassBlock;
                        break;
                    default: 
                        ret = System.Array.init(6, 0, System.Int32);
                        ret[System.Array.index(4, ret)] = wild1;
                        ret[System.Array.index(5, ret)] = wild2;
                        break;
                }
                ret[System.Array.index(0, ret)] = runningSpeed;
                ret[System.Array.index(1, ret)] = rushingPower;
                ret[System.Array.index(2, ret)] = maxSpeed;
                ret[System.Array.index(3, ret)] = hittingPower;
                return ret;
            },
            GetAttributeLocation: function (teamIndex, posIndex) {
                var location = ((((Bridge.Int.mul(teamIndex, this.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(posIndex, this.abilityOffsets)]) | 0) + this.billsQB1AbilityStart) | 0;
                return location;
            },
            /**
             * Returns a string consisting of numbers, spaces and commas.
             Like "31, 69, 13, 13, 31, 44"
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {string}
             */
            GetAbilityString: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    return null;
                }
                var abilities = this.GetAbilities(team, position);
                var stuff = new System.Text.StringBuilder();

                for (var i = 0; i < abilities.length; i = (i + 1) | 0) {
                    stuff.append(abilities[System.Array.index(i, abilities)]);
                    stuff.append(", ");
                }
                stuff.remove(((stuff.getLength() - 2) | 0), 1);
                return stuff.toString();
            },
            /**
             * Returns the simulation data for the given team.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team    The team of interest
             * @return  {number}
             */
            GetTeamSimData: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex >= 0) {
                    var location = (Bridge.Int.mul(teamIndex, this.teamSimOffset) + this.billsTeamSimLoc) | 0;
                    return this.outputRom[System.Array.index(location, this.outputRom)];
                }
                return 0;
            },
            /**
             * Sets the given team's offense and defense sim values.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team      The team to set.
             * @param   {number}    values    The value to set it to.
             * @return  {void}
             */
            SetTeamSimData: function (team, values) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetTeamSimData:: team {0} is invalid ", [team]));
                    return;
                }

                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var location = (Bridge.Int.mul(teamIndex, this.teamSimOffset) + this.billsTeamSimLoc) | 0;
                var currentValue = this.outputRom[System.Array.index(location, this.outputRom)];
                this.outputRom[System.Array.index(location, this.outputRom)] = values;
                currentValue = this.outputRom[System.Array.index(location, this.outputRom)];
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}     team    the team name
             * @param   {number}     val     the number to set it to.
             * @return  {boolean}            true if set, fales if could not set it.
             */
            SetTeamSimOffensePref: function (team, val) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (val > -1 && val < 4 && teamIndex !== -1) {
                    var loc = (this.teamSimOffensivePrefStart + teamIndex) | 0;
                    this.outputRom[System.Array.index(loc, this.outputRom)] = val & 255;
                } else {
                    if (teamIndex !== -1) {
                        TSBTool.StaticUtils.AddError(System.String.format("Can't set offensive pref to '{0}' valid values are 0-3.\n", [Bridge.box(val, System.Int32)]));
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                    }
                }
                return true;
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team    Teh team name.
             * @return  {number}            their sim offense pref (0 - 3)
             */
            GetTeamSimOffensePref: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var val = -1;
                if (teamIndex > -1) {
                    var loc = (this.teamSimOffensivePrefStart + teamIndex) | 0;
                    val = this.outputRom[System.Array.index(loc, this.outputRom)];
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                }
                return val;
            },
            GetPlayerSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPlayerSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPlayerSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                switch (pos) {
                    case "QB1": 
                    case "QB2": 
                        return this.GetQBSimData(team, pos);
                    case "RB1": 
                    case "RB2": 
                    case "RB3": 
                    case "RB4": 
                    case "WR1": 
                    case "WR2": 
                    case "WR3": 
                    case "WR4": 
                    case "TE1": 
                    case "TE2": 
                        return this.GetSkillSimData(team, pos);
                    case "RE": 
                    case "NT": 
                    case "LE": 
                    case "LOLB": 
                    case "LILB": 
                    case "RILB": 
                    case "ROLB": 
                    case "RCB": 
                    case "LCB": 
                    case "FS": 
                    case "SS": 
                        return this.GetDefensiveSimData(team, pos);
                    case "K": 
                        return this.GetKickingSimData(team);
                    case "P": 
                        return this.GetPuntingSimData(team);
                    default: 
                        return null;
                }
            },
            GetKickingSimData: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetKickingSimData:: Invalid team {0}", [team]));
                    return null;
                }
                var ret = System.Array.init(1, 0, System.Int32);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var location = this.GetPunkKickSimDataLocation(teamIndex);
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                return ret;
            },
            SetKickingSimData: function (team, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickingSimData:: Invalid team {0}", [team]));
                    return;
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var location = this.GetPunkKickSimDataLocation(teamIndex);
                var g = this.outputRom[System.Array.index(location, this.outputRom)];
                g = g & 15;
                var g2 = data << 4;
                g = (g + g2) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = g & 255;
            },
            GetPuntingSimData: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPuntingSimData:: Invalid team {0}", [team]));
                    return null;
                }
                var ret = System.Array.init(1, 0, System.Int32);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var location = this.GetPunkKickSimDataLocation(teamIndex);
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                return ret;
            },
            SetPuntingSimData: function (team, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntingSimData:: Invalid team {0}", [team]));
                    return;
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var location = this.GetPunkKickSimDataLocation(teamIndex);
                var d = this.outputRom[System.Array.index(location, this.outputRom)];
                d = d & 240;
                d = (d + data) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = d & 255;
            },
            GetPunkKickSimDataLocation: function (teamIndex) {
                var ret = (((Bridge.Int.mul(teamIndex, this.teamSimOffset) + this.billsQB1SimLoc) | 0) + 46) | 0;
                return ret;
            },
            GetDefensiveSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetDefensiveSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetDefensiveSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(2, 0, System.Int32);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = this.GetDefinsivePlayerSimDataLocation(team, pos);
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)];
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(((location + 11) | 0), this.outputRom)];
                return ret;
            },
            /**
             * Sets the simulation data for a defensive player.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}            team    The team the player belongs to.
             * @param   {string}            pos     the position he plays.
             * @param   {Array.<number>}    data    the data to set it to (length = 2).
             * @return  {void}
             */
            SetDefensiveSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetDefensiveSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetDefensiveSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 2) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = this.GetDefinsivePlayerSimDataLocation(team, pos);
                var byte1, byte2;
                byte1 = (data[System.Array.index(0, data)]) & 255;
                byte2 = (data[System.Array.index(1, data)]) & 255;

                this.outputRom[System.Array.index(location, this.outputRom)] = byte1;
                this.outputRom[System.Array.index(((location + 11) | 0), this.outputRom)] = byte2;
            },
            GetDefinsivePlayerSimDataLocation: function (team, position) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var location = (((Bridge.Int.mul(teamIndex, this.teamSimOffset) + (((positionIndex - 17) | 0))) | 0) + this.billsRESimLoc) | 0;
                return location;
            },
            GetSkillSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetSkillSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetSkillSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(4, 0, System.Int32);
                var location = this.GetOffensivePlayerSimDataLocation(team, pos);
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                ret[System.Array.index(2, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] >> 4;
                ret[System.Array.index(3, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] & 15;
                return ret;
            },
            SetSkillSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetSkillSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetSkillSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 4) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }

                var location = this.GetOffensivePlayerSimDataLocation(team, pos);
                var byte1, byte2;
                byte1 = data[System.Array.index(0, data)] << 4;
                byte1 = (byte1 + data[System.Array.index(1, data)]) | 0;
                byte2 = data[System.Array.index(2, data)] << 4;
                byte2 = (byte2 + data[System.Array.index(3, data)]) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;
            },
            GetQBSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetQBSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetQBSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(3, 0, System.Int32);
                var location = this.GetOffensivePlayerSimDataLocation(team, pos);

                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                ret[System.Array.index(2, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)];
                return ret;
            },
            GetOffensivePlayerSimDataLocation: function (team, position) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var location = (((Bridge.Int.mul(teamIndex, this.teamSimOffset) + (Bridge.Int.mul(positionIndex, 2))) | 0) + this.billsQB1SimLoc) | 0;
                return location;
            },
            SetQBSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetQBSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetQBSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 2) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }

                var location = this.GetOffensivePlayerSimDataLocation(team, pos);
                var byte1, byte2;
                byte1 = ((data[System.Array.index(0, data)]) & 255) << 4;
                byte1 = (byte1 + ((data[System.Array.index(1, data)]) & 255)) | 0;
                byte2 = (data[System.Array.index(2, data)]) & 255;
                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;
            },
            /**
             * Get the face number from the given team/position
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetFace: function (team, position) {
                var positionOffset = this.GetPositionIndex(position);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (positionOffset < 0 || teamIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("GetFace Error getting face for {0} {1}", team, position));
                    return -1;
                }
                var loc = (this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)] + this.faceTeamOffsets[System.Array.index(teamIndex, this.faceTeamOffsets)]) | 0;
                loc = (((12306 + this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)]) | 0) + Bridge.Int.mul(teamIndex, 117)) | 0;
                var ret = this.outputRom[System.Array.index(loc, this.outputRom)];
                return ret;
            },
            /**
             * Sets the face for the guy at position 'position' on team 'team'.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position    
             * @param   {number}    face
             * @return  {void}
             */
            SetFace: function (team, position, face) {
                var positionOffset = this.GetPositionIndex(position);
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (positionOffset < 0 || teamIndex < 0 || !!(face < 0 | face > 212)) {
                    TSBTool.StaticUtils.AddError(System.String.format("SetFace Error setting face for {0} {1} face={2}", team, position, Bridge.box(face, System.Int32)));
                    if (!!(face < 0 | face > 212)) {
                        TSBTool.StaticUtils.AddError(System.String.format("Valid Face numbers are 0x00 - 0xD4", null));
                    }
                    return;
                }
                var loc = (this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)] + this.faceTeamOffsets[System.Array.index(teamIndex, this.faceTeamOffsets)]) | 0;
                loc = (((12306 + this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)]) | 0) + Bridge.Int.mul(teamIndex, 117)) | 0;
                this.outputRom[System.Array.index(loc, this.outputRom)] = face & 255;
            },
            /**
             * Set the punt returner by position.
             Hi nibble.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {void}
             */
            SetPuntReturner: function (team, position) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntReturner:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntReturner:: Invalid Position {0}", [position]));
                    return;
                }

                var location_1 = (145875 + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                var location = (207059 + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                switch (position) {
                    case "QB1": 
                    case "QB2": 
                    case "C": 
                    case "LG": 
                    case "RB1": 
                    case "RB2": 
                    case "RB3": 
                    case "RB4": 
                    case "WR1": 
                    case "WR2": 
                    case "WR3": 
                    case "WR4": 
                    case "TE1": 
                    case "TE2": 
                        var pos = TSBTool.TecmoTool.positionNames.indexOf(position);
                        var b = this.outputRom[System.Array.index(location, this.outputRom)];
                        b = b & 240;
                        b = (b + pos) | 0;
                        this.outputRom[System.Array.index(location, this.outputRom)] = b & 255;
                        this.outputRom[System.Array.index(location_1, this.outputRom)] = b & 255;
                        break;
                    default: 
                        TSBTool.StaticUtils.AddError(System.String.format("Cannot assign '{0}' as a punt returner", [position]));
                        break;
                }

            },
            /**
             * Set the kick returner by position.
             Lo nibble.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {void}
             */
            SetKickReturner: function (team, position) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickReturner:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickReturner:: Invalid Position {0}", [position]));
                    return;
                }

                var location_1 = (145875 + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                var location = (207059 + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                switch (position) {
                    case "QB1": 
                    case "QB2": 
                    case "C": 
                    case "LG": 
                    case "RB1": 
                    case "RB2": 
                    case "RB3": 
                    case "RB4": 
                    case "WR1": 
                    case "WR2": 
                    case "WR3": 
                    case "WR4": 
                    case "TE1": 
                    case "TE2": 
                        var pos = TSBTool.TecmoTool.positionNames.indexOf(position);
                        var b = this.outputRom[System.Array.index(location, this.outputRom)];
                        b = b & 15;
                        b = (b + (pos << 4)) | 0;
                        this.outputRom[System.Array.index(location, this.outputRom)] = b & 255;
                        this.outputRom[System.Array.index(location_1, this.outputRom)] = b & 255;
                        break;
                    default: 
                        TSBTool.StaticUtils.AddError(System.String.format("Cannot assign '{0}' as a kick returner", [position]));
                        break;
                }

            },
            /**
             * Gets the position who returns punts.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetPuntReturner: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPuntReturner:: Invalid team {0}", [team]));
                    return null;
                }

                var ret = "";
                var location = (this.mBillsPuntKickReturnerPos + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                var b = this.outputRom[System.Array.index(location, this.outputRom)];
                b = b & 15;
                ret = TSBTool.TecmoTool.positionNames.getItem(b);
                return ret;
            },
            /**
             * Gets the position who returns kicks.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetKickReturner: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetKickReturner:: Invalid team {0}", [team]));
                    return null;
                }

                var ret = "";
                var location = (207059 + TSBTool.TecmoTool.teams.indexOf(team)) | 0;
                var b = this.outputRom[System.Array.index(location, this.outputRom)];
                b = b & 240;
                b = b >> 4;
                ret = TSBTool.TecmoTool.positionNames.getItem(b);
                return ret;
            },
            ApplySet: function (line) {
                if (this.simpleSetRegex == null) {
                    this.simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                }

                if (!Bridge.referenceEquals(this.simpleSetRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                    TSBTool.StaticUtils.ApplySimpleSet(line, this);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR with line \"{0}\"", [line]));
                }
            },
            /**
             * Sets the team's offensive formation.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team         
             * @param   {string}    formation
             * @return  {void}
             */
            SetTeamOffensiveFormation: function (team, formation) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 255) {
                    var location = (this.mTeamFormationsStartingLoc + teamIndex) | 0;
                    var location2 = (this.mTeamFormationsStartingLoc2 + teamIndex) | 0;
                    if (this.outputRom[System.Array.index(this.mTeamFormationHackLoc, this.outputRom)] === 160) {
                        TSBTool.StaticUtils.ApplySimpleSet("SET(0x21642, 0x8AA66EBCD09FAA4C5096 ) ", this);
                    }

                    switch (formation) {
                        case TSBTool.TecmoTool.m2RB_2WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 0;
                            this.outputRom[System.Array.index(location2, this.outputRom)] = 0;
                            break;
                        case TSBTool.TecmoTool.m1RB_3WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 2;
                            this.outputRom[System.Array.index(location2, this.outputRom)] = 2;
                            break;
                        case TSBTool.TecmoTool.m1RB_4WR: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 1;
                            this.outputRom[System.Array.index(location2, this.outputRom)] = 1;
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Formation {0:x} for team {1} is invalid.", formation, team));
                            TSBTool.StaticUtils.AddError(System.String.format("  Valid formations are:\n  {0}\n  {1}\n  {2}", TSBTool.TecmoTool.m2RB_2WR_1TE, TSBTool.TecmoTool.m1RB_3WR_1TE, TSBTool.TecmoTool.m1RB_4WR));
                            break;
                    }
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Team '{0}' is invalid, Offensive Formation not set", [team]));
                }
            },
            /**
             * Gets the team's offensive formation.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetTeamOffensiveFormation: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                var ret = "OFFENSIVE_FORMATION = ";
                if (teamIndex > -1 && teamIndex < 255) {
                    var location = (this.mTeamFormationsStartingLoc + teamIndex) | 0;
                    var formation = this.outputRom[System.Array.index(location, this.outputRom)];

                    switch (formation) {
                        case 0: 
                            ret = (ret || "") + (TSBTool.TecmoTool.m2RB_2WR_1TE || "");
                            break;
                        case 2: 
                            ret = (ret || "") + (TSBTool.TecmoTool.m1RB_3WR_1TE || "");
                            break;
                        case 1: 
                            ret = (ret || "") + (TSBTool.TecmoTool.m1RB_4WR || "");
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Formation {0:x} for team {1} is invalid, ROM FORMATIONS could be messed up.", Bridge.box(formation, System.Int32), team));
                            ret = "";
                            break;
                    }
                } else {
                    ret = "";
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Team '{0}' is invalid, Offensive Formation get failed.", [team]));
                }
                return ret;
            },
            GetPlaybookLocation: function (team_index) {
                return ((this.mPlaybookStartLoc + (Bridge.Int.mul(team_index, 4))) | 0);
            },
            /**
             * Returns a string like "PLAYBOOK R1, R4, R6, R8, P1, P3, P7, P3"
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetPlaybook: function (team) {
                var ret = "";
                var rSlot1, rSlot2, rSlot3, rSlot4, pSlot1, pSlot2, pSlot3, pSlot4;

                var teamIndex = TSBTool.TecmoTool.teams.indexOf(team);
                if (teamIndex > -1) {
                    var pbLocation = this.GetPlaybookLocation(teamIndex);
                    rSlot1 = this.outputRom[System.Array.index(pbLocation, this.outputRom)] >> 4;
                    rSlot2 = this.outputRom[System.Array.index(pbLocation, this.outputRom)] & 15;
                    rSlot3 = this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] >> 4;
                    rSlot4 = this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] & 15;

                    pSlot1 = this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] >> 4;
                    pSlot2 = this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] & 15;
                    pSlot3 = this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] >> 4;
                    pSlot4 = this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] & 15;

                    ret = System.String.format("PLAYBOOK R{0}{1}{2}{3}, P{4}{5}{6}{7} ", Bridge.box(((rSlot1 + 1) | 0), System.Int32), Bridge.box(((rSlot2 + 1) | 0), System.Int32), Bridge.box(((rSlot3 + 1) | 0), System.Int32), Bridge.box(((rSlot4 + 1) | 0), System.Int32), Bridge.box(((pSlot1 + 1) | 0), System.Int32), Bridge.box(((pSlot2 + 1) | 0), System.Int32), Bridge.box(((pSlot3 + 1) | 0), System.Int32), Bridge.box(((pSlot4 + 1) | 0), System.Int32));
                }

                return ret;
            },
            /**
             * Sets the team's playbook
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team         
             * @param   {string}    runPlays     String like "R1234"
             * @param   {string}    passPlays    String like "P4567"
             * @return  {void}
             */
            SetPlaybook: function (team, runPlays, passPlays) {
                if (this.runRegex == null || this.passRegex == null) {
                    this.runRegex = new System.Text.RegularExpressions.Regex.ctor("R([1-8])([1-8])([1-8])([1-8])");
                    this.passRegex = new System.Text.RegularExpressions.Regex.ctor("P([1-8])([1-8])([1-8])([1-8])");
                }
                var runs = this.runRegex.match(runPlays);
                var pass = this.passRegex.match(passPlays);

                var r1, r2, r3, r4, p1, p2, p3, p4;

                var teamIndex = TSBTool.TecmoTool.teams.indexOf(team);
                if (teamIndex > -1 && !Bridge.referenceEquals(runs, System.Text.RegularExpressions.Match.getEmpty()) && !Bridge.referenceEquals(pass, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pbLocation = this.GetPlaybookLocation(teamIndex);

                    r1 = (System.Int32.parse(runs.getGroups().get(1).toString()) - 1) | 0;
                    r2 = (System.Int32.parse(runs.getGroups().get(2).toString()) - 1) | 0;
                    r3 = (System.Int32.parse(runs.getGroups().get(3).toString()) - 1) | 0;
                    r4 = (System.Int32.parse(runs.getGroups().get(4).toString()) - 1) | 0;

                    p1 = (System.Int32.parse(pass.getGroups().get(1).toString()) - 1) | 0;
                    p2 = (System.Int32.parse(pass.getGroups().get(2).toString()) - 1) | 0;
                    p3 = (System.Int32.parse(pass.getGroups().get(3).toString()) - 1) | 0;
                    p4 = (System.Int32.parse(pass.getGroups().get(4).toString()) - 1) | 0;

                    r1 = ((r1 << 4) + r2) | 0;
                    r3 = ((r3 << 4) + r4) | 0;
                    p1 = ((p1 << 4) + p2) | 0;
                    p3 = ((p3 << 4) + p4) | 0;
                    this.outputRom[System.Array.index(pbLocation, this.outputRom)] = r1 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] = r3 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] = p1 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] = p3 & 255;
                } else {
                    if (teamIndex < 0) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook: Team {0} is Invalid.", [team]));
                    }
                    if (Bridge.referenceEquals(runs, System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook Run play definition '{0} 'is Invalid", [runPlays]));
                    }
                    if (Bridge.referenceEquals(pass, System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook Pass play definition '{0} 'is Invalid", [passPlays]));
                    }
                }
            },
            ApplyJuice: function (week, amt) {
                var ret = true;
                if (week > 17 || week < 0 || amt > 17 || amt < 0) {
                    ret = false;
                } else {
                    var rom_location = (this.JUICE_LOCATION + (Bridge.Int.mul(week, 5))) | 0;
                    var index = Bridge.Int.mul((((amt - 1) | 0)), 5);
                    for (var i = 0; i < 5; i = (i + 1) | 0) {
                        this.outputRom[System.Array.index(((rom_location + i) | 0), this.outputRom)] = this.m_JuiceArray[System.Array.index(((index + i) | 0), this.m_JuiceArray)];
                    }
                }
                return ret;
            },
            /**
             * Returns an ArrayList of errors that were encountered during the operation.
             *
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {System.Collections.Generic.List$1}    scheduleList
             * @return  {void}
             */
            ApplySchedule: function (scheduleList) {
                if (scheduleList != null && this.outputRom != null) {
                    var sch = new TSBTool.ScheduleHelper2(this.outputRom);
                    sch.ApplySchedule(scheduleList);
                }
            },
            PrintValidAbilities: function () {
                TSBTool.StaticUtils.AddError(System.String.format("Valid player abilities are 6, 13, 19, 25, 31, 38, 44, 50, 56, 63, 69, 75, 81, 88, 94, 100", null));
            },
            StringifyArray: function (input) {
                if (input == null) {
                    return null;
                }

                var sb = new System.Text.StringBuilder("", 40);
                for (var i = 0; i < input.length; i = (i + 1) | 0) {
                    sb.append(System.String.format("{0}, ", [Bridge.box(input[System.Array.index(i, input)], System.Int32)]));
                }
                sb.remove(((sb.getLength() - 2) | 0), 1);
                return sb.toString();
            },
            SetHomeUniform: function (team, colorString) {
                var $t, $t1, $t2, $t3, $t4;
                var loc = this.GetUniformLoc(team);
                var loc2 = this.GetActionSeqUniformLoc(team);
                var bytes = TSBTool.InputParser.GetBytesFromString(colorString);
                if (loc > -1 && loc2 > -1 && bytes != null && bytes.length > 2) {
                    var pantsColor = bytes[System.Array.index(0, bytes)];
                    var skinColor = bytes[System.Array.index(1, bytes)];
                    var jerseyColor = bytes[System.Array.index(2, bytes)];
                    ($t = this.OutputRom)[System.Array.index(loc, $t)] = pantsColor;
                    ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = skinColor;
                    ($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)] = jerseyColor;
                    ($t3 = this.OutputRom)[System.Array.index(loc2, $t3)] = pantsColor;
                    ($t4 = this.OutputRom)[System.Array.index(((loc2 + 1) | 0), $t4)] = jerseyColor;
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR setting Uniform1 for team {0},'{1}'", team, colorString));
                }
            },
            SetAwayUniform: function (team, colorString) {
                var $t, $t1, $t2, $t3, $t4;
                var loc = this.GetUniformLoc(team);
                var loc2 = this.GetActionSeqUniformLoc(team);

                var bytes = TSBTool.InputParser.GetBytesFromString(colorString);
                if (loc > -1 && loc2 > -1 && bytes != null && bytes.length > 2) {
                    var pantsColor = bytes[System.Array.index(0, bytes)];
                    var skinColor = bytes[System.Array.index(1, bytes)];
                    var jerseyColor = bytes[System.Array.index(2, bytes)];
                    ($t = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t)] = pantsColor;
                    ($t1 = this.OutputRom)[System.Array.index(((loc + 4) | 0), $t1)] = skinColor;
                    ($t2 = this.OutputRom)[System.Array.index(((loc + 5) | 0), $t2)] = jerseyColor;
                    ($t3 = this.OutputRom)[System.Array.index(((loc2 + 2) | 0), $t3)] = pantsColor;
                    ($t4 = this.OutputRom)[System.Array.index(((loc2 + 3) | 0), $t4)] = jerseyColor;
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR setting Uniform2 for team {0},'{1}'", team, colorString));
                }
            },
            GetHomeUniform: function (team) {
                var $t, $t1, $t2;
                var ret = "";
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                    ret = System.String.format("Uniform1=0x{0:x2}{1:x2}{2:x2}", Bridge.box(($t = this.OutputRom)[System.Array.index(loc, $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)], System.Byte));
                }
                return ret;
            },
            GetAwayUniform: function (team) {
                var $t, $t1, $t2;
                var ret = "";
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                    ret = System.String.format("Uniform2=0x{0:x2}{1:x2}{2:x2}", Bridge.box(($t = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((loc + 4) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((loc + 5) | 0), $t2)], System.Byte));
                }
                return ret;
            },
            /**
             * Gets the location of the given team's uniform data.
             *
             * @instance
             * @protected
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {number}            The location of the given team's uniform data, -1 on error
             */
            GetUniformLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 28) {
                    ret = (this.BillsUniformLoc + (Bridge.Int.mul(teamIndex, 10))) | 0;
                }
                return ret;
            },
            /**
             * Gets the location of the given team's uniform data.
             *
             * @instance
             * @protected
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {string}    team
             * @return  {number}            The location of the given team's uniform data, -1 on error
             */
            GetActionSeqUniformLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 28) {
                    ret = (this.BillsActionSeqLoc + (Bridge.Int.mul(teamIndex, 8))) | 0;
                }
                return ret;
            },
            GetGameUniform: function (team) {
                var ret = "";
                ret = System.String.format("{0}, {1}", this.GetHomeUniform(team), this.GetAwayUniform(team));
                return ret;
            },
            GetDivChampLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 28) {
                    ret = (this.BillsDivChampLoc + (Bridge.Int.mul(teamIndex, 5))) | 0;
                }
                return ret;
            },
            GetConfChampLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 28) {
                    ret = (this.BillsConfChampLoc + (Bridge.Int.mul(teamIndex, 4))) | 0;
                }
                return ret;
            },
            SetDivChampColors: function (team, colorString) {
                var $t, $t1, $t2, $t3, $t4;
                var loc = this.GetDivChampLoc(team);
                var colorBytes = TSBTool.InputParser.GetBytesFromString(colorString);
                if (loc > -1 && colorBytes != null && colorBytes.length > 4) {
                    ($t = this.OutputRom)[System.Array.index(loc, $t)] = colorBytes[System.Array.index(0, colorBytes)];
                    ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = colorBytes[System.Array.index(1, colorBytes)];
                    ($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)] = colorBytes[System.Array.index(2, colorBytes)];
                    ($t3 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t3)] = colorBytes[System.Array.index(3, colorBytes)];
                    ($t4 = this.OutputRom)[System.Array.index(((loc + 4) | 0), $t4)] = colorBytes[System.Array.index(4, colorBytes)];
                }
            },
            GetDivChampColors: function (team) {
                var $t, $t1, $t2, $t3, $t4;
                var ret = "";
                var loc = this.GetDivChampLoc(team);
                if (loc > -1) {
                    ret = System.String.format("DivChamp=0x{0:x2}{1:x2}{2:x2}{3:x2}{4:x2}", Bridge.box(($t = this.OutputRom)[System.Array.index(loc, $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)], System.Byte), Bridge.box(($t3 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t3)], System.Byte), Bridge.box(($t4 = this.OutputRom)[System.Array.index(((loc + 4) | 0), $t4)], System.Byte));
                }
                return ret;
            },
            SetConfChampColors: function (team, colorString) {
                var $t, $t1, $t2, $t3;
                var ret = "";
                var loc = this.GetConfChampLoc(team);
                var colorBytes = TSBTool.InputParser.GetBytesFromString(colorString);
                if (loc > -1 && colorBytes != null && colorBytes.length > 3) {
                    ($t = this.OutputRom)[System.Array.index(loc, $t)] = colorBytes[System.Array.index(3, colorBytes)];
                    ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = colorBytes[System.Array.index(0, colorBytes)];
                    ($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)] = colorBytes[System.Array.index(1, colorBytes)];
                    ($t3 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t3)] = colorBytes[System.Array.index(2, colorBytes)];
                }
            },
            GetChampColors: function (team) {
                var ret = System.String.format("{0}, {1}", this.GetDivChampColors(team), this.GetConfChampColors(team));
                return ret;
            },
            GetConfChampColors: function (team) {
                var $t, $t1, $t2, $t3;
                var ret = "";
                var loc = this.GetConfChampLoc(team);
                if (loc > -1) {
                    ret = System.String.format("ConfChamp=0x{0:x2}{1:x2}{2:x2}{3:x2}", Bridge.box(($t = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t2)], System.Byte), Bridge.box(($t3 = this.OutputRom)[System.Array.index(loc, $t3)], System.Byte));
                }
                return ret;
            },
            GetUniformUsage: function (team) {
                var $t, $t1, $t2, $t3;
                var ret = "";
                var loc = (this.GetUniformLoc(team) + 6) | 0;
                if (loc > -1) {
                    ret = System.String.format("UniformUsage=0x{0:x2}{1:x2}{2:x2}{3:x2}", Bridge.box(($t = this.OutputRom)[System.Array.index(loc, $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)], System.Byte), Bridge.box(($t3 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t3)], System.Byte));
                }
                return ret;
            },
            SetUniformUsage: function (team, usage) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                var loc = (this.GetUniformLoc(team) + 6) | 0;
                var loc2 = (this.GetActionSeqUniformLoc(team) + 4) | 0;
                var colorBytes = TSBTool.InputParser.GetBytesFromString(usage);
                if (loc > -1 && colorBytes != null && colorBytes.length > 3) {
                    ($t = this.OutputRom)[System.Array.index(loc, $t)] = colorBytes[System.Array.index(0, colorBytes)];
                    ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = colorBytes[System.Array.index(1, colorBytes)];
                    ($t2 = this.OutputRom)[System.Array.index(((loc + 2) | 0), $t2)] = colorBytes[System.Array.index(2, colorBytes)];
                    ($t3 = this.OutputRom)[System.Array.index(((loc + 3) | 0), $t3)] = colorBytes[System.Array.index(3, colorBytes)];

                    ($t4 = this.OutputRom)[System.Array.index(loc2, $t4)] = colorBytes[System.Array.index(0, colorBytes)];
                    ($t5 = this.OutputRom)[System.Array.index(((loc2 + 1) | 0), $t5)] = colorBytes[System.Array.index(1, colorBytes)];
                    ($t6 = this.OutputRom)[System.Array.index(((loc2 + 2) | 0), $t6)] = colorBytes[System.Array.index(2, colorBytes)];
                    ($t7 = this.OutputRom)[System.Array.index(((loc2 + 3) | 0), $t7)] = colorBytes[System.Array.index(3, colorBytes)];
                }
            },
            SetReturnTeam: function (team, pos0, pos1, pos2) { },
            
            SetProBowlPlayer: function (conf, proBowlPos, fromTeam, fromTeamPos) {
                var $t, $t1;
                var offset = 0;
                if (conf === TSBTool.Conference.NFC) {
                    offset = (offset + 60) | 0;
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(fromTeam);
                if (teamIndex < 0) {
                    throw new System.Exception(System.String.format("Error, team '{0}' is invalid", [fromTeam]));
                }
                var val1 = teamIndex & 255;
                var val2 = fromTeamPos & 255;

                var posIndex = this.GetPositionIndex(proBowlPos);
                var loc = (((this.mProwbowlStartingLoc + offset) | 0) + (Bridge.Int.mul(2, posIndex))) | 0;
                ($t = this.OutputRom)[System.Array.index(loc, $t)] = val1;
                ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = val2;
            },
            /**
             * @instance
             * @public
             * @this TSBTool.TecmoTool
             * @memberof TSBTool.TecmoTool
             * @param   {TSBTool.Conference}    conf          
             * @param   {string}                proBowlPos
             * @return  {string}
             */
            GetProBowlPlayer: function (conf, proBowlPos) {
                var $t, $t1;
                var ret = "";
                var offset = 0;
                if (conf === TSBTool.Conference.NFC) {
                    offset = (offset + 60) | 0;
                }
                var loc = (((this.mProwbowlStartingLoc + offset) | 0) + (Bridge.Int.mul(2, this.GetPositionIndex(proBowlPos)))) | 0;
                var teamIndex = ($t = this.OutputRom)[System.Array.index(loc, $t)];
                var pos = ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)];

                var team = TSBTool.TecmoTool.Teams.getItem(teamIndex);
                ret = System.String.format("{0},{1},{2},{3}", System.Enum.toString(TSBTool.Conference, conf), Bridge.toString(proBowlPos), team, System.Enum.toString(TSBTool.TSBPlayer, pos));

                return ret;
            },
            GetConferenceProBowlPlayers: function (conf) {
                var builder = new System.Text.StringBuilder("", 500);
                for (var i = 0; i < TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                    builder.append(this.GetProBowlPlayer(conf, TSBTool.TecmoTool.positionNames.getItem(i)));
                    builder.append("\r\n");
                }
                return builder.toString();
            },
            ProcessText: function (text) {
                var parser = new TSBTool.InputParser.$ctor1(this);
                text = System.String.replaceAll(text, "\r\n", "\n");
                var lines = System.String.split(text, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                parser.ProcessLines(lines);
            }
        }
    });

    /**
     * Summary description for SNES_TecmoTool.
     Location = pointer - 0x8000 + 0x0010;
     Where pointer is of the 'swapped' format like '0x86dd'
     *
     * @public
     * @class TSBTool.SNES_TecmoTool
     * @implements  TSBTool.ITecmoTool
     * @implements  TSBTool.ITecmoContent
     */
    Bridge.define("TSBTool.SNES_TecmoTool", {
        inherits: [TSBTool.ITecmoTool,TSBTool.ITecmoContent],
        statics: {
            fields: {
                nameNumberSegmentEnd: 0,
                namePointersStart: 0,
                playerNumberNameDataStart: 0,
                teamSimOffensivePrefStart: 0,
                pr_kr_start_offset: 0,
                pr_kr_team_start_offset: 0,
                lastPointer: 0,
                ROM_LENGTH: 0,
                billsQB1SimLoc: 0,
                billsRESimLoc: 0,
                billsTeamSimLoc: 0,
                teamSimOffset: 0,
                billsQB1AbilityStart: 0,
                teamAbilityOffset: 0,
                QUARTER_LENGTH: 0,
                m2RB_2WR_1TE: null,
                m1RB_3WR_1TE: null,
                m1RB_4WR: null,
                mPlaybookStartLoc: 0,
                JUICE_LOCATION: 0,
                mRaceCutsceneStartPos: 0,
                GUI_MODE: false,
                AUTO_CORRECT_SCHEDULE: false,
                teams: null,
                mSimTeams: null
            },
            ctors: {
                init: function () {
                    this.nameNumberSegmentEnd = 1554416;
                    this.namePointersStart = 1540152;
                    this.playerNumberNameDataStart = 1541946;
                    this.teamSimOffensivePrefStart = 89594;
                    this.pr_kr_start_offset = 1510544;
                    this.pr_kr_team_start_offset = 1510576;
                    this.lastPointer = 1541944;
                    this.ROM_LENGTH = 1572864;
                    this.billsQB1SimLoc = 158415;
                    this.billsRESimLoc = 158439;
                    this.billsTeamSimLoc = 158462;
                    this.teamSimOffset = 48;
                    this.billsQB1AbilityStart = 1564672;
                    this.teamAbilityOffset = 125;
                    this.QUARTER_LENGTH = 41198;
                    this.m2RB_2WR_1TE = "2RB_2WR_1TE";
                    this.m1RB_3WR_1TE = "1RB_3WR_1TE";
                    this.m1RB_4WR = "1RB_4WR";
                    this.mPlaybookStartLoc = 1510704;
                    this.JUICE_LOCATION = 158106;
                    this.mRaceCutsceneStartPos = 6127;
                    this.GUI_MODE = false;
                    this.AUTO_CORRECT_SCHEDULE = true;
                    this.teams = System.Array.init([
                        "bills", 
                        "colts", 
                        "dolphins", 
                        "patriots", 
                        "jets", 
                        "bengals", 
                        "browns", 
                        "oilers", 
                        "steelers", 
                        "broncos", 
                        "chiefs", 
                        "raiders", 
                        "chargers", 
                        "seahawks", 
                        "cowboys", 
                        "giants", 
                        "eagles", 
                        "cardinals", 
                        "redskins", 
                        "bears", 
                        "lions", 
                        "packers", 
                        "vikings", 
                        "buccaneers", 
                        "falcons", 
                        "rams", 
                        "saints", 
                        "49ers"
                    ], System.String);
                    this.mSimTeams = System.Array.init([
                        "bills", 
                        "colts", 
                        "dolphins", 
                        "patriots", 
                        "jets", 
                        "bengals", 
                        "browns", 
                        "oilers", 
                        "steelers", 
                        "broncos", 
                        "chiefs", 
                        "raiders", 
                        "chargers", 
                        "seahawks", 
                        "redskins", 
                        "giants", 
                        "eagles", 
                        "cardinals", 
                        "cowboys", 
                        "bears", 
                        "lions", 
                        "packers", 
                        "vikings", 
                        "buccaneers", 
                        "49ers", 
                        "rams", 
                        "saints", 
                        "falcons"
                    ], System.String);
                }
            },
            methods: {
                GetTeamIndex: function (teamName) {
                    var ret = -1;
                    if (Bridge.referenceEquals(teamName.toLowerCase(), "null")) {
                        return 255;
                    }
                    for (var i = 0; i < TSBTool.SNES_TecmoTool.teams.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(TSBTool.SNES_TecmoTool.teams[System.Array.index(i, TSBTool.SNES_TecmoTool.teams)], teamName)) {
                            ret = i;
                            break;
                        }
                    }
                    return ret;
                },
                GetSimTeamIndex: function (teamName) {
                    var ret = -1;
                    if (Bridge.referenceEquals(teamName.toLowerCase(), "null")) {
                        return 255;
                    }
                    for (var i = 0; i < TSBTool.SNES_TecmoTool.mSimTeams.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(TSBTool.SNES_TecmoTool.mSimTeams[System.Array.index(i, TSBTool.SNES_TecmoTool.mSimTeams)], teamName)) {
                            ret = i;
                            break;
                        }
                    }
                    return ret;
                },
                /**
                 * Returns the team specified by the index passed. (0= bills).
                 *
                 * @static
                 * @public
                 * @this TSBTool.SNES_TecmoTool
                 * @memberof TSBTool.SNES_TecmoTool
                 * @param   {number}    index
                 * @return  {string}             team name on success, null on failure
                 */
                GetTeamFromIndex: function (index) {
                    if (index === 255) {
                        return "null";
                    }
                    if (index < 0 || index > ((TSBTool.SNES_TecmoTool.teams.length - 1) | 0)) {
                        return null;
                    }
                    return TSBTool.SNES_TecmoTool.teams[System.Array.index(index, TSBTool.SNES_TecmoTool.teams)];
                }
            }
        },
        fields: {
            outputRom: null,
            dataPositionOffset: 0,
            mShowOffPref: false,
            abilityOffsets: null,
            gameYearLocations: null,
            positionNames: null,
            mTeamFormationsStartingLoc: 0,
            runRegex: null,
            passRegex: null,
            m_JuiceArray: null,
            mProwbowlStartingLoc: 0,
            simpleSetRegex: null,
            mBillsUniformLoc: 0
        },
        props: {
            /**
             * Returns the rom version
             *
             * @instance
             * @public
             * @readonly
             * @memberof TSBTool.SNES_TecmoTool
             * @function RomVersion
             * @type TSBTool.ROM_TYPE
             */
            RomVersion: {
                get: function () {
                    return TSBTool.ROM_TYPE.SNES_TSB1;
                }
            },
            OutputRom: {
                get: function () {
                    return this.outputRom;
                },
                set: function (value) {
                    this.outputRom = value;
                }
            },
            ShowOffPref: {
                get: function () {
                    return this.mShowOffPref;
                },
                set: function (value) {
                    this.mShowOffPref = value;
                }
            },
            NumberOfStringsInTeamStringTable: {
                get: function () {
                    return 30;
                }
            },
            BillsUniformLoc: {
                get: function () {
                    return this.mBillsUniformLoc;
                },
                set: function (value) {
                    this.mBillsUniformLoc = value;
                }
            }
        },
        alias: [
            "RomVersion", "TSBTool$ITecmoContent$RomVersion",
            "RomVersion", "TSBTool$ITecmoTool$RomVersion",
            "OutputRom", "TSBTool$ITecmoContent$OutputRom",
            "OutputRom", "TSBTool$ITecmoTool$OutputRom",
            "ShowOffPref", "TSBTool$ITecmoContent$ShowOffPref",
            "ShowOffPref", "TSBTool$ITecmoTool$ShowOffPref",
            "IsValidPosition", "TSBTool$ITecmoTool$IsValidPosition",
            "SetByte", "TSBTool$ITecmoContent$SetByte",
            "SaveRom", "TSBTool$ITecmoContent$SaveRom",
            "SaveRom", "TSBTool$ITecmoTool$SaveRom",
            "GetPlayerStuff", "TSBTool$ITecmoTool$GetPlayerStuff",
            "GetSchedule", "TSBTool$ITecmoTool$GetSchedule",
            "SetYear", "TSBTool$ITecmoTool$SetYear",
            "InsertPlayer", "TSBTool$ITecmoTool$InsertPlayer",
            "GetKey", "TSBTool$ITecmoContent$GetKey",
            "GetKey", "TSBTool$ITecmoTool$GetKey",
            "GetTeamPlayers", "TSBTool$ITecmoTool$GetTeamPlayers",
            "NumberOfStringsInTeamStringTable", "TSBTool$ITecmoTool$NumberOfStringsInTeamStringTable",
            "SetTeamStringTableString", "TSBTool$ITecmoTool$SetTeamStringTableString",
            "GetTeamStringTableString", "TSBTool$ITecmoTool$GetTeamStringTableString",
            "GetTeamName", "TSBTool$ITecmoTool$GetTeamName",
            "GetTeamCity", "TSBTool$ITecmoTool$GetTeamCity",
            "GetTeamAbbreviation", "TSBTool$ITecmoTool$GetTeamAbbreviation",
            "SetTeamAbbreviation", "TSBTool$ITecmoTool$SetTeamAbbreviation",
            "SetTeamName", "TSBTool$ITecmoTool$SetTeamName",
            "SetTeamCity", "TSBTool$ITecmoTool$SetTeamCity",
            "GetAll$1", "TSBTool$ITecmoContent$GetAll",
            "GetProBowlPlayers$1", "TSBTool$ITecmoContent$GetProBowlPlayers",
            "GetSchedule$1", "TSBTool$ITecmoContent$GetSchedule",
            "GetAll", "TSBTool$ITecmoTool$GetAll",
            "SetQBAbilities", "TSBTool$ITecmoTool$SetQBAbilities",
            "SetSkillPlayerAbilities", "TSBTool$ITecmoTool$SetSkillPlayerAbilities",
            "SetKickPlayerAbilities", "TSBTool$ITecmoTool$SetKickPlayerAbilities",
            "SetDefensivePlayerAbilities", "TSBTool$ITecmoTool$SetDefensivePlayerAbilities",
            "SetOLPlayerAbilities", "TSBTool$ITecmoTool$SetOLPlayerAbilities",
            "SetTeamSimData", "TSBTool$ITecmoTool$SetTeamSimData",
            "SetTeamSimOffensePref", "TSBTool$ITecmoTool$SetTeamSimOffensePref",
            "SetTeamOffensiveFormation", "TSBTool$ITecmoTool$SetTeamOffensiveFormation",
            "SetPlaybook", "TSBTool$ITecmoTool$SetPlaybook",
            "ApplyJuice", "TSBTool$ITecmoTool$ApplyJuice",
            "SetKickingSimData", "TSBTool$ITecmoTool$SetKickingSimData",
            "SetPuntingSimData", "TSBTool$ITecmoTool$SetPuntingSimData",
            "SetDefensiveSimData", "TSBTool$ITecmoTool$SetDefensiveSimData",
            "SetSkillSimData", "TSBTool$ITecmoTool$SetSkillSimData",
            "SetQBSimData", "TSBTool$ITecmoTool$SetQBSimData",
            "SetFace", "TSBTool$ITecmoTool$SetFace",
            "SetReturnTeam", "TSBTool$ITecmoTool$SetReturnTeam",
            "SetPuntReturner", "TSBTool$ITecmoTool$SetPuntReturner",
            "SetKickReturner", "TSBTool$ITecmoTool$SetKickReturner",
            "SetProBowlPlayer", "TSBTool$ITecmoTool$SetProBowlPlayer",
            "ApplySet", "TSBTool$ITecmoContent$ApplySet",
            "ApplySet", "TSBTool$ITecmoTool$ApplySet",
            "ApplySchedule", "TSBTool$ITecmoTool$ApplySchedule",
            "SetHomeUniform", "TSBTool$ITecmoTool$SetHomeUniform",
            "SetAwayUniform", "TSBTool$ITecmoTool$SetAwayUniform",
            "GetGameUniform", "TSBTool$ITecmoTool$GetGameUniform",
            "SetDivChampColors", "TSBTool$ITecmoTool$SetDivChampColors",
            "SetUniformUsage", "TSBTool$ITecmoTool$SetUniformUsage",
            "GetUniformUsage", "TSBTool$ITecmoTool$GetUniformUsage",
            "SetConfChampColors", "TSBTool$ITecmoTool$SetConfChampColors",
            "GetDivChampColors", "TSBTool$ITecmoTool$GetDivChampColors",
            "GetConfChampColors", "TSBTool$ITecmoTool$GetConfChampColors",
            "GetChampColors", "TSBTool$ITecmoTool$GetChampColors",
            "GetProBowlPlayers", "TSBTool$ITecmoTool$GetProBowlPlayers",
            "ProcessText", "TSBTool$ITecmoContent$ProcessText",
            "ProcessText", "TSBTool$ITecmoTool$ProcessText"
        ],
        ctors: {
            init: function () {
                this.dataPositionOffset = 1507328;
                this.mShowOffPref = true;
                this.abilityOffsets = System.Array.init([
                    0, 
                    5, 
                    10, 
                    14, 
                    18, 
                    22, 
                    26, 
                    30, 
                    34, 
                    38, 
                    42, 
                    46, 
                    50, 
                    53, 
                    56, 
                    59, 
                    62, 
                    65, 
                    69, 
                    73, 
                    77, 
                    81, 
                    85, 
                    89, 
                    93, 
                    97, 
                    101, 
                    105, 
                    109, 
                    113, 
                    117, 
                    121
                ], System.Int32);
                this.gameYearLocations = System.Array.init([
                    188779, 
                    1192606, 
                    1192776, 
                    1511529, 
                    1512187, 
                    1512252, 
                    1518724, 
                    1518850, 
                    1518910, 
                    1518939, 
                    1518879
                ], System.Int32);
                this.positionNames = System.Array.init([
                    "QB1", 
                    "QB2", 
                    "RB1", 
                    "RB2", 
                    "RB3", 
                    "RB4", 
                    "WR1", 
                    "WR2", 
                    "WR3", 
                    "WR4", 
                    "TE1", 
                    "TE2", 
                    "C", 
                    "LG", 
                    "RG", 
                    "LT", 
                    "RT", 
                    "RE", 
                    "NT", 
                    "LE", 
                    "ROLB", 
                    "RILB", 
                    "LILB", 
                    "LOLB", 
                    "RCB", 
                    "LCB", 
                    "FS", 
                    "SS", 
                    "K", 
                    "P", 
                    "DB1", 
                    "DB2"
                ], System.String);
                this.mTeamFormationsStartingLoc = 60915;
                this.m_JuiceArray = System.Array.init([
                    0, 
                    1, 
                    0, 
                    0, 
                    0, 
                    1, 
                    2, 
                    1, 
                    1, 
                    1, 
                    1, 
                    2, 
                    1, 
                    2, 
                    2, 
                    1, 
                    2, 
                    1, 
                    3, 
                    2, 
                    2, 
                    2, 
                    2, 
                    3, 
                    3, 
                    2, 
                    2, 
                    2, 
                    4, 
                    3, 
                    2, 
                    2, 
                    2, 
                    4, 
                    4, 
                    2, 
                    2, 
                    2, 
                    5, 
                    4, 
                    2, 
                    2, 
                    3, 
                    5, 
                    5, 
                    2, 
                    2, 
                    3, 
                    6, 
                    5, 
                    2, 
                    2, 
                    4, 
                    6, 
                    6, 
                    3, 
                    2, 
                    4, 
                    7, 
                    6, 
                    3, 
                    3, 
                    4, 
                    7, 
                    7, 
                    3, 
                    3, 
                    5, 
                    8, 
                    7, 
                    3, 
                    3, 
                    5, 
                    8, 
                    8, 
                    3, 
                    3, 
                    5, 
                    9, 
                    8, 
                    3, 
                    4, 
                    6, 
                    9, 
                    9
                ], System.Byte);
                this.mProwbowlStartingLoc = 1510400;
                this.mBillsUniformLoc = 180964;
            },
            ctor: function (rom) {
                this.$initialize();
                this.Init(rom);
            }
        },
        methods: {
            GetTeams: function () {
                return TSBTool.SNES_TecmoTool.teams;
            },
            GetPositionNames: function () {
                return this.positionNames;
            },
            IsValidPosition: function (pos) {
                var ret = false;
                for (var i = 0; i < this.positionNames.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(pos, this.positionNames[System.Array.index(i, this.positionNames)])) {
                        ret = true;
                        break;
                    }
                }
                return ret;
            },
            IsValidTeam: function (team) {
                var ret = false;
                for (var i = 0; i < TSBTool.SNES_TecmoTool.teams.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(team, TSBTool.SNES_TecmoTool.teams[System.Array.index(i, TSBTool.SNES_TecmoTool.teams)])) {
                        ret = true;
                        break;
                    }
                }
                return ret;
            },
            SetByte: function (location, b) {
                var $t;
                ($t = this.OutputRom)[System.Array.index(location, $t)] = b;
            },
            Init: function (rom) {
                return this.ReadRom(rom);
            },
            Test2: function () {
                var team = "bills";
                for (var i = 0; i < this.positionNames.length; i = (i + 1) | 0) {
                    this.InsertPlayer(team, this.positionNames[System.Array.index(i, this.positionNames)], "player", team, ((i % 10) & 255));
                    switch (this.positionNames[System.Array.index(i, this.positionNames)]) {
                        case "QB1": 
                        case "QB2": 
                            this.SetQBAbilities(team, this.positionNames[System.Array.index(i, this.positionNames)], 31, 31, 31, 31, 31, 31, 31, 31);
                            break;
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                        case "TE1": 
                        case "TE2": 
                            this.SetSkillPlayerAbilities(team, this.positionNames[System.Array.index(i, this.positionNames)], 31, 31, 31, 31, 31, 31);
                            break;
                        case "C": 
                        case "RG": 
                        case "LG": 
                        case "RT": 
                        case "LT": 
                            this.SetOLPlayerAbilities(team, this.positionNames[System.Array.index(i, this.positionNames)], 31, 31, 31, 31);
                            break;
                        case "RE": 
                        case "NT": 
                        case "LE": 
                        case "LOLB": 
                        case "LILB": 
                        case "RILB": 
                        case "ROLB": 
                        case "RCB": 
                        case "LCB": 
                        case "FS": 
                        case "SS": 
                            this.SetDefensivePlayerAbilities(team, this.positionNames[System.Array.index(i, this.positionNames)], 31, 31, 31, 31, 31, 31);
                            break;
                        case "K": 
                        case "P": 
                            this.SetKickPlayerAbilities(team, this.positionNames[System.Array.index(i, this.positionNames)], 31, 31, 31, 31, 31, 31);
                            break;
                    }
                }
            },
            shiftTest: function () {
                var stuff = System.Array.init([
                    255, 
                    255, 
                    255, 
                    255, 
                    255, 
                    74, 
                    76, 
                    78, 
                    80, 
                    82, 
                    84, 
                    86, 
                    88, 
                    90, 
                    92, 
                    94, 
                    96, 
                    98, 
                    100, 
                    102, 
                    104, 
                    106, 
                    108, 
                    110, 
                    112, 
                    114, 
                    255, 
                    255, 
                    255, 
                    255, 
                    255
                ], System.Byte);
                for (var i = 0; i < stuff.length; i = (i + 1) | 0) {
                    System.Console.Write(System.String.format(" {0:x} ", Bridge.box(stuff[System.Array.index(i, stuff)], System.Byte)));
                }
                System.Console.WriteLine();
                System.Console.WriteLine("shift 3");
                this.ShiftDataDown(6, ((stuff.length - 7) | 0), 3, stuff);
                for (var i1 = 0; i1 < stuff.length; i1 = (i1 + 1) | 0) {
                    System.Console.Write(System.String.format(" {0:x} ", Bridge.box(stuff[System.Array.index(i1, stuff)], System.Byte)));
                }
                System.Console.WriteLine();

            },
            ReadRom: function (rom) {
                var ret = false;
                try {
                    var result = System.Windows.Forms.DialogResult.Yes;
                    var len = System.Int64(rom.length);
                    if (len.ne(System.Int64(TSBTool.SNES_TecmoTool.ROM_LENGTH))) {
                        if (TSBTool.MainClass.GUI_MODE) {
                            result = System.Windows.Forms.MessageBox.Show(null, System.String.format("Warning! \r\n\r\nThe input Rom is not the correct Size ({0} bytes).\r\n\r\nYou should only continue if you know for sure that you are loading a snes TSB1 ROM.\r\n\r\nDo you want to continue?", [Bridge.box(TSBTool.SNES_TecmoTool.ROM_LENGTH, System.Int32)]), "WARNING!", System.Windows.Forms.MessageBoxButtons.YesNo, System.Windows.Forms.MessageBoxIcon.Warning);
                        } else {
                            var msg = System.String.format("ERROR! ROM '{0}' is not the correct length.  \r\n    Legit TSB1 snes ROMS are {1} bytes long.\r\n    If you know this is really a snes TSB1 ROM, you can force TSBToolSupreme to load it in GUI mode.", "<filename>", Bridge.box(TSBTool.SNES_TecmoTool.ROM_LENGTH, System.Int32));
                            TSBTool.StaticUtils.AddError(msg);
                        }
                    }

                    if (result === System.Windows.Forms.DialogResult.Yes) {
                        this.outputRom = rom;
                        ret = true;
                    }
                } catch (e) {
                    e = System.Exception.create(e);
                    TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                }
                return ret;
            },
            SaveRom: function (filename) {
                if (filename != null) {
                    try {
                        var len = System.Int64(this.outputRom.length);
                        var s1 = new System.IO.FileStream.$ctor1(filename, 4);
                        s1.Write(this.outputRom, 0, System.Int64.clip32(len));
                        s1.Close();
                    } catch (e) {
                        e = System.Exception.create(e);
                        TSBTool.StaticUtils.ShowError(Bridge.toString(e));
                    }
                } else {
                    TSBTool.StaticUtils.AddError("ERROR! You passed a null filename");
                }
            },
            /**
             * Returns a string consisting of number, name\n for all players in the game.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {boolean}    jerseyNumber_b    
             * @param   {boolean}    name_b            
             * @param   {boolean}    face_b            
             * @param   {boolean}    abilities_b       
             * @param   {boolean}    simData_b
             * @return  {string}
             */
            GetPlayerStuff: function (jerseyNumber_b, name_b, face_b, abilities_b, simData_b) {
                var sb = new System.Text.StringBuilder("", 40320);
                var team = "";
                for (var i = 0; i < TSBTool.SNES_TecmoTool.teams.length; i = (i + 1) | 0) {
                    team = TSBTool.SNES_TecmoTool.teams[System.Array.index(i, TSBTool.SNES_TecmoTool.teams)];
                    sb.append(System.String.format("TEAM={0}\n", [team]));
                    for (var j = 0; j < this.positionNames.length; j = (j + 1) | 0) {
                        sb.append((this.GetPlayerData(team, this.positionNames[System.Array.index(j, this.positionNames)], abilities_b, jerseyNumber_b, face_b, name_b, simData_b) || "") + "\n");
                    }
                }
                return sb.toString();
            },
            GetSchedule: function () {
                var ret = "";
                if (this.outputRom != null) {
                    var sh2 = new TSBTool.SNES_ScheduleHelper(this.outputRom);
                    ret = sh2.GetSchedule();
                    TSBTool.StaticUtils.ShowErrors();
                }
                return ret;
            },
            GetSchedule$1: function (season) {
                return this.GetSchedule();
            },
            SetYear: function (year) {
                if (year == null || year.length !== 4) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) {0} is not a valid year.", [year]));
                    return;
                }
                var location;
                for (var i = 0; i < this.gameYearLocations.length; i = (i + 1) | 0) {
                    location = this.gameYearLocations[System.Array.index(i, this.gameYearLocations)];
                    this.outputRom[System.Array.index(location, this.outputRom)] = (year.charCodeAt(0)) & 255;
                    this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = (year.charCodeAt(1)) & 255;
                    this.outputRom[System.Array.index(((location + 2) | 0), this.outputRom)] = (year.charCodeAt(2)) & 255;
                    this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = (year.charCodeAt(3)) & 255;
                }
                if (!Bridge.referenceEquals(year, "1993")) {
                    this.outputRom[System.Array.index(1518850, this.outputRom)] = 32;
                    this.outputRom[System.Array.index(1518851, this.outputRom)] = 32;
                    this.outputRom[System.Array.index(1518852, this.outputRom)] = 32;
                    this.outputRom[System.Array.index(1518853, this.outputRom)] = 32;
                }
                try {
                    var theYear = System.Int32.parse(year);
                    var superbowlNumber = (theYear - 1965) | 0;
                    if (superbowlNumber < 0) {
                        superbowlNumber = 0;
                    }

                    var sbw;

                    var suffix = "TH";
                    var test = superbowlNumber % 10;

                    switch (test) {
                        case 1: 
                            suffix = "ST";
                            break;
                        case 2: 
                            suffix = "ND";
                            break;
                        case 3: 
                            suffix = "RD";
                            break;
                    }
                    if (superbowlNumber < 10) {
                        sbw = " " + superbowlNumber + (suffix || "");
                    } else if (superbowlNumber < 21) {
                        sbw = " " + superbowlNumber + "TH";
                    } else {
                        sbw = superbowlNumber + (suffix || "");
                    }


                    this.outputRom[System.Array.index(188819, this.outputRom)] = (sbw.charCodeAt(0)) & 255;
                    this.outputRom[System.Array.index(188820, this.outputRom)] = (sbw.charCodeAt(1)) & 255;
                    this.outputRom[System.Array.index(188821, this.outputRom)] = (sbw.charCodeAt(2)) & 255;
                    this.outputRom[System.Array.index(188822, this.outputRom)] = (sbw.charCodeAt(3)) & 255;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    TSBTool.StaticUtils.AddError("Problem setting superbowl number.");
                }
            },
            GetYear: function () {
                var location = this.gameYearLocations[System.Array.index(0, this.gameYearLocations)];
                var ret = "";
                for (var i = location; i < ((location + 4) | 0); i = (i + 1) | 0) {
                    ret = (ret || "") + String.fromCharCode(this.outputRom[System.Array.index(i, this.outputRom)]);
                }

                return ret;
            },
            InsertPlayer: function (team, position, fname, lname, number) {
                if (!this.IsValidPosition(position) || fname == null || lname == null || fname.length < 1 || lname.length < 1) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) InsertPlayer:: Player name or position invalid", null));
                } else {
                    fname = fname.toLowerCase();
                    lname = lname.toUpperCase();
                    if (((lname.length + fname.length) | 0) > 17) {
                        TSBTool.StaticUtils.AddError(System.String.format("Warning!! There is a 17 character limit for names\n '{0} {1}' is {2} characters long.", fname, lname, Bridge.box(((fname.length + lname.length) | 0), System.Int32)));
                        if (lname.length > 16) {
                            lname = lname.substr(0, 12);
                            fname = System.String.format("{0}.", [Bridge.box(fname.charCodeAt(0), System.Char, String.fromCharCode, System.Char.getHashCode)]);
                        } else {
                            fname = System.String.format("{0}.", [Bridge.box(fname.charCodeAt(0), System.Char, String.fromCharCode, System.Char.getHashCode)]);
                        }

                        TSBTool.StaticUtils.AddError(System.String.format("Name will be {0} {1}", fname, lname));
                    }
                    if (fname.length < 1) {
                        fname = "Joe";
                    }
                    if (lname.length < 1) {
                        lname = "Nobody";
                    }

                    var oldName = this.GetName(team, position);
                    var bytes = System.Array.init(((((1 + fname.length) | 0) + lname.length) | 0), 0, System.Byte);
                    var change = (bytes.length - oldName.length) | 0;
                    var i = 0;
                    bytes[System.Array.index(0, bytes)] = number;
                    for (i = 1; i < ((fname.length + 1) | 0); i = (i + 1) | 0) {
                        bytes[System.Array.index(i, bytes)] = (fname.charCodeAt(((i - 1) | 0))) & 255;
                    }
                    for (var j = 0; j < lname.length; j = (j + 1) | 0) {
                        bytes[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), bytes)] = (lname.charCodeAt(j)) & 255;
                    }
                    var pos = this.GetPointerPosition(team, position);

                    this.UpdatePlayerData(team, position, bytes, change);
                    this.AdjustDataPointers(pos, change, TSBTool.SNES_TecmoTool.lastPointer);
                }
            },
            AdjustDataPointers: function (pos, change, lastPointerLocation) {
                var low, hi;
                var word;

                var i = 0;
                var end = (lastPointerLocation + 1) | 0;
                for (i = (pos + 2) | 0; i < end; i = (i + 2) | 0) {
                    low = this.outputRom[System.Array.index(i, this.outputRom)];
                    hi = this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)];
                    word = hi;
                    word = word << 8;
                    word = (word + low) | 0;
                    word = (word + change) | 0;
                    low = (word & 255) & 255;
                    word = word >> 8;
                    hi = word & 255;
                    this.outputRom[System.Array.index(i, this.outputRom)] = low;
                    this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)] = hi;
                }
            },
            /**
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        The team the player is assigned to.
             * @param   {string}    position    The player's position ('QB1', 'WR1' ...)
             * @return  {string}
             */
            GetName: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetName:: team '{0}' or position '{1}' is invalid.", team, position));
                    return null;
                }
                var pos = this.GetDataPosition(team, position);
                var nextPos = this.GetNextDataPosition(team, position);
                var name = "";

                if (pos < 0) {
                    return "ERROR!";
                }
                if (nextPos > 0) {
                    for (var i = (pos + 1) | 0; i < nextPos; i = (i + 1) | 0) {
                        name = (name || "") + String.fromCharCode(this.outputRom[System.Array.index(i, this.outputRom)]);
                    }
                } else {
                    for (var i1 = (pos + 1) | 0; this.outputRom[System.Array.index(i1, this.outputRom)] !== 255; i1 = (i1 + 1) | 0) {
                        name = (name || "") + String.fromCharCode(this.outputRom[System.Array.index(i1, this.outputRom)]);
                    }
                }
                var split = 1;
                for (var i2 = 0; i2 < name.length; i2 = (i2 + 1) | 0) {
                    if (((name.charCodeAt(i2)) & 255) > 64 && ((name.charCodeAt(i2)) & 255) < 91) {
                        split = i2;
                        break;
                    }
                }

                var first, last, full;
                full = null;
                try {
                    first = name.substr(0, split);
                    last = name.substr(split);
                    full = (first || "") + " " + (last || "");
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return full;
                }
                return full;
            },
            GetPlayerData: function (team, position, ability_b, jerseyNumber_b, face_b, name_b, simData_b) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Team {0} is invalid.", [team]));
                    return null;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) position {0} is invalid.", [position]));
                    return null;
                }

                var result = new System.Text.StringBuilder();

                result.append(System.String.format("{0}, ", [position]));
                if (name_b) {
                    result.append(System.String.format("{0}, ", [this.GetName(team, position)]));
                }
                if (face_b) {
                    result.append(System.String.format("Face=0x{0:x}, ", [Bridge.box(this.GetFace(team, position), System.Int32)]));
                }
                var location = this.GetDataPosition(team, position);

                if (location < 0) {
                    return "Messed Up Pointer";
                }

                var jerseyNumber = System.String.format("#{0:x}, ", [Bridge.box(this.outputRom[System.Array.index(location, this.outputRom)], System.Byte)]);
                if (jerseyNumber_b) {
                    result.append(jerseyNumber);
                }
                if (ability_b) {
                    result.append(this.GetAbilityString(team, position));
                }
                var simData = this.GetPlayerSimData(team, position);
                if (simData != null && simData_b) {
                    result.append(System.String.format(",[{0}]", [this.StringifyArray(simData)]));
                }
                return result.toString();
            },
            GetKey: function () {
                return System.String.format("# TSBTool Forum: https://tecmobowl.org/forums/topic/11106-tsb-editor-tsbtool-supreme-season-generator/\r\n# Editing: Tecmo Super Bowl I (snes) [{0}]\r\n# \r\n# Double click on a team name (or playbook) to bring up the edit Team GUI.\r\n# Double click on a player to bring up the edit player GUI (Click 'Sim Data'\r\n#   button to find out more on Sim Data). \r\n# Key\r\n# -- Quarterbacks:\r\n# Position, Name (first LAST), FaceID, Jersey number, RP, RS, MS, HP, PS, PC, PA, APB, [Sim rush, Sim pass, Sim Pocket].\r\n# -- Offensive Skill players (non-QB):\r\n# Position, Name (first LAST), FaceID, Jersey number, RP, RS, MS, HP, BC, REC, [Sim rush, Sim catch, Sim punt Ret, Sim kick ret].\r\n# -- Offensive Linemen:\r\n# Position, Name (first LAST), FaceID, Jersey number, RP, RS, MS, HP\r\n# -- Defensive Players:\r\n# Position, Name (first LAST), FaceID, Jersey number, RP, RS, MS, HP, PI, QU, [Sim pass rush, Sim coverage].\r\n# -- Punters and Kickers:\r\n# Position, Name (first LAST), FaceID, Jersey number, RP, RS, MS, HP, KA, AKB,[ Sim kicking ability].\r\n# TEAM:\\n\r\n#  name, SimData  0x<offense><defense><offense preference>\r\n#  Offensive pref values 0-3. \r\n#     0 = Little more rushing, 1 = Heavy Rushing,\r\n#     2 = little more passing, 3 = Heavy Passing.\r\n# credit to elway7 for finding\t'offense preference'", [Bridge.box(this.RomVersion, TSBTool.ROM_TYPE, System.Enum.toStringFn(TSBTool.ROM_TYPE))]);
            },
            GetTeamPlayers: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetTeamPlayers:: team {0} is invalid.", [team]));
                    return null;
                }

                var result = new System.Text.StringBuilder("", Bridge.Int.mul(41, this.positionNames.length));
                var pos;
                var teamSimData = this.GetTeamSimData(team);
                var data = "";
                if (teamSimData < 15) {
                    data = System.String.format("0{0:x}", [Bridge.box(teamSimData, System.Byte)]);
                } else {
                    data = System.String.format("{0:x}", [Bridge.box(teamSimData, System.Byte)]);
                }
                if (this.ShowOffPref) {
                    data = (data || "") + (this.GetTeamSimOffensePref(team));
                }

                var teamString = System.String.format("TEAM = {0} SimData=0x{1}", team, data);
                result.append(teamString);

                if (TSBTool.TecmoTool.ShowTeamFormation) {
                    result.append(System.String.format(", {0}", [this.GetTeamOffensiveFormation(team)]));
                }
                result.append("\n");

                if (TSBTool.TecmoTool.ShowPlaybook) {
                    result.append(System.String.format("{0}\n", [this.GetPlaybook(team)]));
                }
                if (TSBTool.TecmoTool.ShowTeamStrings) {
                    var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                    result.append(System.String.format("TEAM_ABB={0},TEAM_CITY={1},TEAM_NAME={2}\n", this.GetTeamAbbreviation(teamIndex), this.GetTeamCity(teamIndex), this.GetTeamName(teamIndex)));
                }

                for (var i = 0; i < this.positionNames.length; i = (i + 1) | 0) {
                    pos = this.positionNames[System.Array.index(i, this.positionNames)];
                    result.append(System.String.format("{0}\n", [this.GetPlayerData(team, pos, true, true, true, true, true)]));
                }
                result.append(System.String.format("{0}\n", [this.GetReturnTeam(team)]));
                result.append(System.String.format("KR, {0}\nPR, {1}\n", this.GetKickReturner(team), this.GetPuntReturner(team)));
                result.append("\n");
                return result.toString();
            },
            SetTeamStringTableString: function (stringIndex, newValue) {
                var $t, $t1;
                var junk = { v : 0 };
                var oldValue = this.GetTeamStringTableString(stringIndex);
                if (Bridge.referenceEquals(oldValue, newValue)) {
                    return;
                }
                var shiftAmount = { v : (newValue.length - oldValue.length) | 0 };
                if (shiftAmount.v !== 0) {
                    var currentPointerLocation = (this.GetTeamStringTableStart() + Bridge.Int.mul(2, stringIndex)) | 0;
                    var lastPointerLocation = (this.GetTeamStringTableStart() + Bridge.Int.mul(2, this.NumberOfStringsInTeamStringTable)) | 0;
                    this.AdjustDataPointers(currentPointerLocation, shiftAmount.v, lastPointerLocation);
                    var startPosition = (this.GetTeamStringTableLocation(((stringIndex + 1) | 0), junk) - 1) | 0;
                    var endPosition = 29488;
                    if (shiftAmount.v < 0) {
                        this.ShiftDataUp(startPosition, endPosition, shiftAmount.v, this.outputRom);
                    } else {
                        if (shiftAmount.v > 0) {
                            this.ShiftDataDown(startPosition, endPosition, shiftAmount.v, this.outputRom);
                        }
                    }
                }
                var startLoc = this.GetTeamStringTableLocation(stringIndex, shiftAmount);
                for (var i = 0; i < newValue.length; i = (i + 1) | 0) {
                    if (newValue.charCodeAt(i) === 42) {
                        ($t = this.OutputRom)[System.Array.index(((startLoc + i) | 0), $t)] = 0;
                    } else {
                        ($t1 = this.OutputRom)[System.Array.index(((startLoc + i) | 0), $t1)] = (newValue.charCodeAt(i)) & 255;
                    }
                }
            },
            GetTeamStringTableString: function (stringIndex) {
                var $t;
                var length = { v : 0 };
                var stringStartingLocation = this.GetTeamStringTableLocation(stringIndex, length);

                var stringChars = System.Array.init(length.v, 0, System.Char);
                for (var i = 0; i < stringChars.length; i = (i + 1) | 0) {
                    stringChars[System.Array.index(i, stringChars)] = ($t = this.OutputRom)[System.Array.index(((stringStartingLocation + i) | 0), $t)];
                    if (stringChars[System.Array.index(i, stringChars)] === 0) {
                        stringChars[System.Array.index(i, stringChars)] = 42;
                    }
                }
                var retVal = System.String.fromCharArray(stringChars);
                return retVal;
            },
            /**
             * Returns the location of the 'Team' string table. This string table 
             contains the city abbreviations, city names and team names.
             *
             * @instance
             * @private
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {number}          stringIndex    The index of the string to get.
             * @param   {System.Int32}    length         out param stores the length.
             * @return  {number}                         Returns the location of the string at the specified index.
             */
            GetTeamStringTableLocation: function (stringIndex, length) {
                var $t, $t1, $t2, $t3;
                var team_string_table_loc = this.GetTeamStringTableStart();
                var pointer_loc = (team_string_table_loc + Bridge.Int.mul(2, stringIndex)) | 0;
                var b1 = ($t = this.OutputRom)[System.Array.index(((pointer_loc + 1) | 0), $t)];
                var b2 = ($t1 = this.OutputRom)[System.Array.index(pointer_loc, $t1)];
                var b3 = ($t2 = this.OutputRom)[System.Array.index(((pointer_loc + 3) | 0), $t2)];
                var b4 = ($t3 = this.OutputRom)[System.Array.index(((pointer_loc + 2) | 0), $t3)];
                length.v = (((((b3 << 8) + b4) | 0)) - ((((b1 << 8) + b2) | 0))) | 0;
                if (stringIndex === ((this.NumberOfStringsInTeamStringTable - 1) | 0)) {
                    length.v = 9;
                }
                var pointerVal = ((b1 << 8) + b2) | 0;
                var stringStartingLocation = (pointerVal - 32768) | 0;
                return stringStartingLocation;
            },
            GetTeamStringTableStart: function () {
                var team_string_table_loc = 28672;
                return team_string_table_loc;
            },
            GetTeamName: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(teamIndex);
                var lastSpace = retVal.lastIndexOf(String.fromCharCode(32));
                retVal = System.String.replaceAll(retVal.substr(((lastSpace + 1) | 0)), "*", "");
                return retVal;
            },
            GetTeamCity: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(teamIndex).substr(5);
                var lastSpace = retVal.lastIndexOf(String.fromCharCode(32));
                retVal = retVal.substr(0, lastSpace);
                return retVal;
            },
            GetTeamAbbreviation: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(teamIndex);
                retVal = retVal.substr(0, 4);
                return retVal;
            },
            SetTeamAbbreviation: function (teamIndex, abb) {
                if (abb == null || abb.length !== 4) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error Setting TeamAbbreviation; TeamIndex:{0}; abb:{1}", Bridge.box(teamIndex, System.Int32), abb));
                } else {
                    var teamString = System.String.format("{0}*{1} {2}*", abb, this.GetTeamCity(teamIndex), this.GetTeamName(teamIndex));
                    this.SetTeamStringTableString(teamIndex, teamString);
                }
            },
            SetTeamName: function (teamIndex, name) {
                var teamString = System.String.format("{0}*{1} {2}*", this.GetTeamAbbreviation(teamIndex), this.GetTeamCity(teamIndex), name);
                this.SetTeamStringTableString(teamIndex, teamString);
            },
            SetTeamCity: function (teamIndex, city) {
                var teamString = System.String.format("{0}*{1} {2}*", this.GetTeamAbbreviation(teamIndex), city, this.GetTeamName(teamIndex));
                this.SetTeamStringTableString(teamIndex, teamString);
            },
            GetAll$1: function (season) {
                return this.GetAll();
            },
            GetAll: function () {
                var team;
                var all = new System.Text.StringBuilder("", Bridge.Int.mul(1230, this.positionNames.length));
                var year = System.String.format("YEAR={0}\n", [this.GetYear()]);
                all.append(year);
                for (var i = 0; i < TSBTool.SNES_TecmoTool.teams.length; i = (i + 1) | 0) {
                    team = TSBTool.SNES_TecmoTool.teams[System.Array.index(i, TSBTool.SNES_TecmoTool.teams)];
                    all.append(this.GetTeamPlayers(team));
                }
                return all.toString();
            },
            GetProBowlPlayers$1: function (season) {
                return this.GetProBowlPlayers();
            },
            GetProBowlPlayers: function () {
                var builder = new System.Text.StringBuilder("", 1000);
                builder.append("# AFC ProBowl players\r\n");
                builder.append(this.GetConferenceProBowlPlayers(TSBTool.Conference.AFC));
                builder.append("\r\n");

                builder.append("# NFC ProBowl players\r\n");
                builder.append(this.GetConferenceProBowlPlayers(TSBTool.Conference.NFC));
                builder.append("\r\n");
                return builder.toString();
            },
            /**
             * Gets the point in the player number name data that a player's data begins.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetDataPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetDataPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var guy = (Bridge.Int.mul(teamIndex, this.positionNames.length) + positionIndex) | 0;
                var pointerLocation = (TSBTool.SNES_TecmoTool.namePointersStart + (Bridge.Int.mul(2, guy))) | 0;
                var lowByte = this.outputRom[System.Array.index(pointerLocation, this.outputRom)];
                var hiByte = this.outputRom[System.Array.index(((pointerLocation + 1) | 0), this.outputRom)];
                hiByte = hiByte << 8;
                hiByte = (hiByte + lowByte) | 0;

                var ret = (hiByte + this.dataPositionOffset) | 0;
                return ret;
            },
            /**
             * Get the starting point of the guy AFTER the one passed to this method.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetNextDataPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetNextDataPosition:: either team {0} or position {1} is invalid.", team, position));
                }

                var ti = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var pi = this.GetPositionIndex(position);
                pi = (pi + 1) | 0;
                if (Bridge.referenceEquals(position, "DB2")) {
                    ti = (ti + 1) | 0;
                    pi = 0;
                }
                if (Bridge.referenceEquals(team, "49ers") && Bridge.referenceEquals(position, "DB2")) {
                    return -1;
                } else {
                    return this.GetDataPosition(TSBTool.SNES_TecmoTool.teams[System.Array.index(ti, TSBTool.SNES_TecmoTool.teams)], this.positionNames[System.Array.index(pi, this.positionNames)]);
                }
            },
            GetPointerPosition: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetPointerPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                var playerSpot = (Bridge.Int.mul(teamIndex, this.positionNames.length) + positionIndex) | 0;
                if (Bridge.referenceEquals(team, "49ers") && Bridge.referenceEquals(position, "DB2")) {
                    return 1541942;
                }

                if (positionIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Position '{0}' does not exist. Valid positions are:", [position]));
                    for (var i = 1; i <= this.positionNames.length; i = (i + 1) | 0) {
                        TSBTool.StaticUtils.WriteError(System.String.format("{0}\t", [this.positionNames[System.Array.index(((i - 1) | 0), this.positionNames)]]));
                    }
                    return -1;
                }
                var loc = (((TSBTool.SNES_TecmoTool.namePointersStart + (Bridge.Int.mul(teamIndex, 64))) | 0) + (Bridge.Int.mul(positionIndex, 2))) | 0;
                return loc;
            },
            /**
             * Sets the player data (jersey number, player name) in the data segment.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}            team        The team the player is assigned to.
             * @param   {string}            position    The position the player is assigned to.
             * @param   {Array.<number>}    bytes       The player's number and name data.
             * @param   {number}            change
             * @return  {void}
             */
            UpdatePlayerData: function (team, position, bytes, change) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) UpdatePlayerData:: either team {0} or position {1} is invalid.", team, position));
                }
                if (bytes == null) {
                    return;
                }

                var dataStart = this.GetDataPosition(team, position);
                this.ShiftDataAfter(team, position, change);
                var j = 0;
                var i;
                for (i = dataStart; j < bytes.length; i = (i + 1) | 0) {
                    this.outputRom[System.Array.index(i, this.outputRom)] = bytes[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), bytes)];
                }

                if (Bridge.referenceEquals(team, "49ers") && Bridge.referenceEquals(position, "DB2")) {
                    while (this.outputRom[System.Array.index(i, this.outputRom)] !== 255) {
                        this.outputRom[System.Array.index(Bridge.identity(i, ((i = (i + 1) | 0))), this.outputRom)] = 255;
                    }
                }
            },
            ShiftDataAfter: function (team, position, shiftAmount) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataAfter:: either team {0} or position {1} is invalid.", team, position));
                }

                if (Bridge.referenceEquals(team, TSBTool.SNES_TecmoTool.teams[System.Array.index(((TSBTool.SNES_TecmoTool.teams.length - 1) | 0), TSBTool.SNES_TecmoTool.teams)]) && Bridge.referenceEquals(position, "DB2")) {
                    return;
                }


                var endPosition = TSBTool.SNES_TecmoTool.nameNumberSegmentEnd;

                while (this.outputRom[System.Array.index(endPosition, this.outputRom)] === 255) {
                    endPosition = (endPosition - 1) | 0;
                }

                endPosition = (endPosition + 1) | 0;

                var startPosition = this.GetNextDataPosition(team, position);
                if (shiftAmount < 0) {
                    this.ShiftDataUp(startPosition, endPosition, shiftAmount, this.outputRom);
                } else {
                    if (shiftAmount > 0) {
                        this.ShiftDataDown(startPosition, endPosition, shiftAmount, this.outputRom);
                    }
                }
            },
            ShiftDataUp: function (startPos, endPos, shiftAmount, data) {
                if (startPos < 0 || endPos < 0) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataUp:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                }

                var i;
                if (shiftAmount > 0) {
                    System.Console.WriteLine("positive shift amount in ShiftDataUp");
                }

                for (i = startPos; i <= endPos; i = (i + 1) | 0) {
                    data[System.Array.index(((i + shiftAmount) | 0), data)] = data[System.Array.index(i, data)];
                }
                /* i--;
                			for(int j=shiftAmount; j < 0; j++) 
                				data[i++] = 0xff; */

                i = (i + shiftAmount) | 0;
                while (this.outputRom[System.Array.index(i, this.outputRom)] !== 255 && i < TSBTool.SNES_TecmoTool.nameNumberSegmentEnd) {
                    this.outputRom[System.Array.index(i, this.outputRom)] = 255;
                    i = (i + 1) | 0;
                }

            },
            ShiftDataDown: function (startPos, endPos, shiftAmount, data) {
                if (startPos < 0 || endPos < 0) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataUp:: either startPos {0} or endPos {1} is invalid.", Bridge.box(startPos, System.Int32), Bridge.box(endPos, System.Int32)));
                }

                for (var i = (endPos + shiftAmount) | 0; i > startPos; i = (i - 1) | 0) {
                    data[System.Array.index(i, data)] = data[System.Array.index(((i - shiftAmount) | 0), data)];
                }
            },
            GetDataAfter: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetDataAfter:: either team {0} or position {1} is invalid.", team, position));
                }

                if (Bridge.referenceEquals(team, TSBTool.SNES_TecmoTool.teams[System.Array.index(((TSBTool.SNES_TecmoTool.teams.length - 1) | 0), TSBTool.SNES_TecmoTool.teams)]) && Bridge.referenceEquals(position, "DB2")) {
                    return null;
                }

                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var positionIndex = this.GetPositionIndex(position);
                positionIndex = (positionIndex + 1) | 0;
                if (Bridge.referenceEquals(position, "DB2")) {
                    teamIndex = (teamIndex + 1) | 0;
                    positionIndex = 0;
                }
                var endPosition = TSBTool.SNES_TecmoTool.nameNumberSegmentEnd;
                while (this.outputRom[System.Array.index(endPosition, this.outputRom)] === 255) {
                    endPosition = (endPosition - 1) | 0;
                }

                endPosition = (endPosition + 1) | 0;
                var startPosition = this.GetDataPosition(TSBTool.SNES_TecmoTool.teams[System.Array.index(teamIndex, TSBTool.SNES_TecmoTool.teams)], this.positionNames[System.Array.index(positionIndex, this.positionNames)]);
                var retBytes = System.Array.init(((endPosition - startPosition) | 0), 0, System.Byte);

                var j = 0;
                for (var i = startPosition; i < ((endPosition + 1) | 0); i = (i + 1) | 0) {
                    retBytes[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), retBytes)] = this.outputRom[System.Array.index(i, this.outputRom)];
                }

                return retBytes;
            },
            /**
             * @instance
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    positionName    like 'QB1', 'K','P' ...
             * @return  {number}
             */
            GetPositionIndex: function (positionName) {
                var ret = -1;
                for (var i = 0; i < this.positionNames.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(this.positionNames[System.Array.index(i, this.positionNames)], positionName)) {
                        ret = i;
                        break;
                    }
                }
                return ret;
            },
            /**
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team              
             * @param   {string}    qb                Either 'QB1' or 'QB2'
             * @param   {number}    runningSpeed      
             * @param   {number}    rushingPower      
             * @param   {number}    maxSpeed          
             * @param   {number}    hittingPower      
             * @param   {number}    passingSpeed      
             * @param   {number}    passControl       
             * @param   {number}    accuracy          
             * @param   {number}    avoidPassBlock
             * @return  {void}
             */
            SetQBAbilities: function (team, qb, runningSpeed, rushingPower, maxSpeed, hittingPower, passingSpeed, passControl, accuracy, avoidPassBlock) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }
                if (!Bridge.referenceEquals(qb, "QB1") && !Bridge.referenceEquals(qb, "QB2")) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Cannot set qb ablities for {0}", [qb]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                passingSpeed = this.GetAbility(passingSpeed);
                passControl = this.GetAbility(passControl);
                accuracy = this.GetAbility(accuracy);
                avoidPassBlock = this.GetAbility(avoidPassBlock);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(passingSpeed) || !this.IsValidAbility(passControl) || !this.IsValidAbility(accuracy) || !this.IsValidAbility(avoidPassBlock)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Abilities for {0} on {1} were not set.", qb, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, qb, runningSpeed, rushingPower, maxSpeed, hittingPower, passingSpeed, passControl);
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(qb);
                var location = ((((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(posIndex, this.abilityOffsets)]) | 0) + TSBTool.SNES_TecmoTool.billsQB1AbilityStart) | 0;
                var lastByte = accuracy << 4;
                lastByte = (lastByte + avoidPassBlock) | 0;
                this.outputRom[System.Array.index(((location + 4) | 0), this.outputRom)] = lastByte & 255;
                lastByte = passingSpeed << 4;
                lastByte = (lastByte + passControl) | 0;
                this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = lastByte & 255;
            },
            SetSkillPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, ballControl, receptions) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "RB1") && !Bridge.referenceEquals(pos, "RB2") && !Bridge.referenceEquals(pos, "RB3") && !Bridge.referenceEquals(pos, "RB4") && !Bridge.referenceEquals(pos, "WR1") && !Bridge.referenceEquals(pos, "WR2") && !Bridge.referenceEquals(pos, "WR3") && !Bridge.referenceEquals(pos, "WR4") && !Bridge.referenceEquals(pos, "TE1") && !Bridge.referenceEquals(pos, "TE2")) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Cannot set skill player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                ballControl = this.GetAbility(ballControl);
                receptions = this.GetAbility(receptions);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(receptions) || !this.IsValidAbility(ballControl)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) Invalid attribute. Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, ballControl, receptions);
            },
            SetKickPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, kickingAbility, avoidKickBlock) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "K") && !Bridge.referenceEquals(pos, "P")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set kick player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                kickingAbility = this.GetAbility(kickingAbility);
                avoidKickBlock = this.GetAbility(avoidKickBlock);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(kickingAbility) || !this.IsValidAbility(avoidKickBlock)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, kickingAbility, avoidKickBlock);
            },
            SetDefensivePlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, passRush, interceptions) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "RE") && !Bridge.referenceEquals(pos, "NT") && !Bridge.referenceEquals(pos, "LE") && !Bridge.referenceEquals(pos, "ROLB") && !Bridge.referenceEquals(pos, "RILB") && !Bridge.referenceEquals(pos, "LILB") && !Bridge.referenceEquals(pos, "LOLB") && !Bridge.referenceEquals(pos, "RCB") && !Bridge.referenceEquals(pos, "LCB") && !Bridge.referenceEquals(pos, "SS") && !Bridge.referenceEquals(pos, "FS") && !Bridge.referenceEquals(pos, "DB2") && !Bridge.referenceEquals(pos, "DB1")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set defensive player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);
                passRush = this.GetAbility(passRush);
                interceptions = this.GetAbility(interceptions);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower) || !this.IsValidAbility(passRush) || !this.IsValidAbility(interceptions)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, passRush, interceptions);
            },
            SetOLPlayerAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) team {0} is invalid", [team]));
                    return;
                }

                if (!Bridge.referenceEquals(pos, "C") && !Bridge.referenceEquals(pos, "RG") && !Bridge.referenceEquals(pos, "LG") && !Bridge.referenceEquals(pos, "RT") && !Bridge.referenceEquals(pos, "LT")) {
                    TSBTool.StaticUtils.AddError(System.String.format("Cannot set OL player ablities for {0}.", [pos]));
                    return;
                }
                runningSpeed = this.GetAbility(runningSpeed);
                rushingPower = this.GetAbility(rushingPower);
                maxSpeed = this.GetAbility(maxSpeed);
                hittingPower = this.GetAbility(hittingPower);

                if (!this.IsValidAbility(runningSpeed) || !this.IsValidAbility(rushingPower) || !this.IsValidAbility(maxSpeed) || !this.IsValidAbility(hittingPower)) {
                    TSBTool.StaticUtils.AddError(System.String.format("Abilities for {0} on {1} were not set.", pos, team));
                    this.PrintValidAbilities();
                    return;
                }
                this.SaveAbilities(team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, -1, -1);
            },
            SaveAbilities: function (team, pos, runningSpeed, rushingPower, maxSpeed, hittingPower, bc, rec) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SaveAbilities:: team {0} is invalid", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SaveAbilities:: position {0} is invalid", [pos]));
                    return;
                }

                var byte1, byte2, byte3;
                byte1 = rushingPower & 255;
                byte1 = byte1 << 4;
                byte1 = (byte1 + (runningSpeed & 255)) | 0;
                byte2 = maxSpeed & 255;
                byte2 = byte2 << 4;
                byte2 = (byte2 + (hittingPower & 255)) | 0;
                byte3 = bc & 255;
                byte3 = byte3 << 4;
                byte3 = (byte3 + (rec & 255)) | 0;
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(pos);
                var location = ((((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(posIndex, this.abilityOffsets)]) | 0) + TSBTool.SNES_TecmoTool.billsQB1AbilityStart) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;

                if (bc > -1 && rec > -1) {
                    this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)] = byte3 & 255;
                }
            },
            IsValidAbility: function (ab) {
                return ab >= 0 && ab <= 15;
            },
            GetAbility: function (ab) {
                var ret = 0;
                switch (ab) {
                    case 6: 
                        ret = 0;
                        break;
                    case 13: 
                        ret = 1;
                        break;
                    case 19: 
                        ret = 2;
                        break;
                    case 25: 
                        ret = 3;
                        break;
                    case 31: 
                        ret = 4;
                        break;
                    case 38: 
                        ret = 5;
                        break;
                    case 44: 
                        ret = 6;
                        break;
                    case 50: 
                        ret = 7;
                        break;
                    case 56: 
                        ret = 8;
                        break;
                    case 63: 
                        ret = 9;
                        break;
                    case 69: 
                        ret = 10;
                        break;
                    case 75: 
                        ret = 11;
                        break;
                    case 81: 
                        ret = 12;
                        break;
                    case 88: 
                        ret = 13;
                        break;
                    case 94: 
                        ret = 14;
                        break;
                    case 100: 
                        ret = 15;
                        break;
                }
                return ret;
            },
            MapAbality: function (ab) {
                /* if(abilityMap.ContainsKey(ab))
                				return (byte) abilityMap[ab];
                			else
                				return 0;*/

                var ret = 0;
                switch (ab) {
                    case 0: 
                        ret = 6;
                        break;
                    case 1: 
                        ret = 13;
                        break;
                    case 2: 
                        ret = 19;
                        break;
                    case 3: 
                        ret = 25;
                        break;
                    case 4: 
                        ret = 31;
                        break;
                    case 5: 
                        ret = 38;
                        break;
                    case 6: 
                        ret = 44;
                        break;
                    case 7: 
                        ret = 50;
                        break;
                    case 8: 
                        ret = 56;
                        break;
                    case 9: 
                        ret = 63;
                        break;
                    case 10: 
                        ret = 69;
                        break;
                    case 11: 
                        ret = 75;
                        break;
                    case 12: 
                        ret = 81;
                        break;
                    case 13: 
                        ret = 88;
                        break;
                    case 14: 
                        ret = 94;
                        break;
                    case 15: 
                        ret = 100;
                        break;
                }
                return ret;
            },
            /**
             * Returns an array of ints mapping to a player's abilities.
             Like { 13, 13, 50, 56, 31, 25}. The length of the array returned varies depending
             on position.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}            team        Team name like 'oilers'.
             * @param   {string}            position    Position name like 'RB4'.
             * @return  {Array.<number>}                an array of ints.
             */
            GetAbilities: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    return null;
                }

                var ret = System.Array.init([0], System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var posIndex = this.GetPositionIndex(position);
                var location = ((((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(posIndex, this.abilityOffsets)]) | 0) + TSBTool.SNES_TecmoTool.billsQB1AbilityStart) | 0;
                var runningSpeed, rushingPower, maxSpeed, hittingPower, wild1, wild2, accuracy, avoidPassBlock;
                var b1, b2, b3, b4;
                b1 = this.outputRom[System.Array.index(location, this.outputRom)];
                b2 = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)];
                b3 = this.outputRom[System.Array.index(((location + 3) | 0), this.outputRom)];
                b4 = this.outputRom[System.Array.index(((location + 4) | 0), this.outputRom)];
                runningSpeed = b1 & 15;
                runningSpeed = this.MapAbality(runningSpeed);
                rushingPower = b1 & 240;
                rushingPower = this.MapAbality(rushingPower >> 4);
                maxSpeed = b2 & 240;
                maxSpeed = this.MapAbality(maxSpeed >> 4);
                hittingPower = b2 & 15;
                hittingPower = this.MapAbality(hittingPower);
                wild1 = b3 & 240;
                wild1 = this.MapAbality(wild1 >> 4);
                wild2 = b3 & 15;
                wild2 = this.MapAbality(wild2);
                accuracy = b4 & 240;
                accuracy = this.MapAbality(accuracy >> 4);
                avoidPassBlock = b4 & 15;
                avoidPassBlock = this.MapAbality(avoidPassBlock);
                switch (position) {
                    case "C": 
                    case "RG": 
                    case "LG": 
                    case "RT": 
                    case "LT": 
                        ret = System.Array.init(4, 0, System.Int32);
                        break;
                    case "QB1": 
                    case "QB2": 
                        ret = System.Array.init(8, 0, System.Int32);
                        ret[System.Array.index(4, ret)] = wild1;
                        ret[System.Array.index(5, ret)] = wild2;
                        ret[System.Array.index(6, ret)] = accuracy;
                        ret[System.Array.index(7, ret)] = avoidPassBlock;
                        break;
                    default: 
                        ret = System.Array.init(6, 0, System.Int32);
                        ret[System.Array.index(4, ret)] = wild1;
                        ret[System.Array.index(5, ret)] = wild2;
                        break;
                }
                ret[System.Array.index(0, ret)] = runningSpeed;
                ret[System.Array.index(1, ret)] = rushingPower;
                ret[System.Array.index(2, ret)] = maxSpeed;
                ret[System.Array.index(3, ret)] = hittingPower;
                return ret;
            },
            /**
             * Returns a string consisting of numbers, spaces and commas.
             Like "31, 69, 13, 13, 31, 44"
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {string}
             */
            GetAbilityString: function (team, position) {
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    return null;
                }
                var abilities = this.GetAbilities(team, position);
                var stuff = new System.Text.StringBuilder();

                for (var i = 0; i < abilities.length; i = (i + 1) | 0) {
                    stuff.append(abilities[System.Array.index(i, abilities)]);
                    stuff.append(", ");
                }
                stuff.remove(((stuff.getLength() - 2) | 0), 1);
                return stuff.toString();
            },
            /**
             * Returns the simulation data for the given team.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team    The team of interest
             * @return  {number}
             */
            GetTeamSimData: function (team) {
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                if (teamIndex >= 0) {
                    var location = (Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsTeamSimLoc) | 0;
                    return this.outputRom[System.Array.index(location, this.outputRom)];
                }
                return 0;
            },
            /**
             * Sets the given team's offense and defense sim values.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team      The team to set.
             * @param   {number}    values    The value to set it to.
             * @return  {void}
             */
            SetTeamSimData: function (team, values) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetTeamSimData:: team {0} is invalid ", [team]));
                    return;
                }

                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var location = (Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsTeamSimLoc) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = values;
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}     team    the team name
             * @param   {number}     val     the number to set it to.
             * @return  {boolean}            true if set, fales if could not set it.
             */
            SetTeamSimOffensePref: function (team, val) {
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                if (val > -1 && val < 4 && teamIndex !== -1) {
                    var loc = (TSBTool.SNES_TecmoTool.teamSimOffensivePrefStart + teamIndex) | 0;
                    this.outputRom[System.Array.index(loc, this.outputRom)] = val & 255;
                } else {
                    if (teamIndex !== -1) {
                        TSBTool.StaticUtils.AddError(System.String.format("Can't set offensive pref to '{0}' valid values are 0-3.\n", [Bridge.box(val, System.Int32)]));
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                    }
                }
                return true;
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team    Teh team name.
             * @return  {number}            their sim offense pref (0 - 3)
             */
            GetTeamSimOffensePref: function (team) {
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var val = -1;
                if (teamIndex > -1) {
                    var loc = (TSBTool.SNES_TecmoTool.teamSimOffensivePrefStart + teamIndex) | 0;
                    val = this.outputRom[System.Array.index(loc, this.outputRom)];
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                }
                return val;
            },
            /**
             * Sets the team's offensive formation.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team         
             * @param   {string}    formation
             * @return  {void}
             */
            SetTeamOffensiveFormation: function (team, formation) {
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 255) {
                    var location = (this.mTeamFormationsStartingLoc + teamIndex) | 0;

                    switch (formation) {
                        case TSBTool.SNES_TecmoTool.m2RB_2WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 0;
                            break;
                        case TSBTool.SNES_TecmoTool.m1RB_3WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 1;
                            break;
                        case TSBTool.SNES_TecmoTool.m1RB_4WR: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 2;
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Formation {0:x} for team '{1}' is invalid.", formation, team));
                            TSBTool.StaticUtils.AddError(System.String.format("  Valid formations are:\n  {0}\n  {1}\n  {2}", TSBTool.SNES_TecmoTool.m2RB_2WR_1TE, TSBTool.SNES_TecmoTool.m1RB_3WR_1TE, TSBTool.SNES_TecmoTool.m1RB_4WR));
                            break;
                    }
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Team '{0}' is invalid, Offensive Formation not set", [team]));
                }
            },
            /**
             * Gets the team's offensive formation.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetTeamOffensiveFormation: function (team) {
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                var ret = "OFFENSIVE_FORMATION = ";
                if (teamIndex > -1 && teamIndex < 255) {
                    var location = (this.mTeamFormationsStartingLoc + teamIndex) | 0;
                    var formation = this.outputRom[System.Array.index(location, this.outputRom)];

                    switch (formation) {
                        case 0: 
                            ret = (ret || "") + (TSBTool.SNES_TecmoTool.m2RB_2WR_1TE || "");
                            break;
                        case 1: 
                            ret = (ret || "") + (TSBTool.SNES_TecmoTool.m1RB_3WR_1TE || "");
                            break;
                        case 2: 
                            ret = (ret || "") + (TSBTool.SNES_TecmoTool.m1RB_4WR || "");
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Formation {0:x} for team {1} is invalid, ROM FORMATIONS could be messed up.", Bridge.box(formation, System.Int32), team));
                            ret = "";
                            break;
                    }
                } else {
                    ret = "";
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Team '{0}' is invalid, Offensive Formation get failed.", [team]));
                }
                return ret;
            },
            /**
             * Returns a string like "PLAYBOOK R1, R4, R6, R8, P1, P3, P7, P3"
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetPlaybook: function (team) {
                var ret = "";
                var rSlot1, rSlot2, rSlot3, rSlot4, pSlot1, pSlot2, pSlot3, pSlot4;

                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                if (teamIndex > -1) {
                    var pbLocation = (TSBTool.SNES_TecmoTool.mPlaybookStartLoc + (Bridge.Int.mul(teamIndex, 4))) | 0;
                    rSlot1 = this.outputRom[System.Array.index(pbLocation, this.outputRom)] >> 4;
                    rSlot2 = this.outputRom[System.Array.index(pbLocation, this.outputRom)] & 15;
                    rSlot3 = this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] >> 4;
                    rSlot4 = this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] & 15;

                    pSlot1 = this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] >> 4;
                    pSlot2 = this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] & 15;
                    pSlot3 = this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] >> 4;
                    pSlot4 = this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] & 15;

                    ret = System.String.format("PLAYBOOK R{0}{1}{2}{3}, P{4}{5}{6}{7} ", Bridge.box(((rSlot1 + 1) | 0), System.Int32), Bridge.box(((rSlot2 + 1) | 0), System.Int32), Bridge.box(((rSlot3 + 1) | 0), System.Int32), Bridge.box(((rSlot4 + 1) | 0), System.Int32), Bridge.box(((pSlot1 + 1) | 0), System.Int32), Bridge.box(((pSlot2 + 1) | 0), System.Int32), Bridge.box(((pSlot3 + 1) | 0), System.Int32), Bridge.box(((pSlot4 + 1) | 0), System.Int32));
                }

                return ret;
            },
            /**
             * Sets the team's playbook
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team         
             * @param   {string}    runPlays     String like "R1234"
             * @param   {string}    passPlays    String like "P4567"
             * @return  {void}
             */
            SetPlaybook: function (team, runPlays, passPlays) {
                if (this.runRegex == null || this.passRegex == null) {
                    this.runRegex = new System.Text.RegularExpressions.Regex.ctor("R([1-8])([1-8])([1-8])([1-8])");
                    this.passRegex = new System.Text.RegularExpressions.Regex.ctor("P([1-8])([1-8])([1-8])([1-8])");
                }
                var runs = this.runRegex.match(runPlays);
                var pass = this.passRegex.match(passPlays);

                var r1, r2, r3, r4, p1, p2, p3, p4;

                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                if (teamIndex > -1 && !Bridge.referenceEquals(runs, System.Text.RegularExpressions.Match.getEmpty()) && !Bridge.referenceEquals(pass, System.Text.RegularExpressions.Match.getEmpty())) {
                    var pbLocation = (TSBTool.SNES_TecmoTool.mPlaybookStartLoc + (Bridge.Int.mul(teamIndex, 4))) | 0;
                    r1 = (System.Int32.parse(runs.getGroups().get(1).toString()) - 1) | 0;
                    r2 = (System.Int32.parse(runs.getGroups().get(2).toString()) - 1) | 0;
                    r3 = (System.Int32.parse(runs.getGroups().get(3).toString()) - 1) | 0;
                    r4 = (System.Int32.parse(runs.getGroups().get(4).toString()) - 1) | 0;

                    p1 = (System.Int32.parse(pass.getGroups().get(1).toString()) - 1) | 0;
                    p2 = (System.Int32.parse(pass.getGroups().get(2).toString()) - 1) | 0;
                    p3 = (System.Int32.parse(pass.getGroups().get(3).toString()) - 1) | 0;
                    p4 = (System.Int32.parse(pass.getGroups().get(4).toString()) - 1) | 0;

                    r1 = ((r1 << 4) + r2) | 0;
                    r3 = ((r3 << 4) + r4) | 0;
                    p1 = ((p1 << 4) + p2) | 0;
                    p3 = ((p3 << 4) + p4) | 0;
                    this.outputRom[System.Array.index(pbLocation, this.outputRom)] = r1 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 1) | 0), this.outputRom)] = r3 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 2) | 0), this.outputRom)] = p1 & 255;
                    this.outputRom[System.Array.index(((pbLocation + 3) | 0), this.outputRom)] = p3 & 255;
                } else {
                    if (teamIndex < 0) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook: Team {0} is Invalid.", [team]));
                    }
                    if (Bridge.referenceEquals(runs, System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook Run play definition '{0} 'is Invalid", [runPlays]));
                    }
                    if (Bridge.referenceEquals(pass, System.Text.RegularExpressions.Match.getEmpty())) {
                        TSBTool.StaticUtils.AddError(System.String.format("ERROR! SetPlaybook Pass play definition '{0} 'is Invalid", [passPlays]));
                    }
                }
            },
            ApplyJuice: function (week, amt) {
                var ret = true;
                if (week > 17 || week < 0 || amt > 17 || amt < 0) {
                    ret = false;
                } else {
                    var rom_location = (TSBTool.SNES_TecmoTool.JUICE_LOCATION + (Bridge.Int.mul(week, 5))) | 0;
                    var index = Bridge.Int.mul((((amt - 1) | 0)), 5);
                    for (var i = 0; i < 5; i = (i + 1) | 0) {
                        this.outputRom[System.Array.index(((rom_location + i) | 0), this.outputRom)] = this.m_JuiceArray[System.Array.index(((index + i) | 0), this.m_JuiceArray)];
                    }
                }
                return ret;
            },
            GetPlayerSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPlayerSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPlayerSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                switch (pos) {
                    case "QB1": 
                    case "QB2": 
                        return this.GetQBSimData(team, pos);
                    case "RB1": 
                    case "RB2": 
                    case "RB3": 
                    case "RB4": 
                    case "WR1": 
                    case "WR2": 
                    case "WR3": 
                    case "WR4": 
                    case "TE1": 
                    case "TE2": 
                        return this.GetSkillSimData(team, pos);
                    case "RE": 
                    case "NT": 
                    case "LE": 
                    case "LOLB": 
                    case "LILB": 
                    case "RILB": 
                    case "ROLB": 
                    case "RCB": 
                    case "LCB": 
                    case "FS": 
                    case "SS": 
                        return this.GetDefensiveSimData(team, pos);
                    case "K": 
                        return this.GetKickingSimData(team);
                    case "P": 
                        return this.GetPuntingSimData(team);
                    default: 
                        return null;
                }
            },
            GetKickingSimData: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetKickingSimData:: Invalid team {0}", [team]));
                    return null;
                }
                var ret = System.Array.init(1, 0, System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0) + 46) | 0;
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                return ret;
            },
            SetKickingSimData: function (team, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickingSimData:: Invalid team {0}", [team]));
                    return;
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0) + 46) | 0;
                var g = this.outputRom[System.Array.index(location, this.outputRom)];
                g = g & 15;
                var g2 = data << 4;
                g = (g + g2) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = g & 255;
            },
            GetPuntingSimData: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPuntingSimData:: Invalid team {0}", [team]));
                    return null;
                }
                var ret = System.Array.init(1, 0, System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0) + 46) | 0;
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                return ret;
            },
            SetPuntingSimData: function (team, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntingSimData:: Invalid team {0}", [team]));
                    return;
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0) + 46) | 0;
                var d = this.outputRom[System.Array.index(location, this.outputRom)];
                d = d & 240;
                d = (d + data) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = d & 255;
            },
            GetDefensiveSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetDefensiveSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetDefensiveSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(2, 0, System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + (((positionIndex - 17) | 0))) | 0) + TSBTool.SNES_TecmoTool.billsRESimLoc) | 0;
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)];
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(((location + 11) | 0), this.outputRom)];
                return ret;
            },
            /**
             * Sets the simulation data for a defensive player.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}            team    The team the player belongs to.
             * @param   {string}            pos     the position he plays.
             * @param   {Array.<number>}    data    the data to set it to (length = 2).
             * @return  {void}
             */
            SetDefensiveSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetDefensiveSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetDefensiveSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 2) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + (((positionIndex - 17) | 0))) | 0) + TSBTool.SNES_TecmoTool.billsRESimLoc) | 0;
                var byte1, byte2;
                byte1 = (data[System.Array.index(0, data)]) & 255;
                byte2 = (data[System.Array.index(1, data)]) & 255;

                this.outputRom[System.Array.index(location, this.outputRom)] = byte1;
                this.outputRom[System.Array.index(((location + 11) | 0), this.outputRom)] = byte2;
            },
            GetSkillSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetSkillSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetSkillSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(4, 0, System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + (Bridge.Int.mul(positionIndex, 2))) | 0) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0;
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                ret[System.Array.index(2, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] >> 4;
                ret[System.Array.index(3, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] & 15;
                return ret;
            },
            SetSkillSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetSkillSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetSkillSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 4) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }

                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);
                var positionIndex = this.GetPositionIndex(pos);
                var location = (((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + (Bridge.Int.mul(positionIndex, 2))) | 0) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0;
                var byte1, byte2;
                byte1 = data[System.Array.index(0, data)] << 4;
                byte1 = (byte1 + data[System.Array.index(1, data)]) | 0;
                byte2 = data[System.Array.index(2, data)] << 4;
                byte2 = (byte2 + data[System.Array.index(3, data)]) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;
            },
            GetQBSimData: function (team, pos) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetQBSimData:: Invalid team {0}", [team]));
                    return null;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetQBSimData:: Invalid Position {0}", [pos]));
                    return null;
                }

                var ret = System.Array.init(3, 0, System.Int32);
                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);

                var location = (Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0;
                if (Bridge.referenceEquals(pos, "QB2")) {
                    location = (location + 2) | 0;
                }
                ret[System.Array.index(0, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] >> 4;
                ret[System.Array.index(1, ret)] = this.outputRom[System.Array.index(location, this.outputRom)] & 15;
                ret[System.Array.index(2, ret)] = this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)];
                return ret;
            },
            SetQBSimData: function (team, pos, data) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetQBSimData:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(pos)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetQBSimData:: Invalid Position {0}", [pos]));
                    return;
                } else if (data == null || data.length < 2) {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting sim data for {0}, {1}. Sim data not set.", team, pos));
                    return;
                }

                var teamIndex = TSBTool.SNES_TecmoTool.GetSimTeamIndex(team);

                var location = (Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamSimOffset) + TSBTool.SNES_TecmoTool.billsQB1SimLoc) | 0;
                if (Bridge.referenceEquals(pos, "QB2")) {
                    location = (location + 2) | 0;
                }
                var byte1, byte2;
                byte1 = ((data[System.Array.index(0, data)]) & 255) << 4;
                byte1 = (byte1 + ((data[System.Array.index(1, data)]) & 255)) | 0;
                byte2 = (data[System.Array.index(2, data)]) & 255;
                this.outputRom[System.Array.index(location, this.outputRom)] = byte1 & 255;
                this.outputRom[System.Array.index(((location + 1) | 0), this.outputRom)] = byte2 & 255;
            },
            /**
             * Get the face number from the given team/position
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetFace: function (team, position) {
                var positionOffset = this.GetPositionIndex(position);
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                if (positionOffset < 0 || teamIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("GetFace Error getting face for {0} {1}", team, position));
                    return -1;
                }
                var loc = ((((((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(positionOffset, this.abilityOffsets)]) | 0) + TSBTool.SNES_TecmoTool.billsQB1AbilityStart) | 0) + 2) | 0;

                var ret = this.outputRom[System.Array.index(loc, this.outputRom)];
                return ret;
            },
            /**
             * Sets the face for the guy at position 'position' on team 'team'.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position    
             * @param   {number}    face
             * @return  {void}
             */
            SetFace: function (team, position, face) {
                var positionOffset = this.GetPositionIndex(position);
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                if (positionOffset < 0 || teamIndex < 0 || !!(face < 0 | face > 212)) {
                    TSBTool.StaticUtils.AddError(System.String.format("SetFace Error setting face for {0} {1} face={2}", team, position, Bridge.box(face, System.Int32)));
                    if (!!(face < 0 | face > 212)) {
                        TSBTool.StaticUtils.AddError(System.String.format("Valid Face numbers are 0x00 - 0xD4", null));
                    }
                    return;
                }
                var loc = ((((((Bridge.Int.mul(teamIndex, TSBTool.SNES_TecmoTool.teamAbilityOffset)) + this.abilityOffsets[System.Array.index(positionOffset, this.abilityOffsets)]) | 0) + TSBTool.SNES_TecmoTool.billsQB1AbilityStart) | 0) + 2) | 0;
                var skin = 128;

                if (face < 83) {
                    skin = 0;
                }

                this.SetCutSceneRace(teamIndex, positionOffset, face);
                this.outputRom[System.Array.index(loc, this.outputRom)] = skin & 255;
            },
            SetCutSceneRace: function (teamIndex, positionIndex, color) {
                var pi = (((Bridge.Int.div(positionIndex, 8)) | 0));
                var romPosition = (((TSBTool.SNES_TecmoTool.mRaceCutsceneStartPos + pi) | 0) + Bridge.Int.mul(teamIndex, 4)) | 0;
                var oldValue = this.outputRom[System.Array.index(romPosition, this.outputRom)];
                var newValue = this.GetNewValue(oldValue, positionIndex, color);
                this.outputRom[System.Array.index(romPosition, this.outputRom)] = newValue;
            },
            GetNewValue: function (oldValue, positionIndex, race) {
                var mask = 255;
                var ret = oldValue;
                var bitIndex = positionIndex % 8;
                if (race === 0) {
                    mask = this.GetWhiteMask(positionIndex);
                    ret = (ret & mask) & 255;
                } else {
                    mask = this.GetColorMask(positionIndex);
                    ret = (ret | mask) & 255;
                }
                return ret;
            },
            GetWhiteMask: function (positionIndex) {
                var ret = 255;
                var bitIndex = positionIndex % 8;
                switch (bitIndex) {
                    case 0: 
                        ret = 127;
                        break;
                    case 1: 
                        ret = 191;
                        break;
                    case 2: 
                        ret = 223;
                        break;
                    case 3: 
                        ret = 239;
                        break;
                    case 4: 
                        ret = 247;
                        break;
                    case 5: 
                        ret = 251;
                        break;
                    case 6: 
                        ret = 253;
                        break;
                    case 7: 
                        ret = 254;
                        break;
                }
                return ret;
            },
            GetColorMask: function (positionIndex) {
                var ret = 0;
                var bitIndex = positionIndex % 8;
                switch (bitIndex) {
                    case 0: 
                        ret = 128;
                        break;
                    case 1: 
                        ret = 64;
                        break;
                    case 2: 
                        ret = 32;
                        break;
                    case 3: 
                        ret = 16;
                        break;
                    case 4: 
                        ret = 8;
                        break;
                    case 5: 
                        ret = 4;
                        break;
                    case 6: 
                        ret = 2;
                        break;
                    case 7: 
                        ret = 1;
                        break;
                }
                return ret;
            },
            /**
             * Sets the return team for 'team'
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team    
             * @param   {string}    pos0    
             * @param   {string}    pos1    
             * @param   {string}    pos2
             * @return  {void}
             */
            SetReturnTeam: function (team, pos0, pos1, pos2) {
                if (this.Index(this.positionNames, pos0) > -1 && this.Index(this.positionNames, pos1) > -1 && this.Index(this.positionNames, pos2) > -1) {
                    this.InsertGuyOnReturnTeam(pos0, team, 0);
                    this.InsertGuyOnReturnTeam(pos1, team, 1);
                    this.InsertGuyOnReturnTeam(pos2, team, 2);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Invalid position on RETURN_TEAM {0} {1} {2}", pos0, pos1, pos2));
                }
            },
            /**
             * Returns a string like "RETURN_TEAM WR3, RB3, RCB"
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetReturnTeam: function (team) {
                var ret = null;
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                if (teamIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! GetReturnTeam.Invalid team {0}", [team]));
                } else {
                    var teamLocation = (TSBTool.SNES_TecmoTool.pr_kr_team_start_offset + (Bridge.Int.mul(4, teamIndex))) | 0;
                    var pos0, pos1, pos2;

                    pos0 = this.outputRom[System.Array.index(teamLocation, this.outputRom)];
                    pos1 = this.outputRom[System.Array.index(((teamLocation + 1) | 0), this.outputRom)];
                    pos2 = this.outputRom[System.Array.index(((teamLocation + 2) | 0), this.outputRom)];

                    if (pos0 > -1 && pos0 < this.positionNames.length && pos1 > -1 && pos1 < this.positionNames.length && pos2 > -1 && pos2 < this.positionNames.length) {
                        ret = System.String.format("RETURN_TEAM {0}, {1}, {2}", this.positionNames[System.Array.index(pos0, this.positionNames)], this.positionNames[System.Array.index(pos1, this.positionNames)], this.positionNames[System.Array.index(pos2, this.positionNames)]);
                    } else {
                        TSBTool.StaticUtils.AddError("ERROR! Return Team Messed up in ROM.");
                    }
                }
                return ret;
            },
            /**
             * Set the punt returner by position.
             Hi nibble.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {void}
             */
            SetPuntReturner: function (team, position) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntReturner:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetPuntReturner:: Invalid Position {0}", [position]));
                    return;
                }

                var index = this.IsGuyOnReturnTeam(position, team);
                if (index < 0) {
                    index = 1;
                    this.InsertGuyOnReturnTeam(position, team, index);
                }

                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var location = (TSBTool.SNES_TecmoTool.pr_kr_start_offset + teamIndex) | 0;
                var kr_pr = this.outputRom[System.Array.index(location, this.outputRom)];

                kr_pr = kr_pr & 240;
                kr_pr = (kr_pr + index) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = kr_pr & 255;
            },
            /**
             * Set the kick returner by position.
             Lo nibble.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {void}
             */
            SetKickReturner: function (team, position) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickReturner:: Invalid team {0}", [team]));
                    return;
                } else if (!this.IsValidPosition(position)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetKickReturner:: Invalid Position {0}", [position]));
                    return;
                }

                var index = this.IsGuyOnReturnTeam(position, team);
                if (index < 0) {
                    index = 0;
                    this.InsertGuyOnReturnTeam(position, team, index);
                }
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var location = (TSBTool.SNES_TecmoTool.pr_kr_start_offset + teamIndex) | 0;
                var kr_pr = this.outputRom[System.Array.index(location, this.outputRom)];
                kr_pr = kr_pr & 15;
                kr_pr = (kr_pr + (index << 4)) | 0;
                this.outputRom[System.Array.index(location, this.outputRom)] = kr_pr & 255;
            },
            /**
             * Gets the position who returns punts.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetKickReturner: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetKickReturner:: Invalid team {0}", [team]));
                    return null;
                }

                var ret = "";
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var returnTeamIndex = this.outputRom[System.Array.index(((TSBTool.SNES_TecmoTool.pr_kr_start_offset + teamIndex) | 0), this.outputRom)] >> 4;
                var teamLocation = (TSBTool.SNES_TecmoTool.pr_kr_team_start_offset + (Bridge.Int.mul(4, teamIndex))) | 0;

                var positionIndex = this.outputRom[System.Array.index(((returnTeamIndex + teamLocation) | 0), this.outputRom)];

                if (positionIndex < this.positionNames.length) {
                    ret = this.positionNames[System.Array.index(positionIndex, this.positionNames)];
                }
                return ret;

                /* 
                			int b = outputRom[loc1];
                			b = b & 0x0F;
                			ret = positionNames[b];
                			return ret;
                			*/
            },
            /**
             * @instance
             * @private
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    guy     the position name of a guy
             * @param   {string}    team    the team
             * @return  {number}
             */
            IsGuyOnReturnTeam: function (guy, team) {
                var ret = -1;
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var posIndex = this.Index(this.positionNames, guy);
                var teamLocation = (TSBTool.SNES_TecmoTool.pr_kr_team_start_offset + (Bridge.Int.mul(4, teamIndex))) | 0;

                if (this.outputRom[System.Array.index(teamLocation, this.outputRom)] === posIndex) {
                    ret = 0;
                } else {
                    if (this.outputRom[System.Array.index(((teamLocation + 1) | 0), this.outputRom)] === posIndex) {
                        ret = 1;
                    } else {
                        if (this.outputRom[System.Array.index(((teamLocation + 2) | 0), this.outputRom)] === posIndex) {
                            ret = 2;
                        }
                    }
                }

                return ret;
            },
            InsertGuyOnReturnTeam: function (position, team, index) {
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var posIndex = this.Index(this.positionNames, position);

                if (index < 0 || index > 2 || teamIndex < 0 || teamIndex > 27 || posIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("InsertGuyOnReturnTeam: invalid arguments {0}, {1}, {2}", position, team, Bridge.box(index, System.Int32)));
                    return;
                }

                var teamLocation = (TSBTool.SNES_TecmoTool.pr_kr_team_start_offset + (Bridge.Int.mul(4, teamIndex))) | 0;
                this.outputRom[System.Array.index(((teamLocation + index) | 0), this.outputRom)] = posIndex & 255;
            },
            /**
             * Gets the position who returns kicks.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {string}    team
             * @return  {string}
             */
            GetPuntReturner: function (team) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) GetPuntReturner:: Invalid team {0}", [team]));
                    return null;
                }

                var ret = "";
                var teamIndex = this.Index(TSBTool.SNES_TecmoTool.teams, team);
                var returnTeamIndex = this.outputRom[System.Array.index((((TSBTool.SNES_TecmoTool.pr_kr_start_offset + teamIndex) | 0)), this.outputRom)] & 15;
                var teamLocation = (TSBTool.SNES_TecmoTool.pr_kr_team_start_offset + (Bridge.Int.mul(4, teamIndex))) | 0;

                var positionIndex = this.outputRom[System.Array.index(((returnTeamIndex + teamLocation) | 0), this.outputRom)];

                if (positionIndex < this.positionNames.length) {
                    ret = this.positionNames[System.Array.index(positionIndex, this.positionNames)];
                }
                return ret;
                /* 
                			string ret = "";
                			int location = 0x328d3 + Index(teams,team);
                			int b = outputRom[location];
                			b = b & 0xF0;
                			b = b >> 4;
                			ret = positionNames[b];
                			return ret;
                			*/
            },
            SetProBowlPlayer: function (conf, proBowlPos, fromTeam, fromTeamPos) {
                var $t, $t1;
                var offset = 0;
                if (conf === TSBTool.Conference.NFC) {
                    offset = (offset + 72) | 0;
                }
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(fromTeam);
                var ti = teamIndex & 255;
                var pi = fromTeamPos & 255;

                var posIndex = -1;
                switch (proBowlPos) {
                    case "RET1": 
                        posIndex = this.positionNames.length;
                        break;
                    case "RET2": 
                        posIndex = (this.positionNames.length + 1) | 0;
                        break;
                    case "RET3": 
                        posIndex = (this.positionNames.length + 2) | 0;
                        break;
                    default: 
                        posIndex = this.GetPositionIndex(proBowlPos);
                        break;
                }
                var loc = (((this.mProwbowlStartingLoc + offset) | 0) + (Bridge.Int.mul(2, posIndex))) | 0;

                ($t = this.OutputRom)[System.Array.index(loc, $t)] = pi;
                ($t1 = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t1)] = ti;
            },
            SetQuarterLength: function (len) {
                if (this.outputRom != null) {
                    this.outputRom[System.Array.index(TSBTool.SNES_TecmoTool.QUARTER_LENGTH, this.outputRom)] = len;
                }
            },
            GetQuarterLength: function () {
                var ret = 0;
                if (this.outputRom != null) {
                    ret = this.outputRom[System.Array.index(TSBTool.SNES_TecmoTool.QUARTER_LENGTH, this.outputRom)];
                }
                return ret;
            },
            ApplySet: function (line) {
                if (this.simpleSetRegex == null) {
                    this.simpleSetRegex = new System.Text.RegularExpressions.Regex.ctor("SET\\s*\\(\\s*(0x[0-9a-fA-F]+)\\s*,\\s*(0x[0-9a-fA-F]+)\\s*\\)");
                }

                if (!Bridge.referenceEquals(this.simpleSetRegex.match(line), System.Text.RegularExpressions.Match.getEmpty())) {
                    TSBTool.StaticUtils.ApplySimpleSet(line, this);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR with line \"{0}\"", [line]));
                }
            },
            GetHexBytes: function (input) {
                if (input == null) {
                    return null;
                }

                var ret = System.Array.init(((Bridge.Int.div(input.length, 2)) | 0), 0, System.Byte);
                var b = "";
                var tmp = 0;
                var j = 0;

                for (var i = 0; i < input.length; i = (i + 2) | 0) {
                    b = input.substr(i, 2);
                    tmp = TSBTool.StaticUtils.ParseIntFromHexString(b);
                    ret[System.Array.index(Bridge.identity(j, ((j = (j + 1) | 0))), ret)] = tmp & 255;
                }
                return ret;
            },
            /**
             * Returns the first index of element that occurs in 'array'. returns
             -1 if 'element' doesn't occur in 'array'.
             *
             * @instance
             * @private
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {Array.<string>}    array      
             * @param   {string}            element
             * @return  {number}
             */
            Index: function (array, element) {
                for (var i = 0; i < array.length; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(array[System.Array.index(i, array)], element)) {
                        return i;
                    }
                }

                return -1;
            },
            PrintValidAbilities: function () {
                TSBTool.StaticUtils.AddError(System.String.format("Valid player abilities are 6, 13, 19, 25, 31, 38, 44, 50, 56, 63, 69, 75, 81, 88, 94, 100", null));
            },
            StringifyArray: function (input) {
                if (input == null) {
                    return null;
                }

                var sb = new System.Text.StringBuilder("", 40);
                for (var i = 0; i < input.length; i = (i + 1) | 0) {
                    sb.append(System.String.format("{0}, ", [Bridge.box(input[System.Array.index(i, input)], System.Int32)]));
                }
                sb.remove(((sb.getLength() - 2) | 0), 1);
                return sb.toString();
            },
            /**
             * Returns an ArrayList of errors that were encountered during the operation.
             *
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {System.Collections.Generic.List$1}    scheduleList
             * @return  {void}
             */
            ApplySchedule: function (scheduleList) {
                if (scheduleList != null && this.outputRom != null) {
                    var sch = new TSBTool.SNES_ScheduleHelper(this.outputRom);
                    sch.ApplySchedule(scheduleList);
                }
            },
            SetHomeUniform: function (team, colorString) {
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                }
            },
            SetAwayUniform: function (team, colorString) {
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                }
            },
            GetHomeUniform: function (team) {
                var ret = "";
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                }
                return ret;
            },
            GetAwayUniform: function (team) {
                var ret = "";
                var loc = this.GetUniformLoc(team);
                if (loc > -1) {
                }
                return ret;
            },
            GetUniformLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.SNES_TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 28) {
                    ret = (this.BillsUniformLoc + (Bridge.Int.mul(teamIndex, 10))) | 0;
                }
                return ret;
            },
            GetGameUniform: function (team) {
                var ret = "";
                return ret;
            },
            SetDivChampColors: function (team, colorString) { },
            SetUniformUsage: function (team, usage) { },
            GetUniformUsage: function (team) {
                return "";
            },
            SetConfChampColors: function (team, colorString) { },
            GetDivChampColors: function (team) {
                var ret = "";
                return ret;
            },
            GetConfChampColors: function (team) {
                var ret = "";
                return ret;
            },
            GetChampColors: function (team) {
                var ret = "";
                return ret;
            },
            /**
             * @instance
             * @public
             * @this TSBTool.SNES_TecmoTool
             * @memberof TSBTool.SNES_TecmoTool
             * @param   {TSBTool.Conference}    conf          
             * @param   {string}                proBowlPos
             * @return  {string}
             */
            GetProBowlPlayer: function (conf, proBowlPos) {
                var $t, $t1;
                var ret = "";
                var offset = 0;
                if (conf === TSBTool.Conference.NFC) {
                    offset = (offset + 72) | 0;
                }

                var posIndex = -1;
                switch (proBowlPos) {
                    case "RET1": 
                        posIndex = this.positionNames.length;
                        break;
                    case "RET2": 
                        posIndex = (this.positionNames.length + 1) | 0;
                        break;
                    case "RET3": 
                        posIndex = (this.positionNames.length + 2) | 0;
                        break;
                    default: 
                        posIndex = this.GetPositionIndex(proBowlPos);
                        break;
                }
                var loc = (((this.mProwbowlStartingLoc + offset) | 0) + (Bridge.Int.mul(2, posIndex))) | 0;

                var teamIndex = ($t = this.OutputRom)[System.Array.index(((loc + 1) | 0), $t)];
                var pos = ($t1 = this.OutputRom)[System.Array.index(loc, $t1)];

                var team = TSBTool.TecmoTool.Teams.getItem(teamIndex);
                ret = System.String.format("{0},{1},{2},{3}", System.Enum.toString(TSBTool.Conference, conf), Bridge.toString(proBowlPos), team, System.Enum.toString(TSBTool.TSBPlayer, pos));

                return ret;
            },
            GetConferenceProBowlPlayers: function (conf) {
                var builder = new System.Text.StringBuilder("", 500);
                for (var i = 0; i < this.positionNames.length; i = (i + 1) | 0) {
                    builder.append(this.GetProBowlPlayer(conf, this.positionNames[System.Array.index(i, this.positionNames)]));
                    builder.append("\r\n");
                }
                builder.append(this.GetProBowlPlayer(conf, "RET1"));
                builder.append("\r\n");
                builder.append(this.GetProBowlPlayer(conf, "RET2"));
                builder.append("\r\n");
                builder.append(this.GetProBowlPlayer(conf, "RET3"));
                builder.append("\r\n");

                return builder.toString();
            },
            ProcessText: function (text) {
                var parser = new TSBTool.InputParser.$ctor1(this);
                text = System.String.replaceAll(text, "\r\n", "\n");
                var lines = System.String.split(text, System.String.toCharArray(("\n"), 0, ("\n").length).map(function (i) {{ return String.fromCharCode(i); }}));
                parser.ProcessLines(lines);
            }
        }
    });

    Bridge.define("TSBTool2.SNES_TSB3_ScheduleHelper", {
        inherits: [TSBTool2.SNES_ScheduleHelper],
        fields: {
            weeks: null
        },
        ctors: {
            init: function () {
                this.weeks = System.Array.init([
                    1503244, 
                    1503274, 
                    1503304, 
                    1503334, 
                    1503364, 
                    1503394, 
                    1503424, 
                    1503454, 
                    1503484, 
                    1503514, 
                    1503544, 
                    1503574, 
                    1503604, 
                    1503634, 
                    1503664, 
                    1503694, 
                    1503724
                ], System.Int32);
            },
            ctor: function (tool) {
                this.$initialize();
                TSBTool2.SNES_ScheduleHelper.ctor.call(this, tool);
            }
        },
        methods: {
            GameLocation: function (week, gameOfweek) {
                var location = this.weeks[System.Array.index(week, this.weeks)];
                var retVal = (location + (Bridge.Int.mul(2, gameOfweek))) | 0;
                return retVal;
            }
        }
    });

    Bridge.define("TSBTool2.TSB2Tool", {
        inherits: [TSBTool2.ITecmoTool,TSBTool.ITecmoContent],
        statics: {
            fields: {
                BYTES_PER_PLAYER: 0,
                NAME_TABLE_SIZE: 0,
                BANK_1_PLAYER_ATTRIBUTES_START: 0,
                BANK_2_PLAYER_ATTRIBUTES_START: 0,
                BANK_3_PLAYER_ATTRIBUTES_START: 0,
                tsb2_name_string_table_1_offset: 0,
                tsb2_name_string_table_2_first_ptr: 0,
                tsb2_name_string_table_2_offset: 0,
                tsb2_name_string_table_3_first_ptr: 0,
                tsb2_name_string_table_3_offset: 0,
                tsb2_team_name_string_table_first_ptr: 0,
                tsb2_team_name_string_table_offset: 0,
                TEAM_NAME_STRING_TABLE_SIZE: 0,
                schedule_start_season_1: 0,
                schedule_start_season_2: 0,
                schedule_start_season_3: 0,
                team_sim_start_season_1: 0,
                team_sim_start_season_2: 0,
                team_sim_start_season_3: 0,
                team_sim_size: 0,
                bills_kr_loc_season_2: 0,
                bills_kr_loc_season_3: 0,
                playbook_team_size: 0,
                pro_bowl_ptr_location_season_1: 0,
                pro_bowl_ptr_location_season_2: 0,
                pro_bowl_ptr_location_season_3: 0,
                ShowPlayerSimData: false,
                ShowPlaybooks: false,
                ShowSchedule: false,
                positionNames: null,
                teams: null
            },
            ctors: {
                init: function () {
                    this.BYTES_PER_PLAYER = 5;
                    this.NAME_TABLE_SIZE = 18328;
                    this.BANK_1_PLAYER_ATTRIBUTES_START = 2017280;
                    this.BANK_2_PLAYER_ATTRIBUTES_START = 2050048;
                    this.BANK_3_PLAYER_ATTRIBUTES_START = 2082816;
                    this.tsb2_name_string_table_1_offset = 1966080;
                    this.tsb2_name_string_table_2_first_ptr = 2031672;
                    this.tsb2_name_string_table_2_offset = 1998848;
                    this.tsb2_name_string_table_3_first_ptr = 2064440;
                    this.tsb2_name_string_table_3_offset = 2031616;
                    this.tsb2_team_name_string_table_first_ptr = 28672;
                    this.tsb2_team_name_string_table_offset = -32768;
                    this.TEAM_NAME_STRING_TABLE_SIZE = 1472;
                    this.schedule_start_season_1 = 1503244;
                    this.schedule_start_season_2 = 1503748;
                    this.schedule_start_season_3 = 1504280;
                    this.team_sim_start_season_1 = 2023424;
                    this.team_sim_start_season_2 = 2056192;
                    this.team_sim_start_season_3 = 2088960;
                    this.team_sim_size = 102;
                    this.bills_kr_loc_season_2 = 938518;
                    this.bills_kr_loc_season_3 = 938578;
                    this.playbook_team_size = 8;
                    this.pro_bowl_ptr_location_season_1 = 937984;
                    this.pro_bowl_ptr_location_season_2 = 937986;
                    this.pro_bowl_ptr_location_season_3 = 937988;
                    this.ShowPlayerSimData = true;
                    this.ShowPlaybooks = true;
                    this.ShowSchedule = true;
                    this.positionNames = function (_o1) {
                            _o1.add("QB1");
                            _o1.add("QB2");
                            _o1.add("RB1");
                            _o1.add("RB2");
                            _o1.add("RB3");
                            _o1.add("RB4");
                            _o1.add("WR1");
                            _o1.add("WR2");
                            _o1.add("WR3");
                            _o1.add("WR4");
                            _o1.add("TE1");
                            _o1.add("TE2");
                            _o1.add("C");
                            _o1.add("LG");
                            _o1.add("RG");
                            _o1.add("LT");
                            _o1.add("RT");
                            _o1.add("RE");
                            _o1.add("NT");
                            _o1.add("LE");
                            _o1.add("RE2");
                            _o1.add("NT2");
                            _o1.add("LE2");
                            _o1.add("ROLB");
                            _o1.add("RILB");
                            _o1.add("LILB");
                            _o1.add("LOLB");
                            _o1.add("LB5");
                            _o1.add("RCB");
                            _o1.add("LCB");
                            _o1.add("DB1");
                            _o1.add("DB2");
                            _o1.add("FS");
                            _o1.add("SS");
                            _o1.add("DB3");
                            _o1.add("K");
                            _o1.add("P");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                    this.teams = function (_o2) {
                            _o2.add("bills");
                            _o2.add("colts");
                            _o2.add("dolphins");
                            _o2.add("patriots");
                            _o2.add("jets");
                            _o2.add("bengals");
                            _o2.add("browns");
                            _o2.add("oilers");
                            _o2.add("steelers");
                            _o2.add("broncos");
                            _o2.add("chiefs");
                            _o2.add("raiders");
                            _o2.add("chargers");
                            _o2.add("seahawks");
                            _o2.add("cowboys");
                            _o2.add("giants");
                            _o2.add("eagles");
                            _o2.add("cardinals");
                            _o2.add("redskins");
                            _o2.add("bears");
                            _o2.add("lions");
                            _o2.add("packers");
                            _o2.add("vikings");
                            _o2.add("buccaneers");
                            _o2.add("falcons");
                            _o2.add("rams");
                            _o2.add("saints");
                            _o2.add("49ers");
                            return _o2;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            },
            methods: {
                IsTecmoSuperBowl2Rom: function (rom) {
                    var retVal = false;
                    if (rom != null && rom.length > 0) {
                        var results = TSBTool.StaticUtils.FindStringInFile("CONSECUTIVE", rom, 1828064, 1830688);
                        if (results.Count > 0) {
                            retVal = true;
                        }
                    }
                    return retVal;
                },
                GetTeamIndex: function (team) {
                    return TSBTool2.TSB2Tool.teams.indexOf(team);
                },
                GetTeamFromIndex: function (i) {
                    return TSBTool2.TSB2Tool.teams.getItem(i);
                }
            }
        },
        fields: {
            OutputRom: null,
            BYTES_PER_QB: 0,
            tsb2_name_string_table_1_first_ptr: 0,
            bills_kr_loc_season_1: 0,
            playbook_start: null,
            pro_bowl_playbook: 0,
            ShowOffPref: false,
            eighteenWeeks: null,
            seventeenWeeks: null
        },
        props: {
            RomVersion: {
                get: function () {
                    return TSBTool.ROM_TYPE.SNES_TSB2;
                }
            }
        },
        alias: [
            "OutputRom", "TSBTool$ITecmoContent$OutputRom",
            "OutputRom", "TSBTool2$ITecmoTool$OutputRom",
            "ShowOffPref", "TSBTool$ITecmoContent$ShowOffPref",
            "RomVersion", "TSBTool$ITecmoContent$RomVersion",
            "SetByte", "TSBTool$ITecmoContent$SetByte",
            "SetByte", "TSBTool2$ITecmoTool$SetByte",
            "IsValidPosition", "TSBTool2$ITecmoTool$IsValidPosition",
            "GetSchedule", "TSBTool$ITecmoContent$GetSchedule",
            "GetSchedule", "TSBTool2$ITecmoTool$GetSchedule",
            "SetQBAbilities", "TSBTool2$ITecmoTool$SetQBAbilities",
            "SetOLPlayerAbilities", "TSBTool2$ITecmoTool$SetOLPlayerAbilities",
            "SetKickerAbilities", "TSBTool2$ITecmoTool$SetKickerAbilities",
            "SetPunterAbilities", "TSBTool2$ITecmoTool$SetPunterAbilities",
            "SetSkillPlayerAbilities", "TSBTool2$ITecmoTool$SetSkillPlayerAbilities",
            "SetDefensivePlayerAbilities", "TSBTool2$ITecmoTool$SetDefensivePlayerAbilities",
            "SetFace", "TSBTool2$ITecmoTool$SetFace",
            "InsertPlayerName", "TSBTool2$ITecmoTool$InsertPlayerName",
            "GetTeams", "TSBTool2$ITecmoTool$GetTeams",
            "GetProBowlPlayers", "TSBTool$ITecmoContent$GetProBowlPlayers",
            "SetProBowlPlayer", "TSBTool2$ITecmoTool$SetProBowlPlayer",
            "SetQBSimData", "TSBTool2$ITecmoTool$SetQBSimData",
            "SetSkillSimData", "TSBTool2$ITecmoTool$SetSkillSimData",
            "SetDefensiveSimData", "TSBTool2$ITecmoTool$SetDefensiveSimData",
            "SetKickingSimData", "TSBTool2$ITecmoTool$SetKickingSimData",
            "SetPuntingSimData", "TSBTool2$ITecmoTool$SetPuntingSimData",
            "SetTeamSimData", "TSBTool2$ITecmoTool$SetTeamSimData",
            "GetTeamPlayers", "TSBTool2$ITecmoTool$GetTeamPlayers",
            "GetTeamName", "TSBTool2$ITecmoTool$GetTeamName",
            "GetTeamCity", "TSBTool2$ITecmoTool$GetTeamCity",
            "GetTeamAbbreviation", "TSBTool2$ITecmoTool$GetTeamAbbreviation",
            "SetTeamAbbreviation", "TSBTool2$ITecmoTool$SetTeamAbbreviation",
            "SetTeamName", "TSBTool2$ITecmoTool$SetTeamName",
            "SetTeamCity", "TSBTool2$ITecmoTool$SetTeamCity",
            "SetPlaybook", "TSBTool2$ITecmoTool$SetPlaybook",
            "SetYear", "TSBTool2$ITecmoTool$SetYear",
            "GetKey", "TSBTool$ITecmoContent$GetKey",
            "GetKey", "TSBTool2$ITecmoTool$GetKey",
            "GetAll", "TSBTool2$ITecmoTool$GetAll",
            "GetAll$1", "TSBTool$ITecmoContent$GetAll",
            "GetAll$1", "TSBTool2$ITecmoTool$GetAll$1",
            "SetKickReturner", "TSBTool2$ITecmoTool$SetKickReturner",
            "SetPuntReturner", "TSBTool2$ITecmoTool$SetPuntReturner",
            "ApplySchedule", "TSBTool2$ITecmoTool$ApplySchedule",
            "ApplySet", "TSBTool$ITecmoContent$ApplySet",
            "ApplySet", "TSBTool2$ITecmoTool$ApplySet",
            "ProcessText", "TSBTool$ITecmoContent$ProcessText",
            "ProcessText", "TSBTool2$ITecmoTool$ProcessText",
            "SaveRom", "TSBTool$ITecmoContent$SaveRom"
        ],
        ctors: {
            init: function () {
                this.BYTES_PER_QB = 6;
                this.tsb2_name_string_table_1_first_ptr = 1998904;
                this.bills_kr_loc_season_1 = 938458;
                this.playbook_start = System.Array.init([
                    941350, 
                    941590, 
                    941830
                ], System.Int32);
                this.pro_bowl_playbook = 24071;
                this.eighteenWeeks = System.Array.init([14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], System.Int32);
                this.seventeenWeeks = System.Array.init([14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], System.Int32);
            },
            $ctor1: function (rom) {
                this.$initialize();
                this.OutputRom = rom;
                this.Init();
            },
            ctor: function () {
                this.$initialize();
                this.Init();
            }
        },
        methods: {
            Init: function () {
                this.BYTES_PER_QB = 6;
                this.tsb2_name_string_table_1_first_ptr = 1998904;

                TSBTool2.TSB2Tool.teams = function (_o1) {
                        _o1.add("bills");
                        _o1.add("colts");
                        _o1.add("dolphins");
                        _o1.add("patriots");
                        _o1.add("jets");
                        _o1.add("bengals");
                        _o1.add("browns");
                        _o1.add("oilers");
                        _o1.add("steelers");
                        _o1.add("broncos");
                        _o1.add("chiefs");
                        _o1.add("raiders");
                        _o1.add("chargers");
                        _o1.add("seahawks");
                        _o1.add("cowboys");
                        _o1.add("giants");
                        _o1.add("eagles");
                        _o1.add("cardinals");
                        _o1.add("redskins");
                        _o1.add("bears");
                        _o1.add("lions");
                        _o1.add("packers");
                        _o1.add("vikings");
                        _o1.add("buccaneers");
                        _o1.add("falcons");
                        _o1.add("rams");
                        _o1.add("saints");
                        _o1.add("49ers");
                        return _o1;
                    }(new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            SetByte: function (location, b) {
                var $t;
                ($t = this.OutputRom)[System.Array.index(location, $t)] = b;
            },
            IsValidPosition: function (pos) {
                return TSBTool2.TSB2Tool.positionNames.indexOf(pos) > -1;
            },
            GetSchedule: function (season) {
                var helper = new TSBTool2.SNES_ScheduleHelper(this);
                switch (season) {
                    case 1: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_1, this.seventeenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                    case 2: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_2, this.eighteenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                    case 3: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_3, this.seventeenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                }
                return helper.GetSchedule();
            },
            GetPlayerIndex: function (team, position) {
                var teamIndex = TSBTool2.TSB2Tool.teams.indexOf(team);
                var positionIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                var retVal = (Bridge.Int.mul(teamIndex, TSBTool2.TSB2Tool.positionNames.Count) + positionIndex) | 0;
                return retVal;
            },
            GetPlayerAttributeLocation: function (season, team, position) {
                var retVal = -1;
                var attributeStart = TSBTool2.TSB2Tool.BANK_3_PLAYER_ATTRIBUTES_START;
                switch (season) {
                    case 1: 
                        attributeStart = TSBTool2.TSB2Tool.BANK_1_PLAYER_ATTRIBUTES_START;
                        break;
                    case 2: 
                        attributeStart = TSBTool2.TSB2Tool.BANK_2_PLAYER_ATTRIBUTES_START;
                        break;
                }
                var teamByteSize = 185;
                var teamIndex = TSBTool2.TSB2Tool.teams.indexOf(team);
                var positionIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                var teamStart = (attributeStart + (Bridge.Int.mul(teamIndex, teamByteSize))) | 0;
                switch (positionIndex) {
                    case 0: 
                        retVal = teamStart;
                        break;
                    case 1: 
                        retVal = (teamStart + 7) | 0;
                        break;
                    case 2: 
                    case 3: 
                    case 4: 
                    case 5: 
                    case 6: 
                    case 7: 
                    case 8: 
                    case 9: 
                    case 10: 
                    case 11: 
                        retVal = (((teamStart + Bridge.Int.mul(TSBTool2.TSB2Tool.BYTES_PER_PLAYER, positionIndex)) | 0) + 4) | 0;
                        break;
                    case 12: 
                        retVal = (teamStart + 64) | 0;
                        break;
                    case 13: 
                        retVal = (teamStart + 68) | 0;
                        break;
                    case 14: 
                        retVal = (teamStart + 72) | 0;
                        break;
                    case 15: 
                        retVal = (teamStart + 76) | 0;
                        break;
                    case 16: 
                        retVal = (teamStart + 80) | 0;
                        break;
                    case 36: 
                        retVal = (teamStart + 180) | 0;
                        break;
                    default: 
                        retVal = (((teamStart + 84) | 0) + Bridge.Int.mul(5, (((positionIndex - 17) | 0)))) | 0;
                        break;
                }

                return retVal;
            },
            GetQBAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var ps = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t4)]);
                var pc = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t5)]);
                var pa = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var ar = TSBTool.StaticUtils.GetSecondNibble(($t7 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t7)]);
                var co = TSBTool.StaticUtils.GetSecondNibble(($t8 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t8)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t9 = this.OutputRom)[System.Array.index(((location + 6) | 0), $t9)]);
                var sp = TSBTool.StaticUtils.GetSecondNibble(($t10 = this.OutputRom)[System.Array.index(((location + 6) | 0), $t10)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, ps, pc, pa, ar, co], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(season, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X2},{1:X2},{2:X2}]", Bridge.box(($t11 = this.OutputRom)[System.Array.index(location, $t11)], System.Byte), Bridge.box(($t12 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t12)], System.Byte), Bridge.box(($t13 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t13)], System.Byte))) || "");
                }
                return retVal;
            },
            SetQBAbilities: function (season, team, qb, abilities) {
                var $t, $t1;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                if (!Bridge.referenceEquals(qb, "QB1") && !Bridge.referenceEquals(qb, "QB2")) {
                    throw new System.ArgumentException.$ctor1("Invalid qb position " + (qb || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, qb);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var ps_pc = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(5, abilities)], abilities[System.Array.index(6, abilities)]);
                var pa_ar = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(7, abilities)], abilities[System.Array.index(8, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(((location + 5) | 0), $t)]);
                var unk1_co = TSBTool.StaticUtils.CombineNibbles(unk1, abilities[System.Array.index(9, abilities)]);
                var unk2 = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(((location + 6) | 0), $t1)]);
                var bb_unk2 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk2);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), ps_pc);
                this.SetByte(((location + 4) | 0), pa_ar);
                this.SetByte(((location + 5) | 0), unk1_co);
                this.SetByte(((location + 6) | 0), bb_unk2);
            },
            GetOLPlayerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t4)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                return retVal;
            },
            SetOLPlayerAbilities: function (season, team, pos, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(pos);
                if (posIndex < 12 || posIndex > 16) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes C,RG,RT,LG,LT) " + (pos || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, pos);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 3) | 0), $t)]);
                var bb_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk1);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), bb_unk1);
            },
            GetKickerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var kp = TSBTool.StaticUtils.GetSecondNibble(($t4 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t4)]);
                var ka = TSBTool.StaticUtils.GetFirstNibble(($t5 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t5)]);
                var ab = TSBTool.StaticUtils.GetSecondNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t7 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t7)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, kp, ka, ab], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(season, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X}]", [Bridge.box((($t8 = this.OutputRom)[System.Array.index(location, $t8)] >> 4), System.Int32)])) || "");
                }
                return retVal;
            },
            SetKickerAbilities: function (season, team, position, abilities) {
                var $t, $t1;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                if (!Bridge.referenceEquals(position, "K")) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes K) " + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(((location + 3) | 0), $t)]);
                var unk1_kp = TSBTool.StaticUtils.CombineNibbles(unk1, abilities[System.Array.index(5, abilities)]);
                var ka_ab = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);
                var unk2 = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t1)]);
                var bb_unk2 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk2);

                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), unk1_kp);
                this.SetByte(((location + 4) | 0), ka_ab);
                this.SetByte(((location + 5) | 0), bb_unk2);
            },
            GetPunterAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var kp = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t4)]);
                var ab = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t5)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, kp, ab], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(season, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X}]", [Bridge.box((($t7 = this.OutputRom)[System.Array.index(location, $t7)] & 15), System.Int32)])) || "");
                }
                return retVal;
            },
            SetPunterAbilities: function (season, team, position, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                if (!Bridge.referenceEquals(position, "P")) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes P) " + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var kp_ab = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(5, abilities)], abilities[System.Array.index(6, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 4) | 0), $t)]);
                var bb_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk1);

                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), kp_ab);
                this.SetByte(((location + 4) | 0), bb_unk1);
            },
            GetPlayerAbilities: function (season, team, position) {
                switch (position) {
                    case "QB1": 
                    case "QB2": 
                        return this.GetQBAbilities(season, team, position);
                    case "C": 
                    case "RG": 
                    case "LG": 
                    case "RT": 
                    case "LT": 
                        return this.GetOLPlayerAbilities(season, team, position);
                    case "K": 
                        return this.GetKickerAbilities(season, team, position);
                    case "P": 
                        return this.GetPunterAbilities(season, team, position);
                }
                return this.GetSkill_DefPlayerAbilities(season, team, position);
            },
            GetSkill_DefPlayerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);

                var bc = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t4)]);
                var rec = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t5)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, bc, rec], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(season, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X2},{1:X2},{2:X2}", Bridge.box(($t7 = this.OutputRom)[System.Array.index(location, $t7)], System.Byte), Bridge.box(($t8 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t8)], System.Byte), Bridge.box(($t9 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t9)], System.Byte))) || "");
                    if (TSBTool2.TSB2Tool.positionNames.indexOf(position) < 13) {
                        retVal = (retVal || "") + (("," + (System.Byte.format(($t10 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t10)], "X2") || "")) || "");
                    }
                    retVal = (retVal || "") + "]";
                }
                return retVal;
            },
            SetSkillPlayerAbilities: function (season, team, position, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                if (posIndex < 2 || posIndex > 11) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes RB1=TE2)" + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bc_rec = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(5, abilities)], abilities[System.Array.index(6, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 4) | 0), $t)]);
                var bb_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk1);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), bc_rec);
                this.SetByte(((location + 4) | 0), bb_unk1);
            },
            SetDefensivePlayerAbilities: function (season, team, position, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                if (posIndex < 17 || posIndex > 34) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes RE-DB3)" + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var pi_qu = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(5, abilities)], abilities[System.Array.index(6, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 4) | 0), $t)]);
                var bb_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], unk1);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 3) | 0), pi_qu);
                this.SetByte(((location + 4) | 0), bb_unk1);
            },
            GetFace: function (season, team, position) {
                var $t;
                var location = (this.GetPlayerAttributeLocation(season, team, position) + 2) | 0;
                var retVal = ($t = this.OutputRom)[System.Array.index(location, $t)];
                return retVal;
            },
            SetFace: function (season, team, position, face) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args$1(season, team, position);
                var location = (this.GetPlayerAttributeLocation(season, team, position) + 2) | 0;
                var lowNibble = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var highNibble = TSBTool.StaticUtils.GetFirstNibble((face & 255));
                var face_b = TSBTool.StaticUtils.CombineNibbles(highNibble, lowNibble);
                this.SetByte(location, face_b);
            },
            GetPlayerName: function (season, team, position, playerNumber) {
                var retVal = "fakeNEWS!!!";
                var first_ptr = this.tsb2_name_string_table_1_first_ptr;
                var offset = TSBTool2.TSB2Tool.tsb2_name_string_table_1_offset;
                switch (season) {
                    case 2: 
                        first_ptr = TSBTool2.TSB2Tool.tsb2_name_string_table_2_first_ptr;
                        offset = TSBTool2.TSB2Tool.tsb2_name_string_table_2_offset;
                        break;
                    case 3: 
                        first_ptr = TSBTool2.TSB2Tool.tsb2_name_string_table_3_first_ptr;
                        offset = TSBTool2.TSB2Tool.tsb2_name_string_table_3_offset;
                        break;
                }
                var playerIndex = this.GetPlayerIndex(team, position);
                var name = TSBTool.StaticUtils.GetStringTableString(this.OutputRom, playerIndex, first_ptr, offset);
                playerNumber.v = (name.charCodeAt(0)) & 255;
                if (playerNumber.v === 42) {
                    playerNumber.v = 0;
                }
                name = name.substr(1);
                for (var i = 0; i < name.length; i = (i + 1) | 0) {
                    if (Bridge.isUpper(name.charCodeAt(i))) {
                        retVal = (name.substr(0, i) || "") + " " + (name.substr(i) || "");
                        break;
                    }
                }
                return retVal;
            },
            InsertPlayerName: function (season, currentTeam, position, fname, lname, jerseyNumber) {
                var first_ptr = this.tsb2_name_string_table_1_first_ptr;
                var offset = TSBTool2.TSB2Tool.tsb2_name_string_table_1_offset;
                switch (season) {
                    case 2: 
                        first_ptr = TSBTool2.TSB2Tool.tsb2_name_string_table_2_first_ptr;
                        offset = TSBTool2.TSB2Tool.tsb2_name_string_table_2_offset;
                        break;
                    case 3: 
                        first_ptr = TSBTool2.TSB2Tool.tsb2_name_string_table_3_first_ptr;
                        offset = TSBTool2.TSB2Tool.tsb2_name_string_table_3_offset;
                        break;
                }
                var playerIndex = this.GetPlayerIndex(currentTeam, position);
                var insertThis = String.fromCharCode(jerseyNumber) + (fname.toLowerCase() || "") + (lname.toUpperCase() || "");
                var stringsInTable = Bridge.Int.mul(TSBTool2.TSB2Tool.teams.Count, TSBTool2.TSB2Tool.positionNames.Count);
                TSBTool.StaticUtils.SetStringTableString(this.OutputRom, playerIndex, insertThis, first_ptr, offset, stringsInTable, TSBTool2.TSB2Tool.NAME_TABLE_SIZE);
            },
            GetTeams: function (season) {
                var $t;
                var builder = new System.Text.StringBuilder();
                $t = Bridge.getEnumerator(TSBTool2.TSB2Tool.teams);
                try {
                    while ($t.moveNext()) {
                        var team = $t.Current;
                        this.GetTeam(season, team, builder);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                var retVal = builder.toString();
                return retVal;
            },
            GetProBowlPlayers: function (season) {
                var builder = new System.Text.StringBuilder();
                this.GetProBowlTeam(season, TSBTool2.Conference.AFC, builder);
                this.GetProBowlTeam(season, TSBTool2.Conference.NFC, builder);
                var retVal = builder.toString();
                return retVal;
            },
            GetTeam: function (season, team, builder) {
                var i = TSBTool2.TSB2Tool.teams.indexOf(team);
                builder.append("TEAM = ");
                builder.append(team);
                builder.append(",");
                builder.append(this.GetTeamSimData(season, team));
                builder.append("\n");
                if (TSBTool2.TSB2Tool.ShowPlaybooks) {
                    builder.append(this.GetPlaybook(season, team));
                    builder.append("\n");
                }
                builder.append(System.String.format("TEAM_ABB={0},TEAM_CITY={1},TEAM_NAME={2}\n", this.GetTeamAbbreviation(i), this.GetTeamCity(i), this.GetTeamName(i)));
                builder.append(this.GetTeamPlayers(season, team));
            },
            GetProBowlTeam: function (season, conf, builder) {
                var $t, $t1, $t2;
                var location = this.GetProbowlTeamLocation(season, conf);
                builder.append(System.String.format("# {0} ProBowl players\n", [System.Enum.toString(TSBTool2.Conference, conf)]));
                var team = "";
                var playerPos = "";
                var playerPositionIndex = -1;
                var playerIndex = -1;
                var teamIndex = -1;
                $t = Bridge.getEnumerator(TSBTool2.TSB2Tool.positionNames);
                try {
                    while ($t.moveNext()) {
                        var pos = $t.Current;
                        playerIndex = ((($t1 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t1)] << 8) + ($t2 = this.OutputRom)[System.Array.index(location, $t2)]) | 0;
                        teamIndex = (Bridge.Int.div(playerIndex, TSBTool2.TSB2Tool.positionNames.Count)) | 0;
                        playerPositionIndex = playerIndex % TSBTool2.TSB2Tool.positionNames.Count;
                        playerPos = TSBTool2.TSB2Tool.positionNames.getItem(playerPositionIndex);
                        team = TSBTool2.TSB2Tool.teams.getItem(teamIndex);
                        builder.append(System.String.format("{0},{1},{2},{3}\n", System.Enum.toString(TSBTool2.Conference, conf), pos, team, playerPos));
                        location = (location + 2) | 0;
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                builder.append("\n");
            },
            SetProBowlPlayer: function (season, conf, proBowlPos, fromTeam, fromTeamPos) {
                var playerIndex = (Bridge.Int.mul(TSBTool2.TSB2Tool.teams.indexOf(fromTeam), TSBTool2.TSB2Tool.positionNames.Count) + fromTeamPos) | 0;
                var location = (this.GetProbowlTeamLocation(season, conf) + Bridge.Int.mul(2, TSBTool2.TSB2Tool.positionNames.indexOf(proBowlPos))) | 0;
                var b1 = (playerIndex >> 8) & 255;
                var b2 = (playerIndex & 255) & 255;
                this.SetByte(location, b2);
                this.SetByte(((location + 1) | 0), b1);
            },
            GetProbowlTeamLocation: function (season, conf) {
                var $t, $t1;
                var ptr_location = TSBTool2.TSB2Tool.pro_bowl_ptr_location_season_1;
                switch (season) {
                    case 2: 
                        ptr_location = TSBTool2.TSB2Tool.pro_bowl_ptr_location_season_2;
                        break;
                    case 3: 
                        ptr_location = TSBTool2.TSB2Tool.pro_bowl_ptr_location_season_3;
                        break;
                }
                if (conf === TSBTool2.Conference.NFC) {
                    ptr_location = (ptr_location + 6) | 0;
                }
                var location = ((($t = this.OutputRom)[System.Array.index(((ptr_location + 1) | 0), $t)] << 8) + ($t1 = this.OutputRom)[System.Array.index(ptr_location, $t1)]) | 0;
                var offset = 884736;
                location = (location + offset) | 0;
                return location;
            },
            GetSimLocation: function (season, team, position) {
                var $t, $t1;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var index = TSBTool2.TSB2Tool.teams.indexOf(team);
                var ptr_location = Bridge.Int.mul(index, 2);
                switch (season) {
                    case 1: 
                        ptr_location = (ptr_location + TSBTool2.TSB2Tool.team_sim_start_season_1) | 0;
                        break;
                    case 2: 
                        ptr_location = (ptr_location + TSBTool2.TSB2Tool.team_sim_start_season_2) | 0;
                        break;
                    case 3: 
                        ptr_location = (ptr_location + TSBTool2.TSB2Tool.team_sim_start_season_3) | 0;
                        break;
                }
                var location = (((1966080 + (($t = this.OutputRom)[System.Array.index(((ptr_location + 1) | 0), $t)] << 8)) | 0) + ($t1 = this.OutputRom)[System.Array.index(ptr_location, $t1)]) | 0;
                switch (position) {
                    case "QB1": 
                        break;
                    case "QB2": 
                        location = (location + 3) | 0;
                        break;
                    case "RB1": 
                        location = (location + 6) | 0;
                        break;
                    case "RB2": 
                        location = (location + 10) | 0;
                        break;
                    case "RB3": 
                        location = (location + 14) | 0;
                        break;
                    case "RB4": 
                        location = (location + 18) | 0;
                        break;
                    case "WR1": 
                        location = (location + 22) | 0;
                        break;
                    case "WR2": 
                        location = (location + 26) | 0;
                        break;
                    case "WR3": 
                        location = (location + 30) | 0;
                        break;
                    case "WR4": 
                        location = (location + 34) | 0;
                        break;
                    case "TE1": 
                        location = (location + 38) | 0;
                        break;
                    case "TE2": 
                        location = (location + 42) | 0;
                        break;
                    case "RE": 
                        location = (location + 46) | 0;
                        break;
                    case "NT": 
                        location = (location + 49) | 0;
                        break;
                    case "LE": 
                        location = (location + 52) | 0;
                        break;
                    case "RE2": 
                        location = (location + 55) | 0;
                        break;
                    case "NT2": 
                        location = (location + 58) | 0;
                        break;
                    case "LE2": 
                        location = (location + 61) | 0;
                        break;
                    case "LOLB": 
                        location = (location + 64) | 0;
                        break;
                    case "LILB": 
                        location = (location + 67) | 0;
                        break;
                    case "RILB": 
                        location = (location + 70) | 0;
                        break;
                    case "ROLB": 
                        location = (location + 73) | 0;
                        break;
                    case "LB5": 
                        location = (location + 76) | 0;
                        break;
                    case "RCB": 
                        location = (location + 79) | 0;
                        break;
                    case "LCB": 
                        location = (location + 82) | 0;
                        break;
                    case "DB1": 
                        location = (location + 85) | 0;
                        break;
                    case "DB2": 
                        location = (location + 88) | 0;
                        break;
                    case "FS": 
                        location = (location + 91) | 0;
                        break;
                    case "SS": 
                        location = (location + 94) | 0;
                        break;
                    case "DB3": 
                        location = (location + 97) | 0;
                        break;
                    case "K": 
                    case "P": 
                        location = (location + 100) | 0;
                        break;
                }
                return location;
            },
            /**
             * |012345|
              4 = passing
              5 = scramble
             *
             * @instance
             * @public
             * @this TSBTool2.TSB2Tool
             * @memberof TSBTool2.TSB2Tool
             * @param   {number}            season      
             * @param   {string}            team        
             * @param   {string}            position    
             * @param   {Array.<number>}    data        Array of bytes
             * @return  {void}
             */
            SetQBSimData: function (season, team, position, data) {
                var loc = this.GetSimLocation(season, team, position);
                for (var i = 0; i < data.length; i = (i + 1) | 0) {
                    this.SetByte(((loc + i) | 0), ((data[System.Array.index(i, data)]) & 255));
                }
            },
            SetSkillSimData: function (season, team, pos, data) {
                var loc = this.GetSimLocation(season, team, pos);
                for (var i = 0; i < data.length; i = (i + 1) | 0) {
                    this.SetByte(((loc + i) | 0), ((data[System.Array.index(i, data)]) & 255));
                }
            },
            SetDefensiveSimData: function (season, team, pos, data) {
                var loc = this.GetSimLocation(season, team, pos);
                for (var i = 0; i < data.length; i = (i + 1) | 0) {
                    this.SetByte(((loc + i) | 0), ((data[System.Array.index(i, data)]) & 255));
                }
            },
            SetKickingSimData: function (season, team, data) {
                var $t;
                var loc = this.GetSimLocation(season, team, "K");
                var current = (($t = this.OutputRom)[System.Array.index(loc, $t)] & 15) & 255;
                data = (data << 4) & 255;
                data = (data + current) & 255;
                this.SetByte(loc, data);
            },
            SetPuntingSimData: function (season, team, data) {
                var $t;
                var loc = this.GetSimLocation(season, team, "P");
                var current = (($t = this.OutputRom)[System.Array.index(loc, $t)] & 240) & 255;
                data = (data + current) & 255;
                this.SetByte(loc, data);
            },
            GetTeamSimData: function (season, team) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var location = (this.GetSimLocation(season, team, "K") + 1) | 0;
                var retVal = "SimData=0x" + (System.Byte.format(($t = this.OutputRom)[System.Array.index(location, $t)], "X2") || "");
                return retVal;
            },
            SetTeamSimData: function (season, team, data) {
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var theBytes = TSBTool.StaticUtils.GetHexBytes(data);
                var location = (this.GetSimLocation(season, team, "K") + 1) | 0;
                this.SetByte(location, theBytes[System.Array.index(0, theBytes)]);
            },
            GetTeamPlayers: function (season, team) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var builder = new System.Text.StringBuilder();

                $t = Bridge.getEnumerator(TSBTool2.TSB2Tool.positionNames);
                try {
                    while ($t.moveNext()) {
                        var position = $t.Current;
                        this.GetPlayer(season, team, builder, position);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                builder.append("KR,");
                builder.append(this.GetKickReturner(season, team));
                builder.append("\nPR,");
                builder.append(this.GetPuntReturner(season, team));
                builder.append("\n\n");

                var retVal = builder.toString();
                return retVal;
            },
            GetPlayer: function (season, team, builder, position) {
                var playerNumber = { v : 0 };
                var face = 0;
                builder.append(position);
                builder.append(",");
                builder.append(this.GetPlayerName(season, team, position, playerNumber));
                builder.append(",");
                face = this.GetFace(season, team, position);
                builder.append(System.String.format("Face=0x{0:x2},#{1:x},", Bridge.box(face, System.Byte), Bridge.box(playerNumber.v, System.Byte)));
                builder.append(this.GetPlayerAbilities(season, team, position));
                builder.append("\n");
            },
            GetTeamName: function (teamIndex) {
                var retVal = TSBTool.StaticUtils.GetStringTableString(this.OutputRom, teamIndex, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset);
                var lastSpace = retVal.lastIndexOf(String.fromCharCode(32));
                retVal = System.String.replaceAll(retVal.substr(((lastSpace + 1) | 0)), "*", "");
                return retVal;
            },
            GetTeamCity: function (teamIndex) {
                var retVal = TSBTool.StaticUtils.GetStringTableString(this.OutputRom, teamIndex, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset).substr(5);
                var lastSpace = retVal.lastIndexOf(String.fromCharCode(32));
                if (lastSpace > -1) {
                    retVal = retVal.substr(0, lastSpace);
                }
                return retVal;
            },
            GetTeamAbbreviation: function (teamIndex) {
                var retVal = TSBTool.StaticUtils.GetStringTableString(this.OutputRom, teamIndex, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset);
                retVal = retVal.substr(0, 4);
                return retVal;
            },
            SetTeamAbbreviation: function (teamIndex, abb) {
                if (abb != null && abb.length > 0) {
                    var teamString = System.String.format("{0}*{1} {2}*", abb, this.GetTeamCity(teamIndex), this.GetTeamName(teamIndex));
                    TSBTool.StaticUtils.SetStringTableString(this.OutputRom, teamIndex, teamString, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset, 30, TSBTool2.TSB2Tool.TEAM_NAME_STRING_TABLE_SIZE);
                }
            },
            SetTeamName: function (teamIndex, name) {
                if (name != null && name.length > 0) {
                    var teamString = System.String.format("{0}*{1} {2}*", this.GetTeamAbbreviation(teamIndex), this.GetTeamCity(teamIndex), name);
                    TSBTool.StaticUtils.SetStringTableString(this.OutputRom, teamIndex, teamString, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset, 30, TSBTool2.TSB2Tool.TEAM_NAME_STRING_TABLE_SIZE);
                }
            },
            SetTeamCity: function (teamIndex, city) {
                if (city != null && city.length > 0) {
                    var teamString = System.String.format("{0}*{1} {2}*", this.GetTeamAbbreviation(teamIndex), city, this.GetTeamName(teamIndex));
                    TSBTool.StaticUtils.SetStringTableString(this.OutputRom, teamIndex, teamString, TSBTool2.TSB2Tool.tsb2_team_name_string_table_first_ptr, TSBTool2.TSB2Tool.tsb2_team_name_string_table_offset, 30, TSBTool2.TSB2Tool.TEAM_NAME_STRING_TABLE_SIZE);
                }
            },
            GetPlaybookLocation: function (season, team) {
                var playbookLocation = -1;
                if (Bridge.referenceEquals(team.toUpperCase(), "AFC")) {
                    playbookLocation = (this.playbook_start[System.Array.index(0, this.playbook_start)] + 224) | 0;
                } else {
                    if (Bridge.referenceEquals(team.toUpperCase(), "NFC")) {
                        playbookLocation = (this.playbook_start[System.Array.index(0, this.playbook_start)] + 232) | 0;
                    } else {
                        TSBTool.StaticUtils.CheckTSB2Args(season, team);
                        playbookLocation = (this.playbook_start[System.Array.index(((season - 1) | 0), this.playbook_start)] + Bridge.Int.mul(TSBTool2.TSB2Tool.teams.indexOf(team), TSBTool2.TSB2Tool.playbook_team_size)) | 0;
                    }
                }
                return playbookLocation;
            },
            /**
             * runs = r12345678
             pass = p12345678
             *
             * @instance
             * @public
             * @this TSBTool2.TSB2Tool
             * @memberof TSBTool2.TSB2Tool
             * @param   {number}    season    
             * @param   {string}    team      
             * @param   {string}    runs      
             * @param   {string}    passes
             * @return  {void}
             */
            SetPlaybook: function (season, team, runs, passes) {
                var playbookLocation = this.GetPlaybookLocation(season, team);
                var runBytes = TSBTool.StaticUtils.GetHexBytes(runs.substr(1));
                var passBytes = TSBTool.StaticUtils.GetHexBytes(passes.substr(1));
                if (runBytes.length > 1 && passBytes.length > 1) {
                    this.SetByte(playbookLocation, runBytes[System.Array.index(0, runBytes)]);
                    this.SetByte(((playbookLocation + 1) | 0), runBytes[System.Array.index(1, runBytes)]);
                    this.SetByte(((playbookLocation + 2) | 0), passBytes[System.Array.index(0, passBytes)]);
                    this.SetByte(((playbookLocation + 3) | 0), passBytes[System.Array.index(1, passBytes)]);

                    if (runBytes.length > 3 && passBytes.length > 3) {
                        this.SetByte(((playbookLocation + 4) | 0), runBytes[System.Array.index(2, runBytes)]);
                        this.SetByte(((playbookLocation + 5) | 0), runBytes[System.Array.index(3, runBytes)]);
                        this.SetByte(((playbookLocation + 6) | 0), passBytes[System.Array.index(2, passBytes)]);
                        this.SetByte(((playbookLocation + 7) | 0), passBytes[System.Array.index(3, passBytes)]);
                    }
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR Settings playbook for season:{0} team:{1} data={2} {3}", Bridge.box(season, System.Int32), team, runs, passes));
                }
            },
            GetPlaybook: function (season, team) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                var playbookLocation = this.GetPlaybookLocation(season, team);
                var retVal = System.String.format("PLAYBOOK R{0:X2}{1:X2}{2:X2}{3:X2}, P{4:X2}{5:X2}{6:X2}{7:X2} ", Bridge.box(($t = this.OutputRom)[System.Array.index(playbookLocation, $t)], System.Byte), Bridge.box(($t1 = this.OutputRom)[System.Array.index(((playbookLocation + 1) | 0), $t1)], System.Byte), Bridge.box(($t2 = this.OutputRom)[System.Array.index(((playbookLocation + 4) | 0), $t2)], System.Byte), Bridge.box(($t3 = this.OutputRom)[System.Array.index(((playbookLocation + 5) | 0), $t3)], System.Byte), Bridge.box(($t4 = this.OutputRom)[System.Array.index(((playbookLocation + 2) | 0), $t4)], System.Byte), Bridge.box(($t5 = this.OutputRom)[System.Array.index(((playbookLocation + 3) | 0), $t5)], System.Byte), Bridge.box(($t6 = this.OutputRom)[System.Array.index(((playbookLocation + 6) | 0), $t6)], System.Byte), Bridge.box(($t7 = this.OutputRom)[System.Array.index(((playbookLocation + 7) | 0), $t7)], System.Byte));
                return retVal;
            },
            SetYear: function (year) { },
            GetKey: function () {
                return System.String.format("# TSBTool Forum: https://tecmobowl.org/forums/topic/11106-tsb-editor-tsbtool-supreme-season-generator/\r\n# TSBTool2 Forum: https://tecmobowl.org/forums/topic/71072-tsbii-tsbiii-editor-tsbtool2/\r\n# TSB2 Hacking documentation: https://tecmobowl.org/forums/topic/53028-tecmo-super-bowl-ii-hackingresource-documentation/\r\n# Editing: Tecmo Super Bowl II (snes) [{0}]\r\n# Key \r\n# 'SET' commands are supported\r\n# Double click on a team name (or playbook) to bring up the edit Team GUI.\r\n# Double click on a player to bring up the edit player GUI (Click 'Sim Data'\r\n#   button to find out more on Sim Data).\r\n# Attribute Order\r\n# QBs   RS RP MS HP BB PS PC PA AR CO [sim vals]\r\n# Skill RS RP MS HP BB BC RC [sim vals]\r\n# OL    RS RP MS HP BB\r\n# DEF   RS RP MS HP BB PI QU [sim vals]\r\n# K     RS RP MS HP BB KP KA AB [sim val]\r\n# P     RS RP MS HP BB KP AB [sim val]\r\n", [Bridge.box(this.RomVersion, TSBTool.ROM_TYPE, System.Enum.toStringFn(TSBTool.ROM_TYPE))]);
            },
            GetAll: function () {
                var builder = new System.Text.StringBuilder("", 10000);
                builder.append("SEASON 1\n");
                builder.append(this.GetTeams(1));
                if (TSBTool2.TSB2Tool.ShowSchedule) {
                    builder.append(this.GetSchedule(1));
                }

                builder.append("SEASON 2\n");
                builder.append(this.GetTeams(2));
                if (TSBTool2.TSB2Tool.ShowSchedule) {
                    builder.append(this.GetSchedule(2));
                }

                builder.append("SEASON 3\n");
                builder.append(this.GetTeams(3));
                if (TSBTool2.TSB2Tool.ShowSchedule) {
                    builder.append(this.GetSchedule(3));
                }
                return builder.toString();
            },
            GetAll$1: function (season) {
                var builder = new System.Text.StringBuilder("", 5000);
                builder.append("SEASON ");
                builder.append(season);
                builder.append("\n");
                builder.append(this.GetTeams(season));
                if (TSBTool2.TSB2Tool.ShowSchedule) {
                    builder.append(this.GetSchedule(season));
                }
                return builder.toString();
            },
            GetKickReturnLocation: function (season, team) {
                var location = this.bills_kr_loc_season_1;
                switch (season) {
                    case 2: 
                        location = TSBTool2.TSB2Tool.bills_kr_loc_season_2;
                        break;
                    case 3: 
                        location = TSBTool2.TSB2Tool.bills_kr_loc_season_3;
                        break;
                }
                location = (location + (Bridge.Int.mul(2, TSBTool2.TSB2Tool.teams.indexOf(team)))) | 0;
                return location;
            },
            SetKickReturner: function (season, team, position) {
                var location = this.GetKickReturnLocation(season, team);
                var pos_num = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                this.SetByte(location, (pos_num & 255));
            },
            SetPuntReturner: function (season, team, position) {
                var location = (1 + this.GetKickReturnLocation(season, team)) | 0;
                var pos_num = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                this.SetByte(location, (pos_num & 255));
            },
            GetPuntReturner: function (season, team) {
                var $t;
                var location = (1 + this.GetKickReturnLocation(season, team)) | 0;
                var pos_num = ($t = this.OutputRom)[System.Array.index(location, $t)];
                var pos = TSBTool2.TSB2Tool.positionNames.getItem(pos_num);
                return pos;
            },
            GetKickReturner: function (season, team) {
                var $t;
                var location = this.GetKickReturnLocation(season, team);
                var pos_num = ($t = this.OutputRom)[System.Array.index(location, $t)];
                var pos = TSBTool2.TSB2Tool.positionNames.getItem(pos_num);
                return pos;
            },
            ApplySchedule: function (season, scheduleList) {
                var helper = new TSBTool2.SNES_ScheduleHelper(this);
                switch (season) {
                    case 1: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_1, this.seventeenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                    case 2: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_2, this.eighteenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                    case 3: 
                        helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_3, this.seventeenWeeks, TSBTool2.TSB2Tool.teams);
                        break;
                }
                helper.ApplySchedule(scheduleList);
            },
            ApplySet: function (line) {
                TSBTool.StaticUtils.ApplySimpleSet(line, this);
            },
            ProcessText: function (text) {
                var parser = new TSBTool2.InputParser.$ctor1(this);
                parser.ProcessText(text);
            },
            SaveRom: function (fileName) {
                TSBTool.StaticUtils.SaveRom(fileName, this.OutputRom);
            }
        }
    });

    /**
     * Summary description for CXRomTSBTool.
       Still having problems with playbooks.
     Done:
     1. Names and numbers
     2. normal attributes.
     3. Faces
     4. player Sim attributes
     5. team sim attributes
     6. Team Playbooks.
     7. team offensive preference.
     8. team offensive formation
     *
     * @public
     * @class TSBTool.CXRomTSBTool
     * @augments TSBTool.TecmoTool
     */
    Bridge.define("TSBTool.CXRomTSBTool", {
        inherits: [TSBTool.TecmoTool],
        statics: {
            fields: {
                FORTY_NINERS_PLAYBOOK_START: 0
            },
            ctors: {
                init: function () {
                    this.FORTY_NINERS_PLAYBOOK_START = 119696;
                }
            }
        },
        fields: {
            DoSchedule: false,
            fortyNinersQB1SimAttrStart: 0,
            fortyNinersRESimLoc: 0,
            fortyNinersRunPassPreferenceLoc: 0,
            FORTY_NINERS_QB1_POINTER: 0,
            mGetDataPositionOffset: 0,
            FORTY_NINERS_KR_PR_LOC: 0,
            FORTY_NINERS_KR_PR_LOC_1: 0,
            m_ExpansionSegmentEnd: 0,
            m_RomVersionData: null,
            mRomType: 0,
            mAddedFormationRomError: false,
            mFortyNinersUniformLoc: 0,
            mFortyNinersActionSeqLoc: 0,
            m49ersDivChampLoc: 0,
            m49ersConfChampLoc: 0
        },
        props: {
            /**
             * Returns the rom version
             *
             * @instance
             * @public
             * @override
             * @readonly
             * @memberof TSBTool.CXRomTSBTool
             * @function RomVersion
             * @type TSBTool.ROM_TYPE
             */
            RomVersion: {
                get: function () {
                    return this.mRomType;
                }
            },
            NumberOfStringsInTeamStringTable: {
                get: function () {
                    return 123;
                }
            }
        },
        alias: [
            "RomVersion", "TSBTool$ITecmoContent$RomVersion",
            "RomVersion", "TSBTool$ITecmoTool$RomVersion",
            "SetTeamOffensiveFormation", "TSBTool$ITecmoTool$SetTeamOffensiveFormation",
            "SaveRom", "TSBTool$ITecmoContent$SaveRom",
            "SaveRom", "TSBTool$ITecmoTool$SaveRom",
            "SetPuntReturner", "TSBTool$ITecmoTool$SetPuntReturner",
            "SetKickReturner", "TSBTool$ITecmoTool$SetKickReturner",
            "GetAll", "TSBTool$ITecmoTool$GetAll",
            "GetTeamName", "TSBTool$ITecmoTool$GetTeamName",
            "GetTeamCity", "TSBTool$ITecmoTool$GetTeamCity",
            "GetTeamAbbreviation", "TSBTool$ITecmoTool$GetTeamAbbreviation",
            "SetTeamAbbreviation", "TSBTool$ITecmoTool$SetTeamAbbreviation",
            "SetTeamName", "TSBTool$ITecmoTool$SetTeamName",
            "SetTeamCity", "TSBTool$ITecmoTool$SetTeamCity",
            "NumberOfStringsInTeamStringTable", "TSBTool$ITecmoTool$NumberOfStringsInTeamStringTable",
            "SetTeamSimOffensePref", "TSBTool$ITecmoTool$SetTeamSimOffensePref",
            "SetTeamSimData", "TSBTool$ITecmoTool$SetTeamSimData",
            "SetFace", "TSBTool$ITecmoTool$SetFace",
            "ApplySchedule", "TSBTool$ITecmoTool$ApplySchedule",
            "GetSchedule", "TSBTool$ITecmoTool$GetSchedule"
        ],
        ctors: {
            init: function () {
                this.DoSchedule = true;
                this.fortyNinersQB1SimAttrStart = 104897;
                this.fortyNinersRESimLoc = 104921;
                this.fortyNinersRunPassPreferenceLoc = 163803;
                this.FORTY_NINERS_QB1_POINTER = 16048;
                this.mGetDataPositionOffset = 196624;
                this.FORTY_NINERS_KR_PR_LOC = 208050;
                this.FORTY_NINERS_KR_PR_LOC_1 = 260412;
                this.m_ExpansionSegmentEnd = 262128;
                this.mRomType = TSBTool.ROM_TYPE.CXROM_v105;
                this.mAddedFormationRomError = false;
                this.mFortyNinersUniformLoc = 184194;
                this.mFortyNinersActionSeqLoc = 215287;
                this.m49ersDivChampLoc = 215375;
                this.m49ersConfChampLoc = 215503;
            },
            ctor: function (rom, type) {
                this.$initialize();
                TSBTool.TecmoTool.ctor.call(this);
                this.mRomType = type;
                this.Init(rom);
            }
        },
        methods: {
            SetupForCxROM: function () {
                if (this.mRomType === TSBTool.ROM_TYPE.CXROM_v111) {
                    /* Version 1.11*/
                    this.FORTY_NINERS_QB1_POINTER = 254036;
                    this.mGetDataPositionOffset = 221200;
                    this.fortyNinersRunPassPreferenceLoc = 163798;
                    this.FORTY_NINERS_KR_PR_LOC = 208071;
                    this.FORTY_NINERS_KR_PR_LOC_1 = 523601;
                }
                this.mTeamFormationsStartingLoc = 260416;
                this.namePointersStart = 84;
                this.lastPlayerNamePointer = 1764;

                this.faceTeamOffsets = System.Array.init([12306, 12423, 12540, 12657, 12774, 12891, 13008, 13125, 13242, 13359, 13476, 13593, 13710, 13827, 14412, 14061, 14178, 14295, 13944, 14529, 14646, 14763, 14880, 14997, 15114, 15231, 15348, 15465, 14412, 14061, 14178, 14295, 13944, 14529], System.Int32);
            },
            /**
             * Sets the team's offensive formation.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team         
             * @param   {string}    formation
             * @return  {void}
             */
            SetTeamOffensiveFormation: function (team, formation) {
                if (this.RomVersion === TSBTool.ROM_TYPE.CXROM_v111) {
                    if (!this.mAddedFormationRomError) {
                        this.mAddedFormationRomError = true;
                        TSBTool.StaticUtils.AddError("Setting offensive formation on CXROM_v1.11 ROM is not yet supported.");
                    }
                    return;
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex > -1 && teamIndex < 34) {
                    var location = (this.mTeamFormationsStartingLoc + teamIndex) | 0;

                    switch (formation) {
                        case TSBTool.TecmoTool.m2RB_2WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 0;
                            break;
                        case TSBTool.TecmoTool.m1RB_3WR_1TE: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 2;
                            break;
                        case TSBTool.TecmoTool.m1RB_4WR: 
                            this.outputRom[System.Array.index(location, this.outputRom)] = 1;
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("ERROR! Formation {0} for team '{1}' is invalid.", formation, team));
                            TSBTool.StaticUtils.AddError(System.String.format("  Valid formations are:\n  {0}\n  {1}\n  {2}", TSBTool.TecmoTool.m2RB_2WR_1TE, TSBTool.TecmoTool.m1RB_3WR_1TE, TSBTool.TecmoTool.m1RB_4WR));
                            break;
                    }
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! Team '{0}' is invalid, Offensive Formation not set", [team]));
                }
            },
            IsValidRomSize: function (len) {
                var ret = false;
                if (len.equals(System.Int64(TSBTool.TecmoToolFactory.CXROM_V105_LEN)) || len.equals(System.Int64(TSBTool.TecmoToolFactory.CXROM_V111_LEN))) {
                    ret = true;
                }
                return ret;
            },
            InitRom: function (rom) {
                var ret = false;
                ret = TSBTool.TecmoTool.prototype.InitRom.call(this, rom);
                if (ret) {
                    this.SetupForCxROM();
                    this.m_RomVersionData = System.Array.init(14, 0, System.Byte);
                    for (var i = 0; i < this.m_RomVersionData.length; i = (i + 1) | 0) {
                        this.m_RomVersionData[System.Array.index(i, this.m_RomVersionData)] = this.outputRom[System.Array.index(((i + this.m_ExpansionSegmentEnd) | 0), this.outputRom)];
                    }
                }
                return ret;
            },
            CheckROMVersion: function () {
                var ret = true;
                if (this.outputRom.length > ((this.m_ExpansionSegmentEnd + 20) | 0)) {
                    for (var i = 0; i < this.m_RomVersionData.length; i = (i + 1) | 0) {
                        if (this.outputRom[System.Array.index(((i + this.m_ExpansionSegmentEnd) | 0), this.outputRom)] !== this.m_RomVersionData[System.Array.index(i, this.m_RomVersionData)]) {

                            ret = false;
                            break;
                        }
                    }
                }
                return ret;
            },
            /**
             * Check to see if we overwrote any ROM data after the end of the expansion
             name segment. If we are in GUI mode, prompt the user to confirm that they want to save the
             data.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    filename
             * @return  {void}
             */
            SaveRom: function (filename) {
                if (this.CheckROMVersion()) {
                    TSBTool.TecmoTool.prototype.SaveRom.call(this, filename);
                } else {
                    TSBTool.StaticUtils.ShowError("WARNING!! Expansion team name section has been overwritten, ROM could be messed up.");
                    if (TSBTool.MainClass.GUI_MODE) {
                        if (System.Windows.Forms.MessageBox.Show(null, "ROM could be messed up, do you want to save anyway?", "ERROR!", System.Windows.Forms.MessageBoxButtons.YesNo, System.Windows.Forms.MessageBoxIcon.Question) === System.Windows.Forms.DialogResult.Yes) {
                            TSBTool.TecmoTool.prototype.SaveRom.call(this, filename);
                        }
                    } else {
                        TSBTool.TecmoTool.prototype.SaveRom.call(this, filename);
                    }
                }
            },
            /**
             * Gets the position who returns punts.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team
             * @return  {string}
             */
            GetPuntReturner: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetPuntReturner.call(this, team);
                } else {
                    var ret = "";
                    var location = (((this.FORTY_NINERS_KR_PR_LOC + teamIndex) | 0) - 30) | 0;
                    var b = this.outputRom[System.Array.index(location, this.outputRom)];
                    b = b & 15;
                    ret = TSBTool.TecmoTool.positionNames.getItem(b);
                    return ret;
                }
            },
            /**
             * Gets the position who returns kicks.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team
             * @return  {string}
             */
            GetKickReturner: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetKickReturner.call(this, team);
                } else {
                    var ret = "";
                    var location = (((this.FORTY_NINERS_KR_PR_LOC + teamIndex) | 0) - 30) | 0;
                    var b = this.outputRom[System.Array.index(location, this.outputRom)];
                    b = b & 240;
                    b = b >> 4;
                    ret = TSBTool.TecmoTool.positionNames.getItem(b);
                    return ret;
                }
            },
            SetPuntReturner: function (team, position) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    TSBTool.TecmoTool.prototype.SetPuntReturner.call(this, team, position);
                    return;
                } else {
                    var location = (((this.FORTY_NINERS_KR_PR_LOC + TSBTool.TecmoTool.GetTeamIndex(team)) | 0) - 30) | 0;
                    var location1 = (((this.FORTY_NINERS_KR_PR_LOC_1 + TSBTool.TecmoTool.GetTeamIndex(team)) | 0) - 30) | 0;
                    switch (position) {
                        case "QB1": 
                        case "QB2": 
                        case "C": 
                        case "LG": 
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                        case "TE1": 
                        case "TE2": 
                            var pos = TSBTool.TecmoTool.positionNames.indexOf(position);
                            var b = this.outputRom[System.Array.index(location, this.outputRom)];
                            b = b & 240;
                            b = (b + pos) | 0;
                            this.outputRom[System.Array.index(location, this.outputRom)] = b & 255;
                            this.outputRom[System.Array.index(location1, this.outputRom)] = b & 255;
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("Cannot assign '{0}' as a punt returner", [position]));
                            break;
                    }
                }
            },
            SetKickReturner: function (team, position) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    TSBTool.TecmoTool.prototype.SetKickReturner.call(this, team, position);
                    return;
                } else {
                    var location = (((this.FORTY_NINERS_KR_PR_LOC + TSBTool.TecmoTool.GetTeamIndex(team)) | 0) - 30) | 0;
                    var location2 = (((this.FORTY_NINERS_KR_PR_LOC_1 + TSBTool.TecmoTool.GetTeamIndex(team)) | 0) - 30) | 0;
                    switch (position) {
                        case "QB1": 
                        case "QB2": 
                        case "C": 
                        case "LG": 
                        case "RB1": 
                        case "RB2": 
                        case "RB3": 
                        case "RB4": 
                        case "WR1": 
                        case "WR2": 
                        case "WR3": 
                        case "WR4": 
                        case "TE1": 
                        case "TE2": 
                            var pos = TSBTool.TecmoTool.positionNames.indexOf(position);
                            var b = this.outputRom[System.Array.index(location, this.outputRom)];
                            b = b & 15;
                            b = (b + (pos << 4)) | 0;
                            this.outputRom[System.Array.index(location, this.outputRom)] = b & 255;
                            this.outputRom[System.Array.index(location2, this.outputRom)] = b & 255;
                            break;
                        default: 
                            TSBTool.StaticUtils.AddError(System.String.format("Cannot assign '{0}' as a kick returner", [position]));
                            break;
                    }
                }
            },
            GetAll: function () {
                var team;
                var all = new System.Text.StringBuilder("", Bridge.Int.mul(1230, TSBTool.TecmoTool.positionNames.Count));
                var year = System.String.format("YEAR={0}\n", [this.GetYear()]);
                all.append(year);
                var normalTeamEnd = 28;
                for (var i = 0; i < normalTeamEnd; i = (i + 1) | 0) {
                    team = TSBTool.TecmoTool.teams.getItem(i);
                    all.append(this.GetTeamPlayers(team));
                }
                var expansionTeams = this.GetExpansionTeams();
                all.append(expansionTeams);

                return all.toString();
            },
            GetTeamName: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(((teamIndex + 68) | 0));
                return retVal;
            },
            GetTeamCity: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(((teamIndex + 34) | 0));
                return retVal;
            },
            GetTeamAbbreviation: function (teamIndex) {
                var retVal = this.GetTeamStringTableString(teamIndex);
                return retVal;
            },
            SetTeamAbbreviation: function (teamIndex, abb) {
                if (abb != null && abb.length === 4) {
                    this.SetTeamStringTableString(teamIndex, abb);
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Error setting team abbreviation, teamIndex={0}; value length must == 4; {1}", Bridge.box(teamIndex, System.Int32), abb));
                }
            },
            SetTeamName: function (teamIndex, name) {
                this.SetTeamStringTableString(((teamIndex + 68) | 0), name);
            },
            SetTeamCity: function (teamIndex, city) {
                this.SetTeamStringTableString(((teamIndex + 34) | 0), city);
            },
            /**
             * Offensive formation is messed up in CXROM
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team
             * @return  {string}
             */
            GetTeamOffensiveFormation: function (team) {
                var retVal = "";
                if (this.mRomType !== TSBTool.ROM_TYPE.CXROM_v111) {
                    retVal = TSBTool.TecmoTool.prototype.GetTeamOffensiveFormation.call(this, team);
                }
                return retVal;
            },
            GetExpansionTeams: function () {
                var ret = new System.Text.StringBuilder("", 2000);

                ret.append(this.GetTeamPlayers(TSBTool.TecmoTool.teams.getItem(30)));
                ret.append(this.GetTeamPlayers(TSBTool.TecmoTool.teams.getItem(31)));
                ret.append(this.GetTeamPlayers(TSBTool.TecmoTool.teams.getItem(32)));
                ret.append(this.GetTeamPlayers(TSBTool.TecmoTool.teams.getItem(33)));

                var result = ret.toString();
                return result;
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}     team    the team name
             * @param   {number}     val     the number to set it to.
             * @return  {boolean}            true if set, fales if could not set it.
             */
            SetTeamSimOffensePref: function (team, val) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.SetTeamSimOffensePref.call(this, team, val);
                }

                if (val > -1 && val < 4 && teamIndex !== -1) {
                    var loc = (((this.fortyNinersRunPassPreferenceLoc + teamIndex) | 0) - 30) | 0;
                    this.outputRom[System.Array.index(loc, this.outputRom)] = val & 255;
                } else {
                    if (teamIndex !== -1) {
                        TSBTool.StaticUtils.AddError(System.String.format("Can't set offensive pref to '{0}' valid values are 0-3.\n", [Bridge.box(val, System.Int32)]));
                    } else {
                        TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                    }
                }
                return true;
            },
            /**
             * Sets the team sim offense tendency . 
             00 = Little more rushing, 01 = Heavy Rushing, 
             02 = little more passing, 03 = Heavy Passing.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team    Teh team name.
             * @return  {number}            their sim offense pref (0 - 3)
             */
            GetTeamSimOffensePref: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetTeamSimOffensePref.call(this, team);
                }

                var val = -1;
                if (teamIndex > -1) {
                    var loc = (((this.fortyNinersRunPassPreferenceLoc + teamIndex) | 0) - 30) | 0;
                    val = this.outputRom[System.Array.index(loc, this.outputRom)];
                } else {
                    TSBTool.StaticUtils.AddError(System.String.format("Team '{0}' is invalid\n", [team]));
                }
                return val;
            },
            GetOffensivePlayerSimDataLocation: function (team, position) {
                var location = -4;

                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    location = TSBTool.TecmoTool.prototype.GetOffensivePlayerSimDataLocation.call(this, team, position);
                } else if (teamIndex > 29) {

                    var positionIndex = this.GetPositionIndex(position);
                    location = (((Bridge.Int.mul((((teamIndex - 30) | 0)), this.teamSimOffset) + (Bridge.Int.mul(positionIndex, 2))) | 0) + this.fortyNinersQB1SimAttrStart) | 0;
                }
                return location;
            },
            GetDefinsivePlayerSimDataLocation: function (team, position) {
                var location = -4;

                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    location = TSBTool.TecmoTool.prototype.GetDefinsivePlayerSimDataLocation.call(this, team, position);
                } else if (teamIndex > 29) {
                    var positionIndex = this.GetPositionIndex(position);
                    location = (((Bridge.Int.mul((((teamIndex - 30) | 0)), this.teamSimOffset) + (((positionIndex - 17) | 0))) | 0) + this.fortyNinersRESimLoc) | 0;
                }
                return location;
            },
            GetPunkKickSimDataLocation: function (teamIndex) {
                var ret = -1;

                if (teamIndex < 28) {
                    ret = TSBTool.TecmoTool.prototype.GetPunkKickSimDataLocation.call(this, teamIndex);
                } else {
                    ret = (((Bridge.Int.mul((((teamIndex - 30) | 0)), this.teamSimOffset) + this.fortyNinersQB1SimAttrStart) | 0) + 46) | 0;
                }

                return ret;
            },
            /**
             * Returns the simulation data for the given team.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team    The team of interest
             * @return  {number}
             */
            GetTeamSimData: function (team) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetTeamSimData.call(this, team);
                }

                if (teamIndex > 29 && teamIndex < 34) {
                    var location = (((Bridge.Int.mul((((teamIndex - 30) | 0)), this.teamSimOffset) + this.fortyNinersQB1SimAttrStart) | 0) + 47) | 0;
                    return this.outputRom[System.Array.index(location, this.outputRom)];
                }
                return 0;
            },
            /**
             * Sets the given team's offense and defense sim values.
             Simulation data is of the form '0xNN' where N is a number 1-F (hex).
             A team's sim data of '0x57' signifies that the team has a simulation figure of
             '5' for offense, and '7' for defense.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team      The team to set.
             * @param   {number}    values    The value to set it to.
             * @return  {void}
             */
            SetTeamSimData: function (team, values) {
                if (!this.IsValidTeam(team)) {
                    TSBTool.StaticUtils.AddError(System.String.format("ERROR! (low level) SetTeamSimData:: team {0} is invalid ", [team]));
                    return;
                }

                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    TSBTool.TecmoTool.prototype.SetTeamSimData.call(this, team, values);
                } else {
                    var location = (((Bridge.Int.mul((((teamIndex - 30) | 0)), this.teamSimOffset) + this.fortyNinersQB1SimAttrStart) | 0) + 47) | 0;
                    var currentValue = this.outputRom[System.Array.index(location, this.outputRom)];
                    this.outputRom[System.Array.index(location, this.outputRom)] = values;
                    currentValue = this.outputRom[System.Array.index(location, this.outputRom)];
                }
            },
            /**
             * Gets the point in the player number name data that a player's data begins.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetDataPosition: function (team, position) {
                var ret = -1;
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetDataPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetDataPosition.call(this, team, position);
                }
                if (teamIndex > 29) {
                    var positionIndex = this.GetPositionIndex(position);
                    var pointerLocation = 0;

                    pointerLocation = (((Bridge.Int.mul((((teamIndex - 30) | 0)), 60) + this.FORTY_NINERS_QB1_POINTER) | 0) + (Bridge.Int.mul(positionIndex, 2))) | 0;

                    var lowByte = this.outputRom[System.Array.index(pointerLocation, this.outputRom)];
                    var hiByte = this.outputRom[System.Array.index(((pointerLocation + 1) | 0), this.outputRom)];
                    hiByte = hiByte << 8;
                    hiByte = (hiByte + lowByte) | 0;

                    ret = (hiByte + this.mGetDataPositionOffset) | 0;
                }
                return ret;
            },
            /**
             * Get the starting point of the guy AFTER the one passed to this method.
             This is hacked up to work with CXROM's rom.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetNextDataPosition: function (team, position) {
                var pointerLocation = 0;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);

                if (teamIndex > 29 && Bridge.referenceEquals(position, "P")) {
                    pointerLocation = (((this.FORTY_NINERS_QB1_POINTER + 60) | 0) + Bridge.Int.mul((((teamIndex - 30) | 0)), 60)) | 0;
                } else if (teamIndex > 29) {
                    var positionIndex = (this.GetPositionIndex(position) + 1) | 0;
                    pointerLocation = (((Bridge.Int.mul((((teamIndex - 30) | 0)), 60) + this.FORTY_NINERS_QB1_POINTER) | 0) + (Bridge.Int.mul(positionIndex, 2))) | 0;
                }

                if (pointerLocation !== 0) {
                    var lowByte = this.outputRom[System.Array.index(pointerLocation, this.outputRom)];
                    var hiByte = this.outputRom[System.Array.index(((pointerLocation + 1) | 0), this.outputRom)];
                    hiByte = hiByte << 8;
                    hiByte = (hiByte + lowByte) | 0;

                    var ret = (hiByte + this.mGetDataPositionOffset) | 0;
                    return ret;
                }

                return TSBTool.TecmoTool.prototype.GetNextDataPosition.call(this, team, position);
            },
            GetPointerPosition: function (team, position) {
                var ret = -4;
                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) GetPointerPosition:: either team {0} or position {1} is invalid.", team, position));
                }
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetPointerPosition.call(this, team, position);
                }
                if (teamIndex > 29) {
                    var positionIndex = this.GetPositionIndex(position);
                    var playerSpot = (Bridge.Int.mul((((teamIndex - 30) | 0)), TSBTool.TecmoTool.positionNames.Count) + positionIndex) | 0;
                    if (positionIndex < 0) {
                        var builder = new System.Text.StringBuilder("", 500);
                        builder.append("ERROR! (low level) Position '{0}' does not exist. Valid positions are: [");
                        for (var i = 1; i <= TSBTool.TecmoTool.positionNames.Count; i = (i + 1) | 0) {
                            builder.append(TSBTool.TecmoTool.positionNames.getItem(((i - 1) | 0)));
                            builder.append(",");
                        }
                        builder.remove(((builder.getLength() - 1) | 0), 1);
                        builder.append("]");
                        TSBTool.StaticUtils.AddError(builder.toString());
                        return -1;
                    }
                    ret = (this.FORTY_NINERS_QB1_POINTER + (Bridge.Int.mul(2, playerSpot))) | 0;
                }
                return ret;
            },
            ShiftDataAfter: function (team, position, shiftAmount) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex === 27 && Bridge.referenceEquals(position, "P")) {
                    return;
                }

                if (teamIndex < 28) {
                    TSBTool.TecmoTool.prototype.ShiftDataAfter.call(this, team, position, shiftAmount);
                    return;
                }

                if (!this.IsValidTeam(team) || !this.IsValidPosition(position)) {
                    throw new System.Exception(System.String.format("ERROR! (low level) ShiftDataAfter:: either team {0} or position {1} is invalid.", team, position));
                }

                if (Bridge.referenceEquals(team, TSBTool.TecmoTool.teams.getItem(((TSBTool.TecmoTool.teams.Count - 1) | 0))) && Bridge.referenceEquals(position, "P")) {
                    return;
                }

                var startPosition = this.GetNextDataPosition(team, position);
                var endPosition = (this.m_ExpansionSegmentEnd - 17) | 0;

                if (shiftAmount < 0) {
                    this.ShiftDataUp(startPosition, endPosition, shiftAmount, this.outputRom);
                } else {
                    if (shiftAmount > 0) {
                        this.ShiftDataDown(startPosition, endPosition, shiftAmount, this.outputRom);
                    }
                }
            },
            AdjustDataPointers: function (pos, change, lastPointer) {
                if (pos >= this.GetTeamStringTableStart()) {
                    TSBTool.TecmoTool.prototype.AdjustDataPointers.call(this, pos, change, lastPointer);
                    return;
                }
                if (pos === ((this.lastPlayerNamePointer - 2) | 0)) {
                    var pointerLoc = (pos + 2) | 0;
                    var lo = this.outputRom[System.Array.index(pointerLoc, this.outputRom)];
                    var hi = this.outputRom[System.Array.index(((pointerLoc + 1) | 0), this.outputRom)];
                    var pVal = hi;
                    pVal = pVal << 8;
                    pVal = (pVal + lo) | 0;
                    pVal = (pVal + change) | 0;

                    lo = (pVal & 255) & 255;
                    pVal = pVal >> 8;
                    hi = pVal & 255;
                    this.outputRom[System.Array.index(pointerLoc, this.outputRom)] = lo;
                    this.outputRom[System.Array.index(((pointerLoc + 1) | 0), this.outputRom)] = hi;
                } else if (pos < ((this.lastPlayerNamePointer + 1) | 0)) {
                    TSBTool.TecmoTool.prototype.AdjustDataPointers.call(this, pos, change, this.lastPlayerNamePointer);
                } else {
                    var low, hi1;
                    var word;

                    var start = (pos + 2) | 0;
                    var i = 0;
                    var end = (((((this.FORTY_NINERS_QB1_POINTER + 60) | 0) + 180) | 0) + 2) | 0;

                    for (i = start; i < end; i = (i + 2) | 0) {
                        low = this.outputRom[System.Array.index(i, this.outputRom)];
                        hi1 = this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)];
                        word = hi1;
                        word = word << 8;
                        word = (word + low) | 0;
                        word = (word + change) | 0;
                        low = (word & 255) & 255;
                        word = word >> 8;
                        hi1 = word & 255;
                        this.outputRom[System.Array.index(i, this.outputRom)] = low;
                        this.outputRom[System.Array.index(((i + 1) | 0), this.outputRom)] = hi1;
                    }
                }
            },
            /**
             * Get the face number from the given team/position
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team        
             * @param   {string}    position
             * @return  {number}
             */
            GetFace: function (team, position) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    return TSBTool.TecmoTool.prototype.GetFace.call(this, team, position);
                }
                var positionOffset = this.GetPositionIndex(position);

                if (positionOffset < 0 || teamIndex < 0) {
                    TSBTool.StaticUtils.AddError(System.String.format("GetFace Error getting face for {0} {1}", team, position));
                    return -1;
                }
                teamIndex = (teamIndex - 2) | 0;
                var loc = (((12306 + this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)]) | 0) + Bridge.Int.mul(teamIndex, 117)) | 0;
                var ret = this.outputRom[System.Array.index(loc, this.outputRom)];
                return ret;
            },
            /**
             * Sets the face for the guy at position 'position' on team 'team'.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team        
             * @param   {string}    position    
             * @param   {number}    face
             * @return  {void}
             */
            SetFace: function (team, position, face) {
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    TSBTool.TecmoTool.prototype.SetFace.call(this, team, position, face);
                    return;
                }
                var positionOffset = this.GetPositionIndex(position);

                if (positionOffset < 0 || teamIndex < 0 || !!(face < 0 | face > 212)) {
                    TSBTool.StaticUtils.AddError(System.String.format("SetFace Error setting face for {0} {1} face={2}", team, position, Bridge.box(face, System.Int32)));
                    if (!!(face < 0 | face > 212)) {
                        TSBTool.StaticUtils.AddError(System.String.format("Valid Face numbers are 0x00 - 0xD4", null));
                    }
                    return;
                }
                teamIndex = (teamIndex - 2) | 0;
                var loc = (((12306 + this.faceOffsets[System.Array.index(positionOffset, this.faceOffsets)]) | 0) + Bridge.Int.mul(teamIndex, 117)) | 0;
                this.outputRom[System.Array.index(loc, this.outputRom)] = face & 255;
            },
            GetAttributeLocation: function (teamIndex, posIndex) {
                var location = -1;
                if (teamIndex < 28) {
                    location = TSBTool.TecmoTool.prototype.GetAttributeLocation.call(this, teamIndex, posIndex);
                } else {
                    location = TSBTool.TecmoTool.prototype.GetAttributeLocation.call(this, ((teamIndex - 2) | 0), posIndex);
                }
                return location;
            },
            /**
             * Returns an ArrayList of errors that were encountered during the operation.
             *
             * @instance
             * @public
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {System.Collections.Generic.List$1}    scheduleList
             * @return  {void}
             */
            ApplySchedule: function (scheduleList) {
                if (scheduleList != null && this.outputRom != null) {
                    var sch = new TSBTool.CXRomScheduleHelper(this.outputRom);
                    sch.ApplySchedule(scheduleList);
                }
            },
            GetPlaybookLocation: function (team_index) {
                if (team_index < 28) {
                    return TSBTool.TecmoTool.prototype.GetPlaybookLocation.call(this, team_index);
                } else {
                    team_index = (team_index - 30) | 0;
                    return ((TSBTool.CXRomTSBTool.FORTY_NINERS_PLAYBOOK_START + Bridge.Int.mul(team_index, 4)) | 0);
                }
            },
            GetSchedule: function () {
                var ret = "";
                if (this.outputRom != null && this.DoSchedule) {
                    var sh2 = new TSBTool.CXRomScheduleHelper(this.outputRom);
                    ret = sh2.GetSchedule();
                    TSBTool.StaticUtils.ShowErrors();
                }

                return ret;
            },
            GetUniformLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    ret = TSBTool.TecmoTool.prototype.GetUniformLoc.call(this, team);
                } else {
                    teamIndex = (teamIndex - 30) | 0;
                    ret = (this.mFortyNinersUniformLoc + (Bridge.Int.mul(teamIndex, 10))) | 0;
                }
                return ret;
            },
            /**
             * Gets the location of the given team's uniform data.
             *
             * @instance
             * @protected
             * @override
             * @this TSBTool.CXRomTSBTool
             * @memberof TSBTool.CXRomTSBTool
             * @param   {string}    team
             * @return  {number}            The location of the given team's uniform data, -1 on error
             */
            GetActionSeqUniformLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    ret = TSBTool.TecmoTool.prototype.GetActionSeqUniformLoc.call(this, team);
                } else {
                    teamIndex = (teamIndex - 30) | 0;
                    ret = (this.mFortyNinersActionSeqLoc + (Bridge.Int.mul(teamIndex, 8))) | 0;
                }
                return ret;
            },
            GetDivChampLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);
                if (teamIndex < 28) {
                    ret = TSBTool.TecmoTool.prototype.GetDivChampLoc.call(this, team);
                } else {
                    teamIndex = (teamIndex - 30) | 0;
                    ret = (this.m49ersDivChampLoc + (Bridge.Int.mul(teamIndex, 5))) | 0;
                }

                return ret;
            },
            GetConfChampLoc: function (team) {
                var ret = -1;
                var teamIndex = TSBTool.TecmoTool.GetTeamIndex(team);

                if (teamIndex < 28) {
                    ret = TSBTool.TecmoTool.prototype.GetConfChampLoc.call(this, team);
                } else {
                    teamIndex = (teamIndex - 30) | 0;
                    ret = (this.m49ersConfChampLoc + (Bridge.Int.mul(teamIndex, 4))) | 0;
                }
                return ret;
            }
        }
    });

    Bridge.define("TSBTool2.TSB3Tool", {
        inherits: [TSBTool2.TSB2Tool],
        statics: {
            fields: {
                scheduleTeamOrder: null
            },
            ctors: {
                init: function () {
                    this.scheduleTeamOrder = function (_o1) {
                            _o1.add("dolphins");
                            _o1.add("patriots");
                            _o1.add("colts");
                            _o1.add("bills");
                            _o1.add("jets");
                            _o1.add("steelers");
                            _o1.add("browns");
                            _o1.add("bengals");
                            _o1.add("oilers");
                            _o1.add("jaguars");
                            _o1.add("chargers");
                            _o1.add("chiefs");
                            _o1.add("raiders");
                            _o1.add("broncos");
                            _o1.add("seahawks");
                            _o1.add("cowboys");
                            _o1.add("giants");
                            _o1.add("cardinals");
                            _o1.add("eagles");
                            _o1.add("redskins");
                            _o1.add("vikings");
                            _o1.add("packers");
                            _o1.add("lions");
                            _o1.add("bears");
                            _o1.add("buccaneers");
                            _o1.add("49ers");
                            _o1.add("saints");
                            _o1.add("falcons");
                            _o1.add("rams");
                            _o1.add("panthers");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            },
            methods: {
                IsTecmoSuperBowl3Rom: function (rom) {
                    var retVal = false;
                    if (rom != null && rom.length > 0) {
                        var results = TSBTool.StaticUtils.FindStringInFile("TECMO SUPERBOWL 3", rom, 1828208, 1833152);
                        if (results.Count > 0) {
                            retVal = true;
                        }
                    }
                    return retVal;
                }
            }
        },
        fields: {
            seventeenWeeks$1: null
        },
        props: {
            RomVersion: {
                get: function () {
                    return TSBTool.ROM_TYPE.SNES_TSB3;
                }
            }
        },
        alias: [
            "GetKey", "TSBTool$ITecmoContent$GetKey",
            "GetKey", "TSBTool2$ITecmoTool$GetKey",
            "SetFace", "TSBTool2$ITecmoTool$SetFace",
            "SetQBAbilities", "TSBTool2$ITecmoTool$SetQBAbilities",
            "SetOLPlayerAbilities", "TSBTool2$ITecmoTool$SetOLPlayerAbilities",
            "SetKickerAbilities", "TSBTool2$ITecmoTool$SetKickerAbilities",
            "SetPunterAbilities", "TSBTool2$ITecmoTool$SetPunterAbilities",
            "SetSkillPlayerAbilities", "TSBTool2$ITecmoTool$SetSkillPlayerAbilities",
            "SetDefensivePlayerAbilities", "TSBTool2$ITecmoTool$SetDefensivePlayerAbilities",
            "GetSchedule", "TSBTool$ITecmoContent$GetSchedule",
            "GetSchedule", "TSBTool2$ITecmoTool$GetSchedule",
            "ApplySchedule", "TSBTool2$ITecmoTool$ApplySchedule",
            "GetAll", "TSBTool2$ITecmoTool$GetAll",
            "GetAll$1", "TSBTool$ITecmoContent$GetAll",
            "GetAll$1", "TSBTool2$ITecmoTool$GetAll$1",
            "RomVersion", "TSBTool$ITecmoContent$RomVersion"
        ],
        ctors: {
            init: function () {
                this.seventeenWeeks$1 = System.Array.init([15, 15, 15, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15], System.Int32);
            },
            $ctor1: function (rom) {
                this.$initialize();
                TSBTool2.TSB2Tool.ctor.call(this);
                this.OutputRom = rom;
                this.Init$1();
            },
            ctor: function () {
                this.$initialize();
                TSBTool2.TSB2Tool.ctor.call(this);
                this.Init$1();
            }
        },
        methods: {
            /**
             * Overrides for setting up locations
             *
             * @instance
             * @private
             * @this TSBTool2.TSB3Tool
             * @memberof TSBTool2.TSB3Tool
             * @return  {void}
             */
            Init$1: function () {
                this.BYTES_PER_QB = 7;
                this.tsb2_name_string_table_1_first_ptr = 1998912;
                this.bills_kr_loc_season_1 = 938154;

                TSBTool2.TSB2Tool.teams = function (_o1) {
                        _o1.add("bills");
                        _o1.add("colts");
                        _o1.add("dolphins");
                        _o1.add("patriots");
                        _o1.add("jets");
                        _o1.add("bengals");
                        _o1.add("browns");
                        _o1.add("oilers");
                        _o1.add("jaguars");
                        _o1.add("steelers");
                        _o1.add("broncos");
                        _o1.add("chiefs");
                        _o1.add("raiders");
                        _o1.add("chargers");
                        _o1.add("seahawks");
                        _o1.add("cardinals");
                        _o1.add("cowboys");
                        _o1.add("giants");
                        _o1.add("eagles");
                        _o1.add("redskins");
                        _o1.add("bears");
                        _o1.add("lions");
                        _o1.add("packers");
                        _o1.add("vikings");
                        _o1.add("buccaneers");
                        _o1.add("falcons");
                        _o1.add("panthers");
                        _o1.add("saints");
                        _o1.add("rams");
                        _o1.add("49ers");
                        _o1.add("freeAgents");
                        _o1.add("allTime");
                        return _o1;
                    }(new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            GetKey: function () {
                return System.String.format("# TSBTool Forum: https://tecmobowl.org/forums/topic/11106-tsb-editor-tsbtool-supreme-season-generator/\r\n# TSBTool2 Forum: https://tecmobowl.org/forums/topic/71072-tsbii-tsbiii-editor-tsbtool2/\r\n# Editing: Tecmo Super Bowl III (snes) [{0}]\r\n# TSBIII Hacking documentation: https://tecmobowl.org/forums/topic/53029-tecmo-super-bowl-iii-hackingresource-documentation/\r\n# Key \r\n# 'SET' commands are supported\r\n# Double click on a team name (or playbook) to bring up the edit Team GUI.\r\n# Double click on a player to bring up the edit player GUI (Click 'Sim Data'\r\n#   button to find out more on Sim Data).\r\n# Attribute Order\r\n# QBs   RS RP MS HP BB AG PS PC PA AR CO [sim vals]\r\n# Skill RS RP MS HP BB AG BC RC [sim vals]\r\n# OL    RS RP MS HP BB AG \r\n# DEF   RS RP MS HP BB AG PI QU [sim vals]\r\n# K     RS RP MS HP BB AG KP KA AB [sim val]\r\n# P     RS RP MS HP BB AG KP AB [sim val]\r\n", [Bridge.box(this.RomVersion, TSBTool.ROM_TYPE, System.Enum.toStringFn(TSBTool.ROM_TYPE))]);
            },
            GetPlayer: function (season, team, builder, position) {
                TSBTool2.TSB2Tool.prototype.GetPlayer.call(this, 1, team, builder, position);
            },
            GetFace: function (season, team, position) {
                var $t;
                var location = (this.GetPlayerAttributeLocation(season, team, position) + 3) | 0;
                var retVal = ($t = this.OutputRom)[System.Array.index(location, $t)];
                return retVal;
            },
            SetFace: function (season, team, position, face) {
                TSBTool.StaticUtils.CheckTSB2Args$1(season, team, position);
                var location = (this.GetPlayerAttributeLocation(season, team, position) + 3) | 0;
                this.SetByte(location, (face & 255));
            },
            GetQBAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14;
                var location = this.GetPlayerAttributeLocation(season, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t4)]);
                var ag = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t5)]);
                var ps = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var pc = TSBTool.StaticUtils.GetSecondNibble(($t7 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t7)]);
                var pa = TSBTool.StaticUtils.GetFirstNibble(($t8 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t8)]);
                var ar = TSBTool.StaticUtils.GetSecondNibble(($t9 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t9)]);
                var co = TSBTool.StaticUtils.GetFirstNibble(($t10 = this.OutputRom)[System.Array.index(((location + 6) | 0), $t10)]);
                var sp = TSBTool.StaticUtils.GetSecondNibble(($t11 = this.OutputRom)[System.Array.index(((location + 6) | 0), $t11)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, ag, ps, pc, pa, ar, co], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(1, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X2},{1:X2},{2:X2}]", Bridge.box(($t12 = this.OutputRom)[System.Array.index(location, $t12)], System.Byte), Bridge.box(($t13 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t13)], System.Byte), Bridge.box(($t14 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t14)], System.Byte))) || "");
                }
                return retVal;
            },
            SetQBAbilities: function (season, team, qb, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                if (!Bridge.referenceEquals(qb, "QB1") && !Bridge.referenceEquals(qb, "QB2")) {
                    throw new System.ArgumentException.$ctor1("Invalid qb position " + (qb || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, qb);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);

                var ps_pc = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);
                var pa_ar = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(8, abilities)], abilities[System.Array.index(9, abilities)]);
                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 6) | 0), $t)]);
                var co_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(10, abilities)], unk1);

                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
                this.SetByte(((location + 4) | 0), ps_pc);
                this.SetByte(((location + 5) | 0), pa_ar);
                this.SetByte(((location + 6) | 0), co_unk1);
            },
            GetOLPlayerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5;
                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);
                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t4)]);
                var ag = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t5)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, ag], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                return retVal;
            },
            SetOLPlayerAbilities: function (season, team, pos, abilities) {
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(pos);
                if (posIndex < 12 || posIndex > 16) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes C,RG,RT,LG,LT) " + (pos || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, pos);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
            },
            GetKickerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9;
                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);

                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t4)]);
                var ag = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t5)]);

                var kp = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var ka = TSBTool.StaticUtils.GetSecondNibble(($t7 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t7)]);
                var ab = TSBTool.StaticUtils.GetFirstNibble(($t8 = this.OutputRom)[System.Array.index(((location + 5) | 0), $t8)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, ag, kp, ka, ab], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(1, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X}]", [Bridge.box((($t9 = this.OutputRom)[System.Array.index(location, $t9)] >> 4), System.Int32)])) || "");
                }
                return retVal;
            },
            SetKickerAbilities: function (season, team, position, abilities) {
                var $t;
                TSBTool.StaticUtils.CheckTSB2Args(1, team);
                if (!Bridge.referenceEquals(position, "K")) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes K) " + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);
                var kp_ka = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);

                var unk1 = TSBTool.StaticUtils.GetSecondNibble(($t = this.OutputRom)[System.Array.index(((location + 5) | 0), $t)]);
                var ab_unk1 = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(8, abilities)], unk1);

                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
                this.SetByte(((location + 4) | 0), kp_ka);
                this.SetByte(((location + 5) | 0), ab_unk1);
            },
            GetPunterAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);

                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t4)]);
                var ag = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t5)]);

                var kp = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var ab = TSBTool.StaticUtils.GetSecondNibble(($t7 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t7)]);

                var attrs = System.Array.init([rs, rp, ms, hp, bb, ag, kp, ab], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(1, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X}]", [Bridge.box((($t8 = this.OutputRom)[System.Array.index(location, $t8)] & 15), System.Int32)])) || "");
                }
                return retVal;
            },
            SetPunterAbilities: function (season, team, position, abilities) {
                TSBTool.StaticUtils.CheckTSB2Args(1, team);
                if (!Bridge.referenceEquals(position, "P")) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes P) " + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);

                var kp_ab = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);

                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
                this.SetByte(((location + 4) | 0), kp_ab);
            },
            GetPlayerAbilities: function (season, team, position) {
                return TSBTool2.TSB2Tool.prototype.GetPlayerAbilities.call(this, 1, team, position);
            },
            GetSkill_DefPlayerAbilities: function (season, team, position) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11;
                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs = TSBTool.StaticUtils.GetFirstNibble(($t = this.OutputRom)[System.Array.index(location, $t)]);
                var rp = TSBTool.StaticUtils.GetSecondNibble(($t1 = this.OutputRom)[System.Array.index(location, $t1)]);
                var ms = TSBTool.StaticUtils.GetFirstNibble(($t2 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t2)]);
                var hp = TSBTool.StaticUtils.GetSecondNibble(($t3 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t3)]);

                var bb = TSBTool.StaticUtils.GetFirstNibble(($t4 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t4)]);
                var ag = TSBTool.StaticUtils.GetSecondNibble(($t5 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t5)]);
                var bc = TSBTool.StaticUtils.GetFirstNibble(($t6 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t6)]);
                var rec = TSBTool.StaticUtils.GetSecondNibble(($t7 = this.OutputRom)[System.Array.index(((location + 4) | 0), $t7)]);


                var attrs = System.Array.init([rs, rp, ms, hp, bb, ag, bc, rec], System.Byte);
                var retVal = TSBTool.StaticUtils.MapAttributes(attrs);
                if (TSBTool2.TSB2Tool.ShowPlayerSimData) {
                    location = this.GetSimLocation(1, team, position);
                    retVal = (retVal || "") + ((System.String.format("[{0:X2},{1:X2},{2:X2}", Bridge.box(($t8 = this.OutputRom)[System.Array.index(location, $t8)], System.Byte), Bridge.box(($t9 = this.OutputRom)[System.Array.index(((location + 1) | 0), $t9)], System.Byte), Bridge.box(($t10 = this.OutputRom)[System.Array.index(((location + 2) | 0), $t10)], System.Byte))) || "");
                    if (TSBTool2.TSB2Tool.positionNames.indexOf(position) < 13) {
                        retVal = (retVal || "") + (("," + (System.Byte.format(($t11 = this.OutputRom)[System.Array.index(((location + 3) | 0), $t11)], "X2") || "")) || "");
                    }
                    retVal = (retVal || "") + "]";
                }
                return retVal;
            },
            SetSkillPlayerAbilities: function (season, team, position, abilities) {
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                if (posIndex < 2 || posIndex > 11) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes RB1=TE2)" + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);
                var bc_rec = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
                this.SetByte(((location + 4) | 0), bc_rec);
            },
            SetDefensivePlayerAbilities: function (season, team, position, abilities) {
                TSBTool.StaticUtils.CheckTSB2Args(season, team);
                var posIndex = TSBTool2.TSB2Tool.positionNames.indexOf(position);
                if (posIndex < 17 || posIndex > 34) {
                    throw new System.ArgumentException.$ctor1("Invalid position argument! (takes RE-DB3)" + (position || ""));
                }

                var location = this.GetPlayerAttributeLocation(1, team, position);
                var rs_rp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(0, abilities)], abilities[System.Array.index(1, abilities)]);
                var ms_hp = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(2, abilities)], abilities[System.Array.index(3, abilities)]);
                var bb_ag = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(4, abilities)], abilities[System.Array.index(5, abilities)]);
                var pi_qu = TSBTool.StaticUtils.CombineNibbles(abilities[System.Array.index(6, abilities)], abilities[System.Array.index(7, abilities)]);
                this.SetByte(location, rs_rp);
                this.SetByte(((location + 1) | 0), ms_hp);
                this.SetByte(((location + 2) | 0), bb_ag);
                this.SetByte(((location + 4) | 0), pi_qu);
            },
            GetSchedule: function (season) {
                var helper = new TSBTool2.SNES_TSB3_ScheduleHelper(this);
                helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_1, this.seventeenWeeks$1, TSBTool2.TSB3Tool.scheduleTeamOrder);
                return helper.GetSchedule();
            },
            ApplySchedule: function (season, scheduleList) {
                var helper = new TSBTool2.SNES_TSB3_ScheduleHelper(this);
                helper.SetWeekOneLocation(TSBTool2.TSB2Tool.schedule_start_season_1, this.seventeenWeeks$1, TSBTool2.TSB3Tool.scheduleTeamOrder);
                helper.ApplySchedule(scheduleList);
            },
            GetAll: function () {
                return this.GetAll$1(1);
            },
            GetAll$1: function (season) {
                return TSBTool2.TSB2Tool.prototype.GetAll$1.call(this, 1);
            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJCcmlkZ2VfVFNCVG9vbC5qcyIsCiAgInNvdXJjZVJvb3QiOiAiIiwKICAic291cmNlcyI6IFsiQXBwLmNzIiwiQnJpZGdlRmFrZUl0ZW1zLmNzIiwiLi4vVFNCVG9vbC9TY2hlZHVsZXJIZWxwZXIyLmNzIiwiLi4vVFNCVG9vbC9JbnB1dFBhcnNlci5jcyIsIi4uL1RTQlRvb2wvU2ltU3R1ZmYuY3MiLCIuLi9UU0JUb29sL1NORVNfU2NoZWR1bGVIZWxwZXIuY3MiLCIuLi9UU0JUb29sL1N0YXRpY1V0aWxzLmNzIiwiLi4vVFNCVG9vbC9UZWNtb25zdGVyVFNCMVNpbUF1dG9VcGRhdGVyLmNzIiwiLi4vVFNCVG9vbC9UZWNtb25zdGVyVGVhbVNpbS5jcyIsIi4uL1RTQlRvb2wvVGVjbW9Ub29sRmFjdG9yeS5jcyIsIi4uL1RTQlRvb2wvVFNCMl9UU0IzL0lucHV0UGFyc2VyLmNzIiwiLi4vVFNCVG9vbC9UU0IyX1RTQjMvU05FU19TY2hlZHVsZUhlbHBlci5jcyIsIi4uL1RTQlRvb2wvVFNCMl9UU0IzL1RTQkNvbnZlcnRlci5jcyIsIi4uL1RTQlRvb2wvVFNCMl9UU0IzL1RTQlhTaW1BdXRvVXBkYXRlci5jcyIsIi4uL1RTQlRvb2wvQ1hSb21TY2hlZHVsZUhlbHBlci5jcyIsIi4uL1RTQlRvb2wvVGVjbW9Ub29sLmNzIiwiLi4vVFNCVG9vbC9TTkVTX1RlY21vVG9vbC5jcyIsIi4uL1RTQlRvb2wvVFNCMl9UU0IzL1NORVNfVFNCM19TY2hlZHVsZUhlbHBlci5jcyIsIi4uL1RTQlRvb2wvVFNCMl9UU0IzL1RTQjJUb29sLmNzIiwiLi4vVFNCVG9vbC9DWFJvbVRTQlRvb2wuY3MiLCIuLi9UU0JUb29sL1RTQjJfVFNCMy9UU0IzVG9vbC5jcyJdLAogICJuYW1lcyI6IFsiIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFxQ1lBLGlCQUE4QkEsOEVBR25CQSx1REFFYUE7WUFFeEJBLHNCQUFzQkEsVUFBQ0E7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QSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsS0FBSkE7Z0JBQ3hKQSxtQkFBbUJBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxlQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBO2dCQUNuSEEsbUJBQW1CQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZUFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQTtnQkFDbkhBLG1CQUFtQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGVBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkE7Z0JBQ25IQSxtQkFBbUJBLENBQUNBLHVCQUFJQSxJQUFKQSxlQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBLGdCQUFrQkEsQ0FBQ0EsdUJBQUlBLElBQUpBO2dCQUNuSEEsa0JBQW1CQSxDQUFDQSx1QkFBSUEsSUFBSkEsZ0JBQWtCQSxDQUFDQSx1QkFBSUEsSUFBSkEsZUFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQSxnQkFBa0JBLENBQUNBLHVCQUFJQSxJQUFKQTtnQkFDbkhBLGtCQUFrQkEsQ0FBQ0EsMEJBQU9BLElBQVBBLG1CQUFxQkEsQ0FBQ0EsMEJBQU9BLElBQVBBLG1CQUFxQkEsQ0FBQ0EsMEJBQU9BLElBQVBBLG1CQUFxQkEsQ0FBQ0EsMEJBQU9BLElBQVBBLG1CQUNqRUEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQ3ZEQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFDdkRBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUN2REEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBO2dCQUMzRUEsNEJBQTRCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFDdkRBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUN2REEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBO2dCQUNuRkEsNkJBQTRCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQzNGQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQzNGQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBLGVBQWlCQSxDQUFDQSxzQkFBR0EsSUFBSEEsZUFBaUJBLENBQUNBLHNCQUFHQSxJQUFIQSxlQUFpQkEsQ0FBQ0Esc0JBQUdBLElBQUhBO2dCQUN2SEEsNEJBQTRCQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsZ0JBQWtCQSxDQUFDQSx3QkFBS0EsSUFBTEEsZ0JBQzVEQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsZ0JBQWtCQSxDQUFDQSx3QkFBS0EsSUFBTEEsZ0JBQzVEQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsaUJBQW1CQSxDQUFDQSx3QkFBS0EsSUFBTEEsZ0JBQWtCQSxD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bUNBLDZDQUFjQTtnQkFDOURBLFlBQWFBLG1DQUFtQ0EsNkNBQWNBO2dCQUM5REEsWUFBYUEsbUNBQW1DQSw2Q0FBY0E7Z0JBQzlEQSxhQUFRQSxVQUFjQTtnQkFDdEJBLGFBQVFBLHNCQUFjQTtnQkFDdEJBLGFBQVFBLHNCQUFjQTtnQkFDdEJBLGFBQVFBLHNCQUFjQTs7bUNBS1NBO2dCQUUvQkEsYUFBa0NBLElBQUlBLGtDQUF5QkE7Z0JBQy9EQSwwQkFBMEJBLDJDQUF5QkEsdUJBQWdCQTtnQkFDbkVBLE9BQU9BOztxQ0FHd0JBLFFBQVlBO2dCQUUzQ0EsYUFBa0NBLElBQUlBLGtDQUF5QkE7Z0JBQy9EQSwwQkFBMEJBLDJDQUF5QkEsdUJBQWdCQTtnQkFDbkVBLHFCQUFxQkE7OztnQkFLckJBLE9BQU9BOztnQ0FHbUJBO2dCQUUxQkEsT0FBT0EiLAogICJzb3VyY2VzQ29udGVudCI6IFsidXNpbmcgQnJpZGdlO1xyXG51c2luZyBOZXd0b25zb2Z0Lkpzb247XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgVFNCVG9vbDtcclxudXNpbmcgQnJpZGdlLkh0bWw1O1xyXG5cclxubmFtZXNwYWNlIEJyaWRnZV9UU0JUb29sXHJcbntcclxuICAgIC8vLyA8c3VtbWFyeT5cclxuICAgIC8vLyBCcmlkZ2VfVFNCVG9vbC5BcHAuX19fXHJcbiAgICAvLy8gXHJcbiAgICAvLy8gUHVibGljIEFQSSBcclxuICAgIC8vLyB3aW5kb3cudGVjbW9Ub29sOiB7XHJcbiAgICAvLy8gICAgIGJvb2wgbG9hZEZpbGUoc3RyaW5nIGlucHV0KTogUHJvbXB0cyB1c2VyIHRvIGxvYWQgYSBST007IHJldHVybnMgdHJ1ZSB3aGVuIHN1Y2Nlc3NmdWxcclxuICAgIC8vLyAgICAgc3RyaW5nIGdldEFsbENvbnRlbnRzKHtvcHRpb25zfSk6IEdldCBjb250ZW50cyBmb3IgdGhlIGxvYWRlZCBST01cclxuICAgIC8vLyAgICAgdm9pZCBhcHBseURhdGEoc3RyaW5nKTogQXBwbGllcyB0aGUgZGF0YSBwYXNzZWRcclxuICAgIC8vLyAgICAgdm9pZCBzYXZlRmlsZSgpOiBzYXZlIHRoZSBjdXJyZW50IHdvcmsgdG8gYSByb20uXHJcbiAgICAvLy8gICAgIFxyXG4gICAgLy8vICAgICBzdHJpbmcgQ29udmVydFRvVFNCMUZvcm1hdChzdHJpbmcpOiBDb252ZXJ0cyBkYXRhIHRvIFRTQjEgRm9ybWF0OyByZXR1cm5zIHRoZSBjb252ZXJ0ZWQgZGF0YVxyXG4gICAgLy8vICAgICBzdHJpbmcgQ29udmVydFRvVFNCMkZvcm1hdChzdHJpbmcpOiBDb252ZXJ0cyBkYXRhIHRvIFRTQjIgRm9ybWF0OyByZXR1cm5zIHRoZSBjb252ZXJ0ZWQgZGF0YVxyXG4gICAgLy8vICAgICBzdHJpbmcgQ29udmVydFRvVFNCM0Zvcm1hdChzdHJpbmcpOiBDb252ZXJ0cyBkYXRhIHRvIFRTQjMgRm9ybWF0OyByZXR1cm5zIHRoZSBjb252ZXJ0ZWQgZGF0YVxyXG4gICAgLy8vIH1cclxuICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICBwdWJsaWMgY2xhc3MgQXBwXHJcbiAgICB7XHJcbiAgICAgICAgc3RhdGljIHN0cmluZyBzQnV0dG9uSGVpZ2h0ID0gXCI0MHB4XCI7XHJcbiAgICAgICAgc3RhdGljIHN0cmluZyBzQnV0dG9uTWFyZ2luID0gXCI1cHhcIjtcclxuICAgICAgICBzdGF0aWMgSVRlY21vVG9vbCB0b29sID0gbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSFRNTFRleHRBcmVhRWxlbWVudCBtVGV4dEJveCA9IG51bGw7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgSFRNTEJ1dHRvbkVsZW1lbnQgYXBwbHlCdXR0b24gPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEhUTUxCdXR0b25FbGVtZW50IHZpZXdCdXR0b24gPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEhUTUxCdXR0b25FbGVtZW50IHNhdmVCdXR0b24gPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWFpbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL1JlbmRlclNhbXBsZVBhZ2UoKTtcclxuICAgICAgICAgICAgSFRNTElucHV0RWxlbWVudCBsb2FkQnV0dG9uID0gbmV3IEhUTUxJbnB1dEVsZW1lbnQoKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBJZCA9IFwibUhpZGRlbkxvYWRCdXR0b25cIixcclxuICAgICAgICAgICAgICAgIFR5cGUgPSBJbnB1dFR5cGUuRmlsZSxcclxuICAgICAgICAgICAgICAgIElubmVySFRNTCA9IFwiTG9hZCBGaWxlXCIsXHJcbiAgICAgICAgICAgICAgICBTdHlsZSA9IHsgRGlzcGxheSA9IERpc3BsYXkuTm9uZSB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxvYWRCdXR0b24uT25DaGFuZ2UgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgICAgIExvYWRGaWxlKGxvYWRCdXR0b24uRmlsZXNbMF0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBEb2N1bWVudC5Cb2R5LkFwcGVuZENoaWxkKGxvYWRCdXR0b24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIGh0dHBzOi8vZ2l0aHViLmNvbS9icmlkZ2Vkb3RuZXQvQnJpZGdlL3dpa2lcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBSZW5kZXJTYW1wbGVQYWdlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIEFmdGVyIGJ1aWxkaW5nIChDdHJsICsgU2hpZnQgKyBCKSB0aGlzIHByb2plY3QsIFxyXG4gICAgICAgICAgICAvLyBicm93c2UgdG8gdGhlIC9iaW4vRGVidWcgb3IgL2Jpbi9SZWxlYXNlIGZvbGRlci5cclxuXHJcbiAgICAgICAgICAgIC8vIEEgbmV3IGJyaWRnZS8gZm9sZGVyIGhhcyBiZWVuIGNyZWF0ZWQgYW5kXHJcbiAgICAgICAgICAgIC8vIGNvbnRhaW5zIHlvdXIgcHJvamVjdHMgSmF2YVNjcmlwdCBmaWxlcy4gXHJcblxyXG4gICAgICAgICAgICAvLyBPcGVuIHRoZSBicmlkZ2UvaW5kZXguaHRtbCBmaWxlIGluIGEgYnJvd3NlciBieVxyXG4gICAgICAgICAgICAvLyBSaWdodC1DbGljayA+IE9wZW4gV2l0aC4uLiwgdGhlbiBjaG9vc2UgYVxyXG4gICAgICAgICAgICAvLyB3ZWIgYnJvd3NlciBmcm9tIHRoZSBsaXN0XHJcblxyXG4gICAgICAgICAgICAvLyBUaGlzIGFwcGxpY2F0aW9uIHdpbGwgdGhlbiBydW4gaW4gdGhlIGJyb3dzZXIuXHJcblxyXG4gICAgICAgICAgICBtVGV4dEJveCA9IG5ldyBIVE1MVGV4dEFyZWFFbGVtZW50KClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSWQgPSBcIm1UZXh0Qm94XCIsXHJcbiAgICAgICAgICAgICAgICBTdHlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBNYXJnaW5MZWZ0ID0gXCI1cHhcIixcclxuICAgICAgICAgICAgICAgICAgICBIZWlnaHQ9IFwiNjV2aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFdpZHRoID0gXCI5MiVcIixcclxuICAgICAgICAgICAgICAgICAgICBNYXhXaWR0aCAgPSBcIjcwMHB4XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbVRleHRCb3guU2V0QXR0cmlidXRlKFwic3BlbGxjaGVja1wiLCBcImZhbHNlXCIpO1xyXG4gICAgICAgICAgICBEb2N1bWVudC5Cb2R5LkFwcGVuZENoaWxkKG1UZXh0Qm94KTtcclxuICAgICAgICAgICAgRG9jdW1lbnQuQm9keS5BcHBlbmRDaGlsZChuZXcgSFRNTFBhcmFncmFwaEVsZW1lbnQoKSk7XHJcblxyXG4gICAgICAgICAgICBIVE1MSW5wdXRFbGVtZW50IGxvYWRCdXR0b24gPSBuZXcgSFRNTElucHV0RWxlbWVudCgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIElkID0gXCJtTG9hZEJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgVHlwZSA9IElucHV0VHlwZS5GaWxlLFxyXG4gICAgICAgICAgICAgICAgSW5uZXJIVE1MID0gXCJMb2FkIEZpbGVcIixcclxuICAgICAgICAgICAgICAgIFN0eWxlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIE1hcmdpbiA9IHNCdXR0b25NYXJnaW4sIEhlaWdodCA9IHNCdXR0b25IZWlnaHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbG9hZEJ1dHRvbi5PbkNoYW5nZSA9IChldikgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9hZEZpbGUobG9hZEJ1dHRvbi5GaWxlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3VsZCBhbHNvIGp1c3QgdXNlIFwiUHJvbXB0QW5kTG9hZEZpbGUoKTtcIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBEb2N1bWVudC5Cb2R5LkFwcGVuZENoaWxkKGxvYWRCdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgdmlld0J1dHRvbiA9IG5ldyBIVE1MQnV0dG9uRWxlbWVudCgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIElkID0gXCJtVmlld0J1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgSW5uZXJIVE1MID0gXCJWaWV3IENvbnRlbnRzXCIsXHJcbiAgICAgICAgICAgICAgICBTdHlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBNYXJnaW4gPSBzQnV0dG9uTWFyZ2luLCBIZWlnaHQgPSBzQnV0dG9uSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZpZXdCdXR0b24uT25DbGljayA9IChldikgPT4geyBWaWV3Q29udGVudHMoKTsgfTtcclxuICAgICAgICAgICAgRG9jdW1lbnQuQm9keS5BcHBlbmRDaGlsZCh2aWV3QnV0dG9uKTtcclxuXHJcbiAgICAgICAgICAgIGFwcGx5QnV0dG9uID0gbmV3IEhUTUxCdXR0b25FbGVtZW50KClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSWQgPSBcIm1BcHBseUJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgSW5uZXJIVE1MID0gXCJBcHBseSBUbyBST01cIixcclxuICAgICAgICAgICAgICAgIFN0eWxlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIE1hcmdpbiA9IHNCdXR0b25NYXJnaW4sIEhlaWdodCA9IHNCdXR0b25IZWlnaHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYXBwbHlCdXR0b24uT25DbGljayA9IChldikgPT4geyBBcHBseVRvUm9tKCk7IH07XHJcbiAgICAgICAgICAgIERvY3VtZW50LkJvZHkuQXBwZW5kQ2hpbGQoYXBwbHlCdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgc2F2ZUJ1dHRvbiA9IG5ldyBIVE1MQnV0dG9uRWxlbWVudCgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIElkID0gXCJtU2F2ZUJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgSW5uZXJIVE1MID0gXCJTYXZlIEZpbGVcIixcclxuICAgICAgICAgICAgICAgIFN0eWxlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIE1hcmdpbiA9IHNCdXR0b25NYXJnaW4sIEhlaWdodCA9IHNCdXR0b25IZWlnaHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2F2ZUJ1dHRvbi5PbkNsaWNrID0gKGV2KSA9PiB7IFNhdmVGaWxlKCk7IH07XHJcbiAgICAgICAgICAgIERvY3VtZW50LkJvZHkuQXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XHJcbiAgICAgICAgICAgIHN0YXRlMSgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgTG9hZFJPTShieXRlW10gcm9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdG9vbCA9IFRlY21vVG9vbEZhY3RvcnkuR2V0VG9vbEZvclJvbShyb20pYXMgSVRlY21vVG9vbDtcclxuICAgICAgICAgICAgaWYgKHRvb2wgIT0gbnVsbCAmJiB0b29sLk91dHB1dFJvbSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShcIlJPTSBMb2FkZWQ7IHZlcnNpb24gPSBcIiArIHRvb2wuUm9tVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTEoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgc3RhdGUxKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2aWV3QnV0dG9uICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpZXdCdXR0b24uRGlzYWJsZWQgPSBzYXZlQnV0dG9uLkRpc2FibGVkID0gYXBwbHlCdXR0b24uRGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgc3RhdGUyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2aWV3QnV0dG9uICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpZXdCdXR0b24uRGlzYWJsZWQgPSBzYXZlQnV0dG9uLkRpc2FibGVkID0gYXBwbHlCdXR0b24uRGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBWaWV3Q29udGVudHMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbVRleHRCb3guVmFsdWUgPSB0b29sLkdldEtleSgpICsgXCJcXG5cIiArIHRvb2wuR2V0QWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIEFwcGx5VG9Sb20oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJBcHBseVRvUm9tKCkgY2FsbGVkIVwiKTtcclxuICAgICAgICAgICAgaWYgKHRvb2wgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHN0dWZmID0gbVRleHRCb3guVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0b29sLlByb2Nlc3NUZXh0KHN0dWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9UaGVzZSBmdW5jdGlvbnMgd2lsbCBhcHBlYXIgYXQ6IEJyaWRnZV9UU0JUb29sLkFwcC5Mb2FkRmlsZVxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gdXNlZCBsaWtlOiBsb2FkQnV0dG9uLk9uQ2hhbmdlID0gKGV2KSA9PiB7IExvYWRGaWxlKGxvYWRCdXR0b24uRmlsZXNbMF0pOyAgfTtcclxuICAgICAgICAvLy8gV2hlcmUgJ2xvYWRCdXR0b24nIGlzIGFuIGlucHV0IGVsZW1lbnQgKGJ1dHRvbikgXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJibG9iXCI+PC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTG9hZEZpbGUoRmlsZSBibG9iKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRmlsZVJlYWRlciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cclxuICAgICAgICAgICAgcmVhZGVyLk9uTG9hZCA9IChldikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5QnVmZmVyID0gcmVhZGVyLlJlc3VsdDtcclxuICAgICAgICAgICAgICAgIFVpbnQ4QXJyYXkgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgYnl0ZVtdIHJvbSA9IG5ldyBieXRlW2Fyci5CeXRlTGVuZ3RoXTtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgYXJyLkJ5dGVMZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByb21baV0gPSBhcnJbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBMb2FkUk9NKHJvbSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5SZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICNyZWdpb24gUHVibGljIEFQSVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBQcm9tcHRBbmRMb2FkRmlsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEb2N1bWVudC5HZXRFbGVtZW50QnlJZChcIm1IaWRkZW5Mb2FkQnV0dG9uXCIpLkNsaWNrKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEdldCBjb250ZW50cyBmb3IgdGhlIGxvYWRlZCBST01cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0QWxsQ29udGVudHMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiPG5vIGRhdGEgbG9hZGVkPlwiO1xyXG4gICAgICAgICAgICBpZiAodG9vbCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgPSB0b29sLkdldEFsbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJObyBSb20gTG9hZGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEFwcGxpZXMgdGhlIGRhdGEgcGFzc2VkXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJkYXRhXCI+VGhlIGRhdGEgdG8gYXBwbHk8L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBBcHBseURhdGEoc3RyaW5nIGRhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiggdG9vbCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0b29sLlByb2Nlc3NUZXh0KGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJObyBSb20gTG9hZGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIHNhdmUgdGhlIGN1cnJlbnQgd29yayB0byBhIHJvbSwgcHJvbXB0cyB1c2VyIGZvciBmaWxlbmFtZS5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTYXZlRmlsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodG9vbCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgZmlsZU5hbWUgPSBXaW5kb3cuUHJvbXB0KFwiU2F2ZSBmaWxlIG5hbWVcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAvL0Jsb2IgYmxvYiA9IFNjcmlwdC5DYWxsPEJsb2I+KFwid2luZG93LmNyZWF0ZUJsb2JGcm9tQXJyYXlCdWZmZXJcIiwgdG9vbC5PdXRwdXRSb20pOyBcclxuICAgICAgICAgICAgICAgIHZhciB1OGEgPSBuZXcgVWludDhBcnJheSh0b29sLk91dHB1dFJvbSk7XHJcbiAgICAgICAgICAgICAgICBCbG9iIGJsb2IgPSBTY3JpcHQuQ2FsbDxCbG9iPihcIndpbmRvdy5jcmVhdGVCbG9iRnJvbUFycmF5QnVmZmVyXCIsIHU4YSk7XHJcbiAgICAgICAgICAgICAgICBTY3JpcHQuQ2FsbChcIndpbmRvdy5zYXZlRmlsZVwiLCBmaWxlTmFtZSwgYmxvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShcIk5vIFJvbSBMb2FkZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gIENvbnZlcnRzIGRhdGEgdG8gVFNCMSBGb3JtYXQ7IHJldHVybnMgdGhlIGNvbnZlcnRlZCBkYXRhXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJpbnB1dFwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBDb252ZXJ0VG9UU0IxRm9ybWF0KHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQkNvbnRlbnRUeXBlIHR5cGUgPSBTdGF0aWNVdGlscy5HZXRDb250ZW50VHlwZShpbnB1dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0JUb29sMi5UZWNtb0NvbnZlcnRlci5Db252ZXJ0KHR5cGUsIFRTQkNvbnRlbnRUeXBlLlRTQjEsIGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ29udmVydHMgZGF0YSB0byBUU0IyIEZvcm1hdDsgcmV0dXJucyB0aGUgY29udmVydGVkIGRhdGFcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cIlwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBDb252ZXJ0VG9UU0IyRm9ybWF0KHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQkNvbnRlbnRUeXBlIHR5cGUgPSBTdGF0aWNVdGlscy5HZXRDb250ZW50VHlwZShpbnB1dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0JUb29sMi5UZWNtb0NvbnZlcnRlci5Db252ZXJ0KHR5cGUsIFRTQkNvbnRlbnRUeXBlLlRTQjIsIGlucHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQ29udmVydHMgZGF0YSB0byBUU0IzIEZvcm1hdDsgcmV0dXJucyB0aGUgY29udmVydGVkIGRhdGFcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImlucHV0XCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb1RTQjNGb3JtYXQoc3RyaW5nIGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCQ29udGVudFR5cGUgdHlwZSA9IFN0YXRpY1V0aWxzLkdldENvbnRlbnRUeXBlKGlucHV0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFRTQlRvb2wyLlRlY21vQ29udmVydGVyLkNvbnZlcnQodHlwZSwgVFNCQ29udGVudFR5cGUuVFNCMiwgaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAjZW5kcmVnaW9uXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UaHJlYWRpbmcuVGFza3M7XHJcblxyXG5cclxubmFtZXNwYWNlIFN5c3RlbS5XaW5kb3dzLkZvcm1zXHJcbntcclxuICAgIHB1YmxpYyBlbnVtIERpYWxvZ1Jlc3VsdFxyXG4gICAge1xyXG4gICAgICAgIE5vbmUgPSAwLFxyXG4gICAgICAgIE9LID0gMSxcclxuICAgICAgICBDYW5jZWwgPSAyLFxyXG4gICAgICAgIEFib3J0ID0gMyxcclxuICAgICAgICBSZXRyeSA9IDQsXHJcbiAgICAgICAgSWdub3JlID0gNSxcclxuICAgICAgICBZZXMgPSA2LFxyXG4gICAgICAgIE5vID0gNyxcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBNZXNzYWdlQm94QnV0dG9uc1xyXG4gICAge1xyXG4gICAgICAgIE9LID0gMCxcclxuICAgICAgICBPS0NhbmNlbCA9IDEsXHJcbiAgICAgICAgQWJvcnRSZXRyeUlnbm9yZSA9IDIsXHJcbiAgICAgICAgWWVzTm9DYW5jZWwgPSAzLFxyXG4gICAgICAgIFllc05vID0gNCxcclxuICAgICAgICBSZXRyeUNhbmNlbCA9IDUsXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gTWVzc2FnZUJveEljb25cclxuICAgIHtcclxuICAgICAgICBOb25lID0gMCxcclxuICAgICAgICBFcnJvciA9IDE2LFxyXG4gICAgICAgIEhhbmQgPSAxNixcclxuICAgICAgICBTdG9wID0gMTYsXHJcbiAgICAgICAgUXVlc3Rpb24gPSAzMixcclxuICAgICAgICBFeGNsYW1hdGlvbiA9IDQ4LFxyXG4gICAgICAgIFdhcm5pbmcgPSA0OCxcclxuICAgICAgICBJbmZvcm1hdGlvbiA9IDY0LFxyXG4gICAgICAgIEFzdGVyaXNrID0gNjQsXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIE1lc3NhZ2VCb3hcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIERpYWxvZ1Jlc3VsdCBTaG93KG9iamVjdCBvd25lciwgc3RyaW5nIHRleHQsIHN0cmluZyBjYXB0aW9uLCBNZXNzYWdlQm94QnV0dG9ucyBidXR0b25zLCBNZXNzYWdlQm94SWNvbiBpY29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJUaGlzIHNob3VsZCBub3QgYmUgY2FsbGVkISEhXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gRGlhbG9nUmVzdWx0LkNhbmNlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBNYWluQ2xhc3NcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgR1VJX01PREUgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5JTztcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sXHJcbntcclxuICAgIC8vLyA8c3VtbWFyeT5cclxuICAgIC8vLyBTdW1tYXJ5IGRlc2NyaXB0aW9uIGZvciBTY2hlZHVsZXJIZWxwZXIyLlxyXG4gICAgLy8vIDwvc3VtbWFyeT5cclxuICAgIHB1YmxpYyBjbGFzcyBTY2hlZHVsZUhlbHBlcjJcclxuICAgIHtcclxuICAgICAgICBwcm90ZWN0ZWQgaW50IHdlZWtPbmVTdGFydExvYyAgICAgID0gMjA3MzIzO1xyXG4gICAgICAgIHByb3RlY3RlZCBpbnQgZW5kX3NjaGVkdWxlX3NlY3Rpb24gPSAweDM0MDBlO1xyXG5cdFx0cHJvdGVjdGVkIGludCBnYW1lc1BlcldlZWtTdGFydExvYyA9IDB4MzI5Yzk7XHJcbiAgICAgICAgcHJvdGVjdGVkIGludCB3ZWVrUG9pbnRlcnNTdGFydExvYyA9IDB4MzI5YTc7IC8vIHlvdSBuZWVkIHRvIHN3YXAgdGhlc2UgYnl0ZXNcclxuXHRcdHByaXZhdGUgaW50W10gdGVhbUdhbWVzO1xyXG5cdFx0cHJvdGVjdGVkIGludCB0b3RhbF9nYW1lc19wb3NzaWJsZSA9IDIzODtcclxuXHRcdHByb3RlY3RlZCBpbnQgZ2FtZVBlcldlZWtMaW1pdCA9IDE0O1xyXG5cdFx0cHJvdGVjdGVkIGludCB0b3RhbEdhbWVMaW1pdCA9IDIyNDtcclxuXHRcdHByb3RlY3RlZCBpbnQgdG90YWxXZWVrcyA9IDE3O1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCB3ZWVrICAgICAgICAgICAgID0gLTE7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgd2Vla19nYW1lX2NvdW50ICA9ICAwO1xyXG4gICAgICAgIHByaXZhdGUgaW50IHRvdGFsX2dhbWVfY291bnQgPSAgMDtcclxuXHJcblx0XHRwcml2YXRlIExpc3Q8c3RyaW5nPiBtZXNzYWdlcztcclxuICAgICAgICBwcml2YXRlIGJ5dGVbXSBvdXRwdXRSb207XHJcbiAgICAgICAgcHJpdmF0ZSBSZWdleCBnYW1lUmVnZXg7XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBBZGRNZXNzYWdlKFN0cmluZyBtZXNzYWdlKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggbWVzc2FnZSAhPSBudWxsICYmIG1lc3NhZ2UuTGVuZ3RoID4gMCApXHJcblx0XHRcdFx0bWVzc2FnZXMuQWRkKG1lc3NhZ2UpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHRwdWJsaWMgaW50IFRvdGFsR2FtZUNvdW50XHJcblx0XHR7XHJcblx0XHRcdGdldHsgcmV0dXJuIHRvdGFsX2dhbWVfY291bnQ7IH1cclxuXHRcdH1cclxuXHJcbiAgICAgICAgcHVibGljIFNjaGVkdWxlSGVscGVyMihieXRlW10gb3V0cHV0Um9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRwdXRSb20gPSBvdXRwdXRSb207XHJcbiAgICAgICAgICAgIGdhbWVSZWdleCA9IG5ldyBSZWdleChcIihbMC05YS16XSspXFxcXHMrYXRcXFxccysoWzAtOWEtel0rKVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQXBwbGllcyBhIHNjaGVkdWxlIHRvIHRoZSByb20uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJsaW5lc1wiPnRoZSBjb250ZW50cyBvZiB0aGUgc2NoZWR1bGUgZmlsZS48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFwcGx5U2NoZWR1bGUoTGlzdDxzdHJpbmc+IGxpbmVzKVxyXG4gICAgICAgIHtcclxuXHRcdFx0d2VlayAgICAgICAgICAgICA9IC0xO1xyXG4gICAgICAgICAgICB3ZWVrX2dhbWVfY291bnQgID0gIDA7XHJcbiAgICAgICAgICAgIHRvdGFsX2dhbWVfY291bnQgPSAgMDtcclxuXHRcdFx0bWVzc2FnZXMgICAgICAgICA9IG5ldyBMaXN0PHN0cmluZz4oNTApO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIGxpbmU7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9MDsgaSA8IGxpbmVzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXS5Ub1N0cmluZygpLlRyaW0oKS5Ub0xvd2VyKCk7XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aWYoIGxpbmUuU3RhcnRzV2l0aChcIiNcIikgfHwgbGluZS5MZW5ndGggPCAzKVxyXG5cdFx0XHRcdFx0eyAvLyBkbyBub3RoaW5nLlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSBpZihsaW5lLlN0YXJ0c1dpdGgoXCJ3ZWVrXCIpKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRpZih3ZWVrID4gdG90YWxXZWVrcy0xIC8qMTcqLylcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdEFkZE1lc3NhZ2UoXCJFcnJvciEgWW91IGNhbiBoYXZlIG9ubHkgMTcgd2Vla3MgaW4gYSBzZWFzb24uXCIpO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFNldHVwV2VlaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5Xcml0ZUVycm9yKHN0cmluZy5Gb3JtYXQoXCJTY2hlZHVsZWluZyB7MH1cIiwgbGluZSkpOyAgIC8vQ29uc29sZS5FcnJvci5Xcml0ZUxpbmUoXCJTY2hlZHVsZWluZyB7MH1cIixsaW5lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFNjaGVkdWxlR2FtZShsaW5lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y2F0Y2goRXhjZXB0aW9uIGUpXHJcblx0XHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLldyaXRlRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkV4Y2VwdGlvbiEgd2l0aCBsaW5lICd7MH0nIHsxfVxcbnsyfVwiLGxpbmUsIGUuTWVzc2FnZSwgZS5TdGFja1RyYWNlKSk7XHJcblx0XHRcdFx0XHRBZGRNZXNzYWdlKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBvbiBsaW5lICd7MH0nXCIsIGxpbmUpKTtcclxuXHRcdFx0XHR9XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0Q2xvc2VQcmV2V2VlaygpOyAvLyBjbG9zZSBvZmYgbGFzdCB3ZWVrLlxyXG5cdFx0XHRpZiggd2VlayA8IHRvdGFsV2Vla3MtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRBZGRNZXNzYWdlKFwiV2FybmluZyEgWW91IGRpZG4ndCBzY2hlZHVsZSBhbGwgMTcgd2Vla3MuIFRoZSBzY2hlZHVsZSBjb3VsZCBiZSBtZXNzZWQgdXAuXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCB0ZWFtR2FtZXMgIT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvciggaW50IGkgPSAwOyAgaSA8IHRlYW1HYW1lcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZiggdGVhbUdhbWVzW2ldICE9IDE2ICkgXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdEFkZE1lc3NhZ2Uoc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRcIldhcm5pbmchIFRoZSB7MH0gaGF2ZSB7MX0gZ2FtZXMgc2NoZWR1bGVkLlwiLCBcclxuXHRcdFx0XHRcdFx0XHRUZWNtb1Rvb2wuR2V0VGVhbUZyb21JbmRleChpKSwgdGVhbUdhbWVzW2ldICkpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBTZXR1cFdlZWsoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2xvc2VQcmV2V2VlaygpO1xyXG4gICAgICAgICAgICB3ZWVrKys7XHJcbiAgICAgICAgICAgIHRvdGFsX2dhbWVfY291bnQgKz0gd2Vla19nYW1lX2NvdW50O1xyXG4gICAgICAgICAgICB3ZWVrX2dhbWVfY291bnQgPSAwO1xyXG4gICAgICAgICAgICBTZXR1cFBvaW50ZXJGb3JDdXJyZW50V2VlaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIENsb3NlUHJldldlZWsoKVxyXG4gICAgICAgIHtcclxuXHRcdFx0aWYoIHdlZWsgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBnYW1lc1BlcldlZWtTdGFydExvYyArIHdlZWs7XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKSB3ZWVrX2dhbWVfY291bnQ7XHJcblx0XHRcdFx0aWYoIHdlZWtfZ2FtZV9jb3VudCA9PSAwKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdEFkZE1lc3NhZ2Uoc3RyaW5nLkZvcm1hdChcIkVSUk9SISBXZWVrIHswfS4gWW91IG5lZWQgYXQgbGVhc3QgMSBnYW1lIGluIGVhY2ggd2Vlay5cIiwgd2VlaysxKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgU2V0dXBQb2ludGVyRm9yQ3VycmVudFdlZWsoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIHdlZWsgPT0gMCkgXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGludCB2YWwgICAgICA9ICggMiAqIHRvdGFsX2dhbWVfY291bnQpICsgMzUyNzU7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IHdlZWtQb2ludGVyc1N0YXJ0TG9jICsgKHdlZWsgKiAyKTtcclxuXHRcdFx0aWYoIHdlZWsgPCAxNyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMV0gICA9IChieXRlKSAodmFsID4+IDgpO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gPSAoYnl0ZSkgKHZhbCAmIDB4MDBmZik7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFRvIG1hbnkgV2Vla3MgezB9XCIsd2VlayArMSkpO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBBdHRlbXB0cyB0byBzY2hlZHVsZSBhIGdhbWUuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiYXdheVRlYW1cIj5Bd2F5IHRlYW0ncyBuYW1lLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJob21lVGVhbVwiPkhvbWUgdGVhbSdzIG5hbWUuPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz4gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlLjwvcmV0dXJucz5cclxuXHRcdHByb3RlY3RlZCB2aXJ0dWFsIGJvb2wgU2NoZWR1bGVHYW1lKHN0cmluZyBhd2F5VGVhbSwgc3RyaW5nIGhvbWVUZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRib29sIHJldCA9IGZhbHNlO1xyXG5cdFx0XHRpbnQgYXdheUluZGV4ID0gVGVjbW9Ub29sLkdldFRlYW1JbmRleChhd2F5VGVhbSk7XHJcblx0XHRcdGludCBob21lSW5kZXggPSBUZWNtb1Rvb2wuR2V0VGVhbUluZGV4KGhvbWVUZWFtKTtcclxuXHJcblx0XHRcdGlmKCBhd2F5SW5kZXggPT0gLTEgfHwgaG9tZUluZGV4ID09IC0xKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFwiRXJyb3IhIFdlZWsgezJ9OiBHYW1lICd7MH0gYXQgezF9J1wiLCBhd2F5VGVhbSwgaG9tZVRlYW0sIHdlZWsrMSkpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIGF3YXlJbmRleCA9PSBob21lSW5kZXggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XCJXYXJuaW5nISBXZWVrIHswfTogVGhlIHsxfSBhcmUgc2NoZWR1bGVkIHRvIHBsYXkgYWdhaW5zdCB0aGVtc2VsdmVzLlwiLHdlZWsrMSwgYXdheVRlYW0gKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHdlZWtPbmVTdGFydExvYyArICgod2Vla19nYW1lX2NvdW50ICsgdG90YWxfZ2FtZV9jb3VudCkgKiAyKTtcclxuXHRcdFx0aWYoIGxvY2F0aW9uID49IHdlZWtPbmVTdGFydExvYyAmJiBsb2NhdGlvbiA8IGVuZF9zY2hlZHVsZV9zZWN0aW9uIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gICA9IChieXRlKSBhd2F5SW5kZXg7XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzFdID0gKGJ5dGUpIGhvbWVJbmRleDtcclxuXHRcdFx0XHRJbmNyZW1lbnRUZWFtR2FtZXMoYXdheUluZGV4KTtcclxuXHRcdFx0XHRJbmNyZW1lbnRUZWFtR2FtZXMoaG9tZUluZGV4KTtcclxuXHRcdFx0XHRyZXQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBBdHRlbXB0cyB0byBzY2hlZHVsZSBhIGdhbWUuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGluZVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+VHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlLjwvcmV0dXJucz5cclxuICAgICAgICBwcml2YXRlIGJvb2wgU2NoZWR1bGVHYW1lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuXHRcdFx0Ym9vbCByZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IGdhbWVSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgc3RyaW5nIGF3YXlUZWFtLCBob21lVGVhbTtcclxuXHJcbiAgICAgICAgICAgIGlmKCBtICE9IE1hdGNoLkVtcHR5IClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXdheVRlYW0gPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaG9tZVRlYW0gPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRcdGlmKCB3ZWVrX2dhbWVfY291bnQgPiBnYW1lUGVyV2Vla0xpbWl0IC0gMSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XHRcIkVycm9yISBXZWVrIHswfTogWW91IGNhbiBoYXZlIG5vIG1vcmUgdGhhbiB7MX0gZ2FtZXMgaW4gYSB3ZWVrLlwiLHdlZWsrMSwgZ2FtZVBlcldlZWtMaW1pdCkpO1xyXG5cdFx0XHRcdFx0cmV0ID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYoIFNjaGVkdWxlR2FtZShhd2F5VGVhbSwgaG9tZVRlYW0pIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR3ZWVrX2dhbWVfY291bnQrKztcclxuXHRcdFx0XHRcdHJldCA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHQvL0FkZE1lc3NhZ2Uoc3RyaW5nLkZvcm1hdChcIkVycm9yIHNjaGVkdWxpbmcgZ2FtZSAnezB9JyBmb3Igd2VlayB7MX0uXCIsIGxpbmUsIHdlZWsrMSkpO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRpZiggdG90YWxfZ2FtZV9jb3VudCArIHdlZWtfZ2FtZV9jb3VudCA+IHRvdGFsR2FtZUxpbWl0IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEFkZE1lc3NhZ2Uoc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFwiV2FybmluZyEgV2VlayB7MH06IFRoZXJlIGFyZSBtb3JlIHRoYW4gezF9IGdhbWVzIHNjaGVkdWxlZC5cIix3ZWVrKzEsZ2FtZVBlcldlZWtMaW1pdCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEdldHMgdGhlIFNjaGVkdWxlLlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldFNjaGVkdWxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigxNyoyOCoxMik7XHJcbiAgICAgICAgICAgIGZvciggaW50IGkgPTA7IGkgPCAxNzsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoc3RyaW5nLkZvcm1hdChcIldFRUsgezB9XFxuXCIsKGkrMSkpKTtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChHZXRXZWVrKGkpK1wiXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgc2NoZWR1bGUgZm9yIHdlZWsgJ3dlZWsnLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cIndlZWtcIj5UaGUgd2VlayB0byBnZXQuKFplcm8tYmFzZWQpPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz5UaGUgd2VlayBhcyBhIHN0cmluZy4gPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0V2VlayhpbnQgd2VlaylcclxuICAgICAgICB7XHJcblx0XHRcdGlmKCB3ZWVrIDwgMCB8fCB3ZWVrID4gdG90YWxXZWVrcy0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEFkZE1lc3NhZ2UoXCJQcm9ncmFtbWluZyBFcnJvciEgJ0dldFdlZWsnIFdlZWsgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgMC0xNi5cIik7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigxNCoxMik7XHJcbiAgICAgICAgICAgIGludCBnYW1lc0luV2VlayA9IEdldEdhbWVzSW5XZWVrKHdlZWspO1xyXG4gICAgICAgICAgICAvL3NiLkFwcGVuZChnYW1lc0luV2VlayArIFwiIGdhbWVzIFxcclxcblwiKTtcclxuICAgICAgICAgICAgaW50IHByZXZHYW1lcyA9IDA7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCB3ZWVrOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByZXZHYW1lcyArPSBHZXRHYW1lc0luV2VlayhpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnQgZ2FtZUxvY2F0aW9uID0gd2Vla09uZVN0YXJ0TG9jICsgKCAyICogcHJldkdhbWVzICk7XHJcbiAgICAgICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBnYW1lc0luV2VlazsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfVwiLCBHZXRHYW1lKCBnYW1lTG9jYXRpb24gKygyKmkpICkgKSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJyb21Mb2NhdGlvblwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0R2FtZSggaW50IHJvbUxvY2F0aW9uIClcclxuICAgICAgICB7XHJcblx0XHRcdC8vIFRPRE8gZml4IHRoZSB1cHBlcmJvdW5kLlxyXG5cdFx0XHRpZiggcm9tTG9jYXRpb24gPCB3ZWVrT25lU3RhcnRMb2MgLyp8fCByb21Mb2NhdGlvbiA+IHdlZWtPbmVTdGFydExvYyArIDQ1MCovKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgIFwiUHJvZ3JhbW1pbmcgRVJST1IhIEdldEdhbWUgSW52YWxpZCBHYW1lIExvY2F0aW9uICcweHswfScuIFZhbGlkIGxvY2F0aW9ucyBhcmUgMHh7MX0tMHh7Mn0uXCIsXHJcblx0XHRcdFx0XHRyb21Mb2NhdGlvbix3ZWVrT25lU3RhcnRMb2MsIHdlZWtPbmVTdGFydExvYys0NDggKSApO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIGludCBhd2F5ID0gb3V0cHV0Um9tW3JvbUxvY2F0aW9uXTtcclxuICAgICAgICAgICAgaW50IGhvbWUgPSBvdXRwdXRSb21bcm9tTG9jYXRpb24rMV07XHJcblxyXG5cdFx0XHRzdHJpbmcgYXdheVRlYW0gPSBUZWNtb1Rvb2wuR2V0VGVhbUZyb21JbmRleChhd2F5KTtcclxuXHRcdFx0c3RyaW5nIGhvbWVUZWFtID0gVGVjbW9Ub29sLkdldFRlYW1Gcm9tSW5kZXgoaG9tZSk7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgcmV0ID0gc3RyaW5nLkZvcm1hdChcInswfSBhdCB7MX1cXG5cIixcclxuICAgICAgICAgICAgICAgICAgICBhd2F5VGVhbSwgaG9tZVRlYW0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGdhbWVzIGluIHRoZSBnaXZlbiB3ZWVrLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cIndlZWtcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgaW50IEdldEdhbWVzSW5XZWVrKGludCB3ZWVrKVxyXG4gICAgICAgIHtcclxuXHRcdFx0aWYoIHdlZWsgPCAwIHx8IHdlZWsgPiB0b3RhbFdlZWtzLTEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRBZGRNZXNzYWdlKHN0cmluZy5Gb3JtYXQoXCJQcm9ncmFtbWluZyBFcnJvciEgR2V0R2FtZXNJbldlZWsgV2VlayB7MH0gaXMgaW52YWxpZC4gV2VlayByYW5nZSA9IDAtMTYuXCIsXHJcblx0XHRcdFx0XHR3ZWVrKSk7XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIGludCByZXN1bHQgPSBvdXRwdXRSb21bZ2FtZXNQZXJXZWVrU3RhcnRMb2Mrd2Vla107XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXQgYSBnZW1lIGluIGEgd2Vlay5cclxuXHRcdC8vLyBUbyBiZSBjYWxsZWQgYnkgdGhlIHVzZXIuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwid2Vla1wiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJnYW1lXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImF3YXlUZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImhvbWVUZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgYm9vbCBTZXRHYW1lKCBpbnQgd2VlaywgaW50IGdhbWUsIHN0cmluZyBhd2F5VGVhbSwgc3RyaW5nIGhvbWVUZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggd2VlayA8IDEgfHwgd2VlayA+IHRvdGFsV2Vla3MgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShcIkVycm9yISB2YWxpZCB3ZWVrIHJhbmdlIGlzIDEtMTcuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHR3ZWVrLS07XHJcblx0XHRcdGludCBnYW1lc0lud2VlayA9IEdldEdhbWVzSW5XZWVrKHdlZWspO1xyXG5cdFx0XHRpZiggZ2FtZSA+IGdhbWVzSW53ZWVrIHx8IGdhbWUgPCAxIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEFkZE1lc3NhZ2Uoc3RyaW5nLkZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICAgXCJFcnJvciEgR2FtZSBOdW1iZXIgaW52YWxpZC4gQ3VycmVudCByYW5nZSBmb3Igd2VlayB7MH0gaXMgMSAtIHsxfVwiLFxyXG5cdFx0XHRcdFx0d2VlaysxLCBnYW1lc0lud2VlaykpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgYXdheUluZGV4ID0gVGVjbW9Ub29sLkdldFRlYW1JbmRleChhd2F5VGVhbSk7XHJcblx0XHRcdGludCBob21lSW5kZXggPSBUZWNtb1Rvb2wuR2V0VGVhbUluZGV4KGhvbWVUZWFtKTtcclxuXHJcblx0XHRcdGlmKCBhd2F5SW5kZXggPCAwIHx8IGhvbWVJbmRleCA8IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XCJFcnJvciEgVGVhbSBuYW1lIGludmFsaWQuIENvdWxkbid0IHNjaGVkdWxlIGdhbWUgJ3swfSBhdCB7MX0nXCIsXHJcblx0XHRcdFx0XHRhd2F5VGVhbSwgaG9tZVRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gZmlndXJlIG91dCB3ZWVrIHBpbnRlclxyXG5cdFx0XHRpbnQgcG9pbnRlckxvY2F0aW9uID0gd2Vla1BvaW50ZXJzU3RhcnRMb2MgKyAoMiAqIHdlZWsgKTtcclxuXHRcdFx0Ly8gVE9ETzogZmluaXNoIHRoaXMgbWV0aG9kLlxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIEluY3JlbWVudFRlYW1HYW1lcyhpbnQgdGVhbUluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggdGVhbUdhbWVzID09IG51bGwgKVxyXG5cdFx0XHRcdHRlYW1HYW1lcyA9IG5ldyBpbnRbVGVjbW9Ub29sLlRlYW1zLkNvdW50XTtcclxuXHRcdFx0dGVhbUdhbWVzW3RlYW1JbmRleF0rKztcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyBhbiBhcnJheWxpc3Qgb2YgZXJyb3IgbWVzc2FnZXMgZW5jb3VudGVyZWQgd2hlbiBwcm9jZXNzaW5nIHRoZSBzY2hlZHVsZSBkYXRhLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgTGlzdDxzdHJpbmc+IEdldEVycm9yTWVzc2FnZXMoKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbWVzc2FnZXM7XHJcblx0XHR9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG51c2luZyBTeXN0ZW0uSU87XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucztcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcblxyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8gU3VtbWFyeSBkZXNjcmlwdGlvbiBmb3IgSW5wdXRQYXJzZXIuXHJcblx0Ly8vIDwvc3VtbWFyeT5cclxuXHRwdWJsaWMgY2xhc3MgSW5wdXRQYXJzZXJcclxuXHR7XHJcblx0XHRwcml2YXRlIElUZWNtb1Rvb2wgdG9vbDtcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IHNjaGVkdWxlU3RhdGUgPSAwO1xyXG5cdFx0cHJpdmF0ZSBjb25zdCBpbnQgcm9zdGVyU3RhdGUgICA9IDE7XHJcblx0XHRwcml2YXRlIGludCBjdXJyZW50U3RhdGUgPSAyO1xyXG5cdFx0cHVibGljIGJvb2wgc2hvd1NpbUVycm9yPSBmYWxzZTtcclxuXHJcblx0XHRwcml2YXRlIHN0YXRpYyBSZWdleCB0ZWFtUmVnZXgsIHdlZWtSZWdleCwgZ2FtZVJlZ2V4LCBudW1iZXJSZWdleCwgXHJcblx0XHRcdHBvc05hbWVGYWNlUmVnZXgsIHNpbURhdGFSZWdleCwgeWVhclJlZ2V4LCBzZXRSZWdleCxcclxuXHRcdFx0cmV0dXJuVGVhbVJlZ2V4LCBvZmZlbnNpdmVGb3JtYXRpb25SZWdleCwgcGxheWJvb2tSZWdleCxcclxuXHRcdFx0anVpY2VSZWdleCwgaG9tZVJlZ2V4LCBhd2F5UmVnZXgsIGRpdkNoYW1wUmVnZXgsIGNvbmZDaGFtcFJlZ2V4LFxyXG5cdFx0XHR1bmlmb3JtVXNhZ2VSZWdleCwgcmVwbGFjZVN0cmluZ1JlZ2V4LCB0ZWFtU3RyaW5nc1JlZ2V4O1xyXG5cclxuXHRcdHByaXZhdGUgc3RyaW5nIGN1cnJlbnRUZWFtOyAvL3VzZWQgZm9yIHJvc3RlciB1cGRhdGVcclxuXHRcdHByaXZhdGUgTGlzdDxzdHJpbmc+IHNjaGVkdWxlTGlzdDtcclxuXHJcblx0XHRwdWJsaWMgSW5wdXRQYXJzZXIoSVRlY21vVG9vbCB0b29sKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnRvb2wgPSB0b29sO1xyXG5cdFx0XHRjdXJyZW50VGVhbSAgICAgID0gXCJiaWxsc1wiO1xyXG5cdFx0XHRJbml0KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIElucHV0UGFyc2VyKClcclxuXHRcdHtcclxuXHRcdFx0Y3VycmVudFRlYW0gICAgICA9IFwiYmlsbHNcIjtcclxuXHRcdFx0SW5pdCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgc3RhdGljIHZvaWQgSW5pdCgpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBudW1iZXJSZWdleCA9PSBudWxsIClcclxuXHRcdFx0e1xyXG4vL1x0XHRcdFx0Y3VycmVudFRlYW0gICAgICA9IFwiYmlsbHNcIjtcclxuXHRcdFx0XHRudW1iZXJSZWdleCAgICAgID0gbmV3IFJlZ2V4KFwiKCNbMC05XXsxLDJ9KVwiKTtcclxuXHRcdFx0XHR0ZWFtUmVnZXggICAgICAgID0gbmV3IFJlZ2V4KFwiVEVBTVxcXFxzKj1cXFxccyooWzAtOWEtel0rKVwiKTtcclxuXHRcdFx0XHRzaW1EYXRhUmVnZXggICAgID0gbmV3IFJlZ2V4KFwiU2ltRGF0YT0wW3hYXShbMC05YS1mQS1GXVswLTlhLWZBLUZdKShbMC0zXT8pXCIpO1xyXG5cdFx0XHRcdHdlZWtSZWdleCAgICAgICAgPSBuZXcgUmVnZXgoXCJXRUVLIChbMS05XVswXHQtN10/KVwiKTtcclxuXHRcdFx0XHRnYW1lUmVnZXggICAgICAgID0gbmV3IFJlZ2V4KFwiKFswLTlhLXpdKylcXFxccythdFxcXFxzKyhbMC05YS16XSspXCIpO1xyXG5cdFx0XHRcdHBvc05hbWVGYWNlUmVnZXggPSBuZXcgUmVnZXgoXCIoW0EtWl0rWzEtNF0/KVxcXFxzKixcXFxccyooW2EtekEtWiBcXFxcLlxcXFwtXSspLFxcXFxzKihmYWNlPTBbeFhdWzAtOWEtZkEtRl0rXFxcXHMqLFxcXFxzKik/XCIpO1xyXG5cdFx0XHRcdHllYXJSZWdleCAgICAgICAgPSBuZXcgUmVnZXgoXCJZRUFSXFxcXHMqPVxcXFxzKihbMC05XSspXCIpO1xyXG5cdFx0XHRcdHJldHVyblRlYW1SZWdleCAgPSBuZXcgUmVnZXgoXCJSRVRVUk5fVEVBTVxcXFxzKyhbQS1aMS00XSspXFxcXHMqLFxcXFxzKihbQS1aMS00XSspXFxcXHMqLFxcXFxzKihbQS1aMS00XSspXCIpO1xyXG5cdFx0XHRcdHNldFJlZ2V4ICAgICAgICAgPSBuZXcgUmVnZXgoXCJTRVRcXFxccypcXFxcKFxcXFxzKigweFswLTlhLWZBLUZdKylcXFxccyosXFxcXHMqKDB4WzAtOWEtZkEtRl0rKVxcXFxzKlxcXFwpXCIpO1xyXG5cdFx0XHRcdG9mZmVuc2l2ZUZvcm1hdGlvblJlZ2V4ID0gbmV3IFJlZ2V4KFwiT0ZGRU5TSVZFX0ZPUk1BVElPTlxcXFxzKj1cXFxccyooW2EtekEtWjEyMzRfXSspXCIpO1xyXG5cdFx0XHRcdHBsYXlib29rUmVnZXggICAgPSBuZXcgUmVnZXgoXCJQTEFZQk9PSyAoUlsxLThdezR9KVxcXFxzKixcXFxccyooUFsxLThdezR9KVwiKTtcclxuXHRcdFx0XHRqdWljZVJlZ2V4ICAgICAgID0gbmV3IFJlZ2V4KFwiSlVJQ0VcXFxcKFxcXFxzKihbMC05XXsxLDJ9fEFMTClcXFxccyosXFxcXHMqKFswLTldezEsMn0pXFxcXHMqXFxcXClcIik7XHJcblx0XHRcdFx0aG9tZVJlZ2V4ICAgICAgICA9IG5ldyBSZWdleChcIlVuaWZvcm0xXFxcXHMqPVxcXFxzKjB4KFswLTlhLWZBLUZdezZ9KVwiKTtcclxuXHRcdFx0XHRhd2F5UmVnZXggICAgICAgID0gbmV3IFJlZ2V4KFwiVW5pZm9ybTJcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17Nn0pXCIpO1xyXG5cdFx0XHRcdGRpdkNoYW1wUmVnZXggICAgPSBuZXcgUmVnZXgoXCJEaXZDaGFtcFxcXFxzKj1cXFxccyoweChbMC05YS1mQS1GXXsxMH0pXCIpO1xyXG5cdFx0XHRcdGNvbmZDaGFtcFJlZ2V4ICAgPSBuZXcgUmVnZXgoXCJDb25mQ2hhbXBcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17OH0pXCIpO1xyXG5cdFx0XHRcdHVuaWZvcm1Vc2FnZVJlZ2V4PSBuZXcgUmVnZXgoXCJVbmlmb3JtVXNhZ2VcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17OH0pXCIpO1xyXG5cdFx0XHRcdHJlcGxhY2VTdHJpbmdSZWdleCA9IG5ldyBSZWdleChcIlJlcGxhY2VTdHJpbmdcXFxcKFxcXFxzKlxcXCIoW0EtWmEtejAtOSAuXSspXFxcIlxcXFxzKixcXFxccypcXFwiKFtBLVphLXogLl0rKVxcXCJcXFxccyooLFxcXFxzKihbMC05XSspKSpcXFxccypcXFxcKVwiKTtcclxuXHRcdFx0XHR0ZWFtU3RyaW5nc1JlZ2V4ID0gbmV3IFJlZ2V4KFwiVEVBTV9BQkI9KFswLTlBLVouIF0rKSxURUFNX0NJVFk9KFswLTlBLVphLXogLl0rKSxURUFNX05BTUU9KFswLTlBLVogLl0rKVwiKTtcclxuXHRcdFx0fVxyXG4vL1x0XHRcdGNvbG9yc1JlZ2V4ICAgICAgPSBuZXcgUmVnZXgoXHJcbi8vICAgICAgICAgICAgICAgICBcIkNPTE9SU1xcXFxzKkhvbWVcXFxccyo9XFxcXHMqKDB4WzAtOWEtZkEtRl17NH0pXFxcXHMqLFxcXFxzKkF3YXlcXFxccyo9XFxcXHMqKDB4WzAtOWEtZkEtRl17NH0pXFxcXHMqLFxcXFxzKlwiK1xyXG4vL1x0XHRcdFx0IFwiRGl2Q2hhbXBcXFxccyo9XFxcXHMqKDB4WzAtOWEtZkEtRl17MTB9KVxcXFxzKixcXFxccypDb25mQ2hhbXBcXFxccyo9XFxcXHMqKDB4WzAtOWEtZkEtRl17OH0pXCIpO1xyXG5cdFx0XHQvLyB1c2UgXFwvIHJlZ2V4IGZvciBhIGN1c3RvbSBKdWljZSBTZXR0aW5nLlxyXG5cdFx0XHQvL25ldyBSZWdleChcIkpVSUNFXFxcXChcXFxccyooWzAtOV17MSwyfXxBTEwpXFxcXHMqLFxcXFxzKihbMC05XXsxLDJ9KVxcXFxzKlxcXFwpfEpVSUNFXFxcXChcXFxccyooWzAtOV17MSwyfXxBTEwpXFxcXHMqLFxcXFxzKihbMC05XXsxLDJ9KVxcXFxzKixcXFxccyooWzAtOV17MSwyfSlcXFxccyosXFxcXHMqKFswLTldezEsMn0pXFxcXHMqLFxcXFxzKihbMC05XXsxLDJ9KSxcXFxccyooWzAtOV17MSwyfSlcXFxccypcXFxcKVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBQcm9jZXNzRmlsZShzdHJpbmcgZmlsZU5hbWUpXHJcblx0XHR7XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RyZWFtUmVhZGVyIHNyID0gbmV3IFN0cmVhbVJlYWRlcihmaWxlTmFtZSk7XHJcblx0XHRcdFx0c3RyaW5nIGNvbnRlbnRzPSBzci5SZWFkVG9FbmQoKTtcclxuXHRcdFx0XHRzci5DbG9zZSgpO1xyXG5cdFx0XHRcdGNoYXJbXSBjaGFycyA9IFwiXFxuXFxyXCIuVG9DaGFyQXJyYXkoKTtcclxuXHRcdFx0XHRzdHJpbmdbXSBsaW5lcyA9IGNvbnRlbnRzLlNwbGl0KGNoYXJzKTtcclxuXHRcdFx0XHRQcm9jZXNzTGluZXMobGluZXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKEV4Y2VwdGlvbiBlKXtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3IoZS5NZXNzYWdlKTtcclxuXHRcdFx0fVx0XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgUHJvY2Vzc0xpbmVzKHN0cmluZ1tdIGxpbmVzKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgaSA9MDtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRmb3IoIGkgPTA7IGkgPCBsaW5lcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRQcm9jZXNzTGluZShsaW5lc1tpXSk7XHJcblx0XHRcdFx0XHQvL0NvbnNvbGUuV3JpdGVMaW5lKGkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcblx0XHRcdFx0QXBwbHlTY2hlZHVsZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKEV4Y2VwdGlvbiBlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDE1MCk7XHJcblx0XHRcdFx0c2IuQXBwZW5kKCBcIkVycm9yISBcIik7XHJcblx0XHRcdFx0aWYoIGkgPCBsaW5lcy5MZW5ndGggKVxyXG5cdFx0XHRcdFx0c2IuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJsaW5lICN7MH06XFx0J3sxfSdcIixpLCBsaW5lc1tpXSkpO1xyXG5cdFx0XHRcdHNiLkFwcGVuZChlLk1lc3NhZ2UpO1xyXG5cdFx0XHRcdHNiLkFwcGVuZChcIlxcblwiKTtcclxuXHRcdFx0XHRzYi5BcHBlbmQoZS5TdGFja1RyYWNlKTtcclxuLy9cdFx0XHRcdFx0XHRcIkVycm9yIFByb2Nlc3NpbmcgbGluZSB7MH06XFx0J3sxfScuXFxuezJ9XFxuezN9XCIsXHJcbi8vXHRcdFx0XHRcdFx0aSxsaW5lc1tpXSwgZS5NZXNzYWdlLGUuU3RhY2tUcmFjZSk7XHJcblx0XHRcdFx0c2IuQXBwZW5kKFwiXFxuXFxuT3BlcmF0aW9uIGFib3J0ZWQgYXQgdGhpcyBwb2ludC4gRGF0YSBub3QgYXBwbGllZC5cIik7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuU2hvd0Vycm9yKHNiLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBBcHBseVNjaGVkdWxlKClcclxuXHRcdHtcclxuXHRcdFx0aWYoIHNjaGVkdWxlTGlzdCAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRvb2wuQXBwbHlTY2hlZHVsZShzY2hlZHVsZUxpc3QpO1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLlNob3dFcnJvcnMoICApO1xyXG5cdFx0XHRcdHNjaGVkdWxlTGlzdCA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBSZWFkRnJvbVN0ZGluKClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIGxpbmU9IFwiXCI7XHJcblx0XHRcdGludCBsaW5lTnVtYmVyID0gMDtcclxuXHRcdFx0Q29uc29sZS5Xcml0ZUxpbmUoXCJSZWFkaW5nIGZyb20gc3RhbmRhcmQgaW4uLi5cIik7XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0d2hpbGUoIChsaW5lPUNvbnNvbGUuUmVhZExpbmUoKSkgIT0gbnVsbClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRsaW5lTnVtYmVyKys7XHJcblx0XHRcdFx0XHRQcm9jZXNzTGluZShsaW5lKTtcclxuXHRcdFx0XHRcdC8vQ29uc29sZS5Xcml0ZUxpbmUoXCJMaW5lIFwiK2xpbmVOdW1iZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcblx0XHRcdFx0QXBwbHlTY2hlZHVsZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKEV4Y2VwdGlvbiBlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuU2hvd0Vycm9yKHN0cmluZy5Gb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgXCJFcnJvciBQcm9jZXNzaW5nIGxpbmUgezB9Oid7MX0nLlxcbnsyfVxcbnszfVwiLFxyXG5cdFx0XHRcdFx0bGluZU51bWJlcixsaW5lLCBlLk1lc3NhZ2UsZS5TdGFja1RyYWNlKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBTdHJpbmcgQ2hlY2tUZXh0Rm9yUmVkdW5kZW50U2V0Q29tbWFuZHMoU3RyaW5nIGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciByZXQgPSBuZXcgU3RyaW5nQnVpbGRlcigpO1xyXG4gICAgICAgICAgICBSZWdleCBzaW1wbGVTZXRSZWdleCA9IG5ldyBSZWdleChcIlNFVFxcXFxzKlxcXFwoXFxcXHMqKDB4WzAtOWEtZkEtRl0rKVxcXFxzKixcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqXFxcXClcIik7XHJcbiAgICAgICAgICAgIE1hdGNoQ29sbGVjdGlvbiBtYyA9IHNpbXBsZVNldFJlZ2V4Lk1hdGNoZXMoaW5wdXQpO1xyXG4gICAgICAgICAgICBNYXRjaCBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxvbmcgbG9jYXRpb24xID0gMDtcclxuICAgICAgICAgICAgbG9uZyBsb2NhdGlvbjIgPSAwO1xyXG4gICAgICAgICAgICBpbnQgdmFsdWVMZW5ndGgxID0gMDtcclxuICAgICAgICAgICAgaW50IHZhbHVlTGVuZ3RoMiA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbWMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG1jW2ldO1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24xID0gU3RhdGljVXRpbHMuUGFyc2VMb25nRnJvbUhleFN0cmluZyhjdXJyZW50Lkdyb3Vwc1sxXS5Ub1N0cmluZygpLlN1YnN0cmluZygyKSk7IC8vIGxvbmcuUGFyc2UoY3VycmVudC5Hcm91cHNbMV0uVG9TdHJpbmcoKS5TdWJzdHJpbmcoMiksIFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZUxlbmd0aDEgPSBjdXJyZW50Lkdyb3Vwc1syXS5MZW5ndGggLyAyIDtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSBpKzE7IGogPCBtYy5Db3VudDsgaisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG0gPSBtY1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjIgPSBTdGF0aWNVdGlscy5QYXJzZUxvbmdGcm9tSGV4U3RyaW5nKG0uR3JvdXBzWzFdLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDIpKTsgLy8gbG9uZy5QYXJzZShtLkdyb3Vwc1sxXS5Ub1N0cmluZygpLlN1YnN0cmluZygyKSwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUxlbmd0aDIgPSBtLkdyb3Vwc1syXS5MZW5ndGggLyAyIDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGxvY2F0aW9uMiA+PSBsb2NhdGlvbjEgJiYgbG9jYXRpb24yIDw9IGxvY2F0aW9uMSArICh2YWx1ZUxlbmd0aDEtMikpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChsb2NhdGlvbjEgPj0gbG9jYXRpb24yICYmIGxvY2F0aW9uMSA8PSBsb2NhdGlvbjIgKyAodmFsdWVMZW5ndGgyLTIpKSAgICApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5Hcm91cHNbMF0uVG9TdHJpbmcoKSAhPSBtLkdyb3Vwc1swXS5Ub1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKFwiV0FSTklORyFcXG4gJ1NFVCcgQ29tbWFuZHMgbW9kaWZ5IHNhbWUgbG9jYXRpb25zICdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKGN1cnJlbnQuR3JvdXBzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5BcHBlbmQoXCInIGFuZCAnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LkFwcGVuZChtLkdyb3Vwc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKFwiJ1xcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0LlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJsaW5lXCI+PC9wYXJhbT5cclxuXHRcdHByb3RlY3RlZCB2aXJ0dWFsIHZvaWQgUHJvY2Vzc0xpbmUoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdGxpbmUgPSBsaW5lLlRyaW0oKTtcclxuXHRcdFx0TWF0Y2ggbTtcclxuXHJcblx0XHRcdGlmKGxpbmUuU3RhcnRzV2l0aChcIiNcIikgfHwgbGluZSA9PSBcIlwiIHx8IGxpbmUuVG9Mb3dlcigpLlRyaW0oKS5TdGFydHNXaXRoKFwic2NoZWR1bGVcIikgKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0ZWxzZSBpZiggLypzZXRSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSApLy8qL1xyXG4gICAgICAgICAgICAgICAgbGluZS5TdGFydHNXaXRoKFwiU0VUXCIpIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRvb2wuQXBwbHlTZXQobGluZSk7XHJcblx0XHRcdH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKG0gPSBwbGF5Ym9va1JlZ2V4Lk1hdGNoKGxpbmUpKSAhPSBNYXRjaC5FbXB0eSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCBtICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdHJpbmcgcnVucyA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHRzdHJpbmcgcGFzc2VzID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHRcdHRvb2wuU2V0UGxheWJvb2soY3VycmVudFRlYW0sIHJ1bnMsIHBhc3Nlcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IgU2V0dGluZyBwbGF5Ym9vayBmb3IgdGVhbSB7MH0uIExpbmUgJ3sxfScgaXMgSW52YWxpZFwiLFxyXG5cdFx0XHRcdFx0XHRjdXJyZW50VGVhbSwgbGluZSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcdC8vIEpVSUNFKCBBTEwsIDE3KVxyXG5cdFx0XHRcdC8vIEpVSUNFKDEsMTcpXHJcblx0XHRcdGVsc2UgaWYoIChtID0ganVpY2VSZWdleC5NYXRjaChsaW5lKSkgIT0gTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RyaW5nIGp1aWNlV2VlayAgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRcdGludCBqdWljZUFtdCAgICA9IEludDMyLlBhcnNlKG0uR3JvdXBzWzJdLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKCBqdWljZVdlZWsgPT0gXCJBTExcIiApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IDE3OyBpKyspXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRvb2wuQXBwbHlKdWljZShpKzEsIGp1aWNlQW10KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpbnQgd2VlayA9IEludDMyLlBhcnNlKGp1aWNlV2VlayktMTtcclxuXHRcdFx0XHRcdGlmKCAhdG9vbC5BcHBseUp1aWNlKHdlZWssIGp1aWNlQW10KSlcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISBMaW5lID0gJ3swfSdcIixsaW5lKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChtID0gcmVwbGFjZVN0cmluZ1JlZ2V4Lk1hdGNoKGxpbmUpKSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIGZpbmQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHJlcGxhY2UgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaW50IG9jY3VyID0gLTE7XHJcbiAgICAgICAgICAgICAgICBpZiAobS5Hcm91cHMuQ291bnQgPiAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmQgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2UgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtLkdyb3Vwcy5Db3VudCA+IDMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJbnQzMi5UcnlQYXJzZShtLkdyb3Vwc1s0XS5Ub1N0cmluZygpLCBvdXQgb2NjdXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvY2N1ci0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgbXNnID0gU3RhdGljVXRpbHMuUmVwbGFjZVN0cmluZ0luUm9tKHRvb2wuT3V0cHV0Um9tLCBmaW5kLCByZXBsYWNlLCBvY2N1cik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5TdGFydHNXaXRoKFwiRXJyb3JcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShtc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKFN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgTm90IGVub3VnaCBpbmZvIHRvIHVzZSAnUmVwbGFjZVN0cmluZycgZnVuY3Rpb24uTGluZT17MH1cIixsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKG0gPSB0ZWFtU3RyaW5nc1JlZ2V4Lk1hdGNoKGxpbmUpKSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHRlYW1BYmIgID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZyB0ZWFtQ2l0eSA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgdGVhbU5hbWUgPSBtLkdyb3Vwc1szXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaW50IGluZGV4ID0gVGVjbW9Ub29sLkdldFRlYW1JbmRleChjdXJyZW50VGVhbSk7XHJcbiAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1BYmJyZXZpYXRpb24oaW5kZXgsIHRlYW1BYmIpO1xyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRUZWFtQ2l0eShpbmRleCwgdGVhbUNpdHkpO1xyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRUZWFtTmFtZShpbmRleCwgdGVhbU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIkNPTE9SU1wiKSkgLy8gZG8gdGhlIGNvbG9ycyBoZXJlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyB0bXA7XHJcblxyXG4gICAgICAgICAgICAgICAgTWF0Y2ggaG9tZSA9IGhvbWVSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIGF3YXkgPSBhd2F5UmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICBNYXRjaCBjb25mQ2hhbXAgPSBjb25mQ2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIGRpdkNoYW1wID0gZGl2Q2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIHVuaVVzYWdlID0gdW5pZm9ybVVzYWdlUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9tZSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBob21lLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLlNldEhvbWVVbmlmb3JtKGN1cnJlbnRUZWFtLCB0bXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF3YXkgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gYXdheS5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRBd2F5VW5pZm9ybShjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb25mQ2hhbXAgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gY29uZkNoYW1wLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLlNldENvbmZDaGFtcENvbG9ycyhjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkaXZDaGFtcCAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBkaXZDaGFtcC5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXREaXZDaGFtcENvbG9ycyhjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1bmlVc2FnZSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSB1bmlVc2FnZS5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRVbmlmb3JtVXNhZ2UoY3VycmVudFRlYW0sIHRtcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGVhbVJlZ2V4Lk1hdGNoKGxpbmUpICE9IE1hdGNoLkVtcHR5KS8vbGluZS5TdGFydHNXaXRoKFwiVEVBTVwiKSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKFwiJ3swfScgXCIsIGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gcm9zdGVyU3RhdGU7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgdGVhbSA9IEdldFRlYW0obGluZSk7XHJcbiAgICAgICAgICAgICAgICBib29sIHJldCA9IFNldEN1cnJlbnRUZWFtKHRlYW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SIHdpdGggbGluZSAnezB9Jy5cIiwgbGluZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJUZWFtIGlucHV0IG11c3QgYmUgaW4gdGhlIGZvcm0gJ1RFQU0gPSB0ZWFtIFNpbURhdGE9MHgxRidcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGludFtdIHNpbURhdGEgPSBHZXRTaW1EYXRhKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNpbURhdGEgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltRGF0YVswXSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1TaW1EYXRhKGN1cnJlbnRUZWFtLCAoYnl0ZSlzaW1EYXRhWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nOiBObyBzaW0gZGF0YSBmb3IgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltRGF0YVsxXSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1TaW1PZmZlbnNlUHJlZihjdXJyZW50VGVhbSwgc2ltRGF0YVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SIHdpdGggbGluZSAnezB9Jy5cIiwgbGluZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIE1hdGNoIG9Gb3JtTWF0Y2ggPSBvZmZlbnNpdmVGb3JtYXRpb25SZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIGlmIChvRm9ybU1hdGNoICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBmb3JtYXRpb24gPSBvRm9ybU1hdGNoLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2wuU2V0VGVhbU9mZmVuc2l2ZUZvcm1hdGlvbih0ZWFtLCBmb3JtYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHdlZWtSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSkgIC8vbGluZS5TdGFydHNXaXRoKFwiV0VFS1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gc2NoZWR1bGVTdGF0ZTtcclxuICAgICAgICAgICAgICAgIGlmIChzY2hlZHVsZUxpc3QgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZUxpc3QgPSBuZXcgTGlzdDxzdHJpbmc+KDMwMCk7XHJcbiAgICAgICAgICAgICAgICBzY2hlZHVsZUxpc3QuQWRkKGxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHllYXJSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSkvL2xpbmUuU3RhcnRzV2l0aChcIllFQVJcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNldFllYXIobGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiQUZDXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIk5GQ1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU3RyaW5nW10gcGFydHMgPSBsaW5lLlJlcGxhY2UoXCIgXCIsIFwiXCIpLlNwbGl0KG5ldyBjaGFyW10geyAnLCcgfSwgU3RyaW5nU3BsaXRPcHRpb25zLlJlbW92ZUVtcHR5RW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydHMgIT0gbnVsbCAmJiBwYXJ0cy5MZW5ndGggPiAzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRQcm9Cb3dsUGxheWVyKChDb25mZXJlbmNlKUVudW0uUGFyc2UodHlwZW9mKENvbmZlcmVuY2UpLCBwYXJ0c1swXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0c1sxXSwgcGFydHNbMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoVFNCUGxheWVyKUVudW0uUGFyc2UodHlwZW9mKFRTQlBsYXllciksIHBhcnRzWzNdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgbGluZSA+IFwiICsgbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRTdGF0ZSA9PSBzY2hlZHVsZVN0YXRlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NoZWR1bGVMaXN0ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVMaXN0LkFkZChsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50U3RhdGUgPT0gcm9zdGVyU3RhdGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFVwZGF0ZVJvc3RlcihsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHYXJiYWdlL29ycGhpbiBsaW5lIG5vdCBhcHBsaWVkIFxcXCJ7MH1cXFwiXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTZXRZZWFyKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRNYXRjaCBtID0geWVhclJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgeWVhciA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcblx0XHRcdGlmKHllYXIuTGVuZ3RoIDwgMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCInezB9JyBpcyBub3QgdmFsaWQuXCIsbGluZSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRvb2wuU2V0WWVhcih5ZWFyKTtcclxuXHRcdFx0XHRDb25zb2xlLldyaXRlTGluZShcIlllYXIgc2V0IHRvICd7MH0nXCIseWVhcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHN0cmluZyBHZXRUZWFtKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRNYXRjaCBtID0gdGVhbVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgdGVhbSA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiB0ZWFtO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBpbnRbXSBHZXRTaW1EYXRhKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRNYXRjaCBtID0gc2ltRGF0YVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHQvL3N0cmluZyBkYXRhID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuXHRcdFx0c3RyaW5nIGRhdGEgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRzdHJpbmcgc2ltT2ZmZW5zZVByZWYgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRpbnRbXSByZXQgPSB7LTEsLTF9O1xyXG5cclxuXHRcdFx0aWYoZGF0YS5MZW5ndGggPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aW50IHNpbURhdGEgPSBTdGF0aWNVdGlscy5QYXJzZUludEZyb21IZXhTdHJpbmcoZGF0YSk7XHJcblx0XHRcdFx0XHRyZXRbMF09c2ltRGF0YTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y2F0Y2hcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRXJyb3IgZ2V0dGluZyBTaW1EYXRhIHdpdGggbGluZSAnezB9Jy5cIixsaW5lKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihzaW1PZmZlbnNlUHJlZi5MZW5ndGggPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aW50IHNvID0gSW50MzIuUGFyc2Uoc2ltT2ZmZW5zZVByZWYpO1xyXG5cdFx0XHRcdFx0cmV0WzFdID0gc287XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhdGNoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVycm9yIGdldHRpbmcgU2ltRGF0YSB3aXRoIGxpbmUgJ3swfScuXCIsbGluZSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgc3RyaW5nIEdldEF3YXlUZWFtKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRNYXRjaCBtID0gZ2FtZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgYXdheVRlYW0gPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRyZXR1cm4gYXdheVRlYW07XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHByaXZhdGUgc3RyaW5nIEdldEhvbWVUZWFtKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRNYXRjaCBtID0gZ2FtZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgdGVhbSA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiB0ZWFtO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgaW50IEdldFdlZWsoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdE1hdGNoIG0gPSB3ZWVrUmVnZXguTWF0Y2gobGluZSk7XHJcblx0XHRcdHN0cmluZyB3ZWVrX3N0ciA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcblx0XHRcdGludCByZXQgPSAtMTtcclxuXHRcdFx0dHJ5e1xyXG5cdFx0XHRcdHJldCA9IEludDMyLlBhcnNlKHdlZWtfc3RyKTtcclxuXHRcdFx0XHRyZXQtLTsgLy8gb3VyIHdlZWsgc3RhcnRzIGF0IDBcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2VlayAnezB9JyBpcyBpbnZhbGlkLlwiLHdlZWtfc3RyKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGJvb2wgU2V0Q3VycmVudFRlYW0oc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKFRlY21vVG9vbC5HZXRUZWFtSW5kZXgodGVhbSkgPCAwKVxyXG5cdFx0XHR7Ly9lcnJvciBjb25kaXRpb25cclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiVGVhbSAnezB9JyBpcyBJbnZhbGlkLlwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRoaXMuY3VycmVudFRlYW0gPSB0ZWFtO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgdmlydHVhbCB2b2lkIFVwZGF0ZVJvc3RlcihzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0aWYobGluZS5TdGFydHNXaXRoKFwiS1JcIikpXHJcblx0XHRcdFx0U2V0S2lja1JldHVybk1hbihsaW5lKTtcclxuXHRcdFx0ZWxzZSBpZihsaW5lLlN0YXJ0c1dpdGgoXCJQUlwiKSlcclxuXHRcdFx0XHRTZXRQdW50UmV0dXJuTWFuKGxpbmUpO1xyXG5cdFx0XHRlbHNlIGlmKGxpbmUuU3RhcnRzV2l0aChcIlJFVFVSTl9URUFNXCIpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0TWF0Y2ggbSA9IHJldHVyblRlYW1SZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0XHRpZiggbSA9PSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XCJFcnJvciB3aXRoIGxpbmUgJ3swfScuXFxuXFx0Q29ycmVjdCBTeW50YXggPSdSRVRVUk5fVEVBTSBQT1MxLCBQT1MyLCBQT1MzJ1wiLFxyXG5cdFx0XHRcdFx0XHRsaW5lKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdHJpbmcgcG9zMSA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHRzdHJpbmcgcG9zMiA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHRzdHJpbmcgcG9zMyA9IG0uR3JvdXBzWzNdLlRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHR0b29sLlNldFJldHVyblRlYW0oY3VycmVudFRlYW0sIHBvczEscG9zMixwb3MzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0TWF0Y2ggbSA9IHBvc05hbWVGYWNlUmVnZXguTWF0Y2goIGxpbmUgKTtcclxuXHRcdFx0XHRpZiggbGluZS5JbmRleE9mKFwiI1wiKSA+IC0xIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZiggbnVtYmVyUmVnZXguTWF0Y2gobGluZSkgPT0gTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChqZXJzZXkgbnVtYmVyKSBMaW5lICB7MH1cIixsaW5lKSk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RyaW5nIHAgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRcdGlmKCAgbSAhPSBNYXRjaC5FbXB0eSAmJiB0b29sLklzVmFsaWRQb3NpdGlvbihwKSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aWYobGluZS5TdGFydHNXaXRoKFwiUUJcIikpXHJcblx0XHRcdFx0XHRcdFNldFFCKGxpbmUpO1xyXG5cdFx0XHRcdFx0ZWxzZSBpZihsaW5lLlN0YXJ0c1dpdGgoXCJXUlwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJSQlwiKSB8fFxyXG5cdFx0XHRcdFx0XHRsaW5lLlN0YXJ0c1dpdGgoXCJURVwiKSlcclxuXHRcdFx0XHRcdFx0U2V0U2tpbGxQbGF5ZXIobGluZSk7XHJcblx0XHRcdFx0XHRlbHNlIGlmKGxpbmUuU3RhcnRzV2l0aChcIkNcIikgfHwgbGluZS5TdGFydHNXaXRoKFwiUkdcIikgfHwgXHJcblx0XHRcdFx0XHRcdGxpbmUuU3RhcnRzV2l0aChcIkxHXCIpICAgIHx8IGxpbmUuU3RhcnRzV2l0aChcIlJUXCIpIHx8XHJcblx0XHRcdFx0XHRcdGxpbmUuU3RhcnRzV2l0aChcIkxUXCIpKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRTZXRPTFBsYXllcihsaW5lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYobGluZS5JbmRleE9mKFwiTEJcIikgPT0gMiB8fCBsaW5lLkluZGV4T2YoXCJDQlwiKSA9PSAxIHx8XHJcblx0XHRcdFx0XHRcdGxpbmUuU3RhcnRzV2l0aChcIlJFXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIkxFXCIpICB8fFxyXG5cdFx0XHRcdFx0XHRsaW5lLlN0YXJ0c1dpdGgoXCJOVFwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJTU1wiKSAgfHxcclxuXHRcdFx0XHRcdFx0bGluZS5TdGFydHNXaXRoKFwiRlNcIikgfHwgbGluZS5TdGFydHNXaXRoKFwiREJcIikgICAgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRTZXREZWZlbnNpdmVQbGF5ZXIobGluZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIGlmKCBsaW5lLlN0YXJ0c1dpdGgoXCJQXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIktcIikpXHJcblx0XHRcdFx0XHRcdFNldEtpY2tQbGF5ZXIobGluZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFdpdGggbGluZSBcXFwiezB9XFxcIiAgICAgdGVhbSA9IHsxfVwiLCBsaW5lLCBjdXJyZW50VGVhbSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vUUIxLCBjaHJpcyBNSUxMRVIsIEZhY2U9MHgzMywgIzEyLCAyNSwgNjksIDEzLCAxMywgMzEsIDQ0LCA1MCwgMzEgLFsyLCA0LCAzIF1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgU2V0UUIoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyBmbmFtZSA9IEdldEZpcnN0TmFtZShsaW5lKTtcclxuXHRcdFx0c3RyaW5nIGxuYW1lID0gR2V0TGFzdE5hbWUobGluZSk7XHJcblx0XHRcdHN0cmluZyBwb3MgPSBHZXRQb3NpdGlvbihsaW5lKTtcclxuXHRcdFx0aW50IGZhY2UgPSBHZXRGYWNlKGxpbmUpO1xyXG5cdFx0XHRpbnQgamVyc2V5TnVtYmVyID0gR2V0SmVyc2V5TnVtYmVyKGxpbmUpOy8vd2lsbCBiZSBpbiBoZXgsIG5vdCBiYXNlIDEwXHJcblx0XHRcdGlmKGZhY2UgPiAtMSlcclxuXHRcdFx0XHR0b29sLlNldEZhY2UoY3VycmVudFRlYW0scG9zLGZhY2UpO1xyXG5cdFx0XHRpZiggamVyc2V5TnVtYmVyIDwgMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciB3aXRoIGplcnNleSBudW1iZXIgZm9yICd7MH0gezF9Jywgc2V0dGluZyB0byAwLlwiLGZuYW1lLGxuYW1lKSk7XHJcblx0XHRcdFx0amVyc2V5TnVtYmVyPTA7XHJcblx0XHRcdH1cclxuXHRcdFx0dG9vbC5JbnNlcnRQbGF5ZXIoY3VycmVudFRlYW0scG9zLGZuYW1lLGxuYW1lLChieXRlKWplcnNleU51bWJlcik7XHJcblxyXG5cdFx0XHRpbnRbXSB2YWxzID0gR2V0SW50cyhsaW5lKTtcclxuXHRcdFx0aW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSk7XHJcblx0XHRcdGlmKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDcpXHJcblx0XHRcdFx0dG9vbC5TZXRRQkFiaWxpdGllcyhjdXJyZW50VGVhbSxwb3MsdmFsc1swXSx2YWxzWzFdLHZhbHNbMl0sdmFsc1szXSx2YWxzWzRdLHZhbHNbNV0sdmFsc1s2XSx2YWxzWzddKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBjb3VsZCBub3Qgc2V0IGFiaWxpdHkgZGF0YSBmb3IgezB9IHsxfSxcIixjdXJyZW50VGVhbSxwb3MpKTtcclxuXHRcdFx0aWYoZmFjZSA+IC0xKVxyXG5cdFx0XHRcdHRvb2wuU2V0RmFjZShjdXJyZW50VGVhbSxwb3MsZmFjZSk7XHJcblx0XHRcdGlmKHNpbVZhbHMgIT0gbnVsbClcclxuXHRcdFx0XHR0b29sLlNldFFCU2ltRGF0YShjdXJyZW50VGVhbSxwb3Msc2ltVmFscyk7XHJcblx0XHRcdGVsc2UgaWYoc2hvd1NpbUVycm9yKVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBzaW0gZGF0YSBzcGVjaWZpZWQuXCIsbGluZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTZXRTa2lsbFBsYXllcihzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIGZuYW1lID0gR2V0Rmlyc3ROYW1lKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgbG5hbWUgPSBHZXRMYXN0TmFtZShsaW5lKTtcclxuXHRcdFx0c3RyaW5nIHBvcyA9IEdldFBvc2l0aW9uKGxpbmUpO1xyXG5cdFx0XHRpbnQgZmFjZSA9IEdldEZhY2UobGluZSk7XHJcblx0XHRcdGludCBqZXJzZXlOdW1iZXIgPSBHZXRKZXJzZXlOdW1iZXIobGluZSk7Ly93aWxsIGJlIGluIGhleCwgbm90IGJhc2UgMTBcclxuXHRcdFx0dG9vbC5TZXRGYWNlKGN1cnJlbnRUZWFtLHBvcyxmYWNlKTtcclxuXHRcdFx0dG9vbC5JbnNlcnRQbGF5ZXIoY3VycmVudFRlYW0scG9zLGZuYW1lLGxuYW1lLChieXRlKWplcnNleU51bWJlcik7XHJcblxyXG5cdFx0XHRpbnRbXSB2YWxzID0gR2V0SW50cyhsaW5lKTtcclxuXHRcdFx0aW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSk7XHJcblx0XHRcdGlmKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDUpXHJcblx0XHRcdFx0dG9vbC5TZXRTa2lsbFBsYXllckFiaWxpdGllcyhjdXJyZW50VGVhbSxwb3MsdmFsc1swXSx2YWxzWzFdLHZhbHNbMl0sdmFsc1szXSx2YWxzWzRdLHZhbHNbNV0pO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIldhcm5pbmchIE9uIGxpbmUgJ3swfScuIE5vIHBsYXllciBkYXRhIHNwZWNpZmllZC5cIixsaW5lKSk7XHJcblx0XHRcdGlmKHNpbVZhbHMhPSBudWxsJiYgc2ltVmFscy5MZW5ndGggPiAzKVxyXG5cdFx0XHRcdHRvb2wuU2V0U2tpbGxTaW1EYXRhKGN1cnJlbnRUZWFtLHBvcyxzaW1WYWxzKTtcclxuXHRcdFx0ZWxzZSAgaWYoc2hvd1NpbUVycm9yKVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBzaW0gZGF0YSBzcGVjaWZpZWQuXCIsbGluZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTZXRPTFBsYXllcihzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIGZuYW1lID0gR2V0Rmlyc3ROYW1lKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgbG5hbWUgPSBHZXRMYXN0TmFtZShsaW5lKTtcclxuXHRcdFx0c3RyaW5nIHBvcyA9IEdldFBvc2l0aW9uKGxpbmUpO1xyXG5cdFx0XHRpbnQgZmFjZSA9IEdldEZhY2UobGluZSk7XHJcblx0XHRcdGludCBqZXJzZXlOdW1iZXIgPSBHZXRKZXJzZXlOdW1iZXIobGluZSk7Ly93aWxsIGJlIGluIGhleCwgbm90IGJhc2UgMTBcclxuXHRcdFx0aW50W10gdmFscyA9IEdldEludHMobGluZSk7XHJcblx0XHRcdFxyXG5cdFx0XHR0b29sLlNldEZhY2UoY3VycmVudFRlYW0scG9zLGZhY2UpO1xyXG5cdFx0XHR0b29sLkluc2VydFBsYXllcihjdXJyZW50VGVhbSxwb3MsZm5hbWUsbG5hbWUsKGJ5dGUpamVyc2V5TnVtYmVyKTtcclxuXHJcblx0XHRcdGlmKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDMpXHJcblx0XHRcdFx0dG9vbC5TZXRPTFBsYXllckFiaWxpdGllcyhjdXJyZW50VGVhbSxwb3MsdmFsc1swXSx2YWxzWzFdLHZhbHNbMl0sdmFsc1szXSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2FybmluZyEgT24gbGluZSAnezB9Jy4gTm8gcGxheWVyIGRhdGEgc3BlY2lmaWVkLlwiLGxpbmUpKTtcclxuXHRcdFx0XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBTZXREZWZlbnNpdmVQbGF5ZXIoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyBmbmFtZSA9IEdldEZpcnN0TmFtZShsaW5lKTtcclxuXHRcdFx0c3RyaW5nIGxuYW1lID0gR2V0TGFzdE5hbWUobGluZSk7XHJcblx0XHRcdHN0cmluZyBwb3MgPSBHZXRQb3NpdGlvbihsaW5lKTtcclxuXHRcdFx0aW50IGZhY2UgPSBHZXRGYWNlKGxpbmUpO1xyXG5cdFx0XHRpbnQgamVyc2V5TnVtYmVyID0gR2V0SmVyc2V5TnVtYmVyKGxpbmUpOy8vd2lsbCBiZSBpbiBoZXgsIG5vdCBiYXNlIDEwXHJcblx0XHRcdGludFtdIHZhbHMgPSBHZXRJbnRzKGxpbmUpO1xyXG5cdFx0XHRpbnRbXSBzaW1WYWxzID0gR2V0U2ltVmFscyhsaW5lKTtcclxuXHRcdFx0XHJcblx0XHRcdHRvb2wuU2V0RmFjZShjdXJyZW50VGVhbSxwb3MsZmFjZSk7XHJcblx0XHRcdHRvb2wuSW5zZXJ0UGxheWVyKGN1cnJlbnRUZWFtLHBvcyxmbmFtZSxsbmFtZSwoYnl0ZSlqZXJzZXlOdW1iZXIpO1xyXG5cclxuXHRcdFx0aWYodmFscyAhPSBudWxsICYmIHZhbHMuTGVuZ3RoID4gNSlcclxuXHRcdFx0XHR0b29sLlNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyhjdXJyZW50VGVhbSxwb3MsdmFsc1swXSx2YWxzWzFdLHZhbHNbMl0sdmFsc1szXSx2YWxzWzRdLHZhbHNbNV0pO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIldhcm5pbmchIE9uIGxpbmUgJ3swfScuIEludmFsaWQgcGxheWVyIGF0dHJpYnV0ZXMuXCIsbGluZSkpO1xyXG5cdFx0XHRpZihzaW1WYWxzICE9IG51bGwgJiYgc2ltVmFscy5MZW5ndGggPiAxKVxyXG5cdFx0XHRcdHRvb2wuU2V0RGVmZW5zaXZlU2ltRGF0YShjdXJyZW50VGVhbSxwb3Msc2ltVmFscyk7XHJcblx0XHRcdGVsc2UgaWYoc2hvd1NpbUVycm9yKVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBzaW0gZGF0YSBzcGVjaWZpZWQuXCIsbGluZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTZXRLaWNrUGxheWVyKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgZm5hbWUgPSBHZXRGaXJzdE5hbWUobGluZSk7XHJcblx0XHRcdHN0cmluZyBsbmFtZSA9IEdldExhc3ROYW1lKGxpbmUpO1xyXG5cdFx0XHRzdHJpbmcgcG9zID0gR2V0UG9zaXRpb24obGluZSk7XHJcblx0XHRcdGludCBmYWNlID0gR2V0RmFjZShsaW5lKTtcclxuXHRcdFx0aW50IGplcnNleU51bWJlciA9IEdldEplcnNleU51bWJlcihsaW5lKTsvL3dpbGwgYmUgaW4gaGV4LCBub3QgYmFzZSAxMFxyXG5cdFx0XHRpbnRbXSB2YWxzID0gR2V0SW50cyhsaW5lKTtcclxuXHRcdFx0aW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSk7XHJcblx0XHRcdFxyXG5cdFx0XHR0b29sLlNldEZhY2UoY3VycmVudFRlYW0scG9zLGZhY2UpO1xyXG5cdFx0XHR0b29sLkluc2VydFBsYXllcihjdXJyZW50VGVhbSxwb3MsZm5hbWUsbG5hbWUsKGJ5dGUpamVyc2V5TnVtYmVyKTtcclxuXHRcdFx0aWYodmFscyAhPSBudWxsICYmIHZhbHMuTGVuZ3RoID4gNSlcclxuXHRcdFx0XHR0b29sLlNldEtpY2tQbGF5ZXJBYmlsaXRpZXMoY3VycmVudFRlYW0scG9zLHZhbHNbMF0sdmFsc1sxXSx2YWxzWzJdLHZhbHNbM10sdmFsc1s0XSx2YWxzWzVdKTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBwbGF5ZXIgZGF0YSBzcGVjaWZpZWQuXCIsbGluZSkpO1xyXG5cdFx0XHRpZihzaW1WYWxzICE9IG51bGwgJiYgcG9zID09IFwiUFwiKVxyXG5cdFx0XHRcdHRvb2wuU2V0UHVudGluZ1NpbURhdGEoY3VycmVudFRlYW0sIHNpbVZhbHNbMF0pO1xyXG5cdFx0XHRlbHNlIGlmKHNpbVZhbHMgIT0gbnVsbCAmJiBwb3MgPT0gXCJLXCIpXHJcblx0XHRcdFx0dG9vbC5TZXRLaWNraW5nU2ltRGF0YShjdXJyZW50VGVhbSwgc2ltVmFsc1swXSk7XHJcblx0XHRcdGVsc2UgaWYoc2hvd1NpbUVycm9yKVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBzaW0gZGF0YSBzcGVjaWZpZWQuXCIsbGluZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgc3RhdGljIFJlZ2V4IEtpY2tSZXRNYW4gPSBuZXcgUmVnZXgoXCJeS1JcXFxccyosXFxcXHMqKFtBLVoxLTRdKykkXCIpO1xyXG5cdFx0cHJpdmF0ZSBzdGF0aWMgUmVnZXggUHVudFJldE1hbiA9IG5ldyBSZWdleChcIl5QUlxcXFxzKixcXFxccyooW0EtWjEtNF0rKSRcIik7XHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIFNldEtpY2tSZXR1cm5NYW4oc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdE1hdGNoIG0gPSBLaWNrUmV0TWFuLk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRpZiggbSAhPSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgcG9zID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHRpZiggdG9vbC5Jc1ZhbGlkUG9zaXRpb24oIHBvcyApIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0b29sLlNldEtpY2tSZXR1cm5lcihjdXJyZW50VGVhbSwgcG9zKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SIHdpdGggbGluZSAnezB9Jy5cIixsaW5lKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgU2V0UHVudFJldHVybk1hbihzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0TWF0Y2ggbSA9IFB1bnRSZXRNYW4uTWF0Y2gobGluZSk7XHJcblx0XHRcdGlmKCBtICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0cmluZyBwb3MgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHRcdGlmKCB0b29sLklzVmFsaWRQb3NpdGlvbiggcG9zICkgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRvb2wuU2V0UHVudFJldHVybmVyKGN1cnJlbnRUZWFtLCBwb3MpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1Igd2l0aCBsaW5lICd7MH0nLlwiLGxpbmUpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBFeHBlY3QgbGluZSBsaWtlICcgICBbOCwgOSwgMCBdJ1xyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImlucHV0XCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgaW50W10gR2V0U2ltVmFscyhzdHJpbmcgaW5wdXQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBpbnB1dCAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0cmluZyBzdHVmZiA9IGlucHV0LlRyaW0oKTtcclxuXHRcdFx0XHRpbnQgc3RhcnQgPSBzdHVmZi5JbmRleE9mKFwiW1wiKTtcclxuXHRcdFx0XHRpbnQgZW5kID0gc3R1ZmYuSW5kZXhPZihcIl1cIik7XHJcblx0XHRcdFx0aWYoc3RhcnQgPiAtMSAmJiBlbmQgPiAtMSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdHVmZiA9IHN0dWZmLlN1YnN0cmluZyhzdGFydCsxLGVuZC1zdGFydC0xKTtcclxuXHRcdFx0XHRcdHJldHVybiBHZXRJbnRzKHN0dWZmKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50W10gR2V0SW50cyhzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gR2V0SW50cyhpbnB1dCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnRbXSBHZXRJbnRzKHN0cmluZyBpbnB1dCwgYm9vbCB1c2VIZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9TeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMgbnMgPSBTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuTm9uZTtcclxuICAgICAgICAgICAgICAgIC8vaWYgKHVzZUhleClcclxuICAgICAgICAgICAgICAgIC8vICAgIG5zID0gU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyO1xyXG4gICAgICAgICAgICAgICAgaW50IHBvdW5kID0gaW5wdXQuSW5kZXhPZihcIiNcIik7XHJcbiAgICAgICAgICAgICAgICBpbnQgYnJhY2UgPSBpbnB1dC5JbmRleE9mKFwiW1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3VuZCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuU3Vic3RyaW5nKHBvdW5kICsgMyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJhY2UgPiAtMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBicmFjZSA9IGlucHV0LkluZGV4T2YoXCJbXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuU3Vic3RyaW5nKDAsIGJyYWNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoYXJbXSBzZXBzID0gbmV3IGNoYXJbXSB7ICcgJywgJywnLCAnXFx0JyB9O1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nW10gbnVtcyA9IGlucHV0LlNwbGl0KHNlcHMpO1xyXG4gICAgICAgICAgICAgICAgaW50IGosIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1zLkxlbmd0aDsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1zW2pdLkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBpbnRbXSByZXN1bHQgPSBuZXcgaW50W2NvdW50XTtcclxuICAgICAgICAgICAgICAgIGogPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0cmluZyBzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGludCBpID0gMDtcclxuICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1zLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG51bXNbaV0gYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAhPSBudWxsICYmIHMuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZUhleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaisrXSA9IFN0YXRpY1V0aWxzLlBhcnNlSW50RnJvbUhleFN0cmluZyhzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaisrXSA9IEludDMyLlBhcnNlKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGVycm9yID0gU3RyaW5nLkZvcm1hdChcIkVycm9yIHdpdGggaW5wdXQgJ3swfScsIHsxfSwgd2FzIGplcnNleSBudW1iZXIgc3BlY2lmaWVkP1wiLCBpbnB1dCwgZS5NZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgaW50IEdldEplcnNleU51bWJlcihzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRSZWdleCBqZXJzZXlSZWdleCA9IG5ldyBSZWdleChcIiMoWzAtOV0rKVwiKTtcclxuXHRcdFx0c3RyaW5nIG51bSA9IGplcnNleVJlZ2V4Lk1hdGNoKGxpbmUpLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gU3RhdGljVXRpbHMuUGFyc2VJbnRGcm9tSGV4U3RyaW5nKG51bSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2h7cmV0ID0gLTE7IH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIGludCBHZXRGYWNlKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdFJlZ2V4IGhleFJlZ2V4ID0gbmV3IFJlZ2V4KFwiMFt4WF0oW0EtRmEtZjAtOV0rKVwiKTtcclxuXHRcdFx0TWF0Y2ggbSA9IGhleFJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG5cdFx0XHRpZiggbSAhPSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgbnVtID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHR0cnlcclxuXHRcdFx0XHR7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gU3RhdGljVXRpbHMuUGFyc2VJbnRGcm9tSGV4U3RyaW5nKG51bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblx0XHRcdFx0Y2F0Y2hcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSAtMTsgXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRmFjZSBFUlJPUiBsaW5lICd7MH0nXCIsbGluZSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFBvc2l0aW9uKHN0cmluZyBsaW5lKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcG9zID0gcG9zTmFtZUZhY2VSZWdleC5NYXRjaChsaW5lKS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0cmV0dXJuIHBvcztcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRMYXN0TmFtZShzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0TWF0Y2ggbSA9IHBvc05hbWVGYWNlUmVnZXguTWF0Y2gobGluZSk7XHJcblx0XHRcdGlmKG0gIT0gTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuXHRcdFx0XHRpbnQgaW5kZXggPSBuYW1lLkxhc3RJbmRleE9mKFwiIFwiKTtcclxuXHRcdFx0XHRyZXQgPSBuYW1lLlN1YnN0cmluZyhpbmRleCsxKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldEZpcnN0TmFtZShzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0TWF0Y2ggbSA9IHBvc05hbWVGYWNlUmVnZXguTWF0Y2gobGluZSk7XHJcblx0XHRcdGlmKG0gIT0gTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuXHRcdFx0XHRpbnQgaW5kZXggPSBuYW1lLkxhc3RJbmRleE9mKFwiIFwiKTtcclxuXHRcdFx0XHRpZiggaW5kZXggPiAtMSAmJiBpbmRleCA8IG5hbWUuTGVuZ3RoIClcclxuXHRcdFx0XHRcdHJldCA9IG5hbWUuU3Vic3RyaW5nKDAsIGluZGV4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgc3RhdGljIFJlZ2V4IG1GaXJzdE5hbWVSZWdleCA9IG5ldyBSZWdleChcIihbYS16LiBdKylcIik7XHJcbiAgICAgICAgc3RhdGljIFJlZ2V4IG1MYXN0TmFtZVJlZ2V4ID0gbmV3IFJlZ2V4KFwiIChbQS1aLiBdKylcIik7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldExhc3ROYW1lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldCA9IFwiXCI7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBwb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIG0yID0gbUxhc3ROYW1lUmVnZXguTWF0Y2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobTIgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gbTIuR3JvdXBzWzFdLlRvU3RyaW5nKCkuVHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLldyaXRlRXJyb3IoXCJFUlJPUiBHZXR0aW5nIGxhc3QgbmFtZSBmb3I+XCIgKyBsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0Rmlyc3ROYW1lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldCA9IFwiXCI7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBwb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIG0yID0gbUZpcnN0TmFtZVJlZ2V4Lk1hdGNoKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0yICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IG0yLkdyb3Vwc1sxXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5Xcml0ZUVycm9yKFwiRVJST1IgR2V0dGluZyBmaXJzdCBuYW1lIGZvcj5cIiArIGxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfSovXHJcblxyXG5cdFx0XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiYnl0ZVN0cmluZ1wiPlN0cmluZyBpbiB0aGUgZm9ybWF0IG9mIGEgaGV4IHN0cmluZyAoMDEyMzQ1Njc4OUFCQ0RFRiksIG11c3QgaGF2ZVxyXG5cdFx0Ly8vIGFuIGV2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMuPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz5UaGUgYnl0ZXMuPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0YXRpYyBieXRlW10gR2V0Qnl0ZXNGcm9tU3RyaW5nKHN0cmluZyBieXRlU3RyaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlW10gcmV0ID0gbnVsbDtcclxuXHRcdFx0Ynl0ZVtdIHRtcCA9IG51bGw7XHJcblx0XHRcdHN0cmluZyBiO1xyXG5cdFx0XHRpZiggYnl0ZVN0cmluZyE9IG51bGwgJiYgYnl0ZVN0cmluZy5MZW5ndGggPiAxICYmIChieXRlU3RyaW5nLkxlbmd0aCAlIDIpID09IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0bXAgPSBuZXcgYnl0ZVtieXRlU3RyaW5nLkxlbmd0aC8yXTtcclxuXHRcdFx0XHRmb3IoaW50IGkgPTA7IGkgPCB0bXAuTGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YiA9IGJ5dGVTdHJpbmcuU3Vic3RyaW5nKGkqMiwyKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBbaV0gPSBTdGF0aWNVdGlscy5QYXJzZUJ5dGVGcm9tSGV4U3RyaW5nKGIpOy8vIGJ5dGUuUGFyc2UoYiwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0ID0gdG1wO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBzdHJpbmcgR2V0SG9tZVVuaWZvcm1Db2xvclN0cmluZyhzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0SW5pdCgpO1xyXG5cdFx0XHRzdHJpbmcgdG1wID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRNYXRjaCBtYXRjaCA9IGhvbWVSZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0aWYoIG1hdGNoICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRtcCA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0fVxyXG5cdFx0cHVibGljIHN0YXRpYyBzdHJpbmcgR2V0QXdheVVuaWZvcm1Db2xvclN0cmluZyhzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0SW5pdCgpO1xyXG5cdFx0XHRzdHJpbmcgdG1wID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRNYXRjaCBtYXRjaCA9IGF3YXlSZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0aWYoIG1hdGNoICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRtcCA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0fVxyXG5cdFx0cHVibGljIHN0YXRpYyBzdHJpbmcgR2V0Q29uZkNoYW1wQ29sb3JTdHJpbmcoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdEluaXQoKTtcclxuXHRcdFx0c3RyaW5nIHRtcCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0TWF0Y2ggbWF0Y2ggPSBjb25mQ2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0aWYoIG1hdGNoICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRtcCA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0fVxyXG5cdFx0cHVibGljIHN0YXRpYyBzdHJpbmcgR2V0RGl2Q2hhbXBDb2xvclN0cmluZyhzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0SW5pdCgpO1xyXG5cdFx0XHRzdHJpbmcgdG1wID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRNYXRjaCBtYXRjaCA9IGRpdkNoYW1wUmVnZXguTWF0Y2gobGluZSk7XHJcblx0XHRcdGlmKCBtYXRjaCAhPSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0bXAgPSBtYXRjaC5Hcm91cHNbMV0uVmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRtcDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRVbmlmb3JtVXNhZ2VTdHJpbmcoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdEluaXQoKTtcclxuXHRcdFx0c3RyaW5nIHRtcCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0TWF0Y2ggbWF0Y2ggPSB1bmlmb3JtVXNhZ2VSZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0aWYoIG1hdGNoICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRtcCA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdG1wO1xyXG5cdFx0fVxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIHRleHQgc3RyaW5nIHBhc3NlZCwgd2l0aG91dCB0aHIgdHJhaWxpbmcgY29tbWFzLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRleHRcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBzdGF0aWMgc3RyaW5nIERlbGV0ZVRyYWlsaW5nQ29tbWFzKHN0cmluZyB0ZXh0KVxyXG5cdFx0e1xyXG5cdFx0XHRSZWdleCBycyA9IG5ldyBSZWdleChcIiwrXFxuXCIpO1xyXG5cdFx0XHRSZWdleCBycnMgPSBuZXcgUmVnZXgoXCIsKyRcIik7XHJcblx0XHRcdHN0cmluZyByZXQgPSBycy5SZXBsYWNlKHRleHQsXCJcXG5cIik7XHJcblx0XHRcdHJldCA9IHJycy5SZXBsYWNlKHJldCxcIlwiKTtcclxuXHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcblxyXG5uYW1lc3BhY2UgVFNCVG9vbFxyXG57XHJcblx0Ly8vIDxzdW1tYXJ5PlxyXG5cdC8vLyBTdW1tYXJ5IGRlc2NyaXB0aW9uIGZvciBTaW1TdHVmZi5cclxuXHQvLy8gPC9zdW1tYXJ5PlxyXG5cdHB1YmxpYyBjbGFzcyBTaW1TdHVmZlxyXG5cdHtcclxuXHRcdHB1YmxpYyBjb25zdCBpbnQgRlJPTlRfN19TSU1fUE9JTlRfUE9PTCAgICA9IDIwMDtcclxuXHRcdHB1YmxpYyBjb25zdCBpbnQgRlJPTlRfN19NSU5fU0lNX1BBU1NfUlVTSCA9IDEzO1xyXG5cclxuXHRcdHB1YmxpYyBTaW1TdHVmZigpXHJcblx0XHR7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIFNpbVBvY2tldCB2YWx1ZSB3aGVuIHBhc3NlZCB0aGUgUUInc1xyXG5cdFx0Ly8vIE1TLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cIk1TXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgaW50IFNpbVBvY2tldChpbnQgTVMpXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAwO1xyXG5cdFx0XHRzd2l0Y2goIE1TIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNhc2UgMTAwOiBjYXNlIDk0OiBjYXNlIDg4OiBjYXNlIDgxOlxyXG5cdFx0XHRcdGNhc2UgNzU6ICBjYXNlIDY5OiBjYXNlIDYzOiBjYXNlIDU2OiBcclxuXHRcdFx0XHRjYXNlIDUwOlxyXG5cdFx0XHRcdFx0cmV0ID0gMDtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNDQ6IGNhc2UgMzg6XHJcblx0XHRcdFx0XHRyZXQgPSAxO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAzMTogY2FzZSAyNTpcclxuXHRcdFx0XHRcdHJldCA9IDI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0cmV0ID0gMztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGludCBTaW1QYXNzKCBpbnQgUEMsIGludCBBUEIsIGludCBQUyApXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAwO1xyXG5cclxuXHRcdFx0aWYoIFBDID4gNzUgKVxyXG5cdFx0XHRcdHJldCA9IDEzO1xyXG5cdFx0XHRlbHNlIGlmKCBQQyA+IDQ0IClcclxuXHRcdFx0XHRyZXQgPSAoIFBTICsgUEMgKyBBUEIgKSAvIDE3O1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0ID0gKFBDICsgQVBCICkgLyAxNDtcclxuXHRcdFx0aWYoIHJldCA+IDE1KVxyXG5cdFx0XHRcdHJldCA9IDE1O1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBpbnQgUWJTaW1SdW4oIGludCBNUyApXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSBNUyAvIDU7XHJcblx0XHRcdGlmKCByZXQgPiAxNSlcclxuXHRcdFx0XHRyZXQgPSAxNTtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaW50IFNpbUtpY2tSZXQoaW50IE1TIClcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IE1TIC8gNDtcclxuXHRcdFx0aWYoIHJldCA+IDE1KVxyXG5cdFx0XHRcdHJldCA9IDE1O1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBpbnQgU2ltUHVudFJldChpbnQgTVMgKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gTVMgLyA0O1xyXG5cdFx0XHRpZiggcmV0ID4gMTUpXHJcblx0XHRcdFx0cmV0ID0gMTU7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGludCBSYlNpbUNhdGNoKGludCBSRUMgKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gMDtcclxuXHRcdFx0aWYoIFJFQyAgPiA0NCApXHJcblx0XHRcdFx0cmV0ID0gUkVDIC8gNjtcclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRyZXQgPSBSRUMgLyAxMDtcclxuXHJcblx0XHRcdGlmKCByZXQgPiAxNSlcclxuXHRcdFx0XHRyZXQgPSAxNTtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaW50IFJiU2ltUnVzaCggaW50IE1TLCBpbnQgSFAsIGludCBCQywgaW50IFJTKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gMDtcclxuXHRcdFx0aWYoIEhQICA8IDUwIClcclxuXHRcdFx0XHRyZXQgPSAoICggTVMgKyBCQyApIC8gMTEpIC0gMjtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldCA9IChSUyArIEhQKSAvIDE1O1xyXG5cdFx0XHRpZiggcmV0ID4gMTUpXHJcblx0XHRcdFx0cmV0ID0gMTU7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGludCBXclRlU2ltQ2F0Y2goaW50IFJFQyApXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSBSRUMgLzY7XHJcblx0XHRcdGlmKCByZXQgPiAxNSlcclxuXHRcdFx0XHRyZXQgPSAxNTtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaW50IFdyVGVTaW1SdXNoKCApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBpbnQgUEtTaW1LaWNrKGludCBLQSwgaW50IEFLQiApXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAoIEtBICsoQUtCLzIpKSAvIDExO1xyXG5cdFx0XHRpZiggcmV0ID4gMTUpXHJcblx0XHRcdFx0cmV0ID0gMTU7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBVc2UgUEkgXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicm9sYkludHNcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicmlsYkludHNcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGlsYkludHNcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibG9sYkludHNcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicmNiSW50c1wiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJsY2JJbnRzXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImZzSW50c1wiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJzc0ludHNcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBpbnRbXSBHZXRTaW1QYXNzRGVmZW5zZShcclxuXHRcdFx0aW50IHJvbGJJbnRzLCBpbnQgcmlsYkludHMsIGludCBsaWxiSW50cywgaW50IGxvbGJJbnRzLFxyXG5cdFx0XHRpbnQgcmNiSW50cywgIGludCBsY2JJbnRzLCAgaW50IGZzSW50cywgICBpbnQgc3NJbnRzICAgKVxyXG5cdFx0e1xyXG5cdFx0XHRkb3VibGUgdG90YWxJbnRzID0gcm9sYkludHMgKyByaWxiSW50cyArIGxpbGJJbnRzICsgbG9sYkludHMgKyByY2JJbnRzICsgbGNiSW50cyArIGZzSW50cyArc3NJbnRzO1xyXG5cdFx0XHRkb3VibGUgdG90YWxTaW1Qb2ludHMgPSAyNTQ7IFxyXG5cdFx0XHRpbnQgcm9sYlBvaW50cywgcmlsYlBvaW50cywgbGlsYlBvaW50cywgbG9sYlBvaW50cywgcmNiUG9pbnRzLCBsY2JQb2ludHMsIGZzUG9pbnRzLCBzc1BvaW50cztcclxuXHJcblx0XHRcdHJvbGJQb2ludHMgICA9IChpbnQpKChyb2xiSW50cyAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdHJpbGJQb2ludHMgICA9IChpbnQpKChyaWxiSW50cyAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdC8vbGlsYlBvaW50cyA9IChpbnQpKChsaWxiSW50cyAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdGxvbGJQb2ludHMgICA9IChpbnQpKChsb2xiSW50cyAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdHJjYlBvaW50cyAgICA9IChpbnQpKChyY2JJbnRzICAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdGxjYlBvaW50cyAgICA9IChpbnQpKChsY2JJbnRzICAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdGZzUG9pbnRzICAgICA9IChpbnQpKChmc0ludHMgICAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblx0XHRcdHNzUG9pbnRzICAgICA9IChpbnQpKChzc0ludHMgICAvIHRvdGFsSW50cyApKiB0b3RhbFNpbVBvaW50cyk7XHJcblxyXG5cdFx0XHRsaWxiUG9pbnRzID0gMSArIChpbnQpKHRvdGFsU2ltUG9pbnRzIFxyXG5cdFx0XHRcdC0gXHJcblx0XHRcdFx0KHJjYlBvaW50cyArIGxjYlBvaW50cyArIGZzUG9pbnRzICsgcm9sYlBvaW50cyArIHNzUG9pbnRzICtcclxuXHRcdFx0XHRyaWxiUG9pbnRzICsgIGxvbGJQb2ludHMpKTtcclxuXHJcblx0XHRcdGludCBbXSByZXQgPSBuZXcgaW50WzhdO1xyXG5cdFx0XHRyZXRbMF0gPSByb2xiUG9pbnRzO1xyXG5cdFx0XHRyZXRbMV0gPSByaWxiUG9pbnRzO1xyXG5cdFx0XHRyZXRbMl0gPSBsaWxiUG9pbnRzO1xyXG5cdFx0XHRyZXRbM10gPSBsb2xiUG9pbnRzO1xyXG5cdFx0XHRyZXRbNF0gPSByY2JQb2ludHM7XHJcblx0XHRcdHJldFs1XSA9IGxjYlBvaW50cztcclxuXHRcdFx0cmV0WzZdID0gZnNQb2ludHM7XHJcblx0XHRcdHJldFs3XSA9IHNzUG9pbnRzO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIHVzZSBIUCBpbnN0ZWFkIG9mIHNhY2tzXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicmVTYWNrc1wiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJudFNhY2tzXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImxlU2Fja3NcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicm9sYlNhY2tzXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInJpbGJTYWNrc1wiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJsaWxiU2Fja3NcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibG9sYlNhY2tzXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBsYXllckRhdGFcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuIFxyXG5cdFx0cHVibGljIGludFtdIEdldFNpbVBhc3NSdXNoKCBcclxuXHRcdFx0ZG91YmxlIHJlU2Fja3MsICAgZG91YmxlIG50U2Fja3MsICAgZG91YmxlIGxlU2Fja3MsICBkb3VibGUgcm9sYlNhY2tzLFxyXG5cdFx0XHRkb3VibGUgcmlsYlNhY2tzLCBkb3VibGUgbGlsYlNhY2tzLCBkb3VibGUgbG9sYlNhY2tzIClcclxuXHRcdHtcclxuXHRcdFx0ZG91YmxlIHRvdGFsU2Fja3MgPSByZVNhY2tzICsgbnRTYWNrcyArIGxlU2Fja3MgKyByb2xiU2Fja3MgKyByaWxiU2Fja3MgKyBsaWxiU2Fja3MgKyBsb2xiU2Fja3M7XHJcblx0XHRcdFxyXG5cdFx0XHRpbnQgdG90YWxTaW1Qb2ludHMgPSBGUk9OVF83X1NJTV9QT0lOVF9QT09MO1xyXG5cdFx0XHRpbnQgbWluUHIgICAgICAgICAgPSBGUk9OVF83X01JTl9TSU1fUEFTU19SVVNIO1xyXG5cclxuXHRcdFx0aW50IHJlUG9pbnRzLCBudFBvaW50cywgbGVQb2ludHMsIHJvbGJQb2ludHMsIHJpbGJQb2ludHMsIGxpbGJQb2ludHMsIGxvbGJQb2ludHMsIHNzUG9pbnRzO1xyXG5cdFx0XHRpbnQgZGJQb2ludHMgPSAwO1xyXG5cdFx0XHRpbnQgY2JQb2ludHMgPSAwO1xyXG5cdFx0XHRpbnQgZnJvbnQ3UG9pbnRzID0gMDtcclxuXHJcblx0XHRcdGlmKCB0b3RhbFNhY2tzID09IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmVQb2ludHM9IG50UG9pbnRzPSBsZVBvaW50cz0gcm9sYlBvaW50cz0gcmlsYlBvaW50cz0gbGlsYlBvaW50cz0gbG9sYlBvaW50cz0gc3NQb2ludHM9MzE7XHJcblx0XHRcdFx0cmVQb2ludHMgKz0gNDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZVBvaW50cyAgID0gTWF0aC5NYXgoIChpbnQpKChyZVNhY2tzICAgLyB0b3RhbFNhY2tzICkqIHRvdGFsU2ltUG9pbnRzKSwgbWluUHIpO1xyXG5cdFx0XHRcdGxlUG9pbnRzICAgPSBNYXRoLk1heCggKGludCkoKGxlU2Fja3MgICAvIHRvdGFsU2Fja3MgKSogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcblx0XHRcdFx0bnRQb2ludHMgICA9IE1hdGguTWF4KCAoaW50KSgobnRTYWNrcyAgIC8gdG90YWxTYWNrcyApKiB0b3RhbFNpbVBvaW50cyksIG1pblByKTtcclxuXHRcdFx0XHRyb2xiUG9pbnRzID0gTWF0aC5NYXgoIChpbnQpKChyb2xiU2Fja3MgLyB0b3RhbFNhY2tzICkqIHRvdGFsU2ltUG9pbnRzKSwgbWluUHIpO1xyXG5cdFx0XHRcdHJpbGJQb2ludHMgPSBNYXRoLk1heCggKGludCkoKHJpbGJTYWNrcyAvIHRvdGFsU2Fja3MgKSogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcblx0XHRcdFx0bGlsYlBvaW50cyA9IE1hdGguTWF4KCAoaW50KSgobGlsYlNhY2tzIC8gdG90YWxTYWNrcyApKiB0b3RhbFNpbVBvaW50cyksIG1pblByKTtcclxuXHRcdFx0XHRsb2xiUG9pbnRzID0gTWF0aC5NYXgoIChpbnQpKChsb2xiU2Fja3MgLyB0b3RhbFNhY2tzICkqIHRvdGFsU2ltUG9pbnRzKSwgbWluUHIpO1xyXG5cclxuXHRcdFx0XHRmcm9udDdQb2ludHMgPSByZVBvaW50cyArIGxlUG9pbnRzICsgbnRQb2ludHMgKyByb2xiUG9pbnRzICsgXHJcblx0XHRcdFx0XHRyaWxiUG9pbnRzICsgbGlsYlBvaW50cyArIGxvbGJQb2ludHM7XHJcblxyXG5cdFx0XHRcdGRiUG9pbnRzID0gKGludCkoMjU1IC0gZnJvbnQ3UG9pbnRzKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjYlBvaW50cyA9IGRiUG9pbnRzIC8gNCA7XHJcblx0XHRcdFx0c3NQb2ludHMgPSAoaW50KSAoMjU1IC0gKCgzKmNiUG9pbnRzKSArIGZyb250N1BvaW50cykgICk7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50W10gcmV0ID0gbmV3IGludFs4XTtcclxuXHRcdFx0XHJcblx0XHRcdHJldFswXSA9IHJlUG9pbnRzO1xyXG5cdFx0XHRyZXRbMV0gPSBudFBvaW50cztcclxuXHRcdFx0cmV0WzJdID0gbGVQb2ludHM7XHJcblx0XHRcdHJldFszXSA9IHJvbGJQb2ludHM7XHJcblx0XHRcdHJldFs0XSA9IHJpbGJQb2ludHM7XHJcblx0XHRcdHJldFs1XSA9IGxpbGJQb2ludHM7XHJcblx0XHRcdHJldFs2XSA9IGxvbGJQb2ludHM7XHJcblx0XHRcdHJldFs3XSA9IHNzUG9pbnRzO1xyXG5cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgaW50IEdldFNpbU9mZmVuc2UoaW50IFFCMVNpbVBhc3MsIFxyXG5cdFx0XHRpbnQgUkIxU2ltUnVzaCwgIGludCBSQjJTaW1SdXNoLCBcclxuXHRcdFx0aW50IFdSMVNpbUNhdGNoLCBpbnQgV1IyU2ltQ2F0Y2ggKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgZjEsIGYyO1xyXG5cdFx0XHRpZiggUkIxU2ltUnVzaCA+IFJCMlNpbVJ1c2ggKVxyXG5cdFx0XHRcdGYxID0gUkIxU2ltUnVzaDtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGYxID0gUkIyU2ltUnVzaDtcclxuXHRcdFx0aWYoIFdSMVNpbUNhdGNoID4gV1IyU2ltQ2F0Y2ggKVxyXG5cdFx0XHRcdGYyID0gV1IxU2ltQ2F0Y2g7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRmMiA9IFdSMlNpbUNhdGNoO1xyXG5cclxuXHRcdFx0aW50IHJldCA9IChRQjFTaW1QYXNzKyBmMSArIGYyKSAvIDM7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cclxuXHR9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cdC8vLyBOT1RFOiBieXRlIHN3YXBwaW5nIFxyXG5cdC8vLyAgICAweDEyMzQ1Njc4IFxyXG5cdC8vLyAgICAgICAgfFxyXG5cdC8vLyAgICAgICAgLS0tPiAweDc4NTYzNDEyXHJcblx0Ly8vXHJcblx0Ly8vIDxzdW1tYXJ5PlxyXG5cdC8vLyBTdW1tYXJ5IGRlc2NyaXB0aW9uIGZvciBTY2hlZHVsZUhlbHBlci5cclxuXHQvLy8gPC9zdW1tYXJ5PlxyXG5cdHB1YmxpYyBjbGFzcyBTTkVTX1NjaGVkdWxlSGVscGVyXHJcblx0e1xyXG5cdFx0cHJpdmF0ZSBjb25zdCBpbnQgd2Vla09uZVN0YXJ0TG9jID0gMTQzODY1NDsvLzB4MzI5ZGI7XHJcblx0XHRwcml2YXRlIGludFtdIHRlYW1HYW1lcztcclxuXHJcblx0XHRpbnQgd2Vlaywgd2Vla19nYW1lX2NvdW50LHRvdGFsX2dhbWVfY291bnQ7XHJcblx0XHQgcHJpdmF0ZSBSZWdleCBnYW1lUmVnZXggPSBuZXcgUmVnZXgoXCIoWzAtOWEtel0rKVxcXFxzK2F0XFxcXHMrKFswLTlhLXpdKylcIik7XHJcblxyXG5cclxuXHRcdHByaXZhdGUgaW50W10gZ2FtZXNQZXJXZWVrID0gXHJcblx0XHRcdHsxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNH07XHJcblx0XHRwcml2YXRlIGJ5dGVbXSBvdXRwdXRSb207XHJcblx0XHRcclxuXHRcdHB1YmxpYyBTTkVTX1NjaGVkdWxlSGVscGVyKGJ5dGVbXSBvdXRwdXRSb20pXHJcblx0XHR7XHJcblx0XHRcdHRoaXMub3V0cHV0Um9tID0gb3V0cHV0Um9tO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBDbG9zZVdlZWsoKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggd2VlayA+IC0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBpID0gd2Vla19nYW1lX2NvdW50O1xyXG5cdFx0XHRcdHdoaWxlKCBpIDwgMTQgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFNjaGVkdWxlR2FtZSgweGZmLDB4ZmYsd2VlaywgaSAvKndlZWtfZ2FtZV9jb3VudCovKTtcclxuXHRcdFx0XHRcdGkrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0d2VlaysrO1xyXG5cdFx0XHR0b3RhbF9nYW1lX2NvdW50ICs9IHdlZWtfZ2FtZV9jb3VudDtcclxuXHRcdFx0d2Vla19nYW1lX2NvdW50ID0gMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gQXBwbGllcyBhIHNjaGVkdWxlIHRvIHRoZSByb20uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGluZXNcIj50aGUgY29udGVudHMgb2YgdGhlIHNjaGVkdWxlIGZpbGUuPC9wYXJhbT5cclxuXHRcdHB1YmxpYyB2b2lkIEFwcGx5U2NoZWR1bGUoTGlzdDxzdHJpbmc+IGxpbmVzKVxyXG5cdFx0e1xyXG5cdFx0XHR3ZWVrICAgICAgICAgICAgID0gLTE7XHJcblx0XHRcdHdlZWtfZ2FtZV9jb3VudCAgPSAgMDtcclxuXHRcdFx0dG90YWxfZ2FtZV9jb3VudCA9ICAwO1xyXG5cclxuXHRcdFx0aWYoIFNORVNfVGVjbW9Ub29sLkFVVE9fQ09SUkVDVF9TQ0hFRFVMRSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsaW5lcyA9IEVuc3VyZTE4V2Vla3MobGluZXMpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzdHJpbmcgbGluZTtcclxuXHRcdFx0Zm9yKGludCBpID0wOyBpIDwgbGluZXMuQ291bnQ7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxpbmUgPSBsaW5lc1tpXS5Ub1N0cmluZygpLlRyaW0oKS5Ub0xvd2VyKCk7XHJcblx0XHRcdFx0aWYoIGxpbmUuU3RhcnRzV2l0aChcIiNcIikgfHwgbGluZS5MZW5ndGggPCAzKVxyXG5cdFx0XHRcdHsgLy8gZG8gbm90aGluZy5cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihsaW5lLlN0YXJ0c1dpdGgoXCJ3ZWVrXCIpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKHdlZWsgPiAxOClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IoXCJFcnJvciEgWW91IGNhbiBoYXZlIG9ubHkgMTggd2Vla3MgaW4gYSBzZWFzb24uXCIpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdENsb3NlV2VlaygpO1xyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuV3JpdGVFcnJvciggc3RyaW5nLkZvcm1hdChcIlNjaGVkdWxlaW5nIHswfVwiLGxpbmUpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTY2hlZHVsZUdhbWUobGluZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdENsb3NlV2VlaygpOy8vIGNsb3NlIHdlZWsgMThcclxuXHJcblx0XHRcdGlmKCB3ZWVrIDwgMTggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IoXCJXYXJuaW5nISBZb3UgZGlkbid0IHNjaGVkdWxlIGFsbCAxOCB3ZWVrcy4gVGhlIHNjaGVkdWxlIGNvdWxkIGJlIG1lc3NlZCB1cC5cIik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoIHRlYW1HYW1lcyAhPSBudWxsKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm9yKCBpbnQgaSA9IDA7ICBpIDwgdGVhbUdhbWVzLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKCB0ZWFtR2FtZXNbaV0gIT0gMTYgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XHRcdFwiV2FybmluZyEgVGhlIHswfSBoYXZlIHsxfSBnYW1lcyBzY2hlZHVsZWQuXCIsIFxyXG5cdFx0XHRcdFx0XHRcdFRlY21vVG9vbC5HZXRUZWFtRnJvbUluZGV4KGkpLCB0ZWFtR2FtZXNbaV0gKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEF0dGVtcHRzIHRvIHNjaGVkdWxlIGEgZ2FtZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJsaW5lXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz5UcnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUuPC9yZXR1cm5zPlxyXG5cdFx0cHJpdmF0ZSBib29sIFNjaGVkdWxlR2FtZShzdHJpbmcgbGluZSlcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCByZXQgPSBmYWxzZTtcclxuXHRcdFx0TWF0Y2ggbSA9IGdhbWVSZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0c3RyaW5nIGF3YXlUZWFtLCBob21lVGVhbTtcclxuXHJcblx0XHRcdGlmKCBtICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGF3YXlUZWFtID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHRob21lVGVhbSA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcblx0XHRcdFx0aWYoIHdlZWtfZ2FtZV9jb3VudCA+IDEzIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XHRcIkVycm9yISBXZWVrIHswfTogWW91IGNhbiBoYXZlIG5vIG1vcmUgdGhhbiAxNCBnYW1lcyBpbiBhIHdlZWsuXCIsd2VlaysxKSk7XHJcblx0XHRcdFx0XHRyZXQgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiggU2NoZWR1bGVHYW1lKGF3YXlUZWFtLCBob21lVGVhbSwgd2Vlaywgd2Vla19nYW1lX2NvdW50KSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0d2Vla19nYW1lX2NvdW50Kys7XHJcblx0XHRcdFx0XHRyZXQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiggdG90YWxfZ2FtZV9jb3VudCArIHdlZWtfZ2FtZV9jb3VudCA+IDIyNCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XCJXYXJuaW5nISBXZWVrIHswfTogVGhlcmUgYXJlIG1vcmUgdGhhbiAyMjQgZ2FtZXMgc2NoZWR1bGVkLlwiLHdlZWsrMSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJhd2F5VGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJob21lVGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ3ZWVrXCI+V2VlayBpcyAwLTE2ICgwID0gd2VlayAxKS48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiZ2FtZU9mV2Vla1wiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgYm9vbCBTY2hlZHVsZUdhbWUoc3RyaW5nIGF3YXlUZWFtLCBzdHJpbmcgaG9tZVRlYW0sIGludCB3ZWVrLCBpbnQgZ2FtZU9mV2VlaylcclxuXHRcdHtcclxuXHRcdFx0aW50IGF3YXlJbmRleCA9IFRlY21vVG9vbC5HZXRUZWFtSW5kZXgoYXdheVRlYW0pO1xyXG5cdFx0XHRpbnQgaG9tZUluZGV4ID0gVGVjbW9Ub29sLkdldFRlYW1JbmRleChob21lVGVhbSk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiggYXdheUluZGV4ID09IC0xIHx8IGhvbWVJbmRleCA9PSAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRXJyb3IhIFdlZWsgezJ9OiBHYW1lICd7MH0gYXQgezF9J1wiLCBhd2F5VGVhbSwgaG9tZVRlYW0sIHdlZWsrMSkpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoIGF3YXlJbmRleCA9PSBob21lSW5kZXggJiYgYXdheUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFwiV2FybmluZyEgV2VlayB7MH06IFRoZSB7MX0gYXJlIHNjaGVkdWxlZCB0byBwbGF5IGFnYWluc3QgdGhlbXNlbHZlcy5cIix3ZWVrKzEsIGF3YXlUZWFtICkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZih3ZWVrIDwgMCB8fCB3ZWVrID4gMTcpe1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXZWVrIHswfSBpcyBub3QgdmFsaWQuIFdlZWtzIHJhbmdlIDEgLSAxOC5cIix3ZWVrKzEpKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoIEdhbWVMb2NhdGlvbih3ZWVrLGdhbWVPZldlZWspIDwgMCApe1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHYW1lIHswfSBmb3Igd2VlayB7MX0gaXMgbm90IHZhbGlkLiBWYWxpZCBnYW1lcyBmb3Igd2VlayB7MX0gYXJlIDAtezJ9LlwiLFxyXG5cdFx0XHRcdFx0Z2FtZU9mV2Vlayx3ZWVrLGdhbWVzUGVyV2Vla1t3ZWVrXS0xKSk7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcInswfSBhdCB7MX1cIixhd2F5VGVhbSwgaG9tZVRlYW0pKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0U2NoZWR1bGVHYW1lKGF3YXlJbmRleCwgaG9tZUluZGV4LCB3ZWVrLCBnYW1lT2ZXZWVrKTtcclxuXHJcblx0XHRcdGlmKCBhd2F5VGVhbSA9PSBcIm51bGxcIiB8fCBob21lVGVhbSA9PSBcIm51bGxcIilcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTY2hlZHVsZUdhbWUoaW50IGF3YXlUZWFtSW5kZXgsIGludCBob21lVGVhbUluZGV4LCBpbnQgd2VlaywgaW50IGdhbWVPZldlZWspXHJcblx0XHR7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IEdhbWVMb2NhdGlvbih3ZWVrLGdhbWVPZldlZWspO1xyXG5cdFx0XHRpZihsb2NhdGlvbiA+IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dICAgPSAoYnl0ZSlhd2F5VGVhbUluZGV4O1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbisxXSA9IChieXRlKWhvbWVUZWFtSW5kZXg7XHJcblx0XHRcdFx0aWYoIGF3YXlUZWFtSW5kZXggPCAyOClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRJbmNyZW1lbnRUZWFtR2FtZXMoYXdheVRlYW1JbmRleCk7XHJcblx0XHRcdFx0XHRJbmNyZW1lbnRUZWFtR2FtZXMoaG9tZVRlYW1JbmRleCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8qZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIklOVkFMSUQgZ2FtZSBmb3IgUk9NLiBXZWVrPXswfSBHYW1lIG9mIFdlZWsgPXsxfVwiLFxyXG5cdFx0XHRcdFx0d2VlayxnYW1lT2ZXZWVrKTtcclxuXHRcdFx0fSovXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYSBzdHJpbmcgbGlrZSBcIjQ5ZXJzIGF0IGdpYW50c1wiLCBmb3IgYSB2YWxpZCB3ZWVrLCBnYW1lIG9mIHdlZWsgY29tYm8uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwid2Vla1wiPlRoZSB3ZWVrIGluIHF1ZXN0aW9uLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJnYW1lT2ZXZWVrXCI+VGhlIGdhbWUgdG8gZ2V0LjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+UmV0dXJucyBhIHN0cmluZyBsaWtlIFwiNDllcnMgYXQgZ2lhbnRzXCIsIGZvciBhIHZhbGlkIHdlZWssIGdhbWUgb2Ygd2VlayBjb21ibywgcmV0dXJucyBudWxsXHJcblx0XHQvLy8gdXBvbiBlcnJvci4gPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRHYW1lKGludCB3ZWVrLCBpbnQgZ2FtZU9mV2VlaylcclxuXHRcdHtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2FtZUxvY2F0aW9uKHdlZWssZ2FtZU9mV2Vlayk7XHJcblx0XHRcdGlmKGxvY2F0aW9uID09IC0xKVxyXG5cdFx0XHRcdHJldHVybiBudWxsIDtcclxuXHRcdFx0aW50IGF3YXlJbmRleCA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdGludCBob21lSW5kZXggPSBvdXRwdXRSb21bbG9jYXRpb24rMV07XHJcblx0XHRcdHN0cmluZyByZXQgPSBcIlwiO1xyXG5cclxuXHRcdFx0aWYoIGF3YXlJbmRleCA8IDI4IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldCA9IHN0cmluZy5Gb3JtYXQoXCJ7MH0gYXQgezF9XCIsIFxyXG5cdFx0XHRcdFx0VGVjbW9Ub29sLkdldFRlYW1Gcm9tSW5kZXgoYXdheUluZGV4KSwgXHJcblx0XHRcdFx0XHRUZWNtb1Rvb2wuR2V0VGVhbUZyb21JbmRleChob21lSW5kZXgpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIGEgd2VlayBmcm9tIHRoZSBzZWFzb24uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwid2Vla1wiPlRoZSB3ZWVrIHRvIGdldCBbMC0xNl0gKDA9IHdlZWsgMSkuPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFdlZWsoaW50IHdlZWspXHJcblx0XHR7XHJcblx0XHRcdGlmKHdlZWsgPCAwIHx8IHdlZWsgPiBnYW1lc1BlcldlZWsuTGVuZ3RoLTEpXHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigyMCoxNCk7XHJcblx0XHRcdHNiLkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiV0VFSyB7MH1cXG5cIix3ZWVrKzEpKTtcclxuXHJcblx0XHRcdHN0cmluZyBnYW1lO1xyXG5cclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IGdhbWVzUGVyV2Vla1t3ZWVrXTsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Z2FtZSA9IEdldEdhbWUod2VlayxpKTtcclxuXHRcdFx0XHRpZiggZ2FtZSAhPSBudWxsICYmIGdhbWUuTGVuZ3RoID4gMCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c2IuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJ7MH1cXG5cIixnYW1lKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHNiLkFwcGVuZChcIlxcblwiKTtcclxuXHRcdFx0cmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRTY2hlZHVsZSgpXHJcblx0XHR7XHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigyMCoxNCoxOCk7XHJcblx0XHRcdC8vc2IuQXBwZW5kKFwiU2NoZWR1bGVcXG5cXG5cIik7XHJcblx0XHRcdGZvcihpbnQgd2VlayA9IDA7IHdlZWsgPCBnYW1lc1BlcldlZWsuTGVuZ3RoOyB3ZWVrKyspXHJcblx0XHRcdFx0c2IuQXBwZW5kKEdldFdlZWsod2VlaykpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnQgR2FtZUxvY2F0aW9uKGludCB3ZWVrLCBpbnQgZ2FtZU9md2VlaylcclxuXHRcdHtcclxuXHRcdFx0aWYoIHdlZWsgPCAwIHx8IHdlZWsgPiBnYW1lc1BlcldlZWsuTGVuZ3RoLTEgfHwgXHJcblx0XHRcdFx0Z2FtZU9md2VlayA+IGdhbWVzUGVyV2Vla1t3ZWVrXSB8fCBnYW1lT2Z3ZWVrIDwgMClcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblxyXG5cdFx0XHRpbnQgb2Zmc2V0ID0gMDtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IHdlZWs7IGkrKylcclxuXHRcdFx0XHRvZmZzZXQgKz0gKGdhbWVzUGVyV2Vla1tpXSoyKTtcclxuXHJcblx0XHRcdG9mZnNldCArPSBnYW1lT2Z3ZWVrKjI7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHdlZWtPbmVTdGFydExvYysgb2Zmc2V0O1xyXG5cdFx0XHRyZXR1cm4gbG9jYXRpb247XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHByaXZhdGUgdm9pZCBJbmNyZW1lbnRUZWFtR2FtZXMoaW50IHRlYW1JbmRleClcclxuXHRcdHtcclxuXHRcdFx0aWYoIHRlYW1HYW1lcyA9PSBudWxsIClcclxuXHRcdFx0XHR0ZWFtR2FtZXMgPSBuZXcgaW50WzI4XTtcclxuXHRcdFx0Ly9Db25zb2xlLldyaXRlTGluZShcIkluY3JlbWVudFRlYW1HYW1lcyB0ZWFtIGluZGV4ID0gXCIrdGVhbUluZGV4KTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IHRlYW1HYW1lcy5MZW5ndGggKVxyXG5cdFx0XHRcdHRlYW1HYW1lc1t0ZWFtSW5kZXhdKys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgTGlzdDxzdHJpbmc+IEVuc3VyZTE4V2Vla3MoTGlzdDxzdHJpbmc+IGxpbmVzIClcclxuXHRcdHtcclxuXHJcblx0XHRcdGludCB3a3MgPSBDb3VudFdlZWtzKGxpbmVzKTtcclxuXHRcdFx0c3RyaW5nIGxpbmUxLCBsaW5lMjtcclxuXHRcdFx0Zm9yKCBpbnQgaSA9IGxpbmVzLkNvdW50LTI7IGkgPiAwOyBpLT0yIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxpbmUxID0gbGluZXNbaV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHRsaW5lMiA9IGxpbmVzW2krMV0uVG9TdHJpbmcoKTtcclxuXHRcdFx0XHRpZih3a3MgPiAxNylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiggbGluZTEuSW5kZXhPZihcImF0XCIpID4gLTEgJiYgbGluZTIuSW5kZXhPZihcImF0XCIpID4gLTEgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGxpbmVzLkluc2VydChpKzEsIFwiV0VFSyBcIik7XHJcblx0XHRcdFx0XHRpLS07XHJcblx0XHRcdFx0XHR3a3MrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vaWYoIE1haW5DbGFzcy5HVUlfTU9ERSApXHJcblx0XHRcdC8vXHRTaG93TGluZXMobGluZXMpO1xyXG5cdFx0XHRyZXR1cm4gbGluZXM7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnQgQ291bnRXZWVrcyhMaXN0PHN0cmluZz4gbGluZXMpXHJcblx0XHR7XHJcblx0XHRcdGludCBjb3VudCA9IDA7XHJcblx0XHRcdGZvcmVhY2goc3RyaW5nIGxpbmUgaW4gbGluZXMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZiggbGluZS5Ub0xvd2VyKCkuSW5kZXhPZihcIndlZWtcIikgPiAtMSlcclxuXHRcdFx0XHRcdGNvdW50Kys7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGNvdW50O1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5JTztcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG5cclxuI2lmICFCUklER0VfUFJPSkVDVFxyXG51c2luZyBTeXN0ZW0uRHJhd2luZztcclxudXNpbmcgU3lzdGVtLldpbmRvd3MuRm9ybXM7XHJcbnVzaW5nIFN5c3RlbS5EYXRhO1xyXG4jZW5kaWYgXHJcblxyXG5uYW1lc3BhY2UgVFNCVG9vbFxyXG57XHJcbiAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAvLy8gU3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgSSBkb24ndCB3YW50IHRvIGNsdXR0ZXIgdXAgb3RoZXIgZmlsZXMgd2l0aC5cclxuICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFN0YXRpY1V0aWxzXHJcbiAgICB7XHJcbiNpZiAhQlJJREdFX1BST0pFQ1RcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBDb250cm9sIGZvcm0gPSBudWxsO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIEltYWdlIEdldEltYWdlKHN0cmluZyBmaWxlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSW1hZ2UgcmV0ID0gbnVsbDtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChmb3JtID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybSA9IG5ldyBTZWFyY2hUZXh0Qm94KCk7XHJcbiAgICAgICAgICAgICAgICBTeXN0ZW0uSU8uU3RyZWFtIHMgPSBmb3JtLkdldFR5cGUoKS5Bc3NlbWJseS5HZXRNYW5pZmVzdFJlc291cmNlU3RyZWFtKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSBJbWFnZS5Gcm9tU3RyZWFtKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgTWVzc2FnZUJveC5TaG93KGUuTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgRGF0YVRhYmxlIHNEYXRhVGFibGUgPSBuZXcgRGF0YVRhYmxlKCk7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29tcHV0ZShzdHJpbmcgZm9ybXVsYSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByID0gc0RhdGFUYWJsZS5Db21wdXRlKGZvcm11bGEsIFwiXCIpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0RW1iZWRkZWRUZXh0RmlsZShzdHJpbmcgZmlsZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvcm0gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBmb3JtID0gbmV3IFNlYXJjaFRleHRCb3goKTtcclxuICAgICAgICAgICAgICAgIFN5c3RlbS5JTy5TdHJlYW0gcyA9IGZvcm0uR2V0VHlwZSgpLkFzc2VtYmx5LkdldE1hbmlmZXN0UmVzb3VyY2VTdHJlYW0oZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocyAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IG5ldyBTdHJlYW1SZWFkZXIocykuUmVhZFRvRW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNZXNzYWdlQm94LlNob3coZS5NZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBSZXR1cm5zIGZpbGVuYW1lIG9uICdPSycgbnVsbCBvbiAnY2FuY2VsJy5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImZpbHRlclwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRGaWxlTmFtZShzdHJpbmcgZmlsdGVyLCBib29sIHNhdmVGaWxlRGxnKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldCA9IG51bGw7XHJcbiAgICAgICAgICAgIEZpbGVEaWFsb2cgZGxnO1xyXG4gICAgICAgICAgICBpZiAoc2F2ZUZpbGVEbGcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRsZyA9IG5ldyBTYXZlRmlsZURpYWxvZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGxnID0gbmV3IE9wZW5GaWxlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGxnLkNoZWNrRmlsZUV4aXN0cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkbGcuUmVzdG9yZURpcmVjdG9yeSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vZGxnLkZpbHRlcj1cIm5lcyBmaWxlcyAoKi5uZXMpfCoubmVzXCI7XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXIgIT0gbnVsbCAmJiBmaWx0ZXIuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIGRsZy5GaWx0ZXIgPSBmaWx0ZXI7XHJcbiAgICAgICAgICAgIGlmIChkbGcuU2hvd0RpYWxvZygpID09IERpYWxvZ1Jlc3VsdC5PSylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gZGxnLkZpbGVOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4jZWxzZVxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gdGFrZXMgYSBtYXRoIHN0cmluZywgcmV0dXJucyBhIHZhbHVlXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJmb3JtdWxhXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIENvbXB1dGUoc3RyaW5nIGZvcm11bGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQnJpZGdlLlNjcmlwdC5FdmFsPHN0cmluZz4oZm9ybXVsYSk7XHJcbiAgICAgICAgfVxyXG4jZW5kaWZcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgUGFyc2VJbnRGcm9tSGV4U3RyaW5nKHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCByZXRWYWwgPVxyXG4jaWYgIUJSSURHRV9QUk9KRUNUXHJcbiAgICAgICAgICAgICAgICBJbnQzMi5QYXJzZShpbnB1dCwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuI2Vsc2UgXHJcbiAgICAgICAgICAgICAgICBJbnQzMi5QYXJzZShpbnB1dCwgMTYpO1xyXG4jZW5kaWYgXHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGxvbmcgUGFyc2VMb25nRnJvbUhleFN0cmluZyhzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsb25nIHJldFZhbCA9XHJcbiNpZiAhQlJJREdFX1BST0pFQ1RcclxuICAgICAgICAgICAgbG9uZy5QYXJzZShpbnB1dCwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuI2Vsc2VcclxuICAgICAgICAgICAgICAgIFBhcnNlSW50RnJvbUhleFN0cmluZyhpbnB1dCk7XHJcbiNlbmRpZiBcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBieXRlIFBhcnNlQnl0ZUZyb21IZXhTdHJpbmcoc3RyaW5nIGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYnl0ZSByZXRWYWwgPVxyXG4jaWYgIUJSSURHRV9QUk9KRUNUXHJcbiAgICAgICAgICAgIGJ5dGUuUGFyc2UoaW5wdXQsIFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcbiNlbHNlXHJcbiAgICAgICAgICAgICAgICBieXRlLlBhcnNlKGlucHV0LCAxNik7XHJcbiNlbmRpZiBcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgV3JpdGVFcnJvcihzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4jaWYgIUJSSURHRV9QUk9KRUNUXHJcbiAgICAgICAgICAgIENvbnNvbGUuRXJyb3IuV3JpdGVMaW5lKGlucHV0KTtcclxuI2Vsc2VcclxuICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoaW5wdXQpO1xyXG4jZW5kaWZcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyBhIHN0cmluZyBzdGFydGluZyB3aXRoICdFcnJvciEnIG9uIGVycm9yIGNvbmRpdGlvbiwgdGhlIGxvY2F0aW9ucyBvZiB0aGUgcmVwbGFjZW1lbnRzIG90aGVyd2lzZS5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInNlYXJjaFN0clwiPlRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInJlcGxhY2VTdHJcIj5UaGUgc3RyaW5nIHRvIHJlcGxhY2UgaXQgd2l0aC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cIm9jY3VyZW5jZVwiPlRoZSBvY2N1cmVuY2UgeW91IHdpc2ggdG8gcmVwbGFjZSwgLTEgZm9yIGFsbCBvY2N1cmVuY2VzLjwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgUmVwbGFjZVN0cmluZ0luUm9tKGJ5dGVbXSBvdXRwdXRSb20sIHN0cmluZyBzZWFyY2hTdHIsIHN0cmluZyByZXBsYWNlU3RyLCBpbnQgb2NjdXJlbmNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHJlcGxhY2VTdHIuTGVuZ3RoID4gc2VhcmNoU3RyLkxlbmd0aClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5Gb3JtYXQoXCJFcnJvciEgUmVwbGFjZSh7MH0sezF9KSwgY2Fubm90IHJlcGxhY2UgYSBzdHJpbmcgd2l0aCBhIGxvbmdlciBzdHJpbmdcIiwgc2VhcmNoU3RyLCByZXBsYWNlU3RyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAocmVwbGFjZVN0ci5MZW5ndGggPCBzZWFyY2hTdHIuTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZVN0ciA9IHJlcGxhY2VTdHIgKyBcIiBcIjtcclxuXHJcbiAgICAgICAgICAgIExpc3Q8bG9uZz4gbG9jcyA9IFN0YXRpY1V0aWxzLkZpbmRTdHJpbmdJbkZpbGUoc2VhcmNoU3RyLCBvdXRwdXRSb20sIDAsIG91dHB1dFJvbS5MZW5ndGgpO1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcigpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChTdHJpbmcuRm9ybWF0KFwiUmVwbGFjZWQgJ3swfScgd2l0aCAnezF9JyBhdCBsb2NhdGlvbihzKTpcIiwgc2VhcmNoU3RyLCByZXBsYWNlU3RyKSk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbG9jcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2NjdXJlbmNlIDwgMCB8fCBvY2N1cmVuY2UgPT0gaSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiMHh7MDp4fSxcIiwgbG9jc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCBzdHJpbmdMb2MgPSAoaW50KWxvY3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCByZXBsYWNlU3RyLkxlbmd0aDsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0Um9tW3N0cmluZ0xvY10gPSAoYnl0ZSlyZXBsYWNlU3RyW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdMb2MrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gRmluZCBzdHJpbmcgJ3N0cicgKHVuaWNvZGUgc3RyaW5nKSBpbiB0aGUgZGF0YSBieXRlIGFycmF5LlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwic3RyXCI+VGhlIHN0cmluZyB0byBsb29rIGZvcjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZGF0YVwiPlRoZSBkYXRhIHRvIHNlYXJjaCB0aHJvdWdoLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwic3RhcnRcIj53aGVyZSB0byBzdGFydCBpbiAnZGF0YSc8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImVuZFwiPldoZXJlIHRvIGVuZCBpbiAnZGF0YSc8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5hIGxpc3Qgb2YgYWRkcmVzc2VzPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxsb25nPiBGaW5kU3RyaW5nSW5GaWxlKHN0cmluZyBzdHIsIGJ5dGVbXSBkYXRhLCBpbnQgc3RhcnQsIGludCBlbmQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gRmluZFN0cmluZ0luRmlsZShzdHIsIGRhdGEsIHN0YXJ0LCBlbmQsIGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEZpbmQgc3RyaW5nICdzdHInICh1bmljb2RlIHN0cmluZykgaW4gdGhlIGRhdGEgYnl0ZSBhcnJheS5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInN0clwiPlRoZSBzdHJpbmcgdG8gbG9vayBmb3I8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImRhdGFcIj5UaGUgZGF0YSB0byBzZWFyY2ggdGhyb3VnaC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInN0YXJ0XCI+d2hlcmUgdG8gc3RhcnQgaW4gJ2RhdGEnPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJlbmRcIj5XaGVyZSB0byBlbmQgaW4gJ2RhdGEnPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJudWxsQnl0ZVwiPlRydWUgdG8gYXBwZW5kIHRoZSBudWxsIGJ5dGUgYXQgdGhlIGVuZC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5hIGxpc3Qgb2YgYWRkcmVzc2VzPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxsb25nPiBGaW5kU3RyaW5nSW5GaWxlKHN0cmluZyBzdHIsIGJ5dGVbXSBkYXRhLCBpbnQgc3RhcnQsIGludCBlbmQsIGJvb2wgbnVsbEJ5dGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBMaXN0PGxvbmc+IHJldFZhbCA9IG5ldyBMaXN0PGxvbmc+KCk7XHJcbiAgICAgICAgICAgIGludCBsZW5ndGggPSBzdHIuTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAobnVsbEJ5dGUpXHJcbiAgICAgICAgICAgICAgICBsZW5ndGggKz0gMTtcclxuXHJcbiAgICAgICAgICAgIGJ5dGVbXSB0YXJnZXQgPSBuZXcgYnl0ZVtsZW5ndGhdO1xyXG4gICAgICAgICAgICBpbnQgaSA9IDA7XHJcbiAgICAgICAgICAgIEFycmF5LkNsZWFyPGJ5dGU+KHRhcmdldCwgMCwgdGFyZ2V0Lkxlbmd0aCk7IC8vIGZpbGwgd2l0aCAwJ3NcclxuICAgICAgICAgICAgZm9yZWFjaCAoY2hhciBjIGluIHN0cilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2krK10gPSAoYnl0ZSljO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBGaW5kQnllc0luRmlsZSh0YXJnZXQsIGRhdGEsIHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBGaW5kIGFuIGFycmF5IG9mIGJ5dGVzIGluIHRoZSBkYXRhIGJ5dGUgYXJyYXkuXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJzdHJcIj5UaGUgYnl0ZXMgdG8gbG9vayBmb3I8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImRhdGFcIj5UaGUgZGF0YSB0byBzZWFyY2ggdGhyb3VnaC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInN0YXJ0XCI+d2hlcmUgdG8gc3RhcnQgaW4gJ2RhdGEnPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJlbmRcIj5XaGVyZSB0byBlbmQgaW4gJ2RhdGEnPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+YSBsaXN0IG9mIGFkZHJlc3NlczwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8bG9uZz4gRmluZEJ5ZXNJbkZpbGUoYnl0ZVtdIHRhcmdldCwgYnl0ZVtdIGRhdGEsIGludCBzdGFydCwgaW50IGVuZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIExpc3Q8bG9uZz4gcmV0VmFsID0gbmV3IExpc3Q8bG9uZz4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhICE9IG51bGwgJiYgZGF0YS5MZW5ndGggPiA4MClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDwgMClcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kID4gZGF0YS5MZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gZGF0YS5MZW5ndGggLSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGxvbmcgbnVtID0gKGxvbmcpKGVuZCAtIHRhcmdldC5MZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsb25nIG51bTMgPSBzdGFydDsgbnVtMyA8IG51bTsgbnVtMyArPSAxTClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2hlY2sodGFyZ2V0LCBudW0zLCBkYXRhKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldFZhbC5BZGQobnVtMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIENoZWNrKGJ5dGVbXSB0YXJnZXQsIGxvbmcgbG9jYXRpb24sIGJ5dGVbXSBkYXRhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXQuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRbaV0gIT0gZGF0YVtsb2NhdGlvbiArIGldKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpID09IHRhcmdldC5MZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBNYXBBdHRyaWJ1dGVzKGJ5dGVbXSBhdHRycylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKGJ5dGUgYiBpbiBhdHRycylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoTWFwQWJpbGl0eVRvVFNCVmFsdWUoYikuVG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIixcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYnl0ZVtdIEdldFRzYkFiaWxpdGllcyhpbnRbXSBhYmlsaXRpZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBieXRlW10gcmV0VmFsID0gbmV3IGJ5dGVbYWJpbGl0aWVzLkxlbmd0aF07XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgcmV0VmFsLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgcmV0VmFsW2ldID0gR2V0VFNCQWJpbGl0eShhYmlsaXRpZXNbaV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBHZXQgdGhlIGluZGV4ICgwLUYpIGFiaWxpdHkgZm9yIHRoZSBpbnB1dFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYWJcIj50aGUgYWJpbGl0eTwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPigweDAtMHhGKTwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJ5dGUgR2V0VFNCQWJpbGl0eShpbnQgYWIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBieXRlIHJldCA9IDA7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0ID0gMHgwMDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiByZXQgPSAweDAxOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTk6IHJldCA9IDB4MDI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNTogcmV0ID0gMHgwMzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMxOiByZXQgPSAweDA0OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6IHJldCA9IDB4MDU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0NDogcmV0ID0gMHgwNjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDUwOiByZXQgPSAweDA3OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNTY6IHJldCA9IDB4MDg7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2MzogcmV0ID0gMHgwOTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY5OiByZXQgPSAweDBhOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNzU6IHJldCA9IDExOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgODE6IHJldCA9IDB4MGM7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4ODogcmV0ID0gMHgwZDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDk0OiByZXQgPSAweDBlOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTAwOiByZXQgPSAweDBmOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyB0YWtlcyAweDAzIC0tPiAyNVxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYWJcIj4weDAwIC0gMHgwRjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPkEgVFNCIGFiaWxpdHkgKDYsMTMsMTksMjUsMzEsMzgsNDQsNTAsNTYsNjMsNjksNzUsODEsODgsOTQsMTAwKTwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJ5dGUgTWFwQWJpbGl0eVRvVFNCVmFsdWUoaW50IGFiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYnl0ZSByZXQgPSAwO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGFiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDA6IHJldCA9IDY7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDAxOiByZXQgPSAxMzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDI6IHJldCA9IDE5OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMHgwMzogcmV0ID0gMjU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDA0OiByZXQgPSAzMTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDU6IHJldCA9IDM4OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMHgwNjogcmV0ID0gNDQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDA3OiByZXQgPSA1MDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MDg6IHJldCA9IDU2OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMHgwOTogcmV0ID0gNjM7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDBBOiByZXQgPSA2OTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDExOiByZXQgPSA3NTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MEM6IHJldCA9IDgxOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMHgwRDogcmV0ID0gODg7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDBFOiByZXQgPSA5NDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MEY6IHJldCA9IDEwMDsgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYnl0ZSBDb21iaW5lTmliYmxlcyhieXRlIGZpcnN0LCBieXRlIHNlY29uZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCByZXRWYWwgPSBmaXJzdCA8PCA0O1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gc2Vjb25kO1xyXG4gICAgICAgICAgICByZXR1cm4gKGJ5dGUpcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBieXRlIEdldEZpcnN0TmliYmxlKGJ5dGUgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJ5dGUgcmV0VmFsID0gKGJ5dGUpKGIgPj4gNCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJ5dGUgR2V0U2Vjb25kTmliYmxlKGJ5dGUgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJ5dGUgcmV0VmFsID0gKGJ5dGUpKGIgJiAweDBmKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyB2b2lkIENoZWNrVFNCMkFyZ3MoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc2Vhc29uIDwgMSB8fCBzZWFzb24gPiAzKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBzZWFzb24hIFwiICsgc2Vhc29uKTtcclxuICAgICAgICAgICAgaWYgKFRTQlRvb2wyLlRTQjJUb29sLnRlYW1zLkluZGV4T2YodGVhbSkgPCAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCB0ZWFtISBcIiArIHRlYW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIHZvaWQgQ2hlY2tUU0IyQXJncyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpZiAoVGVjbW9Ub29sLnBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3NpdGlvbikgPCAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBwb3NpdGlvbiEgXCIgKyBwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRpYyBzdHJpbmcgUm9tVmVyc2lvbiB7IGdldCB7IHJldHVybiBcIlNORVNfVFNCMlwiOyB9IH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmVnZXggc2ltcGxlU2V0UmVnZXg7XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBBcHBseVNldChzdHJpbmcgbGluZSwgSVRlY21vVG9vbCB0b29sKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHNpbXBsZVNldFJlZ2V4ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBzaW1wbGVTZXRSZWdleCA9IG5ldyBSZWdleChcIlNFVFxcXFxzKlxcXFwoXFxcXHMqKDB4WzAtOWEtZkEtRl0rKVxcXFxzKixcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqXFxcXClcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2ltcGxlU2V0UmVnZXguTWF0Y2gobGluZSkgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEFwcGx5U2ltcGxlU2V0KGxpbmUsIHRvb2wgYXMgSVRlY21vQ29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1Igd2l0aCBsaW5lIFxcXCJ7MH1cXFwiXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEFwcGx5U2ltcGxlU2V0KHN0cmluZyBsaW5lLCBJVGVjbW9Db250ZW50IHRvb2wpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc2ltcGxlU2V0UmVnZXggPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHNpbXBsZVNldFJlZ2V4ID0gbmV3IFJlZ2V4KFwiU0VUXFxcXHMqXFxcXChcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqLFxcXFxzKigweFswLTlhLWZBLUZdKylcXFxccypcXFxcKVwiKTtcclxuXHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBzaW1wbGVTZXRSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG0gPT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLlNob3dFcnJvcihzdHJpbmcuRm9ybWF0KFwiU0VUIGZ1bmN0aW9uIG5vdCB1c2VkIHByb3Blcmx5LiBpbmNvcnJlY3Qgc3ludGF4Pid7MH0nXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJpbmcgbG9jID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKS5Ub0xvd2VyKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyB2YWwgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRvTG93ZXIoKTtcclxuICAgICAgICAgICAgbG9jID0gbG9jLlN1YnN0cmluZygyKTtcclxuICAgICAgICAgICAgdmFsID0gdmFsLlN1YnN0cmluZygyKTtcclxuICAgICAgICAgICAgaWYgKHZhbC5MZW5ndGggJSAyICE9IDApXHJcbiAgICAgICAgICAgICAgICB2YWwgPSBcIjBcIiArIHZhbDtcclxuXHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBQYXJzZUludEZyb21IZXhTdHJpbmcobG9jKTtcclxuICAgICAgICAgICAgICAgIGJ5dGVbXSBieXRlcyA9IEdldEhleEJ5dGVzKHZhbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24gKyBieXRlcy5MZW5ndGggPiB0b29sLk91dHB1dFJvbS5MZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuU2hvd0Vycm9yKHN0cmluZy5Gb3JtYXQoXCJBcHBseVNldDo+IEVycm9yIHdpdGggbGluZSB7MH0uIERhdGEgZmFsbHMgb2ZmIHRoZSBlbmQgb2Ygcm9tLlxcblwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb2NhdGlvbiA8IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuU2hvd0Vycm9yKHN0cmluZy5Gb3JtYXQoXCJBcHBseVNldDo+IEVycm9yIHdpdGggbGluZSB7MH0uIGxvY2F0aW9uIGlzIG5lZ2F0aXZlLlxcblwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBieXRlcy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wuU2V0Qnl0ZShsb2NhdGlvbiArIGksIGJ5dGVzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5TaG93RXJyb3Ioc3RyaW5nLkZvcm1hdChcIkFwcGx5U2V0Oj4gRXJyb3Igd2l0aCBsaW5lIHswfS5cXG57MX1cIiwgbGluZSwgZS5NZXNzYWdlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYnl0ZVtdIEdldEhleEJ5dGVzKHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5MZW5ndGggPiAyICYmKGlucHV0LlN0YXJ0c1dpdGgoXCIweFwiKSB8fCBpbnB1dC5TdGFydHNXaXRoKFwiMFhcIikpKVxyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5TdWJzdHJpbmcoMik7XHJcblxyXG4gICAgICAgICAgICBieXRlW10gcmV0ID0gbmV3IGJ5dGVbaW5wdXQuTGVuZ3RoIC8gMl07XHJcbiAgICAgICAgICAgIHN0cmluZyBiID0gXCJcIjtcclxuICAgICAgICAgICAgaW50IHRtcCA9IDA7XHJcbiAgICAgICAgICAgIGludCBqID0gMDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgaW5wdXQuTGVuZ3RoOyBpICs9IDIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGIgPSBpbnB1dC5TdWJzdHJpbmcoaSwgMik7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBQYXJzZUludEZyb21IZXhTdHJpbmcoYik7IC8vIEludDMyLlBhcnNlKGIsIFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcbiAgICAgICAgICAgICAgICByZXRbaisrXSA9IChieXRlKXRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgTGlzdDxzdHJpbmc+IHNFcnJvcnMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEFkZEVycm9yKHN0cmluZyBlcnJvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNFcnJvcnMuQWRkKGVycm9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbGVhckVycm9ycygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzRXJyb3JzLkNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2hvd0Vycm9ycygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc0Vycm9ycyAhPSBudWxsICYmIHNFcnJvcnMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoNTAwKTtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyBlIGluIHNFcnJvcnMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKGUgKyBcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNob3dFcnJvcihzYi5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIENsZWFyRXJyb3JzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTaG93RXJyb3Ioc3RyaW5nIGVycm9yKVxyXG4gICAgICAgIHtcclxuI2lmICFCUklER0VfUFJPSkVDVFxyXG4gICAgICAgICAgICBSaWNoVGV4dERpc3BsYXkuU2hvd01lc3NhZ2UoXCJFcnJvciFcIiwgZXJyb3IsIFN5c3RlbUljb25zLkVycm9yLCBmYWxzZSwgZmFsc2UpO1xyXG4jZWxzZVxyXG4gICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShlcnJvcik7XHJcbiNlbmRpZlxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYnl0ZVtdIFJlYWRSb20oc3RyaW5nIGZpbGVuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYnl0ZVtdIG91dHB1dFJvbSA9IG51bGw7XHJcbiAgICAgICAgICAgIEZpbGVTdHJlYW0gczEgPSBudWxsO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9GaWxlSW5mbyBmMSA9IG5ldyBGaWxlSW5mbyhmaWxlbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAvL2xvbmcgbGVuID0gZjEuTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgczEgPSBuZXcgRmlsZVN0cmVhbShmaWxlbmFtZSwgRmlsZU1vZGUuT3Blbik7XHJcbiAgICAgICAgICAgICAgICBsb25nIGxlbiA9IHMxLkxlbmd0aDtcclxuICAgICAgICAgICAgICAgIG91dHB1dFJvbSA9IG5ldyBieXRlWyhpbnQpbGVuXTtcclxuICAgICAgICAgICAgICAgIHMxLlJlYWQob3V0cHV0Um9tLCAwLCAoaW50KWxlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTaG93RXJyb3IoZS5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChzMSAhPSBudWxsKSBzMS5DbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRSb207XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2F2ZVJvbShzdHJpbmcgZmlsZW5hbWUsIGJ5dGVbXSBvdXRwdXRSb20pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoZmlsZW5hbWUgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZyBsZW4gPSBvdXRwdXRSb20uTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIEZpbGVTdHJlYW0gczEgPSBuZXcgRmlsZVN0cmVhbShmaWxlbmFtZSwgRmlsZU1vZGUuT3Blbk9yQ3JlYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBzMS5Xcml0ZShvdXRwdXRSb20sIDAsIChpbnQpbGVuKTtcclxuICAgICAgICAgICAgICAgICAgICBzMS5DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFNob3dFcnJvcihlLlRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQWRkRXJyb3IoXCJFUlJPUiEgWW91IHBhc3NlZCBhIG51bGwgZmlsZW5hbWVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gVXBkYXRlcyBzdHJuZyBwb2ludGVyc1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicG9zXCI+VGhlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IHBvaW50ZXI8L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImNoYW5nZVwiPnRoZSBhbW91bnQgb2YgY2hhbmdlPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJsYXN0UG9pbnRlclwiPnRoZSBsYXN0IHBvaW50ZXIgdG8gdXBkYXRlLjwvcGFyYW0+XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBBZGp1c3REYXRhUG9pbnRlcnMoYnl0ZVtdIHJvbSwgaW50IGZpcnN0UG9pbnRlckxvY2F0aW9uLCBpbnQgY2hhbmdlLCBpbnQgbGFzdFBvaW50ZXJMb2NhdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJ5dGUgbG93LCBoaTtcclxuICAgICAgICAgICAgaW50IHdvcmQ7XHJcbiAgICAgICAgICAgIGludCBpID0gMDtcclxuICAgICAgICAgICAgaW50IGVuZCA9IGxhc3RQb2ludGVyTG9jYXRpb24gKyAxO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBmaXJzdFBvaW50ZXJMb2NhdGlvbiArIDI7IGkgPCBlbmQ7IGkgKz0gMilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG93ID0gcm9tW2ldO1xyXG4gICAgICAgICAgICAgICAgaGkgPSByb21baSArIDFdO1xyXG4gICAgICAgICAgICAgICAgd29yZCA9IGhpO1xyXG4gICAgICAgICAgICAgICAgd29yZCA9IHdvcmQgPDwgODtcclxuICAgICAgICAgICAgICAgIHdvcmQgKz0gbG93O1xyXG4gICAgICAgICAgICAgICAgd29yZCArPSBjaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICBsb3cgPSAoYnl0ZSkod29yZCAmIDB4MDBmZik7XHJcbiAgICAgICAgICAgICAgICB3b3JkID0gd29yZCA+PiA4O1xyXG4gICAgICAgICAgICAgICAgaGkgPSAoYnl0ZSl3b3JkO1xyXG4gICAgICAgICAgICAgICAgcm9tW2ldID0gbG93O1xyXG4gICAgICAgICAgICAgICAgcm9tW2kgKyAxXSA9IGhpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIFNoaWZ0RGF0YVVwKGludCBzdGFydFBvcywgaW50IGVuZFBvcywgaW50IHNoaWZ0QW1vdW50LCBieXRlW10gZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChzdGFydFBvcyA8IDAgfHwgZW5kUG9zIDwgMClcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTaGlmdERhdGFVcDo6IGVpdGhlciBzdGFydFBvcyB7MH0gb3IgZW5kUG9zIHsxfSBpcyBpbnZhbGlkLlwiLCBzdGFydFBvcywgZW5kUG9zKSk7XHJcblxyXG4gICAgICAgICAgICBpbnQgaTtcclxuICAgICAgICAgICAgaWYgKHNoaWZ0QW1vdW50ID4gMClcclxuICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKFwicG9zaXRpdmUgc2hpZnQgYW1vdW50IGluIFNoaWZ0RGF0YVVwXCIpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gc3RhcnRQb3M7IGkgPD0gZW5kUG9zOyBpKyspXHJcbiAgICAgICAgICAgICAgICBkYXRhW2kgKyBzaGlmdEFtb3VudF0gPSBkYXRhW2ldO1xyXG5cclxuICAgICAgICAgICAgLyppICs9IHNoaWZ0QW1vdW50O1xyXG4gICAgICAgICAgICB3aGlsZSAob3V0cHV0Um9tW2ldICE9IDB4ZmYgJiYgaSA8IDB4MzAwZikgeyAvLyB3aXRoIHRoaXMgY29tbWVudGVkIG91dCwgdGhlcmUgd2lsbCBiZSBqdW5rIGF0IHRoZSBlbmQgdGhhdCBsb29rcyBraW5kYSB2YWxpZCwgYnV0IGlzIGp1c3QgbGVmdCBvdmVyXHJcbiAgICAgICAgICAgICAgICBTZXRCeXRlKGksIDB4ZmYpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9Ki9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHZvaWQgU2hpZnREYXRhRG93bihpbnQgc3RhcnRQb3MsIGludCBlbmRQb3MsIGludCBzaGlmdEFtb3VudCwgYnl0ZVtdIGRhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc3RhcnRQb3MgPCAwIHx8IGVuZFBvcyA8IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2hpZnREYXRhRG93bjo6IGVpdGhlciBzdGFydFBvcyB7MH0gb3IgZW5kUG9zIHsxfSBpcyBpbnZhbGlkLlwiLCBzdGFydFBvcywgZW5kUG9zKSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gZW5kUG9zICsgc2hpZnRBbW91bnQ7IGkgPiBzdGFydFBvczsgaS0tKVxyXG4gICAgICAgICAgICAgICAgZGF0YVtpXSA9IGRhdGFbaSAtIHNoaWZ0QW1vdW50XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTZXRTdHJpbmdUYWJsZVN0cmluZyhieXRlW10gcm9tLCBpbnQgc3RyaW5nSW5kZXgsIHN0cmluZyBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgaW50IGZpcnN0UG9pbnRlciwgaW50IG9mZnNldCwgaW50IG51bWJlck9mU3RyaW5nc0luVGFibGUsIGludCBzdHJpbmdUYWJsZVNpemVJbkJ5dGVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGp1bms7XHJcbiAgICAgICAgICAgIHN0cmluZyBvbGRWYWx1ZSA9IEdldFN0cmluZ1RhYmxlU3RyaW5nKHJvbSwgc3RyaW5nSW5kZXgsIGZpcnN0UG9pbnRlciwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBpbnQgc2hpZnRBbW91bnQgPSBuZXdWYWx1ZS5MZW5ndGggLSBvbGRWYWx1ZS5MZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChzaGlmdEFtb3VudCAhPSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnQgY3VycmVudFBvaW50ZXJMb2NhdGlvbiA9IGZpcnN0UG9pbnRlciArIDIgKiBzdHJpbmdJbmRleDtcclxuICAgICAgICAgICAgICAgIGludCBsYXN0UG9pbnRlckxvY2F0aW9uID0gZmlyc3RQb2ludGVyICsgMiAqIG51bWJlck9mU3RyaW5nc0luVGFibGU7XHJcbiAgICAgICAgICAgICAgICBBZGp1c3REYXRhUG9pbnRlcnMocm9tLCBjdXJyZW50UG9pbnRlckxvY2F0aW9uLCBzaGlmdEFtb3VudCwgbGFzdFBvaW50ZXJMb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpbnQgc3RhcnRQb3NpdGlvbiA9IEdldFN0cmluZ1RhYmxlU3RyaW5nTG9jYXRpb24ocm9tLCAoc3RyaW5nSW5kZXggKyAxKSAqIDIgKyBmaXJzdFBvaW50ZXIsIG91dCBqdW5rLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgaW50IGVuZFBvc2l0aW9uID0gZmlyc3RQb2ludGVyICsgc3RyaW5nVGFibGVTaXplSW5CeXRlcztcclxuICAgICAgICAgICAgICAgIGlmIChzaGlmdEFtb3VudCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgU2hpZnREYXRhVXAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCByb20pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hpZnRBbW91bnQgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIFNoaWZ0RGF0YURvd24oc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCByb20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGxheSBkb3duIHRoZSB2YWx1ZVxyXG4gICAgICAgICAgICBpbnQgc3RhcnRMb2MgPSBHZXRTdHJpbmdUYWJsZVN0cmluZ0xvY2F0aW9uKHJvbSwgc3RyaW5nSW5kZXggKiAyICsgZmlyc3RQb2ludGVyLCBvdXQganVuaywgb2Zmc2V0KTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuZXdWYWx1ZS5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlW2ldID09ICcqJykgLy8gZG8gdGhlIHN0YXIgc3Vic3RpdHV0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgcm9tW3N0YXJ0TG9jICsgaV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJvbVtzdGFydExvYyArIGldID0gKGJ5dGUpbmV3VmFsdWVbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFN0cmluZ1RhYmxlU3RyaW5nKGJ5dGVbXSByb20sIGludCBzdHJpbmdfaW5kZXgsIGludCBmaXJzdFBvaW50ZXIsIGludCBvZmZzZXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgaW50IHBvaW50ZXIgPSBzdHJpbmdfaW5kZXggKiAyICsgZmlyc3RQb2ludGVyO1xyXG4gICAgICAgICAgICBpbnQgbGVuZ3RoID0gLTE7XHJcblxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRTdHJpbmdUYWJsZVN0cmluZ0xvY2F0aW9uKHJvbSwgcG9pbnRlciwgb3V0IGxlbmd0aCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNoYXJbXSBzdHJpbmdDaGFycyA9IG5ldyBjaGFyW2xlbmd0aF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHN0cmluZ0NoYXJzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ0NoYXJzW2ldID0gKGNoYXIpcm9tW2xvY2F0aW9uICsgaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ0NoYXJzW2ldID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0NoYXJzW2ldID0gJyonO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gbmV3IHN0cmluZyhzdHJpbmdDaGFycyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBpbnQgR2V0U3RyaW5nVGFibGVTdHJpbmdMb2NhdGlvbihieXRlW10gcm9tLCBpbnQgcG9pbnRlckxvY2F0aW9uLCBvdXQgaW50IGxlbmd0aCwgaW50IG9mZnNldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBwb2ludGVyX2xvYyA9IHBvaW50ZXJMb2NhdGlvbjtcclxuICAgICAgICAgICAgYnl0ZSBiMSA9IHJvbVtwb2ludGVyX2xvYyArIDFdO1xyXG4gICAgICAgICAgICBieXRlIGIyID0gcm9tW3BvaW50ZXJfbG9jXTtcclxuICAgICAgICAgICAgYnl0ZSBiMyA9IHJvbVtwb2ludGVyX2xvYyArIDNdOyAvLyBiMyAmIGI0IGZvciBsZW5ndGhcclxuICAgICAgICAgICAgYnl0ZSBiNCA9IHJvbVtwb2ludGVyX2xvYyArIDJdO1xyXG4gICAgICAgICAgICBsZW5ndGggPSAoKGIzIDw8IDgpICsgYjQpIC0gKChiMSA8PCA4KSArIGIyKTtcclxuICAgICAgICAgICAgaW50IHBvaW50ZXJWYWwgPSAoYjEgPDwgOCkgKyBiMjtcclxuICAgICAgICAgICAgaW50IHN0cmluZ1N0YXJ0aW5nTG9jYXRpb24gPSBwb2ludGVyVmFsICsgb2Zmc2V0Oy8vIDB4MWUwMDAwO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nU3RhcnRpbmdMb2NhdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBzdHJpbmcgQXJlRXF1YWwoc3RyaW5nIHN0cjEsIHN0cmluZyBzdHIyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChzdHIxICE9IHN0cjIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IHN0cmluZy5Gb3JtYXQoXCJBcmVFcXVhbDpGYWlsdXJlICd7MH0nIGFuZCAnezF9J1xcblwiLCBzdHIxLCBzdHIyKTtcclxuICAgICAgICAgICAgICAgIFN5c3RlbS5EaWFnbm9zdGljcy5EZWJ1Z2dlci5Mb2coMSwgXCJURVNUXCIsIHJldFZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFJlZ2V4IHRzYjFRQjFSZWdleCA9IG5ldyBSZWdleChcclxuICAgICAgICAgICAgXCJeUUIxXFxcXHMqLFthLXpBLVogMC05XStcXFxccyosXFxcXHMqRmFjZT0weFswLTldezEsMn1cXFxccyosXFxcXHMqI1swLTldezEsMn1cXFxccyosKFxcXFxzKlswLTldezEsMn1cXFxccyosKXs3fShcXFxccypbMC05XXsxLDJ9XFxcXHMqLD8pezF9KFxcXFxzKlxcXFxbfFxcXFxzKiQpXCIsXHJcbiAgICAgICAgICAgICBSZWdleE9wdGlvbnMuTXVsdGlsaW5lKTtcclxuICAgICAgICBcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZWdleCB0c2IyUUIxUmVnZXggPSBuZXcgUmVnZXgoXHJcbiAgICAgICAgICAgIFwiXlFCMVxcXFxzKixbYS16QS1aIDAtOV0rXFxcXHMqLFxcXFxzKkZhY2U9MHhbMC05XXsxLDJ9XFxcXHMqLFxcXFxzKiNbMC05XXsxLDJ9XFxcXHMqLChcXFxccypbMC05XXsxLDJ9XFxcXHMqLCl7OX0oXFxcXHMqWzAtOV17MSwyfVxcXFxzKiw/KXsxfShcXFxccypcXFxcW3xcXFxccyokKVwiLFxyXG4gICAgICAgICAgICBSZWdleE9wdGlvbnMuTXVsdGlsaW5lKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZWdleCB0c2IzUUIxUmVnZXggPSBuZXcgUmVnZXgoXHJcbiAgICAgICAgICAgIFwiXlFCMVxcXFxzKixbYS16QS1aIDAtOVxcXFwuXStcXFxccyosXFxcXHMqRmFjZT0weFswOF1bMC05QS1GYS1mXXsxfVxcXFxzKixcXFxccyojWzAtOV17MSwyfVxcXFxzKiwoXFxcXHMqWzAtOV17MSwyfVxcXFxzKiwpezEwfShcXFxccypbMC05XXsxLDJ9XFxcXHMqLD8pezF9KFxcXFxzKlxcXFxbfFxcXFxzKiQpXCIsXHJcbiAgICAgICAgICAgIFJlZ2V4T3B0aW9ucy5NdWx0aWxpbmUpO1xyXG5cclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgYm9vbCBJc1RTQjFDb250ZW50KHN0cmluZyBkYXRhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm9vbCByZXRWYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgTWF0Y2hDb2xsZWN0aW9uIG1jID0gdHNiMVFCMVJlZ2V4Lk1hdGNoZXMoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChtYy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBib29sIElzVFNCMkNvbnRlbnQoc3RyaW5nIGRhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHJldFZhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBNYXRjaENvbGxlY3Rpb24gbWMgPSB0c2IyUUIxUmVnZXguTWF0Y2hlcyhkYXRhKTtcclxuICAgICAgICAgICAgaWYgKG1jLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIGJvb2wgSXNUU0IzQ29udGVudChzdHJpbmcgZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJvb2wgcmV0VmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIE1hdGNoQ29sbGVjdGlvbiBtYyA9IHRzYjNRQjFSZWdleC5NYXRjaGVzKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAobWMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgdGhlIGNvbnRlbnQgdHlwZSAoVFNCMSwgVFNCMiwgVFNCMywgVW5rbm93bilcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBUU0JDb250ZW50VHlwZSBHZXRDb250ZW50VHlwZShzdHJpbmcgZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChJc1RTQjFDb250ZW50KGRhdGEpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRTQkNvbnRlbnRUeXBlLlRTQjE7XHJcbiAgICAgICAgICAgIGlmIChJc1RTQjJDb250ZW50KGRhdGEpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRTQkNvbnRlbnRUeXBlLlRTQjI7XHJcbiAgICAgICAgICAgIGlmIChJc1RTQjNDb250ZW50KGRhdGEpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRTQkNvbnRlbnRUeXBlLlRTQjM7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0JDb250ZW50VHlwZS5Vbmtub3duO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9ucztcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUZWNtb25zdGVyVFNCMVNpbUF1dG9VcGRhdGVyXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUG9zaXRpb25OYW1lcyA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBMaXN0PHN0cmluZz4oKSwoX28xKT0+e19vMS5BZGQoXCJRQjFcIik7X28xLkFkZChcIlFCMlwiKTtfbzEuQWRkKFwiUkIxXCIpO19vMS5BZGQoXCJSQjJcIik7X28xLkFkZChcIlJCM1wiKTtfbzEuQWRkKFwiUkI0XCIpO19vMS5BZGQoXCJXUjFcIik7X28xLkFkZChcIldSMlwiKTtfbzEuQWRkKFwiV1IzXCIpO19vMS5BZGQoXCJXUjRcIik7X28xLkFkZChcIlRFMVwiKTtfbzEuQWRkKFwiVEUyXCIpO19vMS5BZGQoXCJDXCIpO19vMS5BZGQoXCJMR1wiKTtfbzEuQWRkKFwiUkdcIik7X28xLkFkZChcIkxUXCIpO19vMS5BZGQoXCJSVFwiKTtfbzEuQWRkKFwiUkVcIik7X28xLkFkZChcIk5UXCIpO19vMS5BZGQoXCJMRVwiKTtfbzEuQWRkKFwiUk9MQlwiKTtfbzEuQWRkKFwiUklMQlwiKTtfbzEuQWRkKFwiTElMQlwiKTtfbzEuQWRkKFwiTE9MQlwiKTtfbzEuQWRkKFwiUkNCXCIpO19vMS5BZGQoXCJMQ0JcIik7X28xLkFkZChcIkZTXCIpO19vMS5BZGQoXCJTU1wiKTtfbzEuQWRkKFwiS1wiKTtfbzEuQWRkKFwiUFwiKTtyZXR1cm4gX28xO30pO1xyXG5cclxuICAgICAgICBwcml2YXRlIExpc3Q8U3RyaW5nPiBtVGVhbXMgPSBuZXcgTGlzdDxzdHJpbmc+KCk7XHJcbiAgICAgICAgcHJpdmF0ZSBUZWNtb25zdGVyU2ltU3R1ZmYgbVNpbVN0dWZmID0gbmV3IFRlY21vbnN0ZXJTaW1TdHVmZigpO1xyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIG1EYXRhPVwiXCI7XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gVGhlIHRleHQgZGF0YSB0byB3b3JrIG9uIGFuZCByZXRyaWV2ZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHJvdGVjdGVkIHN0cmluZyBEYXRhIHsgXHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBtRGF0YTsgfSBcclxuICAgICAgICAgICAgc2V0IFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtVGVhbXMuQ2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIG1EYXRhID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBSZWdleCBmaW5kVGVhbVJlZ2V4ID0gbmV3IFJlZ2V4KFwiVEVBTVxcXFxzKj1cXFxccyooW2EtejQ5XSspXCIpO1xyXG4gICAgICAgICAgICAgICAgTWF0Y2hDb2xsZWN0aW9uIG1jID0gZmluZFRlYW1SZWdleC5NYXRjaGVzKG1EYXRhKTtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2ggKE1hdGNoIG0gaW4gbWMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbVRlYW1zLkFkZChtLkdyb3Vwc1sxXS5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyBhIHBsYXllciAnbGluZScgZnJvbSBtX0RhdGEgZnJvbSAndGVhbScgcGxheWluZyAncG9zaXRpb24nLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHByaXZhdGUgc3RyaW5nIEdldFBsYXllclN0cmluZyggc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiApXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyBwYXR0ZXJuID0gXCJURUFNXFxcXHMqPVxcXFxzKlwiK3RlYW07XHJcblx0XHRcdFJlZ2V4IGZpbmRUZWFtUmVnZXggPSBuZXcgUmVnZXgocGF0dGVybik7XHJcblx0XHRcdE1hdGNoIG0gPSBmaW5kVGVhbVJlZ2V4Lk1hdGNoKG1EYXRhKTtcclxuXHRcdFx0aWYoIG0gIT0gTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHRlYW1JbmRleCA9IG0uSW5kZXg7XHJcblx0XHRcdFx0aWYoIHRlYW1JbmRleCA9PSAtMSApXHJcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0XHRpbnQgcGxheWVySW5kZXggPSAtMTtcclxuXHRcdFx0XHRSZWdleCBlbmRMaW5lUmVnZXggPSBuZXcgUmVnZXgoc3RyaW5nLkZvcm1hdChcIlxcblxcXFxzKnswfVxcXFxzKixcIixwb3NpdGlvbikpO1xyXG5cdFx0XHRcdE1hdGNoIGVvbCA9IGVuZExpbmVSZWdleC5NYXRjaChtRGF0YSwgdGVhbUluZGV4KTtcclxuXHRcdFx0XHRpZiggZW9sICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0XHRcdHBsYXllckluZGV4ID0gZW9sLkluZGV4O1xyXG5cdFx0XHRcdHBsYXllckluZGV4Kys7XHJcblx0XHRcdFxyXG5cdFx0XHRcdGlmKCBwbGF5ZXJJbmRleCA9PSAwIClcclxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHRcdGludCBsaW5lRW5kID0gbURhdGEuSW5kZXhPZihcIlxcblwiLHBsYXllckluZGV4KTtcclxuXHRcdFx0XHRzdHJpbmcgcGxheWVyTGluZSA9IG1EYXRhLlN1YnN0cmluZyhwbGF5ZXJJbmRleCxsaW5lRW5kLXBsYXllckluZGV4KTtcclxuXHRcdFx0XHRyZXR1cm4gcGxheWVyTGluZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgUmVwbGFjZVBsYXllcihzdHJpbmcgdGVhbSwgc3RyaW5nIG9sZFBsYXllciwgc3RyaW5nIG5ld1BsYXllcilcclxuXHRcdHtcclxuXHRcdFx0aW50IG5leHRUZWFtSW5kZXggPSAtMTtcclxuXHRcdFx0aW50IGN1cnJlbnRUZWFtSW5kZXg9IC0xO1xyXG5cdFx0XHRzdHJpbmcgbmV4dFRlYW0gICAgPSBudWxsO1xyXG5cclxuXHRcdFx0UmVnZXggZmluZFRlYW1SZWdleCA9IG5ldyBSZWdleChcIlRFQU1cXFxccyo9XFxcXHMqXCIrdGVhbSk7XHJcblx0XHRcdFxyXG5cdFx0XHRNYXRjaCBtID0gZmluZFRlYW1SZWdleC5NYXRjaChtRGF0YSk7XHJcblx0XHRcdGlmKCAhbS5TdWNjZXNzIClcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRjdXJyZW50VGVhbUluZGV4ID0gbS5Hcm91cHNbMV0uSW5kZXg7XHJcblxyXG5cdFx0XHRpbnQgdGVzdCA9IG1UZWFtcy5JbmRleE9mKHRlYW0pO1xyXG5cclxuXHRcdFx0aWYoIHRlc3QgIT0gbVRlYW1zLkNvdW50IC0gMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRuZXh0VGVhbSAgICAgID0gc3RyaW5nLkZvcm1hdChcIlRFQU1cXFxccyo9XFxcXHMqezB9XCIsbVRlYW1zW3Rlc3QrMV0pO1xyXG5cdFx0XHRcdFJlZ2V4IG5leHRUZWFtUmVnZXggPSBuZXcgUmVnZXgobmV4dFRlYW0pO1xyXG5cdFx0XHRcdE1hdGNoIG50ID0gbmV4dFRlYW1SZWdleC5NYXRjaChtRGF0YSk7XHJcblx0XHRcdFx0aWYoIG50LlN1Y2Nlc3MgKVxyXG5cdFx0XHRcdFx0bmV4dFRlYW1JbmRleCA9IG50LkluZGV4O1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCBuZXh0VGVhbUluZGV4IDwgMClcclxuXHRcdFx0XHRuZXh0VGVhbUluZGV4ID0gbURhdGEuTGVuZ3RoO1xyXG5cclxuXHRcdFx0XHJcblx0XHRcdGludCBwbGF5ZXJJbmRleCA9IG1EYXRhLkluZGV4T2Yob2xkUGxheWVyLGN1cnJlbnRUZWFtSW5kZXgpO1xyXG5cdFx0XHRpZiggcGxheWVySW5kZXggPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgZW5kTGluZSAgICAgPSBtRGF0YS5JbmRleE9mKCdcXG4nLHBsYXllckluZGV4KTtcclxuXHRcdFx0XHRzdHJpbmcgc3RhcnQgICAgPSBtRGF0YS5TdWJzdHJpbmcoMCxwbGF5ZXJJbmRleCk7XHJcblx0XHRcdFx0c3RyaW5nIGxhc3QgICAgID0gbURhdGEuU3Vic3RyaW5nKGVuZExpbmUpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFN0cmluZ0J1aWxkZXIgdG1wID0gbmV3IFN0cmluZ0J1aWxkZXIobURhdGEuTGVuZ3RoICsgMjAwKTtcclxuXHRcdFx0XHR0bXAuQXBwZW5kKHN0YXJ0KTtcclxuXHRcdFx0XHR0bXAuQXBwZW5kKG5ld1BsYXllcik7XHJcblx0XHRcdFx0dG1wLkFwcGVuZChsYXN0KTtcclxuXHJcblx0XHRcdFx0bURhdGEgPSB0bXAuVG9TdHJpbmcoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgZXJyb3IgPSBzdHJpbmcuRm9ybWF0KFxyXG5AXCJBbiBlcnJvciBvY2N1cmVkIGxvb2tpbmcgdXAgcGxheWVyXHJcbiAgICAgJ3swfSdcclxuUGxlYXNlIHZlcmlmeSB0aGF0IHRoaXMgcGxheWVyJ3MgYXR0cmlidXRlcyBhcmUgY29ycmVjdC5cIiwgb2xkUGxheWVyKTtcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKGVycm9yKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBBdXRvVXBkYXRlUGxheWVyU2ltRGF0YShzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUZWNtb25zdGVyVFNCMVNpbUF1dG9VcGRhdGVyIHRtcCA9IG5ldyBUZWNtb25zdGVyVFNCMVNpbUF1dG9VcGRhdGVyKCk7XHJcbiAgICAgICAgICAgIHRtcC5EYXRhID0gaW5wdXQ7XHJcbiAgICAgICAgICAgIHRtcC5BdXRvVXBkYXRlUGxheWVyU2ltKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0bXAuRGF0YTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFVwZGF0ZSBhbGwgcGxheWVycyBzaW0gYXR0cmlidXRlcy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHRwcml2YXRlIHZvaWQgQXV0b1VwZGF0ZVBsYXllclNpbSgpXHJcblx0XHR7XHJcbiAgICAgICAgICAgIGZvcmVhY2goIHN0cmluZyB0ZWFtIGluIG1UZWFtcyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRBdXRvVXBkYXRlUGxheWVycyggdGVhbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEF1dG8gdXBkYXRlIGEgdGVhbSdzIHBsYXllcnMgc2ltIGF0dHJpYnV0cy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdHByaXZhdGUgdm9pZCBBdXRvVXBkYXRlUGxheWVycyggc3RyaW5nIHRlYW0gKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBsb29rIGZvciAnVEVBTSA9ICcgaGVyZVxyXG5cdFx0XHRzdHJpbmcgcGF0dGVybiA9IFwiVEVBTVxcXFxzKj1cXFxccypcIit0ZWFtO1xyXG5cdFx0XHRSZWdleCBmaW5kVGVhbVJlZ2V4ID0gbmV3IFJlZ2V4KHBhdHRlcm4pO1xyXG5cdFx0XHRNYXRjaCBtID0gZmluZFRlYW1SZWdleC5NYXRjaChtRGF0YSk7XHJcblx0XHRcdGlmKCBtICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvcmVhY2goIHN0cmluZyBwb3NpdGlvbiBpbiBQb3NpdGlvbk5hbWVzKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKCBwb3NpdGlvbiA9PSBcIkNcIilcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRBdXRvVXBkYXRlUGxheWVyU2ltRGF0YSggdGVhbSwgcG9zaXRpb24pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRBdXRvVXBkYXRlUGxheWVyU2ltRGF0YSh0ZWFtLCBcIlBcIik7XHJcblx0XHRcdFx0QXV0b1VwZGF0ZVBsYXllclNpbURhdGEodGVhbSwgXCJLXCIpO1xyXG5cdFx0XHRcdFVwZGF0ZVRlYW1TaW1QYXNzRGVmZW5zZSh0ZWFtKTtcclxuXHRcdFx0XHRVcGRhdGVUZWFtU2ltUGFzc1J1c2godGVhbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gQXV0byB1cGRhdGUgYSBwbGF5ZXIncyBzaW0gZGF0YS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdHByaXZhdGUgdm9pZCBBdXRvVXBkYXRlUGxheWVyU2ltRGF0YShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgb2xkVmFsdWUgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgcG9zaXRpb24pO1xyXG5cdFx0XHRzdHJpbmcgbmV3VmFsdWUgPSBudWxsO1xyXG5cclxuXHRcdFx0aWYoIG9sZFZhbHVlID09IG51bGwgfHwgb2xkVmFsdWUgPT0gc3RyaW5nLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybjsvLyBoZSdzIG5vdCB0aGVyZSwgZG9uJ3QgdXBkYXRlIGhpbS5cclxuXHRcdFx0fVxyXG5cdFx0XHRzdHJpbmcgZk5hbWUgPSBJbnB1dFBhcnNlci5HZXRGaXJzdE5hbWUob2xkVmFsdWUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgbE5hbWUgPSBJbnB1dFBhcnNlci5HZXRMYXN0TmFtZShvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGludCBmYWNlID0gSW5wdXRQYXJzZXIuR2V0RmFjZShvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGludCBqZXJzZXlOdW1iZXIgPSBJbnB1dFBhcnNlci5HZXRKZXJzZXlOdW1iZXIob2xkVmFsdWUpO1xyXG5cdFx0XHRcclxuXHRcdFx0aW50W10gYXR0cnMgPSBuZXcgaW50WzRdO1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgYXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKG9sZFZhbHVlLCBmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2goRXhjZXB0aW9uIGUpXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLlNob3dFcnJvcihcIk9oIG9oIVwiICsgZS5NZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRpbnQgc2ltUGFzcywgc2ltUnVzaCwgc2ltUG9ja2V0LCBzaW1DYXRjaCwgc2ltVGFyZ2V0cywgc2ltWVBDLCBzaW1LQTtcclxuXHJcblx0XHRcdHN3aXRjaCggcG9zaXRpb24gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FzZSBcIlFCMVwiOiBjYXNlIFwiUUIyXCI6XHJcblx0XHRcdFx0XHRpZiggYXR0cnMgIT0gbnVsbCAmJiBhdHRycy5MZW5ndGggPiA3KVxyXG5cdFx0XHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1SdXNoID0gbVNpbVN0dWZmLlFiU2ltUnVuKC8qUlMqL2F0dHJzWzBdLCAvKlJQKi9hdHRyc1sxXSwvKk1TKi9hdHRyc1syXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbVBhc3MgPSBtU2ltU3R1ZmYuU2ltUGFzcygvKlBTKi9hdHRyc1s0XSwvKlBDKi9hdHRyc1s1XSwgLypQQSovYXR0cnNbNl0sIC8qQVBCKi9hdHRyc1s3XSk7XHJcblx0XHRcdFx0XHRcdHNpbVBvY2tldCA9IG1TaW1TdHVmZi5TaW1Qb2NrZXQoLypSUyovYXR0cnNbMF0sIC8qTVMqL2F0dHJzWzJdKTtcclxuXHRcdFx0XHRcdFx0bmV3VmFsdWUgID0gc3RyaW5nLkZvcm1hdCggXHJcblx0XHRcdFx0XHRcdFx0XCJ7MH0sIHsxfSB7Mn0sIEZhY2U9MHh7Mzp4fSwgI3s0Onh9LCB7NX0sIHs2fSwgezd9LCB7OH0sIHs5fSwgezEwfSwgezExfSwgezEyfSAsW3sxM30sIHsxNH0sIHsxNX0gXVwiLFxyXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uLCBmTmFtZSwgbE5hbWUsIGZhY2UsIGplcnNleU51bWJlciwgYXR0cnNbMF0sIGF0dHJzWzFdLGF0dHJzWzJdLGF0dHJzWzNdLFxyXG5cdFx0XHRcdFx0XHRcdGF0dHJzWzRdLGF0dHJzWzVdLGF0dHJzWzZdLCBhdHRyc1s3XSwgc2ltUnVzaCwgc2ltUGFzcywgc2ltUG9ja2V0KTsgXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwiUkIxXCI6IGNhc2UgXCJSQjJcIjogXHJcblx0XHRcdFx0Y2FzZSBcIlJCM1wiOiBjYXNlIFwiUkI0XCI6XHJcblx0XHRcdFx0XHRpZiggYXR0cnMgIT0gbnVsbCAmJiBhdHRycy5MZW5ndGggPiA1KVxyXG5cdFx0XHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1SdXNoICAgID0gbVNpbVN0dWZmLlJiU2ltUnVzaCgvKlJTKi9hdHRyc1swXSwvKlJQKi9hdHRyc1sxXSwvKk1TKi9hdHRyc1szXSwvKkhQKi9hdHRyc1s0XSk7XHJcblx0XHRcdFx0XHRcdHNpbUNhdGNoICAgPSBtU2ltU3R1ZmYuU2ltQ2F0Y2goLypSRUMqL2F0dHJzWzVdKTtcclxuXHRcdFx0XHRcdFx0c2ltWVBDICAgICA9IG1TaW1TdHVmZi5TaW1ZUEMoLypNUyovYXR0cnNbMl0sIC8qUkVDKi9hdHRyc1s1XSApO1xyXG5cdFx0XHRcdFx0XHRzaW1UYXJnZXRzID0gbVNpbVN0dWZmLlNpbVRhcmdldHMoLypNUyovYXR0cnNbMl0pO1xyXG5cdFx0XHRcdFx0XHRuZXdWYWx1ZSAgPSBzdHJpbmcuRm9ybWF0KCBcclxuXHRcdFx0XHRcdFx0XHRcInswfSwgezF9IHsyfSwgRmFjZT0weHszOnh9LCAjezQ6eH0sIHs1fSwgezZ9LCB7N30sIHs4fSwgezl9LCB7MTB9ICxbezExfSwgezEyfSAsezEzfSwgezE0fSBdXCIsXHJcblx0XHRcdFx0XHRcdFx0cG9zaXRpb24sIGZOYW1lLCBsTmFtZSwgZmFjZSwgamVyc2V5TnVtYmVyLCBhdHRyc1swXSwgYXR0cnNbMV0sYXR0cnNbMl0sYXR0cnNbM10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1s0XSwgYXR0cnNbNV0sIHNpbVJ1c2gsIHNpbUNhdGNoLCBzaW1ZUEMsIHNpbUNhdGNoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJXUjFcIjogY2FzZSBcIldSMlwiOiBcclxuXHRcdFx0XHRjYXNlIFwiV1IzXCI6IGNhc2UgXCJXUjRcIjpcclxuXHRcdFx0XHRjYXNlIFwiVEUxXCI6IGNhc2UgXCJURTJcIjpcclxuXHRcdFx0XHRcdGlmKCBhdHRycyAhPSBudWxsICYmIGF0dHJzLkxlbmd0aCA+IDUpXHJcblx0XHRcdFx0XHR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbVJ1c2ggICAgPSAwO1xyXG5cdFx0XHRcdFx0XHRzaW1DYXRjaCAgID0gbVNpbVN0dWZmLlNpbUNhdGNoKC8qUkVDKi9hdHRyc1s1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbVlQQyA9IG1TaW1TdHVmZi5TaW1ZUEMoLypNUyovYXR0cnNbMl0sIC8qUkVDKi9hdHRyc1s1XSk7XHJcblx0XHRcdFx0XHRcdHNpbVRhcmdldHMgPSBtU2ltU3R1ZmYuU2ltVGFyZ2V0cygvKk1TKi9hdHRyc1syXSk7XHJcblx0XHRcdFx0XHRcdG5ld1ZhbHVlICA9IHN0cmluZy5Gb3JtYXQoIFxyXG5cdFx0XHRcdFx0XHRcdFwiezB9LCB7MX0gezJ9LCBGYWNlPTB4ezM6eH0sICN7NDp4fSwgezV9LCB7Nn0sIHs3fSwgezh9LCB7OX0sIHsxMH0gLFt7MTF9LCB7MTJ9ICx7MTN9LCB7MTR9IF1cIixcclxuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbiwgZk5hbWUsIGxOYW1lLCBmYWNlLCBqZXJzZXlOdW1iZXIsIGF0dHJzWzBdLCBhdHRyc1sxXSxhdHRyc1syXSxhdHRyc1szXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzWzRdLCBhdHRyc1s1XSwgc2ltUnVzaCwgc2ltQ2F0Y2gsIHNpbVlQQywgc2ltQ2F0Y2gpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIlBcIjogY2FzZSBcIktcIjpcclxuXHRcdFx0XHRcdGlmKCBhdHRycyAhPSBudWxsICYmIGF0dHJzLkxlbmd0aCA+IDUpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHNpbUtBID0gbVNpbVN0dWZmLlBLU2ltS2ljaygvKktBKi9hdHRyc1s0XSwgLypBS0IqL2F0dHJzWzVdKTtcclxuXHRcdFx0XHRcdFx0bmV3VmFsdWUgID0gc3RyaW5nLkZvcm1hdCggXHJcblx0XHRcdFx0XHRcdFx0XCJ7MH0sIHsxfSB7Mn0sIEZhY2U9MHh7Mzp4fSwgI3s0Onh9LCB7NX0sIHs2fSwgezd9LCB7OH0sIHs5fSwgezEwfSAsW3sxMX0gXVwiLFxyXG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uLCBmTmFtZSwgbE5hbWUsIGZhY2UsIGplcnNleU51bWJlciwgYXR0cnNbMF0sIGF0dHJzWzFdLGF0dHJzWzJdLGF0dHJzWzNdLFxyXG5cdFx0XHRcdFx0XHRcdGF0dHJzWzRdLGF0dHJzWzVdLCBzaW1LQSk7IFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoIG5ld1ZhbHVlICE9IG51bGwgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBvbGRWYWx1ZSwgbmV3VmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIFVwZGF0ZVRlYW1TaW1QYXNzRGVmZW5zZShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuICAgICAgICAgICAgc3RyaW5nIHJlICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJSRVwiKTtcclxuXHRcdFx0c3RyaW5nIGxlICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMRVwiKTtcclxuXHRcdFx0c3RyaW5nIG50ICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJOVFwiKTtcclxuXHRcdFx0c3RyaW5nIGxvbGIgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMT0xCXCIpO1xyXG5cdFx0XHRzdHJpbmcgbGlsYiA9IEdldFBsYXllclN0cmluZyh0ZWFtLCBcIkxJTEJcIik7XHJcblx0XHRcdHN0cmluZyByaWxiID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiUklMQlwiKTtcclxuXHRcdFx0c3RyaW5nIHJvbGIgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJST0xCXCIpO1xyXG5cdFx0XHRzdHJpbmcgcmNiICA9IEdldFBsYXllclN0cmluZyh0ZWFtLCBcIlJDQlwiKTtcclxuXHRcdFx0c3RyaW5nIGxjYiAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMQ0JcIik7XHJcblx0XHRcdHN0cmluZyBmcyAgID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiRlNcIik7XHJcblx0XHRcdHN0cmluZyBzcyAgID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiU1NcIik7XHJcblxyXG5cdFx0XHRpZiggcmUgPT0gbnVsbCAgIHx8IGxlID09IG51bGwgICB8fCBudCA9PSBudWxsICAgfHwgXHJcblx0XHRcdFx0bG9sYiA9PSBudWxsIHx8IGxpbGIgPT0gbnVsbCB8fCByaWxiID09IG51bGwgfHwgcm9sYiA9PSBudWxsIHx8XHJcblx0XHRcdFx0cmNiID09IG51bGwgIHx8IGxjYiA9PSBudWxsIHx8IGZzID09IG51bGwgfHwgc3MgPT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyB3ZSBuZWVkIHRoZSBlbnRpcmUgZGVmZW5zZSBpbiBvcmRlciB0byB1cGRhdGUgdGhpcy5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aW50W10gcmVBdHRycyAgID0gSW5wdXRQYXJzZXIuR2V0SW50cyhyZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSBsZUF0dHJzID0gSW5wdXRQYXJzZXIuR2V0SW50cyhsZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSBudEF0dHJzID0gSW5wdXRQYXJzZXIuR2V0SW50cyhudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSBsb2xiQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKGxvbGIsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW50W10gbGlsYkF0dHJzID0gSW5wdXRQYXJzZXIuR2V0SW50cyhsaWxiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIHJpbGJBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMocmlsYiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSByb2xiQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKHJvbGIsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW50W10gcmNiQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKHJjYiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSBsY2JBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMobGNiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIGZzQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKGZzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIHNzQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKHNzLCBmYWxzZSk7XHJcblx0XHRcdFxyXG5cdFx0XHRpbnRbXSBwYXNzRGVmID0gbVNpbVN0dWZmLkdldFNpbVBhc3NEZWZlbnNlKFxyXG5cdFx0XHRcdHJvbGJBdHRyc1s0XSwgcmlsYkF0dHJzWzRdLCBsaWxiQXR0cnNbNF0sIGxvbGJBdHRyc1s0XSxcclxuXHRcdFx0XHRyY2JBdHRyc1s0XSwgIGxjYkF0dHJzWzRdLCAgZnNBdHRyc1s0XSwgICBzc0F0dHJzWzRdKTtcclxuXHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgcmUsICAgUmVwbGFjZVNpbUF0dHIocmUsICAgMiwwKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgbnQgLCAgUmVwbGFjZVNpbUF0dHIobnQsICAgMiwwKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgbGUgLCAgUmVwbGFjZVNpbUF0dHIobGUsICAgMiwwKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgcm9sYiwgUmVwbGFjZVNpbUF0dHIocm9sYiwgMiwgcGFzc0RlZlswXSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHJpbGIsIFJlcGxhY2VTaW1BdHRyKHJpbGIsIDIsIHBhc3NEZWZbMV0pKTtcclxuXHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBsaWxiLCBSZXBsYWNlU2ltQXR0cihsaWxiLCAyLCBwYXNzRGVmWzJdKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgbG9sYiwgUmVwbGFjZVNpbUF0dHIobG9sYiwgMiwgcGFzc0RlZlszXSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHJjYiwgIFJlcGxhY2VTaW1BdHRyKHJjYiwgIDIsIHBhc3NEZWZbNF0pKTtcclxuXHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBsY2IsICBSZXBsYWNlU2ltQXR0cihsY2IsICAyLCBwYXNzRGVmWzVdKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgZnMsICAgUmVwbGFjZVNpbUF0dHIoZnMsICAgMiwgcGFzc0RlZls2XSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHNzLCAgIFJlcGxhY2VTaW1BdHRyKHNzLCAgIDIsIHBhc3NEZWZbN10pKTtcclxuXHJcbiAgICAgICAgICAgIGludCBvdmVyYWxsU2ltUGFzc0RlZiA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyZUF0dHJzWzJdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7IGlmIChyZUF0dHJzWzRdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7XHJcbiAgICAgICAgICAgIGlmIChsZUF0dHJzWzJdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7IGlmIChsZUF0dHJzWzRdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7XHJcbiAgICAgICAgICAgIGlmIChudEF0dHJzWzJdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7IGlmIChudEF0dHJzWzRdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7XHJcbiAgICAgICAgICAgIGlmIChsb2xiQXR0cnNbMl0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKzsgaWYgKGxvbGJBdHRyc1s0XSA+IDQ5KSBvdmVyYWxsU2ltUGFzc0RlZisrO1xyXG4gICAgICAgICAgICBpZiAobGlsYkF0dHJzWzJdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7IGlmIChsaWxiQXR0cnNbNF0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKztcclxuICAgICAgICAgICAgaWYgKHJpbGJBdHRyc1syXSA+IDQ5KSBvdmVyYWxsU2ltUGFzc0RlZisrOyBpZiAocmlsYkF0dHJzWzRdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7XHJcbiAgICAgICAgICAgIGlmIChyb2xiQXR0cnNbMl0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKzsgaWYgKHJvbGJBdHRyc1s0XSA+IDQ5KSBvdmVyYWxsU2ltUGFzc0RlZisrO1xyXG4gICAgICAgICAgICBpZiAocmNiQXR0cnNbMl0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKzsgaWYgKHJjYkF0dHJzWzRdID4gNDkpIG92ZXJhbGxTaW1QYXNzRGVmKys7XHJcbiAgICAgICAgICAgIGlmIChsY2JBdHRyc1syXSA+IDQ5KSBvdmVyYWxsU2ltUGFzc0RlZisrOyBpZiAobGNiQXR0cnNbNF0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKztcclxuICAgICAgICAgICAgaWYgKGZzQXR0cnNbMl0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKzsgaWYgKGZzQXR0cnNbNF0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKztcclxuICAgICAgICAgICAgaWYgKHNzQXR0cnNbMl0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKzsgaWYgKHNzQXR0cnNbNF0gPiA0OSkgb3ZlcmFsbFNpbVBhc3NEZWYrKztcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cHJpdmF0ZSB2b2lkIFVwZGF0ZVRlYW1TaW1QYXNzUnVzaChzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJlICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJSRVwiKTtcclxuXHRcdFx0c3RyaW5nIGxlICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMRVwiKTtcclxuXHRcdFx0c3RyaW5nIG50ICAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJOVFwiKTtcclxuXHRcdFx0c3RyaW5nIGxvbGIgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMT0xCXCIpO1xyXG5cdFx0XHRzdHJpbmcgbGlsYiA9IEdldFBsYXllclN0cmluZyh0ZWFtLCBcIkxJTEJcIik7XHJcblx0XHRcdHN0cmluZyByaWxiID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiUklMQlwiKTtcclxuXHRcdFx0c3RyaW5nIHJvbGIgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJST0xCXCIpO1xyXG5cdFx0XHRzdHJpbmcgcmNiICA9IEdldFBsYXllclN0cmluZyh0ZWFtLCBcIlJDQlwiKTtcclxuXHRcdFx0c3RyaW5nIGxjYiAgPSBHZXRQbGF5ZXJTdHJpbmcodGVhbSwgXCJMQ0JcIik7XHJcblx0XHRcdHN0cmluZyBmcyAgID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiRlNcIik7XHJcblx0XHRcdHN0cmluZyBzcyAgID0gR2V0UGxheWVyU3RyaW5nKHRlYW0sIFwiU1NcIik7XHJcblxyXG5cdFx0XHRpZiggcmUgPT0gbnVsbCAgIHx8IGxlID09IG51bGwgICB8fCBudCA9PSBudWxsICAgfHwgXHJcblx0XHRcdFx0bG9sYiA9PSBudWxsIHx8IGxpbGIgPT0gbnVsbCB8fCByaWxiID09IG51bGwgfHwgcm9sYiA9PSBudWxsIHx8XHJcblx0XHRcdFx0cmNiID09IG51bGwgIHx8IGxjYiA9PSBudWxsIHx8IGZzID09IG51bGwgfHwgc3MgPT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyB3ZSBuZWVkIHRoZSBlbnRpcmUgZGVmZW5zZSBpbiBvcmRlciB0byB1cGRhdGUgdGhpcy5cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aW50W10gcmVBdHRycyAgID0gSW5wdXRQYXJzZXIuR2V0SW50cyhyZSxmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIGxlQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKGxlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIG50QXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKG50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIGxvbGJBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMobG9sYiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSBsaWxiQXR0cnMgPSBJbnB1dFBhcnNlci5HZXRJbnRzKGxpbGIsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW50W10gcmlsYkF0dHJzID0gSW5wdXRQYXJzZXIuR2V0SW50cyhyaWxiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIHJvbGJBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMocm9sYiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpbnRbXSByY2JBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMocmNiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGludFtdIGxjYkF0dHJzID0gSW5wdXRQYXJzZXIuR2V0SW50cyhsY2IsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW50W10gZnNBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMoZnMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaW50W10gc3NBdHRycyA9IElucHV0UGFyc2VyLkdldEludHMoc3MsIGZhbHNlKTtcclxuXHRcdFx0XHJcblx0XHRcdGludFtdIHJ1c2hEZWYgPSBtU2ltU3R1ZmYuR2V0U2ltUGFzc1J1c2goXHJcblx0XHRcdFx0cmVBdHRyc1syXStyZUF0dHJzWzNdLCBudEF0dHJzWzJdK250QXR0cnNbM10sXHJcblx0XHRcdFx0bGVBdHRyc1syXStsZUF0dHJzWzNdLFxyXG5cdFx0XHRcdHJvbGJBdHRyc1syXStyb2xiQXR0cnNbM10sIHJpbGJBdHRyc1syXStyaWxiQXR0cnNbM10sIFxyXG5cdFx0XHRcdGxpbGJBdHRyc1syXStsaWxiQXR0cnNbM10sIGxvbGJBdHRyc1syXStsb2xiQXR0cnNbM10gKTtcclxuXHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgcmUsICAgUmVwbGFjZVNpbUF0dHIocmUsICAgMSwgcnVzaERlZlswXSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIG50LCAgIFJlcGxhY2VTaW1BdHRyKG50LCAgIDEsIHJ1c2hEZWZbMV0pKTtcclxuXHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBsZSwgICBSZXBsYWNlU2ltQXR0cihsZSwgICAxLCBydXNoRGVmWzJdKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgcm9sYiwgUmVwbGFjZVNpbUF0dHIocm9sYiwgMSwgcnVzaERlZlszXSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHJpbGIsIFJlcGxhY2VTaW1BdHRyKHJpbGIsIDEsIHJ1c2hEZWZbNF0pKTtcclxuXHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBsaWxiLCBSZXBsYWNlU2ltQXR0cihsaWxiLCAxLCBydXNoRGVmWzVdKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgbG9sYiwgUmVwbGFjZVNpbUF0dHIobG9sYiwgMSwgcnVzaERlZls2XSkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHJjYiwgIFJlcGxhY2VTaW1BdHRyKHJjYiwgIDEsIDApKTtcclxuXHRcdFx0UmVwbGFjZVBsYXllcih0ZWFtLCBsY2IsICBSZXBsYWNlU2ltQXR0cihsY2IsICAxLCAwKSk7XHJcblx0XHRcdFJlcGxhY2VQbGF5ZXIodGVhbSwgZnMsICAgUmVwbGFjZVNpbUF0dHIoZnMsICAgMSwgMCkpO1xyXG5cdFx0XHRSZXBsYWNlUGxheWVyKHRlYW0sIHNzLCAgIFJlcGxhY2VTaW1BdHRyKHNzLCAgIDEsIHJ1c2hEZWZbN10pKTtcclxuXHRcdH1cclxuXHJcblx0XHRSZWdleCBtX1NpbVJlZ2V4ID0gbnVsbDtcclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyByZXBsYWNlcyB0aGUgc2ltIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGluZVwiPkxpa2U6IFxyXG5cdFx0Ly8vIFwiTE9MQiwgdHJldiBBTEJFUlRTLCBGYWNlPTB4MjYsICM1MSwgMjUsIDMxLCAzMSwgMzEsIDM4LCAzMSAsWzMwLCAyMCBdXCI8L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibnVtXCI+MSAtPiAnMzAnLCAyLT4nMjAnIGFib3ZlLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJuZXdWYWx1ZVwiPnRoZSBuZXcgdmFsdWU8L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPlRoZSBpbnB1dCBzdHJpbmcgd2l0aCB0aGUgc3BlY2lmaWVkIHJlcGxhY2VtZW50LjwvcmV0dXJucz5cclxuXHRcdHByaXZhdGUgc3RyaW5nIFJlcGxhY2VTaW1BdHRyKHN0cmluZyBsaW5lLCBpbnQgbnVtLCBpbnQgbmV3VmFsdWUpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXQgPSBsaW5lO1xyXG5cdFx0XHRpZiggbV9TaW1SZWdleCA9PSBudWxsKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bV9TaW1SZWdleCA9IG5ldyBSZWdleChcIlxcXFxbXFxcXHMqKFswLTldKylcXFxccyosXFxcXHMqKFswLTldKylcXFxccypcXFxcXVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRNYXRjaCBtID0gbV9TaW1SZWdleC5NYXRjaChsaW5lKTtcclxuXHRcdFx0aWYoIG0gIT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgaW5kZXggPSBtLkdyb3Vwc1tudW1dLkluZGV4O1xyXG5cdFx0XHRcdGludCBsZW4gICA9IG0uR3JvdXBzW251bV0uVG9TdHJpbmcoKS5MZW5ndGg7XHJcblx0XHRcdFx0cmV0ID0gc3RyaW5nLkZvcm1hdChcInswfXsxfXsyfVwiLCBcclxuXHRcdFx0XHRcdGxpbmUuU3Vic3RyaW5nKDAsIGluZGV4KSxcclxuXHRcdFx0XHRcdG5ld1ZhbHVlLFxyXG5cdFx0XHRcdFx0bGluZS5TdWJzdHJpbmcoaW5kZXgrbGVuKSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcbiAgICB9XHJcblxyXG4gICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgLy8vIFN1bW1hcnkgZGVzY3JpcHRpb24gZm9yIFNpbVN0dWZmLlxyXG4gICAgLy8vIDwvc3VtbWFyeT5cclxuICAgIHB1YmxpYyBjbGFzcyBUZWNtb25zdGVyU2ltU3R1ZmZcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgY29uc3QgaW50IEZST05UXzdfU0lNX1BPSU5UX1BPT0wgPSAyMDA7XHJcbiAgICAgICAgcHVibGljIGNvbnN0IGludCBGUk9OVF83X01JTl9TSU1fUEFTU19SVVNIID0gMTM7XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZWNtb25zdGVyU2ltU3R1ZmYoKVxyXG4gICAgICAgIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyB0aGUgU2ltUG9ja2V0IHZhbHVlIHdoZW4gcGFzc2VkIHRoZSBRQidzXHJcbiAgICAgICAgLy8vIE1TLlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIGludCBTaW1Qb2NrZXQoaW50IFJTLCBpbnQgTVMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0ID0gMDtcclxuICAgICAgICAgICAgaWYgKFJTICsgTVMgPiA5OSlcclxuICAgICAgICAgICAgICAgIHJldCA9IDA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFJTICsgTVMgPiA4MSlcclxuICAgICAgICAgICAgICAgIHJldCA9IDE7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldCA9IDM7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBpbnQgU2ltUGFzcyhpbnQgUFMsIGludCBQQywgaW50IFBBLCBpbnQgQVBCKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHJldCA9IChpbnQpTWF0aC5Sb3VuZCgoZG91YmxlKSAoKChQUyAtIDUwLjApICsgKFBDIC0gMzEuMCkgKyAoUEEgLSAzMS4wKSArIChBUEIgLSAzMS4wKSkgLyAxNzcpICogMTUpO1xyXG4gICAgICAgICAgICBpZiAocmV0IDwgMClcclxuICAgICAgICAgICAgICAgIHJldCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFFiU2ltUnVuKGludCBSUywgaW50IFJQLCBpbnQgTVMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0ID0gKGludClNYXRoLlJvdW5kKChkb3VibGUpKCgoUlMgLSAzMS4wKSArIChSUCAtIDI1LjApICsgKE1TIC0gMTMuMCkpIC8gOTMpICogMTUpO1xyXG4gICAgICAgICAgICBpZiAocmV0IDwgMClcclxuICAgICAgICAgICAgICAgIHJldCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNpbVlQQyhpbnQgTVMsIGludCBSRUMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0ID0gKGludClNYXRoLlJvdW5kKChkb3VibGUpKCgoKE1TIC0gMzEuMCkgKyAoUkVDIC0gMTMuMCkpIC8gMTA2LjApKSAqIDE1KTtcclxuICAgICAgICAgICAgaWYgKHJldCA8IDApIHJldCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNpbVRhcmdldHMoaW50IE1TKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHJldCA9IE1TIC8gNDtcclxuICAgICAgICAgICAgaWYgKHJldCA+IDE1KVxyXG4gICAgICAgICAgICAgICAgcmV0ID0gMTU7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFNpbUNhdGNoKGludCBSRUMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0ID0gKGludClNYXRoLlJvdW5kKChkb3VibGUpKCgoUkVDIC0gMTMuMCkgLyA2OCkpICogMTUpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBSYlNpbVJ1c2goaW50IFJTLCBpbnQgUlAsIGludCBNUywgaW50IEhQKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHJldCA9IDA7XHJcbiAgICAgICAgICAgIHJldCA9IChpbnQpTWF0aC5Sb3VuZCgoZG91YmxlKSgoKFJTIC0gMzEuMCkgKyAoUlAgLSAxOS4wKSArIChNUyAtIDMxLjApICsgKEhQIC0gMTMuMCkpIC8gMTc2KSAqIDE1KTtcclxuICAgICAgICAgICAgaWYgKHJldCA8IDApIHJldCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFBLU2ltS2ljayhpbnQgS0EsIGludCBBS0IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0ID0gKGludClNYXRoLlJvdW5kKChkb3VibGUpKChLQSAtIDM4LjApIC8gNDMpICogMTUpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnRbXSBHZXRTaW1QYXNzRGVmZW5zZShcclxuICAgICAgICAgICAgaW50IHJvbGJJbnRzLCBpbnQgcmlsYkludHMsIGludCBsaWxiSW50cywgaW50IGxvbGJJbnRzLFxyXG4gICAgICAgICAgICBpbnQgcmNiSW50cywgaW50IGxjYkludHMsIGludCBmc0ludHMsIGludCBzc0ludHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBkb3VibGUgdG90YWxJbnRzID0gcm9sYkludHMgKyByaWxiSW50cyArIGxpbGJJbnRzICsgbG9sYkludHMgKyByY2JJbnRzICsgbGNiSW50cyArIGZzSW50cyArIHNzSW50cztcclxuICAgICAgICAgICAgZG91YmxlIHRvdGFsU2ltUG9pbnRzID0gMjU0O1xyXG4gICAgICAgICAgICBpbnQgcm9sYlBvaW50cywgcmlsYlBvaW50cywgbGlsYlBvaW50cywgbG9sYlBvaW50cywgcmNiUG9pbnRzLCBsY2JQb2ludHMsIGZzUG9pbnRzLCBzc1BvaW50cztcclxuXHJcbiAgICAgICAgICAgIHJvbGJQb2ludHMgPSAoaW50KSgocm9sYkludHMgLyB0b3RhbEludHMpICogdG90YWxTaW1Qb2ludHMpO1xyXG4gICAgICAgICAgICByaWxiUG9pbnRzID0gKGludCkoKHJpbGJJbnRzIC8gdG90YWxJbnRzKSAqIHRvdGFsU2ltUG9pbnRzKTtcclxuICAgICAgICAgICAgLy9saWxiUG9pbnRzID0gKGludCkoKGxpbGJJbnRzIC8gdG90YWxJbnRzICkqIHRvdGFsU2ltUG9pbnRzKTtcclxuICAgICAgICAgICAgbG9sYlBvaW50cyA9IChpbnQpKChsb2xiSW50cyAvIHRvdGFsSW50cykgKiB0b3RhbFNpbVBvaW50cyk7XHJcbiAgICAgICAgICAgIHJjYlBvaW50cyA9IChpbnQpKChyY2JJbnRzIC8gdG90YWxJbnRzKSAqIHRvdGFsU2ltUG9pbnRzKTtcclxuICAgICAgICAgICAgbGNiUG9pbnRzID0gKGludCkoKGxjYkludHMgLyB0b3RhbEludHMpICogdG90YWxTaW1Qb2ludHMpO1xyXG4gICAgICAgICAgICBmc1BvaW50cyA9IChpbnQpKChmc0ludHMgLyB0b3RhbEludHMpICogdG90YWxTaW1Qb2ludHMpO1xyXG4gICAgICAgICAgICBzc1BvaW50cyA9IChpbnQpKChzc0ludHMgLyB0b3RhbEludHMpICogdG90YWxTaW1Qb2ludHMpO1xyXG5cclxuICAgICAgICAgICAgbGlsYlBvaW50cyA9IDEgKyAoaW50KSh0b3RhbFNpbVBvaW50c1xyXG4gICAgICAgICAgICAgICAgLVxyXG4gICAgICAgICAgICAgICAgKHJjYlBvaW50cyArIGxjYlBvaW50cyArIGZzUG9pbnRzICsgcm9sYlBvaW50cyArIHNzUG9pbnRzICtcclxuICAgICAgICAgICAgICAgIHJpbGJQb2ludHMgKyBsb2xiUG9pbnRzKSk7XHJcblxyXG4gICAgICAgICAgICBpbnRbXSByZXQgPSBuZXcgaW50WzhdO1xyXG4gICAgICAgICAgICByZXRbMF0gPSByb2xiUG9pbnRzO1xyXG4gICAgICAgICAgICByZXRbMV0gPSByaWxiUG9pbnRzO1xyXG4gICAgICAgICAgICByZXRbMl0gPSBsaWxiUG9pbnRzO1xyXG4gICAgICAgICAgICByZXRbM10gPSBsb2xiUG9pbnRzO1xyXG4gICAgICAgICAgICByZXRbNF0gPSByY2JQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs1XSA9IGxjYlBvaW50cztcclxuICAgICAgICAgICAgcmV0WzZdID0gZnNQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs3XSA9IHNzUG9pbnRzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnRbXSBHZXRTaW1QYXNzUnVzaChcclxuICAgICAgICAgICAgZG91YmxlIHJlU2Fja3MsIGRvdWJsZSBudFNhY2tzLCBkb3VibGUgbGVTYWNrcywgZG91YmxlIHJvbGJTYWNrcyxcclxuICAgICAgICAgICAgZG91YmxlIHJpbGJTYWNrcywgZG91YmxlIGxpbGJTYWNrcywgZG91YmxlIGxvbGJTYWNrcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGRvdWJsZSB0b3RhbFNhY2tzID0gcmVTYWNrcyArIG50U2Fja3MgKyBsZVNhY2tzICsgcm9sYlNhY2tzICsgcmlsYlNhY2tzICsgbGlsYlNhY2tzICsgbG9sYlNhY2tzO1xyXG5cclxuICAgICAgICAgICAgaW50IHRvdGFsU2ltUG9pbnRzID0gRlJPTlRfN19TSU1fUE9JTlRfUE9PTDtcclxuICAgICAgICAgICAgaW50IG1pblByID0gRlJPTlRfN19NSU5fU0lNX1BBU1NfUlVTSDtcclxuXHJcbiAgICAgICAgICAgIGludCByZVBvaW50cywgbnRQb2ludHMsIGxlUG9pbnRzLCByb2xiUG9pbnRzLCByaWxiUG9pbnRzLCBsaWxiUG9pbnRzLCBsb2xiUG9pbnRzLCBzc1BvaW50cztcclxuICAgICAgICAgICAgaW50IGRiUG9pbnRzID0gMDtcclxuICAgICAgICAgICAgaW50IGNiUG9pbnRzID0gMDtcclxuICAgICAgICAgICAgaW50IGZyb250N1BvaW50cyA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAodG90YWxTYWNrcyA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZVBvaW50cyA9IG50UG9pbnRzID0gbGVQb2ludHMgPSByb2xiUG9pbnRzID0gcmlsYlBvaW50cyA9IGxpbGJQb2ludHMgPSBsb2xiUG9pbnRzID0gc3NQb2ludHMgPSAzMTtcclxuICAgICAgICAgICAgICAgIHJlUG9pbnRzICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZVBvaW50cyA9IE1hdGguTWF4KChpbnQpKChyZVNhY2tzIC8gdG90YWxTYWNrcykgKiB0b3RhbFNpbVBvaW50cyksIG1pblByKTtcclxuICAgICAgICAgICAgICAgIGxlUG9pbnRzID0gTWF0aC5NYXgoKGludCkoKGxlU2Fja3MgLyB0b3RhbFNhY2tzKSAqIHRvdGFsU2ltUG9pbnRzKSwgbWluUHIpO1xyXG4gICAgICAgICAgICAgICAgbnRQb2ludHMgPSBNYXRoLk1heCgoaW50KSgobnRTYWNrcyAvIHRvdGFsU2Fja3MpICogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcbiAgICAgICAgICAgICAgICByb2xiUG9pbnRzID0gTWF0aC5NYXgoKGludCkoKHJvbGJTYWNrcyAvIHRvdGFsU2Fja3MpICogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcbiAgICAgICAgICAgICAgICByaWxiUG9pbnRzID0gTWF0aC5NYXgoKGludCkoKHJpbGJTYWNrcyAvIHRvdGFsU2Fja3MpICogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcbiAgICAgICAgICAgICAgICBsaWxiUG9pbnRzID0gTWF0aC5NYXgoKGludCkoKGxpbGJTYWNrcyAvIHRvdGFsU2Fja3MpICogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcbiAgICAgICAgICAgICAgICBsb2xiUG9pbnRzID0gTWF0aC5NYXgoKGludCkoKGxvbGJTYWNrcyAvIHRvdGFsU2Fja3MpICogdG90YWxTaW1Qb2ludHMpLCBtaW5Qcik7XHJcblxyXG4gICAgICAgICAgICAgICAgZnJvbnQ3UG9pbnRzID0gcmVQb2ludHMgKyBsZVBvaW50cyArIG50UG9pbnRzICsgcm9sYlBvaW50cyArXHJcbiAgICAgICAgICAgICAgICAgICAgcmlsYlBvaW50cyArIGxpbGJQb2ludHMgKyBsb2xiUG9pbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgIGRiUG9pbnRzID0gKGludCkoMjU1IC0gZnJvbnQ3UG9pbnRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYlBvaW50cyA9IGRiUG9pbnRzIC8gNDtcclxuICAgICAgICAgICAgICAgIHNzUG9pbnRzID0gKGludCkoMjU1IC0gKCgzICogY2JQb2ludHMpICsgZnJvbnQ3UG9pbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW50W10gcmV0ID0gbmV3IGludFs4XTtcclxuXHJcbiAgICAgICAgICAgIHJldFswXSA9IHJlUG9pbnRzO1xyXG4gICAgICAgICAgICByZXRbMV0gPSBudFBvaW50cztcclxuICAgICAgICAgICAgcmV0WzJdID0gbGVQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFszXSA9IHJvbGJQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs0XSA9IHJpbGJQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs1XSA9IGxpbGJQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs2XSA9IGxvbGJQb2ludHM7XHJcbiAgICAgICAgICAgIHJldFs3XSA9IHNzUG9pbnRzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sXHJcbntcclxuICAgICAgICBcclxuICAgIHB1YmxpYyBjbGFzcyBUZWNtb25zdGVyVGVhbVNpbVxyXG4gICAge1xyXG4gICAgICAgIHByb3RlY3RlZCBzdHJpbmcgVGV4dERhdGF7IGdldDsgc2V0OyB9IFxyXG5cclxuICAgICAgICAvLyAnc2Vhc29uJyBvbmx5IHJlYWxseSB1c2VkIGZvciBUU0IyXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBBdXRvVXBkYXRlU2Vhc29uU2ltRGF0YShpbnQgc2Vhc29uLCBzdHJpbmcgdGV4dERhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLlRleHREYXRhID0gdGV4dERhdGE7IC8vICd0aGlzLlRleHREYXRhJyB3aWxsIGJlIHVwZGF0ZWQgYnkgZnVuY3Rpb25zIGNhbGxlZCBiZWxvdyBcclxuICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHRlYW1zRm9yU2Vhc29uID0gR2V0VGVhbXMoc2Vhc29uKTsgLy8gZ2V0IHRoZSBsaXN0IG9mIHRlYW1zIGluIHRoZSB0ZXh0IGRhdGFcclxuICAgICAgICAgICAgLy9VcGRhdGVQbGF5ZXJTaW1BdHRyaWJ1dGVzKCk7IC8vIElmIHdlIHdhbnQgdG8gdXBkYXRlIGFsbCB0aGUgcGxheWVyIHNpbSBkYXRhLCB3ZSBzaG91bGQgdG8gaXQgaGVyZS5cclxuICAgICAgICAgICAgTGlzdDxUZWFtUmF0aW5ncz4gcmF0aW5ncyA9IEdldFRlYW1zUmF0aW5ncyhzZWFzb24sIHRlYW1zRm9yU2Vhc29uKTsgLy8gY2FsY3VsYXRlIHdpdGggdGVjbW9uc3RlcidzIHJhdGluZ3MgZm9ybXVsYXNcclxuICAgICAgICAgICAgU2ltQXZlcmFnZXMgYXZlcmFnZXMgPSBDYWxjdWxhdGVTaW1BdmVyYWdlcyhyYXRpbmdzKTsgIC8vaG9sZHMgdGhlIGF2ZXJhZ2VzIHNvIHdlIGRvbid0IG5lZWQgdG8gcmUtY2FjdWxhdGUgZWFjaCB0aW1lXHJcbiAgICAgICAgICAgIENhbGN1bGF0ZVNpbURlZmVuc2VzKHJhdGluZ3MsIHJlZiBhdmVyYWdlcyk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgcmF0aW5ncy5Db3VudDsgaSsrIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVXBkYXRlVGVhbVNpbURhdGEoc2Vhc29uLCByYXRpbmdzW2ldLCBhdmVyYWdlcyk7IC8vIGNhbGN1YWx0ZXMgYW5kIHVwZGF0ZXMgdGhlIFRlYW0gc2ltIGRhdGEgaW4gdGhlIHRleHQgZGF0YVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlRleHREYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIENhbGN1bGF0ZVNpbURlZmVuc2VzKExpc3Q8VGVhbVJhdGluZ3M+IHJhdGluZ3MsIHJlZiBTaW1BdmVyYWdlcyBhdmVyYWdlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKFRlYW1SYXRpbmdzIHJhdCBpbiByYXRpbmdzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByYXQudG90YWxSdW5EID0gIChyYXQuZGxSdW5EZWZlbnNlUmF0aW5nIC8gYXZlcmFnZXMuRExfcnVuX2F2ZSkgKiAwLjQgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyYXQubGJSdW5EZWZlbnNlUmF0aW5nIC8gYXZlcmFnZXMuTEJfcnVuX2F2ZSkgKiAwLjQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJhdC5kYlJ1bkRlZmVuc2VSYXRpbmcgLyBhdmVyYWdlcy5EQl9ydW5fYXZlKSAqIDAuMjtcclxuICAgICAgICAgICAgICAgIHJhdC50b3RhbFBhc3NEID0gKHJhdC5kbFBhc3NEZWZlbnNlUmF0aW5nIC8gYXZlcmFnZXMuRExfcGFzc19hdmUpICogMC4yICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmF0LmxiUGFzc0RlZmVuc2VSYXRpbmcgLyBhdmVyYWdlcy5MQl9wYXNzX2F2ZSkgKiAwLjIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJhdC5kYlBhc3NEZWZlbnNlUmF0aW5nIC8gYXZlcmFnZXMuREJfcGFzc19hdmUpICogMC42O1xyXG4gICAgICAgICAgICAgICAgYXZlcmFnZXMuVE9UQUxfUlVOX0RFRkVOU0UgKz0gcmF0LnRvdGFsUnVuRDtcclxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VzLlRPVEFMX1BBU1NfREVGRU5TRSArPSByYXQudG90YWxQYXNzRDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYXZlcmFnZXMuTUlOX1BBU1NfREVGRU5TRSA9PSAwIHx8IHJhdC50b3RhbFBhc3NEIDwgYXZlcmFnZXMuTUlOX1BBU1NfREVGRU5TRSlcclxuICAgICAgICAgICAgICAgICAgICBhdmVyYWdlcy5NSU5fUEFTU19ERUZFTlNFID0gcmF0LnRvdGFsUGFzc0Q7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXZlcmFnZXMuTUlOX1JVTl9ERUZFTlNFID09IDAgfHwgcmF0LnRvdGFsUnVuRCA8IGF2ZXJhZ2VzLk1JTl9SVU5fREVGRU5TRSlcclxuICAgICAgICAgICAgICAgICAgICBhdmVyYWdlcy5NSU5fUlVOX0RFRkVOU0U9IHJhdC50b3RhbFJ1bkQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF0LnRvdGFsUGFzc0QgPiBhdmVyYWdlcy5NQVhfUEFTU19ERUZFTlNFKVxyXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VzLk1BWF9QQVNTX0RFRkVOU0UgPSByYXQudG90YWxQYXNzRDtcclxuICAgICAgICAgICAgICAgIGlmIChyYXQudG90YWxSdW5EID4gYXZlcmFnZXMuTUFYX1JVTl9ERUZFTlNFKVxyXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VzLk1BWF9SVU5fREVGRU5TRSA9IHJhdC50b3RhbFJ1bkQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBVcGRhdGVUZWFtU2ltRGF0YShpbnQgc2Vhc29uLCBUZWFtUmF0aW5ncyByYXRpbmdzLCBTaW1BdmVyYWdlcyBhdmVyYWdlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGRvdWJsZSBzcHJlYWQgPSBhdmVyYWdlcy5NQVhfUlVOX0RFRkVOU0UgLSBhdmVyYWdlcy5NSU5fUlVOX0RFRkVOU0U7XHJcbiAgICAgICAgICAgIGRvdWJsZSBzaW1SdW5EZWZlbnNlID0gTWF0aC5Sb3VuZCgoKHJhdGluZ3MudG90YWxSdW5EIC0gYXZlcmFnZXMuTUlOX1JVTl9ERUZFTlNFKS9zcHJlYWQpKjE1KTtcclxuICAgICAgICAgICAgc3ByZWFkID0gYXZlcmFnZXMuTUFYX1BBU1NfREVGRU5TRSAtIGF2ZXJhZ2VzLk1JTl9QQVNTX0RFRkVOU0U7XHJcbiAgICAgICAgICAgIGRvdWJsZSBzaW1QYXNzRGVmZW5zZSA9IE1hdGguUm91bmQoKChyYXRpbmdzLnRvdGFsUGFzc0QgLSBhdmVyYWdlcy5NSU5fUEFTU19ERUZFTlNFKSAvIHNwcmVhZCkgKiAxNSk7XHJcbiAgICAgICAgICAgIGlmIChzaW1SdW5EZWZlbnNlID4gMHhmKVxyXG4gICAgICAgICAgICAgICAgc2ltUnVuRGVmZW5zZSA9IDB4ZjtcclxuICAgICAgICAgICAgaWYgKHNpbVBhc3NEZWZlbnNlID4gMHhmKVxyXG4gICAgICAgICAgICAgICAgc2ltUGFzc0RlZmVuc2UgPSAweGY7XHJcbiAgICAgICAgICAgIHN0cmluZyBzaW1fZGVmID0gU3RyaW5nLkZvcm1hdChcInswOnh9ezE6eH1cIiwgKGludClzaW1SdW5EZWZlbnNlLCAoaW50KXNpbVBhc3NEZWZlbnNlKTtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyBwYXR0ZXJuID0gU3RyaW5nLkZvcm1hdChcIlRFQU1cXFxccyo9XFxcXHMqezB9XFxcXHMqLD9cXFxccypTaW1EYXRhXFxcXHMqPVxcXFxzKjB4KFswLTlhLWZBLUZde3syfX0pXCIsIHJhdGluZ3MudGVhbSk7XHJcbiAgICAgICAgICAgIFJlZ2V4IHRlYW1TaW1SZWdleCA9IG5ldyBSZWdleChwYXR0ZXJuKTtcclxuICAgICAgICAgICAgaW50IHNlYXNvbkluZGV4ID0gR2V0U2Vhc29uSW5kZXgoc2Vhc29uKTtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHRlYW1TaW1SZWdleC5NYXRjaChUZXh0RGF0YSwgc2Vhc29uSW5kZXgpO1xyXG4gICAgICAgICAgICBzdHJpbmcgb2xkID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBzdGFydCA9IFRleHREYXRhLlN1YnN0cmluZygwLCBtLkdyb3Vwc1sxXS5JbmRleCk7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgbGFzdCA9IFRleHREYXRhLlN1YnN0cmluZyhtLkdyb3Vwc1sxXS5JbmRleCArIDIpO1xyXG4gICAgICAgICAgICAgICAgU3RyaW5nQnVpbGRlciB0bXAgPSBuZXcgU3RyaW5nQnVpbGRlcihUZXh0RGF0YS5MZW5ndGggKyAyMCk7XHJcbiAgICAgICAgICAgICAgICB0bXAuQXBwZW5kKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIHRtcC5BcHBlbmQoc2ltX2RlZik7XHJcbiAgICAgICAgICAgICAgICB0bXAuQXBwZW5kKGxhc3QpO1xyXG4gICAgICAgICAgICAgICAgVGV4dERhdGEgPSB0bXAuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgR2V0U2Vhc29uSW5kZXgoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCByZXRWYWwgPSAwO1xyXG4gICAgICAgICAgICBpZiAoU3RhdGljVXRpbHMuSXNUU0IyQ29udGVudChUZXh0RGF0YSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBwYXR0ZXJuID0gU3RyaW5nLkZvcm1hdChcIl5cXFxccypTRUFTT05cXFxccyt7MH1cIiwgc2Vhc29uKTtcclxuICAgICAgICAgICAgICAgIFJlZ2V4IHNlYXNvblJlZ2V4ID0gbmV3IFJlZ2V4KHBhdHRlcm4pO1xyXG4gICAgICAgICAgICAgICAgTWF0Y2ggbSA9IHNlYXNvblJlZ2V4Lk1hdGNoKFRleHREYXRhKTtcclxuICAgICAgICAgICAgICAgIGlmIChtLlN1Y2Nlc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0VmFsID0gbS5JbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBTaW1BdmVyYWdlcyBDYWxjdWxhdGVTaW1BdmVyYWdlcyhMaXN0PFRlYW1SYXRpbmdzPiByYXRpbmdzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU2ltQXZlcmFnZXMgcmV0VmFsID0gbmV3IFNpbUF2ZXJhZ2VzKCk7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKFRlYW1SYXRpbmdzIHJhdCBpbiByYXRpbmdzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwuUUJfYXZlKz0gcmF0LnFiUmF0aW5nO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsLlJCX2F2ZSs9IHJhdC5yYjFSYXRpbmc7IC8vICsgcmF0LnJiMlJhdGluZyk7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwuV1JfYXZlKz0gKHJhdC53cjFSYXRpbmcgKyByYXQud3IyUmF0aW5nKTtcclxuICAgICAgICAgICAgICAgIHJldFZhbC5URV9hdmUrPSByYXQudGVSYXRpbmc7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwuT0xfYXZlKz0gcmF0Lm9sUmF0aW5nO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsLkRMX3J1bl9hdmUrPSByYXQuZGxSdW5EZWZlbnNlUmF0aW5nO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsLkRMX3Bhc3NfYXZlKz0gcmF0LmRsUGFzc0RlZmVuc2VSYXRpbmc7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwuTEJfcnVuX2F2ZSs9IHJhdC5sYlJ1bkRlZmVuc2VSYXRpbmc7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwuTEJfcGFzc19hdmUrPSByYXQubGJQYXNzRGVmZW5zZVJhdGluZztcclxuICAgICAgICAgICAgICAgIHJldFZhbC5EQl9ydW5fYXZlKz0gcmF0LmRiUnVuRGVmZW5zZVJhdGluZztcclxuICAgICAgICAgICAgICAgIHJldFZhbC5EQl9wYXNzX2F2ZSArPSByYXQuZGJQYXNzRGVmZW5zZVJhdGluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXRWYWwuUUJfYXZlID0gcmV0VmFsLlFCX2F2ZSAvIHJhdGluZ3MuQ291bnQ7XHJcbiAgICAgICAgICAgIHJldFZhbC5SQl9hdmUgPSByZXRWYWwuUkJfYXZlIC8gcmF0aW5ncy5Db3VudDtcclxuICAgICAgICAgICAgcmV0VmFsLldSX2F2ZSA9IHJldFZhbC5XUl9hdmUgLyAocmF0aW5ncy5Db3VudCAqMik7XHJcbiAgICAgICAgICAgIHJldFZhbC5URV9hdmUgPSByZXRWYWwuVEVfYXZlIC8gcmF0aW5ncy5Db3VudDtcclxuICAgICAgICAgICAgcmV0VmFsLk9MX2F2ZSA9IHJldFZhbC5PTF9hdmUgLyByYXRpbmdzLkNvdW50O1xyXG4gICAgICAgICAgICByZXRWYWwuRExfcnVuX2F2ZSA9IHJldFZhbC5ETF9ydW5fYXZlIC8gcmF0aW5ncy5Db3VudDtcclxuICAgICAgICAgICAgcmV0VmFsLkRMX3Bhc3NfYXZlID0gcmV0VmFsLkRMX3Bhc3NfYXZlIC8gcmF0aW5ncy5Db3VudDtcclxuICAgICAgICAgICAgcmV0VmFsLkxCX3J1bl9hdmUgPSByZXRWYWwuTEJfcnVuX2F2ZSAvIHJhdGluZ3MuQ291bnQ7XHJcbiAgICAgICAgICAgIHJldFZhbC5MQl9wYXNzX2F2ZSA9IHJldFZhbC5MQl9wYXNzX2F2ZSAvIHJhdGluZ3MuQ291bnQ7XHJcbiAgICAgICAgICAgIHJldFZhbC5EQl9ydW5fYXZlID0gcmV0VmFsLkRCX3J1bl9hdmUgLyByYXRpbmdzLkNvdW50O1xyXG4gICAgICAgICAgICByZXRWYWwuREJfcGFzc19hdmUgPSByZXRWYWwuREJfcGFzc19hdmUgLyByYXRpbmdzLkNvdW50O1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PFRlYW1SYXRpbmdzPiBHZXRUZWFtc1JhdGluZ3MoaW50IHNlYXNvbiwgTGlzdDxzdHJpbmc+IHRlYW1zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTGlzdDxUZWFtUmF0aW5ncz4gcmV0VmFsID0gbmV3IExpc3Q8VGVhbVJhdGluZ3M+KHRlYW1zLkNvdW50KTtcclxuICAgICAgICAgICAgc3RyaW5nIHNlYXNvbkNodW5rID0gR2V0U2Vhc29uVGV4dChzZWFzb24pO1xyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgdGVhbSBpbiB0ZWFtcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsLkFkZChHZXRUZWFtUmF0aW5ncyhzZWFzb25DaHVuaywgdGVhbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFRlYW1SYXRpbmdzIEdldFRlYW1SYXRpbmdzKHN0cmluZyB0ZXh0RGF0YSwgc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUZWFtUmF0aW5ncyByZXRWYWwgPSBuZXcgVGVhbVJhdGluZ3MoKTtcclxuICAgICAgICAgICAgLy9SUywgUlAsIE1TLCBIUCwgUFMsIFBDLCBQQSwgQVBCLFxyXG4gICAgICAgICAgICBpbnQgUlM9MCwgUlA9MSwgTVM9MiwgSFA9MywgUFM9NCwgUEM9NSwgUEE9NiwgQVBCPTcsIEJDPTQsIFJDPTUsIFBJPTQsIFFVPTU7Ly9UU0IxXHJcbiAgICAgICAgICAgIGlmIChTdGF0aWNVdGlscy5HZXRDb250ZW50VHlwZShUZXh0RGF0YSkgPT0gVFNCQ29udGVudFR5cGUuVFNCMilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgUFMgPSA1OyBQQyA9IDY7IFBBID0gNzsgQVBCID0gODsgQkMgPSA1OyBSQyA9IDY7IFBJID0gNTsgUVUgPSA2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFN0YXRpY1V0aWxzLkdldENvbnRlbnRUeXBlKFRleHREYXRhKSA9PSBUU0JDb250ZW50VHlwZS5UU0IzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBQUyA9IDY7IFBDID0gNzsgUEEgPSA4OyBBUEIgPSA5OyBCQyA9IDY7IFJDID0gNzsgUEkgPSA2OyBRVSA9IDc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGludFtdIHFiMSA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiUUIxXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSByYjEgPSBHZXRQbGF5ZXJJbnRzKHRleHREYXRhLCB0ZWFtLCBcIlJCMVwiKTtcclxuICAgICAgICAgICAgaW50W10gcmIyID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJSQjJcIik7XHJcbiAgICAgICAgICAgIGludFtdIHdyMSA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiV1IxXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSB3cjIgPSBHZXRQbGF5ZXJJbnRzKHRleHREYXRhLCB0ZWFtLCBcIldSMlwiKTtcclxuICAgICAgICAgICAgaW50W10gdGUxID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJURTFcIik7XHJcblxyXG4gICAgICAgICAgICBpbnRbXSBjZW50ZXIgPSBHZXRQbGF5ZXJJbnRzKHRleHREYXRhLCB0ZWFtLCBcIkNcIik7XHJcbiAgICAgICAgICAgIGludFtdIGxnID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJMR1wiKTtcclxuICAgICAgICAgICAgaW50W10gcmcgPSBHZXRQbGF5ZXJJbnRzKHRleHREYXRhLCB0ZWFtLCBcIlJHXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSBsdCA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiTFRcIik7XHJcbiAgICAgICAgICAgIGludFtdIHJ0ID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJSVFwiKTtcclxuXHJcbiAgICAgICAgICAgIGludFtdIHJlID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJSRVwiKTtcclxuICAgICAgICAgICAgaW50W10gbnQgPSBHZXRQbGF5ZXJJbnRzKHRleHREYXRhLCB0ZWFtLCBcIk5UXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSBsZSA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiTEVcIik7XHJcblxyXG4gICAgICAgICAgICBpbnRbXSByb2xiID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJST0xCXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSByaWxiID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJSSUxCXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSBsaWxiID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJMSUxCXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSBsb2xiID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJMT0xCXCIpO1xyXG5cclxuICAgICAgICAgICAgaW50W10gcmNiID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJSQ0JcIik7XHJcbiAgICAgICAgICAgIGludFtdIGxjYiA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiTENCXCIpO1xyXG4gICAgICAgICAgICBpbnRbXSBmcyA9IEdldFBsYXllckludHModGV4dERhdGEsIHRlYW0sIFwiRlNcIik7XHJcbiAgICAgICAgICAgIGludFtdIHNzID0gR2V0UGxheWVySW50cyh0ZXh0RGF0YSwgdGVhbSwgXCJTU1wiKTtcclxuXHJcbiAgICAgICAgICAgICNyZWdpb24gY2FsY3VsYXRpb25zXHJcbiAgICAgICAgICAgIHJldFZhbC50ZWFtID0gdGVhbTtcclxuICAgICAgICAgICAgcmV0VmFsLnFiUmF0aW5nID0gKHFiMVtSU10gKiAwLjA2KSArIChxYjFbUlBdICogMC4wMikgKyAocWIxW01TXSAqIDAuMTIpICsgKHFiMVtIUF0gKiAwLjAyKSArIChxYjFbUFNdICogMC4yMikgKyAocWIxW1BDXSAqIDAuMjMpICsgKHFiMVtQQV0gKiAwLjIzKSArIChxYjFbQVBCXSAqIDAuMSk7XHJcbiAgICAgICAgICAgIHJldFZhbC5yYjFSYXRpbmcgPSAocmIxW1JTXSAqIDAuMTUpICsgKHJiMVtSUF0gKiAwLjE1KSArIChyYjFbTVNdICogMC40MCkgKyAocmIxW0hQXSAqIDAuMjUpICsgKHJiMVtCQ10gKiAwLjAyKSArIChyYjFbUkNdICogMC4wMyk7XHJcbiAgICAgICAgICAgIHJldFZhbC5yYjJSYXRpbmcgPSAocmIyW1JTXSAqIDAuMTUpICsgKHJiMltSUF0gKiAwLjE1KSArIChyYjJbTVNdICogMC40MCkgKyAocmIyW0hQXSAqIDAuMjUpICsgKHJiMltCQ10gKiAwLjAyKSArIChyYjJbUkNdICogMC4wMyk7XHJcbiAgICAgICAgICAgIHJldFZhbC53cjFSYXRpbmcgPSAod3IxW1JTXSAqIDAuMjApICsgKHdyMVtSUF0gKiAwLjE1KSArICh3cjFbTVNdICogMC4yNSkgKyAod3IxW0hQXSAqIDAuMDMpICsgKHdyMVtCQ10gKiAwLjAyKSArICh3cjFbUkNdICogMC4zNSk7XHJcbiAgICAgICAgICAgIHJldFZhbC53cjJSYXRpbmcgPSAod3IyW1JTXSAqIDAuMjApICsgKHdyMltSUF0gKiAwLjE1KSArICh3cjJbTVNdICogMC4yNSkgKyAod3IyW0hQXSAqIDAuMDMpICsgKHdyMltCQ10gKiAwLjAyKSArICh3cjJbUkNdICogMC4zNSk7XHJcbiAgICAgICAgICAgIHJldFZhbC50ZVJhdGluZyA9ICAodGUxW1JTXSAqIDAuMTgpICsgKHRlMVtSUF0gKiAwLjEpICArICh0ZTFbTVNdICogMC4yNSkgKyAodGUxW0hQXSAqIDAuMjUpICsgKHRlMVtCQ10gKiAwLjAyKSArICh0ZTFbUkNdICogMC4yKTtcclxuICAgICAgICAgICAgcmV0VmFsLm9sUmF0aW5nID0gKGNlbnRlcltSU10gKiAwLjAyKSArIChjZW50ZXJbUlBdICogMC4wMSkgKyAoY2VudGVyW01TXSAqIDAuMDIpICsgKGNlbnRlcltIUF0gKiAwLjk1KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxnW1JTXSAqIDAuMDIpICsgKGxnW1JQXSAqIDAuMDEpICsgKGxnW01TXSAqIDAuMDIpICsgKGxnW0hQXSAqIDAuOTUpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmdbUlNdICogMC4wMikgKyAocmdbUlBdICogMC4wMSkgKyAocmdbTVNdICogMC4wMikgKyAocmdbSFBdICogMC45NSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsdFtSU10gKiAwLjAyKSArIChsdFtSUF0gKiAwLjAxKSArIChsdFtNU10gKiAwLjAyKSArIChsdFtIUF0gKiAwLjk1KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJ0W1JTXSAqIDAuMDIpICsgKHJ0W1JQXSAqIDAuMDEpICsgKHJ0W01TXSAqIDAuMDIpICsgKHJ0W0hQXSAqIDAuOTUpO1xyXG4gICAgICAgICAgICByZXRWYWwuZGxSdW5EZWZlbnNlUmF0aW5nID0gKHJlW1JTXSAqIDAuMDUpICsgKHJlW1JQXSAqIDAuMDUpICsgKHJlW01TXSAqIDAuMDUpICsgKHJlW0hQXSAqIDAuODUpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudFtSU10gKiAwLjA1KSArIChudFtSUF0gKiAwLjA1KSArIChudFtNU10gKiAwLjA1KSArIChudFtIUF0gKiAwLjg1KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGVbUlNdICogMC4wNSkgKyAobGVbUlBdICogMC4wNSkgKyAobGVbTVNdICogMC4wNSkgKyAobGVbSFBdICogMC44NSk7XHJcbiAgICAgICAgICAgIHJldFZhbC5kbFBhc3NEZWZlbnNlUmF0aW5nID0ocmVbUlNdICogMC4wNSkgKyAocmVbUlBdICogMC4wNSkgKyAocmVbTVNdICogMC4wNSkgKyAocmVbSFBdICogMC43NSkgKyAocmVbUEldICogMC4wNSkgKyAocmVbUVVdICogMC4wNSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG50W1JTXSAqIDAuMDUpICsgKG50W1JQXSAqIDAuMDUpICsgKG50W01TXSAqIDAuMDUpICsgKG50W0hQXSAqIDAuNzUpICsgKG50W1BJXSAqIDAuMDUpICsgKG50W1FVXSAqIDAuMDUpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsZVtSU10gKiAwLjA1KSArIChsZVtSUF0gKiAwLjA1KSArIChsZVtNU10gKiAwLjA1KSArIChsZVtIUF0gKiAwLjc1KSArIChsZVtQSV0gKiAwLjA1KSArIChsZVtRVV0gKiAwLjA1KTtcclxuICAgICAgICAgICAgcmV0VmFsLmxiUnVuRGVmZW5zZVJhdGluZyA9IChyb2xiW1JTXSAqIDAuMjUpICsgKHJvbGJbUlBdICogMC4yNSkgKyAocm9sYltNU10gKiAwLjEpICsgKHJvbGJbSFBdICogMC40KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmlsYltSU10gKiAwLjI1KSArIChyaWxiW1JQXSAqIDAuMjUpICsgKHJpbGJbTVNdICogMC4xKSArIChyaWxiW0hQXSAqIDAuNCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpbGJbUlNdICogMC4yNSkgKyAobGlsYltSUF0gKiAwLjI1KSArIChsaWxiW01TXSAqIDAuMSkgKyAobGlsYltIUF0gKiAwLjQpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsb2xiW1JTXSAqIDAuMjUpICsgKGxvbGJbUlBdICogMC4yNSkgKyAobG9sYltNU10gKiAwLjEpICsgKGxvbGJbSFBdICogMC40KTtcclxuICAgICAgICAgICAgcmV0VmFsLmxiUGFzc0RlZmVuc2VSYXRpbmcgPSAocm9sYltSU10gKiAwLjE1KSArIChyb2xiW1JQXSAqIDAuMTUpICsgKHJvbGJbTVNdICogMC4xKSArIChyb2xiW1BJXSAqIDAuMykgKyAocm9sYltRVV0gKiAwLjMpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyaWxiW1JTXSAqIDAuMTUpICsgKHJpbGJbUlBdICogMC4xNSkgKyAocmlsYltNU10gKiAwLjEpICsgKHJpbGJbUEldICogMC4zKSArIChyaWxiW1FVXSAqIDAuMykgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpbGJbUlNdICogMC4xNSkgKyAobGlsYltSUF0gKiAwLjE1KSArIChsaWxiW01TXSAqIDAuMSkgKyAobGlsYltQSV0gKiAwLjMpICsgKGxpbGJbUVVdICogMC4zKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobG9sYltSU10gKiAwLjE1KSArIChsb2xiW1JQXSAqIDAuMTUpICsgKGxvbGJbTVNdICogMC4xKSArIChsb2xiW1BJXSAqIDAuMykgKyAobG9sYltRVV0gKiAwLjMpO1xyXG4gICAgICAgICAgICByZXRWYWwuZGJSdW5EZWZlbnNlUmF0aW5nID0gKHJjYltSU10gKiAwLjI1KSArIChyY2JbUlBdICogMC4yNSkgKyAocmNiW01TXSAqIDAuMSkgKyAocmNiW0hQXSAqIDAuNCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxjYltSU10gKiAwLjI1KSArIChsY2JbUlBdICogMC4yNSkgKyAobGNiW01TXSAqIDAuMSkgKyAobGNiW0hQXSAqIDAuNCkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZzW1JTXSAqIDAuMjUpICsgKGZzW1JQXSAqIDAuMjUpICsgKGZzW01TXSAqIDAuMSkgKyAoZnNbSFBdICogMC40KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3NbUlNdICogMC4yNSkgKyAoc3NbUlBdICogMC4yNSkgKyAoc3NbTVNdICogMC4xKSArIChzc1tIUF0gKiAwLjQpO1xyXG4gICAgICAgICAgICByZXRWYWwuZGJQYXNzRGVmZW5zZVJhdGluZyA9IChyY2JbUlNdICogMC4xNSkgKyAocmNiW1JQXSAqIDAuMTUpICsgKHJjYltNU10gKiAwLjEpICsgKHJjYltQSV0gKiAwLjMpICsgKHJjYltRVV0gKiAwLjMpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsY2JbUlNdICogMC4xNSkgKyAobGNiW1JQXSAqIDAuMTUpICsgKGxjYltNU10gKiAwLjEpICsgKGxjYltQSV0gKiAwLjMpICsgKGxjYltRVV0gKiAwLjMpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmc1tSU10gKiAwLjE1KSArIChmc1tSUF0gKiAwLjE1KSArIChmc1tNU10gKiAwLjEpICsgKGZzW1BJXSAqIDAuMykgKyAoZnNbUVVdICogMC4zKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3NbUlNdICogMC4xNSkgKyAoc3NbUlBdICogMC4xNSkgKyAoc3NbTVNdICogMC4xKSArIChzc1tQSV0gKiAwLjMpICsgKHNzW1FVXSAqIDAuMyk7XHJcbiAgICAgICAgICAgICNlbmRyZWdpb25cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gR2V0cyBhIHBsYXllciAnbGluZScgZnJvbSBtX0RhdGEgZnJvbSAndGVhbScgcGxheWluZyAncG9zaXRpb24nLlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHJpdmF0ZSBpbnRbXSBHZXRQbGF5ZXJJbnRzKHN0cmluZyBzZWFzb25DaHVuaywgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyBwYXR0ZXJuID0gXCJURUFNXFxcXHMqPVxcXFxzKlwiICsgdGVhbTtcclxuICAgICAgICAgICAgUmVnZXggZmluZFRlYW1SZWdleCA9IG5ldyBSZWdleChwYXR0ZXJuKTtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IGZpbmRUZWFtUmVnZXguTWF0Y2goc2Vhc29uQ2h1bmspO1xyXG4gICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IHRlYW1JbmRleCA9IG0uSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVhbUluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaW50IHBsYXllckluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBSZWdleCBlbmRMaW5lUmVnZXggPSBuZXcgUmVnZXgoc3RyaW5nLkZvcm1hdChcIlxcblxcXFxzKnswfVxcXFxzKixcIiwgcG9zaXRpb24pKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIGVvbCA9IGVuZExpbmVSZWdleC5NYXRjaChzZWFzb25DaHVuaywgdGVhbUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChlb2wgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVySW5kZXggPSBlb2wuSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJJbmRleCsrO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJJbmRleCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaW50IGxpbmVFbmQgPSBzZWFzb25DaHVuay5JbmRleE9mKFwiXFxuXCIsIHBsYXllckluZGV4KTtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBwbGF5ZXJMaW5lID0gc2Vhc29uQ2h1bmsuU3Vic3RyaW5nKHBsYXllckluZGV4LCBsaW5lRW5kIC0gcGxheWVySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIElucHV0UGFyc2VyLkdldEludHMocGxheWVyTGluZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gR2V0VGVhbXMoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyBzZWFzb25DaHVuaz0gR2V0U2Vhc29uVGV4dChzZWFzb24pO1xyXG4gICAgICAgICAgICBMaXN0PHN0cmluZz4gcmV0VmFsID0gbmV3IExpc3Q8c3RyaW5nPigzNSk7XHJcbiAgICAgICAgICAgIFJlZ2V4IHRlYW1SZWdleCA9IG5ldyBSZWdleChcIlRFQU1cXFxccyo9XFxcXHMqKFthLXowLTldKylcIik7XHJcbiAgICAgICAgICAgIE1hdGNoQ29sbGVjdGlvbiBtYyA9IHRlYW1SZWdleC5NYXRjaGVzKHNlYXNvbkNodW5rKTtcclxuICAgICAgICAgICAgZm9yZWFjaCAoTWF0Y2ggbSBpbiBtYylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHRlYW0gPSBtLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldFZhbC5BZGQodGVhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIEdldFNlYXNvblRleHQoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBzdGFydCA9IDA7IGludCBlbmQgPSBUZXh0RGF0YS5MZW5ndGg7XHJcbiAgICAgICAgICAgIFJlZ2V4IHJlZyA9IG5ldyBSZWdleChTdHJpbmcuRm9ybWF0KFwiXlxcXFxzKlNFQVNPTlxcXFxzKyh7MH0pXCIsIHNlYXNvbikpO1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gcmVnLk1hdGNoKFRleHREYXRhKTtcclxuICAgICAgICAgICAgaWYgKG0uU3VjY2VzcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IGluZGV4ID0gVGV4dERhdGEuSW5kZXhPZihcIlNFQVNPTlwiLCBtLkluZGV4ICsgNTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyaW5nIHNlYXNvbkNodW5rID0gVGV4dERhdGEuU3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2Vhc29uQ2h1bms7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBob2xkaW5nIHBsYWNlIGZvciBhIHRlYW1zIHJhdGluZ3MgKGFjY29yZGluZyB0byBUZWNtb25zdGVyJ3MgZm9ybXVsYXMpXHJcbiAgICBwdWJsaWMgY2xhc3MgVGVhbVJhdGluZ3NcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIHRlYW0ge2dldDtzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgcWJSYXRpbmcge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIHJiMVJhdGluZyB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgcmIyUmF0aW5nIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSB3cjFSYXRpbmcge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIHdyMlJhdGluZyB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgdGVSYXRpbmcge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIG9sUmF0aW5nIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBkbFJ1bkRlZmVuc2VSYXRpbmcge2dldDtzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgZGxQYXNzRGVmZW5zZVJhdGluZyB7Z2V0O3NldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBsYlJ1bkRlZmVuc2VSYXRpbmcge2dldDtzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgbGJQYXNzRGVmZW5zZVJhdGluZyB7Z2V0O3NldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBkYlJ1bkRlZmVuc2VSYXRpbmcge2dldDtzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgZGJQYXNzRGVmZW5zZVJhdGluZyB7Z2V0O3NldDt9XHJcblxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgdG90YWxSdW5EIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgZG91YmxlIHRvdGFsUGFzc0QgeyBnZXQ7IHNldDsgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHVzZWQgZm9yIGNvbnZpZW5jZTsgaG9sZHMgdGhlIGF2ZXJhZ2UgcmF0aW5ncyBcclxuICAgIHB1YmxpYyBzdHJ1Y3QgU2ltQXZlcmFnZXNcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgZG91YmxlIFFCX2F2ZSB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgUkJfYXZlIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBXUl9hdmUge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIFRFX2F2ZSB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgT0xfYXZlIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBETF9ydW5fYXZlIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBETF9wYXNzX2F2ZSB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgTEJfcnVuX2F2ZSB7Z2V0OyBzZXQ7fVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgTEJfcGFzc19hdmUge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIERCX3J1bl9hdmUge2dldDsgc2V0O31cclxuICAgICAgICBwdWJsaWMgZG91YmxlIERCX3Bhc3NfYXZlIHtnZXQ7IHNldDt9XHJcblxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgVE9UQUxfUlVOX0RFRkVOU0UgIHtnZXQ7IHNldDt9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBUT1RBTF9QQVNTX0RFRkVOU0Uge2dldDsgc2V0O31cclxuXHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBNSU5fUlVOX0RFRkVOU0UgIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgZG91YmxlIE1BWF9SVU5fREVGRU5TRSAgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBkb3VibGUgTUlOX1BBU1NfREVGRU5TRSB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGRvdWJsZSBNQVhfUEFTU19ERUZFTlNFIHsgZ2V0OyBzZXQ7IH0gXHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8gU3VtbWFyeSBkZXNjcmlwdGlvbiBmb3IgVGVjbW9Ub29sRmFjdG9yeS5cclxuXHQvLy8gPC9zdW1tYXJ5PlxyXG5cdHB1YmxpYyBjbGFzcyBUZWNtb1Rvb2xGYWN0b3J5XHJcblx0e1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgT1JJR19ORVNfVFNCMV9MRU4gPSAweDYwMDEwO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgQ1hST01fVjEwNV9MRU4gICAgPSAweDgwMDEwO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgQ1hST01fVjExMV9MRU4gICAgPSAweGMwMDEwO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU05FU19UU0IxX0xFTiAgICAgPSAweDE4MDAwMDtcclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIElUZWNtb0NvbnRlbnQgR2V0VG9vbEZvclJvbShieXRlW10gcm9tKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBJVGVjbW9Db250ZW50IHRvb2wgPSBudWxsO1xyXG5cdFx0XHRST01fVFlQRSB0eXBlID0gUk9NX1RZUEUuTk9ORTtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlID0gQ2hlY2tSb21UeXBlKCByb20pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKCBVbmF1dGhvcml6ZWRBY2Nlc3NFeGNlcHRpb24gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHlwZSA9IFJPTV9UWVBFLlJFQURfT05MWV9FUlJPUjtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3IoXCJFUlJPUiBvcGVuaW5nIFJPTSwgUGxlYXNlIGNoZWNrIFJPTSB0byBtYWtlIHN1cmUgaXQncyBub3QgJ3JlYWQtb25seScuXCIpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKEV4Y2VwdGlvbiBlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuU2hvd0Vycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiBkZXRlcm1pbmluZyBST00gdHlwZS4gRXhjZXB0aW9uPVxcbnswfVxcbnsxfVwiLFxyXG5cdFx0XHRcdFx0ZS5NZXNzYWdlLGUuU3RhY2tUcmFjZSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSBST01fVFlQRS5DWFJPTV92MTA1IHx8IHR5cGUgPT0gUk9NX1RZUEUuQ1hST01fdjExMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFRlY21vVG9vbC5UZWFtcyA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBMaXN0PHN0cmluZz4oKSwoX28xKT0+e19vMS5BZGQoXCJiaWxsc1wiKTtfbzEuQWRkKFwiZG9scGhpbnNcIik7X28xLkFkZChcInBhdHJpb3RzXCIpO19vMS5BZGQoXCJqZXRzXCIpO19vMS5BZGQoXCJiZW5nYWxzXCIpO19vMS5BZGQoXCJicm93bnNcIik7X28xLkFkZChcInJhdmVuc1wiKTtfbzEuQWRkKFwic3RlZWxlcnNcIik7X28xLkFkZChcImNvbHRzXCIpO19vMS5BZGQoXCJ0ZXhhbnNcIik7X28xLkFkZChcImphZ3VhcnNcIik7X28xLkFkZChcInRpdGFuc1wiKTtfbzEuQWRkKFwiYnJvbmNvc1wiKTtfbzEuQWRkKFwiY2hpZWZzXCIpO19vMS5BZGQoXCJyYWlkZXJzXCIpO19vMS5BZGQoXCJjaGFyZ2Vyc1wiKTtfbzEuQWRkKFwicmVkc2tpbnNcIik7X28xLkFkZChcImdpYW50c1wiKTtfbzEuQWRkKFwiZWFnbGVzXCIpO19vMS5BZGQoXCJjb3dib3lzXCIpO19vMS5BZGQoXCJiZWFyc1wiKTtfbzEuQWRkKFwibGlvbnNcIik7X28xLkFkZChcInBhY2tlcnNcIik7X28xLkFkZChcInZpa2luZ3NcIik7X28xLkFkZChcImJ1Y2NhbmVlcnNcIik7X28xLkFkZChcInNhaW50c1wiKTtfbzEuQWRkKFwiZmFsY29uc1wiKTtfbzEuQWRkKFwicGFudGhlcnNcIik7X28xLkFkZChcIkFGQ1wiKTtfbzEuQWRkKFwiTkZDXCIpO19vMS5BZGQoXCI0OWVyc1wiKTtfbzEuQWRkKFwicmFtc1wiKTtfbzEuQWRkKFwic2VhaGF3a3NcIik7X28xLkFkZChcImNhcmRpbmFsc1wiKTtyZXR1cm4gX28xO30pO1xyXG4gICAgICAgICAgICAgICAgQ1hSb21UU0JUb29sIGN4dCA9IG5ldyBDWFJvbVRTQlRvb2wocm9tLCB0eXBlKTtcclxuICAgICAgICAgICAgICAgIHRvb2wgPSBjeHQ7XHJcbiAgICAgICAgICAgICAgICAvLyBIYWNrIGhlcmU7IFRoZXJlIGFyZSBzb21lIFJPTVMgb3V0IHRoZXJlIHdob3NlIFNJWkUgPT0gQ1hST01fdjExMSBhbmQgYXJlIHdvcmsgYmV0dGVyIGFzIENYUk9NX3YxMDVcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09IFJPTV9UWVBFLkNYUk9NX3YxMTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBjeHQuR2V0TmFtZShcIjQ5ZXJzXCIsIFwiUUIxXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgQ1hSb21UU0JUb29sKHJvbSwgUk9NX1RZUEUuQ1hST01fdjEwNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggdHlwZSA9PSBST01fVFlQRS5TTkVTX1RTQjEgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0VGVjbW9Ub29sLlRlYW1zID0gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkNhbGxGb3IobmV3IExpc3Q8c3RyaW5nPigpLChfbzIpPT57X28yLkFkZChcImJpbGxzXCIpO19vMi5BZGQoXCJjb2x0c1wiKTtfbzIuQWRkKFwiZG9scGhpbnNcIik7X28yLkFkZChcInBhdHJpb3RzXCIpO19vMi5BZGQoXCJqZXRzXCIpO19vMi5BZGQoXCJiZW5nYWxzXCIpO19vMi5BZGQoXCJicm93bnNcIik7X28yLkFkZChcIm9pbGVyc1wiKTtfbzIuQWRkKFwic3RlZWxlcnNcIik7X28yLkFkZChcImJyb25jb3NcIik7X28yLkFkZChcImNoaWVmc1wiKTtfbzIuQWRkKFwicmFpZGVyc1wiKTtfbzIuQWRkKFwiY2hhcmdlcnNcIik7X28yLkFkZChcInNlYWhhd2tzXCIpO19vMi5BZGQoXCJjb3dib3lzXCIpO19vMi5BZGQoXCJnaWFudHNcIik7X28yLkFkZChcImVhZ2xlc1wiKTtfbzIuQWRkKFwiY2FyZGluYWxzXCIpO19vMi5BZGQoXCJyZWRza2luc1wiKTtfbzIuQWRkKFwiYmVhcnNcIik7X28yLkFkZChcImxpb25zXCIpO19vMi5BZGQoXCJwYWNrZXJzXCIpO19vMi5BZGQoXCJ2aWtpbmdzXCIpO19vMi5BZGQoXCJidWNjYW5lZXJzXCIpO19vMi5BZGQoXCJmYWxjb25zXCIpO19vMi5BZGQoXCJyYW1zXCIpO19vMi5BZGQoXCJzYWludHNcIik7X28yLkFkZChcIjQ5ZXJzXCIpO3JldHVybiBfbzI7fSk7XHJcblx0XHRcdFx0dG9vbCA9IG5ldyBTTkVTX1RlY21vVG9vbChyb20pO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gUk9NX1RZUEUuU05FU19UU0IyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0b29sID0gbmV3IFRTQlRvb2wyLlRTQjJUb29sKHJvbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBST01fVFlQRS5TTkVTX1RTQjMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgVFNCVG9vbDIuVFNCM1Rvb2wocm9tKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRlY21vVG9vbC5UZWFtcyA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBMaXN0PHN0cmluZz4oKSwoX28zKT0+e19vMy5BZGQoXCJiaWxsc1wiKTtfbzMuQWRkKFwiY29sdHNcIik7X28zLkFkZChcImRvbHBoaW5zXCIpO19vMy5BZGQoXCJwYXRyaW90c1wiKTtfbzMuQWRkKFwiamV0c1wiKTtfbzMuQWRkKFwiYmVuZ2Fsc1wiKTtfbzMuQWRkKFwiYnJvd25zXCIpO19vMy5BZGQoXCJvaWxlcnNcIik7X28zLkFkZChcInN0ZWVsZXJzXCIpO19vMy5BZGQoXCJicm9uY29zXCIpO19vMy5BZGQoXCJjaGllZnNcIik7X28zLkFkZChcInJhaWRlcnNcIik7X28zLkFkZChcImNoYXJnZXJzXCIpO19vMy5BZGQoXCJzZWFoYXdrc1wiKTtfbzMuQWRkKFwicmVkc2tpbnNcIik7X28zLkFkZChcImdpYW50c1wiKTtfbzMuQWRkKFwiZWFnbGVzXCIpO19vMy5BZGQoXCJjYXJkaW5hbHNcIik7X28zLkFkZChcImNvd2JveXNcIik7X28zLkFkZChcImJlYXJzXCIpO19vMy5BZGQoXCJsaW9uc1wiKTtfbzMuQWRkKFwicGFja2Vyc1wiKTtfbzMuQWRkKFwidmlraW5nc1wiKTtfbzMuQWRkKFwiYnVjY2FuZWVyc1wiKTtfbzMuQWRkKFwiNDllcnNcIik7X28zLkFkZChcInJhbXNcIik7X28zLkFkZChcInNhaW50c1wiKTtfbzMuQWRkKFwiZmFsY29uc1wiKTtyZXR1cm4gX28zO30pO1xyXG4gICAgICAgICAgICAgICAgdG9vbCA9IG5ldyBUZWNtb1Rvb2wocm9tKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRyZXR1cm4gdG9vbDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gcmV0dXJucyAwIGlmIHJlZ3VsYXIgTkVTIFRTQiByb21cclxuXHRcdC8vLyAgICAgICAgIDEgaWYgaXQncyBjeHJvbSBUU0JST00gdHlwZS5cclxuXHRcdC8vLyBUaHJvd3MgZXhjZXB0aW9ucyAoVW5hdXRob3JpemVkQWNjZXNzRXhjZXB0aW9uIGFuZCBvdGhlcnMpXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicm9tXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RhdGljIFJPTV9UWVBFIENoZWNrUm9tVHlwZShieXRlW10gcm9tKVxyXG5cdFx0e1xyXG5cdFx0XHRST01fVFlQRSByZXQgPSBST01fVFlQRS5OT05FO1xyXG5cdFx0XHRTeXN0ZW0uSU8uRmlsZVN0cmVhbSBzMT1udWxsO1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgbG9uZyBsZW4gPSByb20uTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PSBPUklHX05FU19UU0IxX0xFTilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSBST01fVFlQRS5ORVNfT1JJR0lOQUxfVFNCO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGVuID09IENYUk9NX1YxMDVfTEVOKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJldCA9IFJPTV9UWVBFLkNYUk9NX3YxMDU7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGVuID09IENYUk9NX1YxMTFfTEVOKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IFJPTV9UWVBFLkNYUk9NX3YxMTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblx0XHRcdFx0ZWxzZSBpZihsZW4gPT0gU05FU19UU0IxX0xFTilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBST01fVFlQRS5TTkVTX1RTQjE7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoVFNCVG9vbDIuVFNCMlRvb2wuSXNUZWNtb1N1cGVyQm93bDJSb20ocm9tKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSBST01fVFlQRS5TTkVTX1RTQjI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChUU0JUb29sMi5UU0IzVG9vbC5Jc1RlY21vU3VwZXJCb3dsM1JvbShyb20pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IFJPTV9UWVBFLlNORVNfVFNCMztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLldyaXRlRXJyb3IoXCJST00gVHlwZSA9IFwiICsgcmV0LlRvU3RyaW5nKCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZpbmFsbHlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCBzMSAhPSBudWxsIClcclxuXHRcdFx0XHRcdHMxLkNsb3NlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG51c2luZyBTeXN0ZW0uSU87XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sMlxyXG57XHJcbiAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAvLy8gU3VtbWFyeSBkZXNjcmlwdGlvbiBmb3IgSW5wdXRQYXJzZXIuXHJcbiAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgcHVibGljIGNsYXNzIElucHV0UGFyc2VyXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBJVGVjbW9Ub29sIHRvb2w7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgc2NoZWR1bGVTdGF0ZSA9IDA7XHJcbiAgICAgICAgcHJpdmF0ZSBjb25zdCBpbnQgcm9zdGVyU3RhdGUgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgaW50IGN1cnJlbnRTdGF0ZSA9IDI7XHJcbiAgICAgICAgcHVibGljIGJvb2wgc2hvd1NpbUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgaW50IHNlYXNvbiA9IDE7XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBudW1iZXJSZWdleCA9IG5ldyBSZWdleChcIigjWzAtOV17MSwyfSlcIik7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIFJlZ2V4IHRlYW1SZWdleCA9IG5ldyBSZWdleChcIlRFQU1cXFxccyo9XFxcXHMqKFswLTlhLXpBVF0rKVwiKTtcclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgUmVnZXggc2ltRGF0YVJlZ2V4ID0gbmV3IFJlZ2V4KFwiU2ltRGF0YT0wW3hYXShbMC05YS1mQS1GXVswLTlhLWZBLUZdKShbMC0zXT8pXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCB3ZWVrUmVnZXggPSBuZXcgUmVnZXgoXCJXRUVLIChbMS05XVswXHQtN10/KVwiKTtcclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgUmVnZXggZ2FtZVJlZ2V4ID0gbmV3IFJlZ2V4KFwiKFswLTlhLXpdKylcXFxccythdFxcXFxzKyhbMC05YS16XSspXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBwb3NOYW1lRmFjZVJlZ2V4ID0gbmV3IFJlZ2V4KFwiKFtBLVpdK1sxLTVdPylcXFxccyosXFxcXHMqKFthLXpBLVogXFxcXC5cXFxcLV0rKSxcXFxccyooRmFjZT0wW3hYXVswLTlhLWZBLUZdK1xcXFxzKixcXFxccyopXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCB5ZWFyUmVnZXggPSBuZXcgUmVnZXgoXCJZRUFSXFxcXHMqPVxcXFxzKihbMC05XSspXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCByZXR1cm5UZWFtUmVnZXggPSBuZXcgUmVnZXgoXCJSRVRVUk5fVEVBTVxcXFxzKyhbQS1aMS00XSspXFxcXHMqLFxcXFxzKihbQS1aMS00XSspXFxcXHMqLFxcXFxzKihbQS1aMS00XSspXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBzZXRSZWdleCA9IG5ldyBSZWdleChcIlNFVFxcXFxzKlxcXFwoXFxcXHMqKDB4WzAtOWEtZkEtRl0rKVxcXFxzKixcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqXFxcXClcIik7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIFJlZ2V4IG9mZmVuc2l2ZUZvcm1hdGlvblJlZ2V4ID0gbmV3IFJlZ2V4KFwiT0ZGRU5TSVZFX0ZPUk1BVElPTlxcXFxzKj1cXFxccyooW2EtekEtWjEyMzRfXSspXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBwbGF5Ym9va1JlZ2V4ID0gbmV3IFJlZ2V4KFwiUExBWUJPT0tcXFxccysoUlswLTlBLUZhLWZdKylcXFxccyosXFxcXHMqKFBbMC05QS1GYS1mXSspXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBqdWljZVJlZ2V4ID0gbmV3IFJlZ2V4KFwiSlVJQ0VcXFxcKFxcXFxzKihbMC05XXsxLDJ9fEFMTClcXFxccyosXFxcXHMqKFswLTldezEsMn0pXFxcXHMqXFxcXClcIik7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIFJlZ2V4IGhvbWVSZWdleCA9IG5ldyBSZWdleChcIlVuaWZvcm0xXFxcXHMqPVxcXFxzKjB4KFswLTlhLWZBLUZdezZ9KVwiKTtcclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgUmVnZXggYXdheVJlZ2V4ID0gbmV3IFJlZ2V4KFwiVW5pZm9ybTJcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17Nn0pXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCBkaXZDaGFtcFJlZ2V4ID0gbmV3IFJlZ2V4KFwiRGl2Q2hhbXBcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17MTB9KVwiKTtcclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgUmVnZXggY29uZkNoYW1wUmVnZXggPSBuZXcgUmVnZXgoXCJDb25mQ2hhbXBcXFxccyo9XFxcXHMqMHgoWzAtOWEtZkEtRl17OH0pXCIpO1xyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBSZWdleCB1bmlmb3JtVXNhZ2VSZWdleCA9IG5ldyBSZWdleChcIlVuaWZvcm1Vc2FnZVxcXFxzKj1cXFxccyoweChbMC05YS1mQS1GXXs4fSlcIik7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIFJlZ2V4IHJlcGxhY2VTdHJpbmdSZWdleCA9IG5ldyBSZWdleChcIlJlcGxhY2VTdHJpbmdcXFxcKFxcXFxzKlxcXCIoW0EtWmEtejAtOSAuXSspXFxcIlxcXFxzKixcXFxccypcXFwiKFtBLVphLXogLl0rKVxcXCJcXFxccyooLFxcXFxzKihbMC05XSspKSpcXFxccypcXFxcKVwiKTtcclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgUmVnZXggdGVhbVN0cmluZ3NSZWdleCA9IG5ldyBSZWdleChcIlRFQU1fQUJCPShbMC05QS1aYS16LiBdKyksVEVBTV9DSVRZPShbMC05QS1aYS16IC5dKyksVEVBTV9OQU1FPShbMC05QS1aYS16IC5dKylcIik7XHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIFJlZ2V4IHNlYXNvblJlZ2V4ID0gbmV3IFJlZ2V4KFwiXlxcXFxzKlNFQVNPTlxcXFxzKyhbMS0zXSlcIik7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RyaW5nIGN1cnJlbnRUZWFtOyAvL3VzZWQgZm9yIHJvc3RlciB1cGRhdGVcclxuICAgICAgICBwcml2YXRlIExpc3Q8c3RyaW5nPiBzY2hlZHVsZUxpc3Q7XHJcblxyXG4gICAgICAgIHB1YmxpYyBJbnB1dFBhcnNlcihJVGVjbW9Ub29sIHRvb2wpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2wgPSB0b29sO1xyXG4gICAgICAgICAgICBjdXJyZW50VGVhbSA9IFwiYmlsbHNcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBJbnB1dFBhcnNlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjdXJyZW50VGVhbSA9IFwiYmlsbHNcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFByb2Nlc3NGaWxlKHN0cmluZyBmaWxlTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdHJlYW1SZWFkZXIgc3IgPSBuZXcgU3RyZWFtUmVhZGVyKGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBjb250ZW50cyA9IHNyLlJlYWRUb0VuZCgpO1xyXG4gICAgICAgICAgICAgICAgc3IuQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGNoYXJbXSBjaGFycyA9IFwiXFxuXFxyXCIuVG9DaGFyQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZ1tdIGxpbmVzID0gY29udGVudHMuU3BsaXQoY2hhcnMpO1xyXG4gICAgICAgICAgICAgICAgUHJvY2Vzc0xpbmVzKGxpbmVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2hvd0Vycm9yKGUuTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFByb2Nlc3NUZXh0KHN0cmluZyBjb250ZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuUmVwbGFjZShcIlxcclxcblwiLCBcIlxcblwiKTtcclxuICAgICAgICAgICAgc3RyaW5nW10gbGluZXMgPSBjb250ZW50LlNwbGl0KG5ldyBjaGFyW10geyAnXFxuJyB9KTtcclxuICAgICAgICAgICAgUHJvY2Vzc0xpbmVzKGxpbmVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFByb2Nlc3NMaW5lcyhzdHJpbmdbXSBsaW5lcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBpID0gMDtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBQcm9jZXNzTGluZShsaW5lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNob3dFcnJvcnMoKTtcclxuICAgICAgICAgICAgICAgIEFwcGx5U2NoZWR1bGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigxNTApO1xyXG4gICAgICAgICAgICAgICAgc2IuQXBwZW5kKFwiRXJyb3IhIFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgbGluZXMuTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZChzdHJpbmcuRm9ybWF0KFwibGluZSAjezB9OlxcdCd7MX0nXCIsIGksIGxpbmVzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoZS5NZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChlLlN0YWNrVHJhY2UpO1xyXG4gICAgICAgICAgICAgICAgLy9cdFx0XHRcdFx0XHRcIkVycm9yIFByb2Nlc3NpbmcgbGluZSB7MH06XFx0J3sxfScuXFxuezJ9XFxuezN9XCIsXHJcbiAgICAgICAgICAgICAgICAvL1x0XHRcdFx0XHRcdGksbGluZXNbaV0sIGUuTWVzc2FnZSxlLlN0YWNrVHJhY2UpO1xyXG4gICAgICAgICAgICAgICAgc2IuQXBwZW5kKFwiXFxuXFxuT3BlcmF0aW9uIGFib3J0ZWQgYXQgdGhpcyBwb2ludC4gRGF0YSBub3QgYXBwbGllZC5cIik7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNob3dFcnJvcihzYi5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBBcHBseVNjaGVkdWxlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZUxpc3QgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdG9vbC5BcHBseVNjaGVkdWxlKHNlYXNvbiwgc2NoZWR1bGVMaXN0KTtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2hvd0Vycm9ycygpO1xyXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVMaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVhZEZyb21TdGRpbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgbGluZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGludCBsaW5lTnVtYmVyID0gMDtcclxuICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJSZWFkaW5nIGZyb20gc3RhbmRhcmQgaW4uLi5cIik7XHJcbiAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGxpbmUgPSBDb25zb2xlLlJlYWRMaW5lKCkpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcisrO1xyXG4gICAgICAgICAgICAgICAgICAgIFByb2Nlc3NMaW5lKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZUxpbmUoXCJMaW5lIFwiK2xpbmVOdW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcbiAgICAgICAgICAgICAgICBBcHBseVNjaGVkdWxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNob3dFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgIFwiRXJyb3IgUHJvY2Vzc2luZyBsaW5lIHswfTonezF9Jy5cXG57Mn1cXG57M31cIixcclxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyLCBsaW5lLCBlLk1lc3NhZ2UsIGUuU3RhY2tUcmFjZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBDaGVja1RleHRGb3JSZWR1bmRlbnRTZXRDb21tYW5kcyhTdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHJldCA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgICAgIFJlZ2V4IHNpbXBsZVNldFJlZ2V4ID0gbmV3IFJlZ2V4KFwiU0VUXFxcXHMqXFxcXChcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqLFxcXFxzKigweFswLTlhLWZBLUZdKylcXFxccypcXFxcKVwiKTtcclxuICAgICAgICAgICAgTWF0Y2hDb2xsZWN0aW9uIG1jID0gc2ltcGxlU2V0UmVnZXguTWF0Y2hlcyhpbnB1dCk7XHJcbiAgICAgICAgICAgIE1hdGNoIGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gbnVsbDtcclxuICAgICAgICAgICAgbG9uZyBsb2NhdGlvbjEgPSAwO1xyXG4gICAgICAgICAgICBsb25nIGxvY2F0aW9uMiA9IDA7XHJcbiAgICAgICAgICAgIGludCB2YWx1ZUxlbmd0aDEgPSAwO1xyXG4gICAgICAgICAgICBpbnQgdmFsdWVMZW5ndGgyID0gMDtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtYy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbWNbaV07XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjEgPSBUU0JUb29sLlN0YXRpY1V0aWxzLlBhcnNlTG9uZ0Zyb21IZXhTdHJpbmcoY3VycmVudC5Hcm91cHNbMV0uVG9TdHJpbmcoKS5TdWJzdHJpbmcoMikpOyAvLyBsb25nLlBhcnNlKGN1cnJlbnQuR3JvdXBzWzFdLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDIpLCBTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWVMZW5ndGgxID0gY3VycmVudC5Hcm91cHNbMl0uTGVuZ3RoIC8gMjtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSBpICsgMTsgaiA8IG1jLkNvdW50OyBqKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1jW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uMiA9IFRTQlRvb2wuU3RhdGljVXRpbHMuUGFyc2VMb25nRnJvbUhleFN0cmluZyhtLkdyb3Vwc1sxXS5Ub1N0cmluZygpLlN1YnN0cmluZygyKSk7IC8vIGxvbmcuUGFyc2UobS5Hcm91cHNbMV0uVG9TdHJpbmcoKS5TdWJzdHJpbmcoMiksIFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVMZW5ndGgyID0gbS5Hcm91cHNbMl0uTGVuZ3RoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGxvY2F0aW9uMiA+PSBsb2NhdGlvbjEgJiYgbG9jYXRpb24yIDw9IGxvY2F0aW9uMSArICh2YWx1ZUxlbmd0aDEgLSAyKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGxvY2F0aW9uMSA+PSBsb2NhdGlvbjIgJiYgbG9jYXRpb24xIDw9IGxvY2F0aW9uMiArICh2YWx1ZUxlbmd0aDIgLSAyKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5Hcm91cHNbMF0uVG9TdHJpbmcoKSAhPSBtLkdyb3Vwc1swXS5Ub1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKFwiV0FSTklORyFcXG4gJ1NFVCcgQ29tbWFuZHMgbW9kaWZ5IHNhbWUgbG9jYXRpb25zICdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKGN1cnJlbnQuR3JvdXBzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5BcHBlbmQoXCInIGFuZCAnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LkFwcGVuZChtLkdyb3Vwc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuQXBwZW5kKFwiJ1xcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0LlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwibGluZVwiPjwvcGFyYW0+XHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBQcm9jZXNzTGluZShzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLlRyaW0oKTtcclxuICAgICAgICAgICAgTWF0Y2ggbTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsaW5lLlN0YXJ0c1dpdGgoXCIjXCIpIHx8IGxpbmUgPT0gXCJcIiB8fCBsaW5lLlRvTG93ZXIoKS5UcmltKCkuU3RhcnRzV2l0aChcInNjaGVkdWxlXCIpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBlbHNlIGlmICggLypzZXRSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSApLy8qL1xyXG4gICAgICAgICAgICAgICAgbGluZS5TdGFydHNXaXRoKFwiU0VUXCIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0b29sLkFwcGx5U2V0KGxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChtID0gc2Vhc29uUmVnZXguTWF0Y2gobGluZSkpICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NoZWR1bGVMaXN0ICE9IG51bGwgJiYgc2NoZWR1bGVMaXN0LkNvdW50ID4gMClcclxuICAgICAgICAgICAgICAgICAgICBBcHBseVNjaGVkdWxlKCk7XHJcbiAgICAgICAgICAgICAgICBJbnQzMi5UcnlQYXJzZShtLkdyb3Vwc1sxXS5Ub1N0cmluZygpLCBvdXQgc2Vhc29uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgobSA9IHBsYXlib29rUmVnZXguTWF0Y2gobGluZSkpICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgcnVucyA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgcGFzc2VzID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRvb2wuU2V0UGxheWJvb2soc2Vhc29uLCBjdXJyZW50VGVhbSwgcnVucywgcGFzc2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKmVsc2UgaWYoIChtID0ganVpY2VSZWdleC5NYXRjaChsaW5lKSkgIT0gTWF0Y2guRW1wdHkgKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcganVpY2VXZWVrICA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpbnQganVpY2VBbXQgICAgPSBJbnQzMi5QYXJzZShtLkdyb3Vwc1syXS5Ub1N0cmluZygpKTtcclxuXHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIGlmKCBqdWljZVdlZWsgPT0gXCJBTExcIiApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGludCBpID0gMDsgaSA8IDE3OyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sLkFwcGx5SnVpY2UoaSsxLCBqdWljZUFtdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgd2VlayA9IEludDMyLlBhcnNlKGp1aWNlV2VlayktMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiggIXRvb2wuQXBwbHlKdWljZSh3ZWVrLCBqdWljZUFtdCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgTGluZSA9ICd7MH0nXCIsbGluZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIlJlcGxhY2VTdHJpbmdcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE1hdGNoIHJlcE1hdGNoID0gcmVwbGFjZVN0cmluZ1JlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIGZpbmQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHJlcGxhY2UgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaW50IG9jY3VyID0gLTE7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwTWF0Y2guR3JvdXBzLkNvdW50ID4gMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmaW5kID0gcmVwTWF0Y2guR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZSA9IHJlcE1hdGNoLkdyb3Vwc1syXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXBNYXRjaC5Hcm91cHMuQ291bnQgPiAzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSW50MzIuVHJ5UGFyc2UocmVwTWF0Y2guR3JvdXBzWzRdLlRvU3RyaW5nKCksIG91dCBvY2N1cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VyLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBtc2cgPSBUU0JUb29sLlN0YXRpY1V0aWxzLlJlcGxhY2VTdHJpbmdJblJvbSh0b29sLk91dHB1dFJvbSwgZmluZCwgcmVwbGFjZSwgb2NjdXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cuU3RhcnRzV2l0aChcIkVycm9yXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZShtc2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3IoU3RyaW5nLkZvcm1hdChcIkVSUk9SISBOb3QgZW5vdWdoIGluZm8gdG8gdXNlICdSZXBsYWNlU3RyaW5nJyBmdW5jdGlvbi5MaW5lPXswfVwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiVEVBTV9BQkJcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE1hdGNoIHRlYW1TdHJpbmdzTWF0Y2ggPSB0ZWFtU3RyaW5nc1JlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlYW1TdHJpbmdzTWF0Y2ggIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHRlYW1BYmIgPSB0ZWFtU3RyaW5nc01hdGNoLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyB0ZWFtQ2l0eSA9IHRlYW1TdHJpbmdzTWF0Y2guR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHRlYW1OYW1lID0gdGVhbVN0cmluZ3NNYXRjaC5Hcm91cHNbM10uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgaW5kZXggPSBUU0IyVG9vbC5HZXRUZWFtSW5kZXgoY3VycmVudFRlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2wuU2V0VGVhbUFiYnJldmlhdGlvbihpbmRleCwgdGVhbUFiYik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRUZWFtQ2l0eShpbmRleCwgdGVhbUNpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvb2wuU2V0VGVhbU5hbWUoaW5kZXgsIHRlYW1OYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKmVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIkNPTE9SU1wiKSkgLy8gZG8gdGhlIGNvbG9ycyBoZXJlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyB0bXA7XHJcblxyXG4gICAgICAgICAgICAgICAgTWF0Y2ggaG9tZSA9IGhvbWVSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIGF3YXkgPSBhd2F5UmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICBNYXRjaCBjb25mQ2hhbXAgPSBjb25mQ2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIGRpdkNoYW1wID0gZGl2Q2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIHVuaVVzYWdlID0gdW5pZm9ybVVzYWdlUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9tZSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBob21lLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLlNldEhvbWVVbmlmb3JtKGN1cnJlbnRUZWFtLCB0bXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF3YXkgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gYXdheS5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRBd2F5VW5pZm9ybShjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb25mQ2hhbXAgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gY29uZkNoYW1wLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLlNldENvbmZDaGFtcENvbG9ycyhjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkaXZDaGFtcCAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBkaXZDaGFtcC5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXREaXZDaGFtcENvbG9ycyhjdXJyZW50VGVhbSwgdG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1bmlVc2FnZSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSB1bmlVc2FnZS5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRVbmlmb3JtVXNhZ2UoY3VycmVudFRlYW0sIHRtcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0ZWFtUmVnZXguTWF0Y2gobGluZSkgIT0gTWF0Y2guRW1wdHkpLy9saW5lLlN0YXJ0c1dpdGgoXCJURUFNXCIpIClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlTGluZShcIid7MH0nIFwiLCBsaW5lKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gcm9zdGVyU3RhdGU7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgdGVhbSA9IEdldFRlYW0obGluZSk7XHJcbiAgICAgICAgICAgICAgICBib29sIHJldCA9IFNldEN1cnJlbnRUZWFtKHRlYW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1Igd2l0aCBsaW5lICd7MH0nLlwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiVGVhbSBpbnB1dCBtdXN0IGJlIGluIHRoZSBmb3JtICdURUFNID0gdGVhbSBTaW1EYXRhPTB4MUYnXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBIYW5kbGVTaW1EYXRhKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgLyppbnRbXSBzaW1EYXRhID0gR2V0U2ltRGF0YShsaW5lKTtcclxuICAgICAgICAgICAgICAgIGlmIChzaW1EYXRhICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpbURhdGFbMF0gPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRUZWFtU2ltRGF0YShjdXJyZW50VGVhbSwgKGJ5dGUpc2ltRGF0YVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nOiBObyBzaW0gZGF0YSBmb3IgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltRGF0YVsxXSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1TaW1PZmZlbnNlUHJlZihjdXJyZW50VGVhbSwgc2ltRGF0YVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1Igd2l0aCBsaW5lICd7MH0nLlwiLCBsaW5lKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLypNYXRjaCBvRm9ybU1hdGNoID0gb2ZmZW5zaXZlRm9ybWF0aW9uUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob0Zvcm1NYXRjaCAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZm9ybWF0aW9uID0gb0Zvcm1NYXRjaC5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24odGVhbSwgZm9ybWF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHdlZWtSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSkgIC8vbGluZS5TdGFydHNXaXRoKFwiV0VFS1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFN0YXRlID0gc2NoZWR1bGVTdGF0ZTtcclxuICAgICAgICAgICAgICAgIGlmIChzY2hlZHVsZUxpc3QgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZUxpc3QgPSBuZXcgTGlzdDxzdHJpbmc+KDMwMCk7XHJcbiAgICAgICAgICAgICAgICBzY2hlZHVsZUxpc3QuQWRkKGxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHllYXJSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSkvL2xpbmUuU3RhcnRzV2l0aChcIllFQVJcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNldFllYXIobGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiQUZDXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIk5GQ1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU3RyaW5nW10gcGFydHMgPSBsaW5lLlJlcGxhY2UoXCIgXCIsIFwiXCIpLlNwbGl0KG5ldyBjaGFyW10geyAnLCcgfSwgU3RyaW5nU3BsaXRPcHRpb25zLlJlbW92ZUVtcHR5RW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydHMgIT0gbnVsbCAmJiBwYXJ0cy5MZW5ndGggPiAzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRQcm9Cb3dsUGxheWVyKHNlYXNvbiwgKENvbmZlcmVuY2UpRW51bS5QYXJzZSh0eXBlb2YoQ29uZmVyZW5jZSksIHBhcnRzWzBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzWzFdLCBwYXJ0c1syXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChUU0JQbGF5ZXIpRW51bS5QYXJzZSh0eXBlb2YoVFNCUGxheWVyKSwgcGFydHNbM10pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3IoXCJFcnJvciBwcm9jZXNzaW5nIGxpbmUgPiBcIiArIGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50U3RhdGUgPT0gc2NoZWR1bGVTdGF0ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjaGVkdWxlTGlzdCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlTGlzdC5BZGQobGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudFN0YXRlID09IHJvc3RlclN0YXRlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBVcGRhdGVSb3N0ZXIobGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHYXJiYWdlL29ycGhpbiBsaW5lIG5vdCBhcHBsaWVkIFxcXCJ7MH1cXFwiXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldFllYXIoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNYXRjaCBtID0geWVhclJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgeWVhciA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmICh5ZWFyLkxlbmd0aCA8IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIid7MH0nIGlzIG5vdCB2YWxpZC5cIiwgbGluZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRZZWFyKHllYXIpO1xyXG4gICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoXCJZZWFyIHNldCB0byAnezB9J1wiLCB5ZWFyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEdldFRlYW0oc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gdGVhbVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgdGVhbSA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZWFtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnRbXSBHZXRTaW1EYXRhKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHNpbURhdGFSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgLy9zdHJpbmcgZGF0YSA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBkYXRhID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgc3RyaW5nIHNpbU9mZmVuc2VQcmVmID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgaW50W10gcmV0ID0geyAtMSwgLTEgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGludCBzaW1EYXRhID0gVFNCVG9vbC5TdGF0aWNVdGlscy5QYXJzZUludEZyb21IZXhTdHJpbmcoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0WzBdID0gc2ltRGF0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRXJyb3IgZ2V0dGluZyBTaW1EYXRhIHdpdGggbGluZSAnezB9Jy5cIiwgbGluZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2ltT2ZmZW5zZVByZWYuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHNvID0gSW50MzIuUGFyc2Uoc2ltT2ZmZW5zZVByZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFsxXSA9IHNvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2hcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBnZXR0aW5nIFNpbURhdGEgd2l0aCBsaW5lICd7MH0nLlwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBIYW5kbGVTaW1EYXRhKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmVnZXggc2ltRGF0YVJlZ2V4ID0gbmV3IFJlZ2V4KFwiU2ltRGF0YVxcXFxzKj1cXFxccyowW3hYXShbMC05YS1mQS1GXXsyfSlcIik7IC8vIHRyeSByZWd4MTAxLmNvbSAsIGl0J3MgYXdlc29tZSFcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHNpbURhdGFSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBzdHVmZiA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0b29sLlNldFRlYW1TaW1EYXRhKHNlYXNvbiwgY3VycmVudFRlYW0sIHN0dWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgR2V0QXdheVRlYW0oc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gZ2FtZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgYXdheVRlYW0gPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gYXdheVRlYW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBHZXRIb21lVGVhbShzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBnYW1lUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgIHN0cmluZyB0ZWFtID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlYW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBHZXRXZWVrKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHdlZWtSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgc3RyaW5nIHdlZWtfc3RyID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgaW50IHJldCA9IC0xO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gSW50MzIuUGFyc2Uod2Vla19zdHIpO1xyXG4gICAgICAgICAgICAgICAgcmV0LS07IC8vIG91ciB3ZWVrIHN0YXJ0cyBhdCAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2hcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2VlayAnezB9JyBpcyBpbnZhbGlkLlwiLCB3ZWVrX3N0cikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgU2V0Q3VycmVudFRlYW0oc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoVFNCMlRvb2wuR2V0VGVhbUluZGV4KHRlYW0pIDwgMClcclxuICAgICAgICAgICAgey8vZXJyb3IgY29uZGl0aW9uXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJUZWFtICd7MH0nIGlzIEludmFsaWQuXCIsIHRlYW0pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUZWFtID0gdGVhbTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCB2b2lkIFVwZGF0ZVJvc3RlcihzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChsaW5lLlN0YXJ0c1dpdGgoXCJLUlwiKSlcclxuICAgICAgICAgICAgICAgIFNldEtpY2tSZXR1cm5NYW4obGluZSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIlBSXCIpKVxyXG4gICAgICAgICAgICAgICAgU2V0UHVudFJldHVybk1hbihsaW5lKTtcclxuICAgICAgICAgICAgLyplbHNlIGlmKGxpbmUuU3RhcnRzV2l0aChcIlJFVFVSTl9URUFNXCIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNYXRjaCBtID0gcmV0dXJuVGVhbVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgaWYoIG0gPT0gTWF0Y2guRW1wdHkgKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJFcnJvciB3aXRoIGxpbmUgJ3swfScuXFxuXFx0Q29ycmVjdCBTeW50YXggPSdSRVRVUk5fVEVBTSBQT1MxLCBQT1MyLCBQT1MzJ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHBvczEgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBwb3MyID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgcG9zMyA9IG0uR3JvdXBzWzNdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRSZXR1cm5UZWFtKGN1cnJlbnRUZWFtLCBwb3MxLHBvczIscG9zMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE1hdGNoIG0gPSBwb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuSW5kZXhPZihcIiNcIikgPiAtMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyUmVnZXguTWF0Y2gobGluZSkgPT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGplcnNleSBudW1iZXIpIExpbmUgIHswfVwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgcCA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSAmJiB0b29sLklzVmFsaWRQb3NpdGlvbihwKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5TdGFydHNXaXRoKFwiUUJcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFFCKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIldSXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIlJCXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuU3RhcnRzV2l0aChcIlRFXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRTa2lsbFBsYXllcihsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChsaW5lLlN0YXJ0c1dpdGgoXCJDXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIlJHXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuU3RhcnRzV2l0aChcIkxHXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIlJUXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuU3RhcnRzV2l0aChcIkxUXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0T0xQbGF5ZXIobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuSW5kZXhPZihcIkxCXCIpID09IDIgfHwgbGluZS5JbmRleE9mKFwiQ0JcIikgPT0gMSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLlN0YXJ0c1dpdGgoXCJSRVwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJMRVwiKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLlN0YXJ0c1dpdGgoXCJOVFwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJTU1wiKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLlN0YXJ0c1dpdGgoXCJGU1wiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJEQlwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldERlZmVuc2l2ZVBsYXllcihsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiUFwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCJLXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXRLaWNrUGxheWVyKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISBXaXRoIGxpbmUgXFxcInswfVxcXCIgICAgIHRlYW0gPSB7MX1cIiwgbGluZSwgY3VycmVudFRlYW0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9RQjEsIGNocmlzIE1JTExFUiwgRmFjZT0weDMzLCAjMTIsIDI1LCA2OSwgMTMsIDEzLCAzMSwgNDQsIDUwLCAzMSAsWzIsIDQsIDMgXVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgU2V0UUIoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgZm5hbWUgPSBHZXRGaXJzdE5hbWUobGluZSk7XHJcbiAgICAgICAgICAgIHN0cmluZyBsbmFtZSA9IEdldExhc3ROYW1lKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gR2V0UG9zaXRpb24obGluZSk7XHJcbiAgICAgICAgICAgIGludCBmYWNlID0gR2V0RmFjZShsaW5lKTtcclxuICAgICAgICAgICAgaW50IGplcnNleU51bWJlciA9IEdldEplcnNleU51bWJlcihsaW5lKTsvL3dpbGwgYmUgaW4gaGV4LCBub3QgYmFzZSAxMFxyXG4gICAgICAgICAgICBpZiAoZmFjZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRGYWNlKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZmFjZSk7XHJcbiAgICAgICAgICAgIGlmIChqZXJzZXlOdW1iZXIgPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciB3aXRoIGplcnNleSBudW1iZXIgZm9yICd7MH0gezF9Jywgc2V0dGluZyB0byAwLlwiLCBmbmFtZSwgbG5hbWUpKTtcclxuICAgICAgICAgICAgICAgIGplcnNleU51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdG9vbC5JbnNlcnRQbGF5ZXJOYW1lKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZm5hbWUsIGxuYW1lLCAoYnl0ZSlqZXJzZXlOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgYnl0ZVtdIHZhbHMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFRzYkFiaWxpdGllcyhHZXRJbnRzKGxpbmUsZmFsc2UpKTtcclxuICAgICAgICAgICAgaW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmICh2YWxzICE9IG51bGwgJiYgdmFscy5MZW5ndGggPiA5KVxyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRRQkFiaWxpdGllcyhzZWFzb24sIGN1cnJlbnRUZWFtLCBwb3MsIHZhbHMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBjb3VsZCBub3Qgc2V0IGFiaWxpdHkgZGF0YSBmb3IgezB9IHsxfSxcIiwgY3VycmVudFRlYW0sIHBvcykpO1xyXG4gICAgICAgICAgICBpZiAoZmFjZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRGYWNlKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZmFjZSk7XHJcbiAgICAgICAgICAgIC8qaWYoc2ltVmFscyAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRRQlNpbURhdGEoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCBzaW1WYWxzKTsqL1xyXG4gICAgICAgICAgICBlbHNlIGlmIChzaG93U2ltRXJyb3IpXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBzaW0gZGF0YSBzcGVjaWZpZWQuXCIsIGxpbmUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBTZXRTa2lsbFBsYXllcihzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyBmbmFtZSA9IEdldEZpcnN0TmFtZShsaW5lKTtcclxuICAgICAgICAgICAgc3RyaW5nIGxuYW1lID0gR2V0TGFzdE5hbWUobGluZSk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwb3MgPSBHZXRQb3NpdGlvbihsaW5lKTtcclxuICAgICAgICAgICAgaW50IGZhY2UgPSBHZXRGYWNlKGxpbmUpO1xyXG4gICAgICAgICAgICBpbnQgamVyc2V5TnVtYmVyID0gR2V0SmVyc2V5TnVtYmVyKGxpbmUpOy8vd2lsbCBiZSBpbiBoZXgsIG5vdCBiYXNlIDEwXHJcbiAgICAgICAgICAgIHRvb2wuU2V0RmFjZShzZWFzb24sIGN1cnJlbnRUZWFtLCBwb3MsIGZhY2UpO1xyXG4gICAgICAgICAgICB0b29sLkluc2VydFBsYXllck5hbWUoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCBmbmFtZSwgbG5hbWUsIChieXRlKWplcnNleU51bWJlcik7XHJcblxyXG4gICAgICAgICAgICBieXRlW10gdmFscyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0VHNiQWJpbGl0aWVzKEdldEludHMobGluZSwgZmFsc2UpKTtcclxuICAgICAgICAgICAgaW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmICh2YWxzICE9IG51bGwgJiYgdmFscy5MZW5ndGggPiA2KVxyXG4gICAgICAgICAgICAgICAgdG9vbC5TZXRTa2lsbFBsYXllckFiaWxpdGllcyhzZWFzb24sIGN1cnJlbnRUZWFtLCBwb3MsIHZhbHMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBObyBwbGF5ZXIgZGF0YSBzcGVjaWZpZWQuXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgLyppZihzaW1WYWxzIT0gbnVsbCYmIHNpbVZhbHMuTGVuZ3RoID4gMylcclxuICAgICAgICAgICAgICAgIHRvb2wuU2V0U2tpbGxTaW1EYXRhKGN1cnJlbnRUZWFtLHBvcyxzaW1WYWxzKTtcclxuICAgICAgICAgICAgZWxzZSAgaWYoc2hvd1NpbUVycm9yKVxyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2FybmluZyEgT24gbGluZSAnezB9Jy4gTm8gc2ltIGRhdGEgc3BlY2lmaWVkLlwiLGxpbmUpKTsqL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldE9MUGxheWVyKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIGZuYW1lID0gR2V0Rmlyc3ROYW1lKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgbG5hbWUgPSBHZXRMYXN0TmFtZShsaW5lKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IEdldFBvc2l0aW9uKGxpbmUpO1xyXG4gICAgICAgICAgICBpbnQgZmFjZSA9IEdldEZhY2UobGluZSk7XHJcbiAgICAgICAgICAgIGludCBqZXJzZXlOdW1iZXIgPSBHZXRKZXJzZXlOdW1iZXIobGluZSk7Ly93aWxsIGJlIGluIGhleCwgbm90IGJhc2UgMTBcclxuICAgICAgICAgICAgYnl0ZVtdIHZhbHMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFRzYkFiaWxpdGllcyhHZXRJbnRzKGxpbmUsIGZhbHNlKSk7XHJcblxyXG4gICAgICAgICAgICB0b29sLlNldEZhY2Uoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCBmYWNlKTtcclxuICAgICAgICAgICAgdG9vbC5JbnNlcnRQbGF5ZXJOYW1lKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZm5hbWUsIGxuYW1lLCAoYnl0ZSlqZXJzZXlOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDMpXHJcbiAgICAgICAgICAgICAgICB0b29sLlNldE9MUGxheWVyQWJpbGl0aWVzKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgdmFscyk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIldhcm5pbmchIE9uIGxpbmUgJ3swfScuIE5vIHBsYXllciBkYXRhIHNwZWNpZmllZC5cIiwgbGluZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBTZXREZWZlbnNpdmVQbGF5ZXIoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgZm5hbWUgPSBHZXRGaXJzdE5hbWUobGluZSk7XHJcbiAgICAgICAgICAgIHN0cmluZyBsbmFtZSA9IEdldExhc3ROYW1lKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gR2V0UG9zaXRpb24obGluZSk7XHJcbiAgICAgICAgICAgIGludCBmYWNlID0gR2V0RmFjZShsaW5lKTtcclxuICAgICAgICAgICAgaW50IGplcnNleU51bWJlciA9IEdldEplcnNleU51bWJlcihsaW5lKTsvL3dpbGwgYmUgaW4gaGV4LCBub3QgYmFzZSAxMFxyXG4gICAgICAgICAgICBieXRlW10gdmFscyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0VHNiQWJpbGl0aWVzKEdldEludHMobGluZSwgZmFsc2UpKTtcclxuICAgICAgICAgICAgaW50W10gc2ltVmFscyA9IEdldFNpbVZhbHMobGluZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB0b29sLlNldEZhY2Uoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCBmYWNlKTtcclxuICAgICAgICAgICAgdG9vbC5JbnNlcnRQbGF5ZXJOYW1lKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZm5hbWUsIGxuYW1lLCAoYnl0ZSlqZXJzZXlOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDUpXHJcbiAgICAgICAgICAgICAgICB0b29sLlNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyhzZWFzb24sIGN1cnJlbnRUZWFtLCBwb3MsIHZhbHMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISBPbiBsaW5lICd7MH0nLiBJbnZhbGlkIHBsYXllciBhdHRyaWJ1dGVzLlwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgIGlmKHNpbVZhbHMgIT0gbnVsbCAmJiBzaW1WYWxzLkxlbmd0aCA+IDEpXHJcbiAgICAgICAgICAgICAgICB0b29sLlNldERlZmVuc2l2ZVNpbURhdGEoc2Vhc29uLCBjdXJyZW50VGVhbSxwb3Msc2ltVmFscyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYoc2hvd1NpbUVycm9yKVxyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2FybmluZyEgT24gbGluZSAnezB9Jy4gTm8gc2ltIGRhdGEgc3BlY2lmaWVkLlwiLGxpbmUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBTZXRLaWNrUGxheWVyKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIGZuYW1lID0gR2V0Rmlyc3ROYW1lKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgbG5hbWUgPSBHZXRMYXN0TmFtZShsaW5lKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IEdldFBvc2l0aW9uKGxpbmUpO1xyXG4gICAgICAgICAgICBpbnQgZmFjZSA9IEdldEZhY2UobGluZSk7XHJcbiAgICAgICAgICAgIGludCBqZXJzZXlOdW1iZXIgPSBHZXRKZXJzZXlOdW1iZXIobGluZSk7Ly93aWxsIGJlIGluIGhleCwgbm90IGJhc2UgMTBcclxuICAgICAgICAgICAgYnl0ZVtdIHZhbHMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFRzYkFiaWxpdGllcyhHZXRJbnRzKGxpbmUsIGZhbHNlKSk7XHJcbiAgICAgICAgICAgIGludFtdIHNpbVZhbHMgPSBHZXRTaW1WYWxzKGxpbmUsdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB0b29sLlNldEZhY2Uoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCBmYWNlKTtcclxuICAgICAgICAgICAgdG9vbC5JbnNlcnRQbGF5ZXJOYW1lKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgZm5hbWUsIGxuYW1lLCAoYnl0ZSlqZXJzZXlOdW1iZXIpO1xyXG4gICAgICAgICAgICBpZiAobGluZS5TdGFydHNXaXRoKFwiS1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHMgIT0gbnVsbCAmJiB2YWxzLkxlbmd0aCA+IDcpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRLaWNrZXJBYmlsaXRpZXMoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zLCB2YWxzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxzICE9IG51bGwgJiYgdmFscy5MZW5ndGggPiA2KVxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2wuU2V0UHVudGVyQWJpbGl0aWVzKHNlYXNvbiwgY3VycmVudFRlYW0sIHBvcywgdmFscyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZWxzZVxyXG4gICAgICAgICAgICAvL1x0VFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiV2FybmluZyEgT24gbGluZSAnezB9Jy4gTm8gcGxheWVyIGRhdGEgc3BlY2lmaWVkLlwiLGxpbmUpKTtcclxuICAgICAgICAgICAgLy9pZihzaW1WYWxzICE9IG51bGwgJiYgcG9zID09IFwiUFwiKVxyXG4gICAgICAgICAgICAvLyAgICB0b29sLlNldFB1bnRpbmdTaW1EYXRhKHNlYXNvbixjdXJyZW50VGVhbSwgc2ltVmFsc1swXSk7XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihzaW1WYWxzICE9IG51bGwgJiYgcG9zID09IFwiS1wiKVxyXG4gICAgICAgICAgICAvLyAgICB0b29sLlNldEtpY2tpbmdTaW1EYXRhKHNlYXNvbixjdXJyZW50VGVhbSwgc2ltVmFsc1swXSk7XHJcbiAgICAgICAgICAgIC8vZWxzZSBpZihzaG93U2ltRXJyb3IpXHJcbiAgICAgICAgICAgIC8vICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIldhcm5pbmchIE9uIGxpbmUgJ3swfScuIE5vIHNpbSBkYXRhIHNwZWNpZmllZC5cIixsaW5lKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZWdleCBLaWNrUmV0TWFuID0gbmV3IFJlZ2V4KFwiXktSXFxcXHMqLFxcXFxzKihbQS1aMS00XSspJFwiKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSZWdleCBQdW50UmV0TWFuID0gbmV3IFJlZ2V4KFwiXlBSXFxcXHMqLFxcXFxzKihbQS1aMS00XSspJFwiKTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldEtpY2tSZXR1cm5NYW4oc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gS2lja1JldE1hbi5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBwb3MgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb2wuSXNWYWxpZFBvc2l0aW9uKHBvcykpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRLaWNrUmV0dXJuZXIoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiB3aXRoIGxpbmUgJ3swfScuXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldFB1bnRSZXR1cm5NYW4oc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gUHVudFJldE1hbi5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBwb3MgPSBtLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvb2wuSXNWYWxpZFBvc2l0aW9uKHBvcykpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5TZXRQdW50UmV0dXJuZXIoc2Vhc29uLCBjdXJyZW50VGVhbSwgcG9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiB3aXRoIGxpbmUgJ3swfScuXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBFeHBlY3QgbGluZSBsaWtlICcgICBbOCwgOSwgMCBdJ1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiaW5wdXRcIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyAgaW50W10gR2V0U2ltVmFscyhzdHJpbmcgaW5wdXQsIGJvb2wgdXNlSGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBzdHVmZiA9IGlucHV0LlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGludCBzdGFydCA9IHN0dWZmLkluZGV4T2YoXCJbXCIpO1xyXG4gICAgICAgICAgICAgICAgaW50IGVuZCA9IHN0dWZmLkluZGV4T2YoXCJdXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID4gLTEgJiYgZW5kID4gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R1ZmYgPSBzdHVmZi5TdWJzdHJpbmcoc3RhcnQgKyAxLCBlbmQgLSBzdGFydCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHZXRJbnRzKHN0dWZmLCB1c2VIZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnRbXSBHZXRJbnRzKHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRJbnRzKGlucHV0LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljICBpbnRbXSBHZXRJbnRzKHN0cmluZyBpbnB1dCwgYm9vbCB1c2VIZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9TeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMgbnMgPSBTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuTm9uZTtcclxuICAgICAgICAgICAgICAgIC8vaWYodXNlSGV4KVxyXG4gICAgICAgICAgICAgICAgLy8gICAgbnMgPSBTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXI7XHJcbiAgICAgICAgICAgICAgICBpbnQgcG91bmQgPSBpbnB1dC5JbmRleE9mKFwiI1wiKTtcclxuICAgICAgICAgICAgICAgIGludCBicmFjZSA9IGlucHV0LkluZGV4T2YoXCJbXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvdW5kID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5TdWJzdHJpbmcocG91bmQgKyAzKTtcclxuICAgICAgICAgICAgICAgIGlmIChicmFjZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyYWNlID0gaW5wdXQuSW5kZXhPZihcIltcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5TdWJzdHJpbmcoMCwgYnJhY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2hhcltdIHNlcHMgPSBuZXcgY2hhcltdIHsgJyAnLCAnLCcsICdcXHQnIH07XHJcbiAgICAgICAgICAgICAgICBzdHJpbmdbXSBudW1zID0gaW5wdXQuU3BsaXQoc2Vwcyk7XHJcbiAgICAgICAgICAgICAgICBpbnQgaiwgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG51bXMuTGVuZ3RoOyBqKyspXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bXNbal0uTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgIGludFtdIHJlc3VsdCA9IG5ldyBpbnRbY291bnRdO1xyXG4gICAgICAgICAgICAgICAgaiA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHMgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaW50IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gbnVtc1tpXSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICE9IG51bGwgJiYgcy5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlSGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtqKytdID0gVFNCVG9vbC5TdGF0aWNVdGlscy5QYXJzZUludEZyb21IZXhTdHJpbmcocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2orK10gPSBJbnQzMi5QYXJzZShzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBlcnJvciA9IFN0cmluZy5Gb3JtYXQoXCJFcnJvciB3aXRoIGlucHV0ICd7MH0nLCB7MX0sIHdhcyBqZXJzZXkgbnVtYmVyIHNwZWNpZmllZD9cIiwgaW5wdXQsIGUuTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljICBpbnQgR2V0SmVyc2V5TnVtYmVyKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHJldCA9IC0xO1xyXG4gICAgICAgICAgICBSZWdleCBqZXJzZXlSZWdleCA9IG5ldyBSZWdleChcIiMoWzAtOV0rKVwiKTtcclxuICAgICAgICAgICAgc3RyaW5nIG51bSA9IGplcnNleVJlZ2V4Lk1hdGNoKGxpbmUpLkdyb3Vwc1sxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gVFNCVG9vbC5TdGF0aWNVdGlscy5QYXJzZUludEZyb21IZXhTdHJpbmcobnVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCB7IHJldCA9IC0xOyB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljICBpbnQgR2V0RmFjZShzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCByZXQgPSAtMTtcclxuICAgICAgICAgICAgUmVnZXggaGV4UmVnZXggPSBuZXcgUmVnZXgoXCIwW3hYXShbQS1GYS1mMC05XSspXCIpO1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gaGV4UmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgIGlmIChtICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgbnVtID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRyeVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuUGFyc2VJbnRGcm9tSGV4U3RyaW5nKG51bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkZhY2UgRVJST1IgbGluZSAnezB9J1wiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljICBzdHJpbmcgR2V0UG9zaXRpb24oc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gcG9zTmFtZUZhY2VSZWdleC5NYXRjaChsaW5lKS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBvcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgIHN0cmluZyBHZXRMYXN0TmFtZShzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXQgPSBcIlwiO1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gcG9zTmFtZUZhY2VSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBuYW1lID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKS5UcmltKCk7XHJcbiAgICAgICAgICAgICAgICBpbnQgaW5kZXggPSBuYW1lLkxhc3RJbmRleE9mKFwiIFwiKTtcclxuICAgICAgICAgICAgICAgIHJldCA9IG5hbWUuU3Vic3RyaW5nKGluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgIHN0cmluZyBHZXRGaXJzdE5hbWUoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0ID0gXCJcIjtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHBvc05hbWVGYWNlUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgIGlmIChtICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgbmFtZSA9IG0uR3JvdXBzWzJdLlRvU3RyaW5nKCkuVHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgaW50IGluZGV4ID0gbmFtZS5MYXN0SW5kZXhPZihcIiBcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSAmJiBpbmRleCA8IG5hbWUuTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IG5hbWUuU3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKlxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFJlZ2V4IG1GaXJzdE5hbWVSZWdleCA9IG5ldyBSZWdleChcIihbYS16LiBdKylcIik7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmVnZXggbUxhc3ROYW1lUmVnZXggPSBuZXcgUmVnZXgoXCIgKFtBLVouIF0rKVwiKTtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyAgc3RyaW5nIEdldExhc3ROYW1lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldCA9IFwiXCI7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBwb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIG0yID0gbUxhc3ROYW1lUmVnZXguTWF0Y2gobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobTIgIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gbTIuR3JvdXBzWzFdLlRvU3RyaW5nKCkuVHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuV3JpdGVFcnJvcihcIkVSUk9SIEdldHRpbmcgbGFzdCBuYW1lIGZvcj5cIiArIGxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljICBzdHJpbmcgR2V0Rmlyc3ROYW1lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldCA9IFwiXCI7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBwb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAobSAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIE1hdGNoIG0yID0gbUZpcnN0TmFtZVJlZ2V4Lk1hdGNoKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0yICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IG0yLkdyb3Vwc1sxXS5Ub1N0cmluZygpLlRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLldyaXRlRXJyb3IoXCJFUlJPUiBHZXR0aW5nIGZpcnN0IG5hbWUgZm9yPlwiICsgbGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9Ki9cclxuXHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJieXRlU3RyaW5nXCI+U3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgYSBoZXggc3RyaW5nICgwMTIzNDU2Nzg5QUJDREVGKSwgbXVzdCBoYXZlXHJcbiAgICAgICAgLy8vIGFuIGV2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMuPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+VGhlIGJ5dGVzLjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJ5dGVbXSBHZXRCeXRlc0Zyb21TdHJpbmcoc3RyaW5nIGJ5dGVTdHJpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBieXRlW10gcmV0ID0gbnVsbDtcclxuICAgICAgICAgICAgYnl0ZVtdIHRtcCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0cmluZyBiO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZVN0cmluZyAhPSBudWxsICYmIGJ5dGVTdHJpbmcuTGVuZ3RoID4gMSAmJiAoYnl0ZVN0cmluZy5MZW5ndGggJSAyKSA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBuZXcgYnl0ZVtieXRlU3RyaW5nLkxlbmd0aCAvIDJdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB0bXAuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYiA9IGJ5dGVTdHJpbmcuU3Vic3RyaW5nKGkgKiAyLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBbaV0gPSBUU0JUb29sLlN0YXRpY1V0aWxzLlBhcnNlQnl0ZUZyb21IZXhTdHJpbmcoYik7IC8vIGJ5dGUuUGFyc2UoYiwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldCA9IHRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0SG9tZVVuaWZvcm1Db2xvclN0cmluZyhzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyB0bXAgPSBzdHJpbmcuRW1wdHk7XHJcbiAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gaG9tZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2ggIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRtcCA9IG1hdGNoLkdyb3Vwc1sxXS5WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdG1wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRBd2F5VW5pZm9ybUNvbG9yU3RyaW5nKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHRtcCA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBhd2F5UmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaCAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdG1wID0gbWF0Y2guR3JvdXBzWzFdLlZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0bXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldENvbmZDaGFtcENvbG9yU3RyaW5nKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHRtcCA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgTWF0Y2ggbWF0Y2ggPSBjb25mQ2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBtYXRjaC5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0RGl2Q2hhbXBDb2xvclN0cmluZyhzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyB0bXAgPSBzdHJpbmcuRW1wdHk7XHJcbiAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gZGl2Q2hhbXBSZWdleC5NYXRjaChsaW5lKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBtYXRjaC5Hcm91cHNbMV0uVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRtcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFVuaWZvcm1Vc2FnZVN0cmluZyhzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyB0bXAgPSBzdHJpbmcuRW1wdHk7XHJcbiAgICAgICAgICAgIE1hdGNoIG1hdGNoID0gdW5pZm9ybVVzYWdlUmVnZXguTWF0Y2gobGluZSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaCAhPSBNYXRjaC5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdG1wID0gbWF0Y2guR3JvdXBzWzFdLlZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0bXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyB0aGUgdGV4dCBzdHJpbmcgcGFzc2VkLCB3aXRob3V0IHRociB0cmFpbGluZyBjb21tYXMuXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0ZXh0XCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIERlbGV0ZVRyYWlsaW5nQ29tbWFzKHN0cmluZyB0ZXh0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUmVnZXggcnMgPSBuZXcgUmVnZXgoXCIsK1xcblwiKTtcclxuICAgICAgICAgICAgUmVnZXggcnJzID0gbmV3IFJlZ2V4KFwiLCskXCIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0ID0gcnMuUmVwbGFjZSh0ZXh0LCBcIlxcblwiKTtcclxuICAgICAgICAgICAgcmV0ID0gcnJzLlJlcGxhY2UocmV0LCBcIlwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2wyXHJcbntcclxuICAgIC8vLyBOT1RFOiBieXRlIHN3YXBwaW5nIFxyXG4gICAgLy8vICAgIDB4MTIzNDU2NzggXHJcbiAgICAvLy8gICAgICAgIHxcclxuICAgIC8vLyAgICAgICAgLS0tPiAweDc4NTYzNDEyXHJcbiAgICAvLy9cclxuICAgIC8vLyA8c3VtbWFyeT5cclxuICAgIC8vLyBTdW1tYXJ5IGRlc2NyaXB0aW9uIGZvciBTY2hlZHVsZUhlbHBlci5cclxuICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICBwdWJsaWMgY2xhc3MgU05FU19TY2hlZHVsZUhlbHBlclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBBVVRPX0NPUlJFQ1RfU0NIRURVTEUgPSB0cnVlO1xyXG5cclxuICAgICAgICBwcml2YXRlIGludCB3ZWVrT25lU3RhcnRMb2MgPSAxNDM4NjU0Oy8vMHgzMjlkYjtcclxuICAgICAgICBwcml2YXRlIGludFtdIHRlYW1HYW1lcztcclxuXHJcbiAgICAgICAgaW50IHdlZWssIHdlZWtfZ2FtZV9jb3VudCwgdG90YWxfZ2FtZV9jb3VudDtcclxuICAgICAgICBwcml2YXRlIFJlZ2V4IGdhbWVSZWdleCA9IG5ldyBSZWdleChcIihbMC05YS16XSspXFxcXHMrYXRcXFxccysoWzAtOWEtel0rKVwiKTtcclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50W10gZ2FtZXNQZXJXZWVrID0geyAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0IH07XHJcbiAgICAgICAgLy9wcml2YXRlIGJ5dGVbXSBvdXRwdXRSb207XHJcbiAgICAgICAgcHJvdGVjdGVkIElUZWNtb1Rvb2wgbVRvb2w7XHJcblxyXG4gICAgICAgIHB1YmxpYyBTTkVTX1NjaGVkdWxlSGVscGVyKElUZWNtb1Rvb2wgdG9vbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubVRvb2wgPSB0b29sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gVGVhbXMgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgaW50IEdldFRlYW1JbmRleChzdHJpbmcgdGVhbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBUZWFtcy5JbmRleE9mKHRlYW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdHJpbmcgR2V0VGVhbUZyb21JbmRleChpbnQgaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVGVhbXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0V2Vla09uZUxvY2F0aW9uKGludCBsb2MsIGludFtdIGdhbWVzUGVyV2VlaywgTGlzdDxzdHJpbmc+IHRlYW1zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy53ZWVrT25lU3RhcnRMb2MgPSBsb2M7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXNQZXJXZWVrID0gZ2FtZXNQZXJXZWVrO1xyXG4gICAgICAgICAgICB0aGlzLlRlYW1zID0gdGVhbXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQ2xvc2VXZWVrKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh3ZWVrID4gLTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCBpID0gd2Vla19nYW1lX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCAxNClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBTY2hlZHVsZUdhbWUoMHhmZiwgMHhmZiwgd2VlaywgaSAvKndlZWtfZ2FtZV9jb3VudCovKTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2VlaysrO1xyXG4gICAgICAgICAgICB0b3RhbF9nYW1lX2NvdW50ICs9IHdlZWtfZ2FtZV9jb3VudDtcclxuICAgICAgICAgICAgd2Vla19nYW1lX2NvdW50ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gQXBwbGllcyBhIHNjaGVkdWxlIHRvIHRoZSByb20uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJsaW5lc1wiPnRoZSBjb250ZW50cyBvZiB0aGUgc2NoZWR1bGUgZmlsZS48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFwcGx5U2NoZWR1bGUoTGlzdDxzdHJpbmc+IGxpbmVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2VlayA9IC0xO1xyXG4gICAgICAgICAgICB3ZWVrX2dhbWVfY291bnQgPSAwO1xyXG4gICAgICAgICAgICB0b3RhbF9nYW1lX2NvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChTTkVTX1NjaGVkdWxlSGVscGVyLkFVVE9fQ09SUkVDVF9TQ0hFRFVMRSAmJiBnYW1lc1BlcldlZWsuTGVuZ3RoID09IDE4KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5lcyA9IEVuc3VyZTE4V2Vla3MobGluZXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgbGluZTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBsaW5lcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gbGluZXNbaV0uVG9TdHJpbmcoKS5UcmltKCkuVG9Mb3dlcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuU3RhcnRzV2l0aChcIiNcIikgfHwgbGluZS5MZW5ndGggPCAzKVxyXG4gICAgICAgICAgICAgICAgeyAvLyBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwid2Vla1wiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2VlayA+IDE4KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihcIkVycm9yISBZb3UgY2FuIGhhdmUgYSBtYXhpbXVtIG9mIDE4IHdlZWtzIGluIGEgc2Vhc29uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIENsb3NlV2VlaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuV3JpdGVFcnJvcihTdHJpbmcuRm9ybWF0KCBcIlNjaGVkdWxlaW5nIHswfVwiLCBsaW5lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGVHYW1lKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENsb3NlV2VlaygpOy8vIGNsb3NlIHdlZWsgMThcclxuXHJcbiAgICAgICAgICAgIGlmICh3ZWVrIDwgMTggJiYgZ2FtZXNQZXJXZWVrLkxlbmd0aCA9PSAxOClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihcIldhcm5pbmchIFlvdSBkaWRuJ3Qgc2NoZWR1bGUgYWxsIDE4IHdlZWtzLiBUaGUgc2NoZWR1bGUgY291bGQgYmUgbWVzc2VkIHVwLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGVhbUdhbWVzICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdGVhbUdhbWVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFtR2FtZXNbaV0gIT0gMTYpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIldhcm5pbmchIFRoZSB7MH0gaGF2ZSB7MX0gZ2FtZXMgc2NoZWR1bGVkLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0VGVhbUZyb21JbmRleChpKSwgdGVhbUdhbWVzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIEF0dGVtcHRzIHRvIHNjaGVkdWxlIGEgZ2FtZS5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImxpbmVcIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5UcnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUuPC9yZXR1cm5zPlxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBTY2hlZHVsZUdhbWUoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHJldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBNYXRjaCBtID0gZ2FtZVJlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgYXdheVRlYW0sIGhvbWVUZWFtO1xyXG5cclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGF3YXlUZWFtID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGhvbWVUZWFtID0gbS5Hcm91cHNbMl0uVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmICh3ZWVrX2dhbWVfY291bnQgPiBUZWFtcy5Db3VudC8yKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJFcnJvciEgV2VlayB7MH06IFlvdSBjYW4gaGF2ZSBubyBtb3JlIHRoYW4gezF9IGdhbWVzIGluIGEgd2Vlay5cIiwgd2VlayArIDEsIFRlYW1zLkNvdW50IC8gMikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoU2NoZWR1bGVHYW1lKGF3YXlUZWFtLCBob21lVGVhbSwgd2Vlaywgd2Vla19nYW1lX2NvdW50KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB3ZWVrX2dhbWVfY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnQgdG90YWxfcG9zc2libGVfZ2FtZXMgPSAoVGVhbXMuQ291bnQgLyAyKSAqIDE2O1xyXG4gICAgICAgICAgICBpZiAodG90YWxfZ2FtZV9jb3VudCArIHdlZWtfZ2FtZV9jb3VudCA+IHRvdGFsX3Bvc3NpYmxlX2dhbWVzKSAvLzIyNCBmb3IgMjggdGVhbXNcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIFwiV2FybmluZyEgV2VlayB7MH06IFRoZXJlIGFyZSBtb3JlIHRoYW4gezF9IGdhbWVzIHNjaGVkdWxlZC5cIiwgd2VlayArIDEsIHRvdGFsX3Bvc3NpYmxlX2dhbWVzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiYXdheVRlYW1cIj48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImhvbWVUZWFtXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ3ZWVrXCI+V2VlayBpcyAwLTE2ICgwID0gd2VlayAxKS48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cImdhbWVPZldlZWtcIj48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBib29sIFNjaGVkdWxlR2FtZShzdHJpbmcgYXdheVRlYW0sIHN0cmluZyBob21lVGVhbSwgaW50IHdlZWssIGludCBnYW1lT2ZXZWVrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGF3YXlJbmRleCA9IEdldFRlYW1JbmRleChhd2F5VGVhbSk7XHJcbiAgICAgICAgICAgIGludCBob21lSW5kZXggPSBHZXRUZWFtSW5kZXgoaG9tZVRlYW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGF3YXlJbmRleCA9PSAtMSB8fCBob21lSW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVycm9yISBXZWVrIHsyfTogR2FtZSAnezB9IGF0IHsxfSdcIiwgYXdheVRlYW0sIGhvbWVUZWFtLCB3ZWVrICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXdheUluZGV4ID09IGhvbWVJbmRleCAmJiBhd2F5SW5kZXggPCBUZWFtcy5Db3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIFwiV2FybmluZyEgV2VlayB7MH06IFRoZSB7MX0gYXJlIHNjaGVkdWxlZCB0byBwbGF5IGFnYWluc3QgdGhlbXNlbHZlcy5cIiwgd2VlayArIDEsIGF3YXlUZWFtKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3ZWVrIDwgMCB8fCB3ZWVrID4gMTcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIldlZWsgezB9IGlzIG5vdCB2YWxpZC4gV2Vla3MgcmFuZ2UgMSAtIDE4LlwiLCB3ZWVrICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChHYW1lTG9jYXRpb24od2VlaywgZ2FtZU9mV2VlaykgPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHYW1lIHswfSBmb3Igd2VlayB7MX0gaXMgbm90IHZhbGlkLiBWYWxpZCBnYW1lcyBmb3Igd2VlayB7MX0gYXJlIDAtezJ9LlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPZldlZWssIHdlZWssIGdhbWVzUGVyV2Vla1t3ZWVrXSAtIDEpKTtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcInswfSBhdCB7MX1cIiwgYXdheVRlYW0sIGhvbWVUZWFtKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFNjaGVkdWxlR2FtZShhd2F5SW5kZXgsIGhvbWVJbmRleCwgd2VlaywgZ2FtZU9mV2Vlayk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXdheVRlYW0gPT0gXCJudWxsXCIgfHwgaG9tZVRlYW0gPT0gXCJudWxsXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNjaGVkdWxlR2FtZShpbnQgYXdheVRlYW1JbmRleCwgaW50IGhvbWVUZWFtSW5kZXgsIGludCB3ZWVrLCBpbnQgZ2FtZU9mV2VlaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdhbWVMb2NhdGlvbih3ZWVrLCBnYW1lT2ZXZWVrKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbVRvb2wuU2V0Qnl0ZShsb2NhdGlvbiwgKGJ5dGUpYXdheVRlYW1JbmRleCk7XHJcbiAgICAgICAgICAgICAgICBtVG9vbC5TZXRCeXRlKGxvY2F0aW9uICsgMSwgKGJ5dGUpaG9tZVRlYW1JbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXdheVRlYW1JbmRleCA8IFRlYW1zLkNvdW50KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIEluY3JlbWVudFRlYW1HYW1lcyhhd2F5VGVhbUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBJbmNyZW1lbnRUZWFtR2FtZXMoaG9tZVRlYW1JbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyplbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIklOVkFMSUQgZ2FtZSBmb3IgUk9NLiBXZWVrPXswfSBHYW1lIG9mIFdlZWsgPXsxfVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHdlZWssZ2FtZU9mV2Vlayk7XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBSZXR1cm5zIGEgc3RyaW5nIGxpa2UgXCI0OWVycyBhdCBnaWFudHNcIiwgZm9yIGEgdmFsaWQgd2VlaywgZ2FtZSBvZiB3ZWVrIGNvbWJvLlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwid2Vla1wiPlRoZSB3ZWVrIGluIHF1ZXN0aW9uLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZ2FtZU9mV2Vla1wiPlRoZSBnYW1lIHRvIGdldC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5SZXR1cm5zIGEgc3RyaW5nIGxpa2UgXCI0OWVycyBhdCBnaWFudHNcIiwgZm9yIGEgdmFsaWQgd2VlaywgZ2FtZSBvZiB3ZWVrIGNvbWJvLCByZXR1cm5zIG51bGxcclxuICAgICAgICAvLy8gdXBvbiBlcnJvci4gPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0R2FtZShpbnQgd2VlaywgaW50IGdhbWVPZldlZWspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHYW1lTG9jYXRpb24od2VlaywgZ2FtZU9mV2Vlayk7XHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PSAtMSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBpbnQgYXdheUluZGV4ID0gbVRvb2wuT3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuICAgICAgICAgICAgaW50IGhvbWVJbmRleCA9IG1Ub29sLk91dHB1dFJvbVtsb2NhdGlvbiArIDFdO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChhd2F5SW5kZXggPCBUZWFtcy5Db3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gc3RyaW5nLkZvcm1hdChcInswfSBhdCB7MX1cIixcclxuICAgICAgICAgICAgICAgICAgICBHZXRUZWFtRnJvbUluZGV4KGF3YXlJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgR2V0VGVhbUZyb21JbmRleChob21lSW5kZXgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBSZXR1cm5zIGEgd2VlayBmcm9tIHRoZSBzZWFzb24uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ3ZWVrXCI+VGhlIHdlZWsgdG8gZ2V0IFswLTE2XSAoMD0gd2VlayAxKS48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRXZWVrKGludCB3ZWVrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHdlZWsgPCAwIHx8IHdlZWsgPiBnYW1lc1BlcldlZWsuTGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoMjAgKiAxNCk7XHJcbiAgICAgICAgICAgIHNiLkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiV0VFSyB7MH1cXG5cIiwgd2VlayArIDEpKTtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyBnYW1lO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBnYW1lc1BlcldlZWtbd2Vla107IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ2FtZSA9IEdldEdhbWUod2VlaywgaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZSAhPSBudWxsICYmIGdhbWUuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfVxcblwiLCBnYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2IuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0U2NoZWR1bGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDIwICogMTQgKiAxOCk7XHJcbiAgICAgICAgICAgIC8vc2IuQXBwZW5kKFwiU2NoZWR1bGVcXG5cXG5cIik7XHJcbiAgICAgICAgICAgIGZvciAoaW50IHdlZWsgPSAwOyB3ZWVrIDwgZ2FtZXNQZXJXZWVrLkxlbmd0aDsgd2VlaysrKVxyXG4gICAgICAgICAgICAgICAgc2IuQXBwZW5kKEdldFdlZWsod2VlaykpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCBpbnQgR2FtZUxvY2F0aW9uKGludCB3ZWVrLCBpbnQgZ2FtZU9md2VlaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh3ZWVrIDwgMCB8fCB3ZWVrID4gZ2FtZXNQZXJXZWVrLkxlbmd0aCAtIDEgfHxcclxuICAgICAgICAgICAgICAgIGdhbWVPZndlZWsgPiBnYW1lc1BlcldlZWtbd2Vla10gfHwgZ2FtZU9md2VlayA8IDApXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblxyXG4gICAgICAgICAgICBpbnQgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB3ZWVrOyBpKyspXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gKGdhbWVzUGVyV2Vla1tpXSAqIDIpO1xyXG5cclxuICAgICAgICAgICAgb2Zmc2V0ICs9IGdhbWVPZndlZWsgKiAyO1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSB3ZWVrT25lU3RhcnRMb2MgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBJbmNyZW1lbnRUZWFtR2FtZXMoaW50IHRlYW1JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0ZWFtR2FtZXMgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHRlYW1HYW1lcyA9IG5ldyBpbnRbVGVhbXMuQ291bnRdO1xyXG4gICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKFwiSW5jcmVtZW50VGVhbUdhbWVzIHRlYW0gaW5kZXggPSBcIit0ZWFtSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAodGVhbUluZGV4IDwgdGVhbUdhbWVzLkxlbmd0aClcclxuICAgICAgICAgICAgICAgIHRlYW1HYW1lc1t0ZWFtSW5kZXhdKys7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PHN0cmluZz4gRW5zdXJlMThXZWVrcyhMaXN0PHN0cmluZz4gbGluZXMpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgaW50IHdrcyA9IENvdW50V2Vla3MobGluZXMpO1xyXG4gICAgICAgICAgICBzdHJpbmcgbGluZTEsIGxpbmUyO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gbGluZXMuQ291bnQgLSAyOyBpID4gMDsgaSAtPSAyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5lMSA9IGxpbmVzW2ldLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBsaW5lMiA9IGxpbmVzW2kgKyAxXS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdrcyA+IDE3KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZTEuSW5kZXhPZihcImF0XCIpID4gLTEgJiYgbGluZTIuSW5kZXhPZihcImF0XCIpID4gLTEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXMuSW5zZXJ0KGkgKyAxLCBcIldFRUsgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgICAgICB3a3MrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9pZiggVFNCVG9vbC5TdGF0aWNVdGlscy5HVUlfTU9ERSApXHJcbiAgICAgICAgICAgIC8vXHRTaG93TGluZXMobGluZXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBDb3VudFdlZWtzKExpc3Q8c3RyaW5nPiBsaW5lcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyBsaW5lIGluIGxpbmVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZS5Ub0xvd2VyKCkuSW5kZXhPZihcIndlZWtcIikgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcbnVzaW5nIFN5c3RlbS5JTztcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sMlxyXG57XHJcbiAgICAvLy8gMCAgICAgMSAgICAgMiAgICAgMyAgICAgICA0ICA1ICAgNiAgIDcgICAgOCAgOSAgIDEwICAxMSAgICAxMiAgICAgICAgICAxMyAgICAgICAgMTRcclxuICAgIC8vLyBwb3MsIG5hbWUsIGZhY2UsIG51bWJlciwgUlMsIFJQLCBNUywgSFAsIFBTLCBQQywgUEEsIEFQQiwgW1NpbSBydXNoLCBTaW0gcGFzcywgU2ltIFBvY2tldF0uXHJcbiAgICAvLy8gUUIxLHFiIEJJTExTLCBGYWNlPTB4NTIsICMwLCAyNSwgNjksIDEzLCAxMywgNTYsIDgxLCA4MSwgODEgLFszLCAxMiwgMyBdICp0c2IxUGxheWVyTGluZVxyXG4gICAgLy8vICAgICAgICAgICAgICAgICAgICAgICAgICBSUywgUlAsIE1TLCBIUCwgQkMsIFJFQywgW1NpbSBydXNoLCBTaW0gY2F0Y2gsIFNpbSBwdW50IFJldCwgU2ltIGtpY2sgcmV0XS4gLT4gU2tpbGxcclxuICAgIC8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgUlMsIFJQLCBNUywgSFAsIFBJLCBRVSwgW1NpbSBwYXNzIHJ1c2gsIFNpbSBjb3ZlcmFnZV0uICAgICAgICAgICAgICAgICAgICAgLS0+IERlZmVuc2VcclxuICAgIC8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgUlMsIFJQLCBNUywgSFAsIEtBLCBBS0IsWyBTaW0ga2lja2luZyBhYmlsaXR5XS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+IFB1bnRlci9LaWNrZXJcclxuICAgIC8vLyBwb3MsIG5hbWUsIGZhY2UsIG51bWJlciwgUlMgIFJQICBNUyAgSFAgIEJCICBQUyAgUEMgIFBBICBBUiBDTyBbc2ltIHZhbHNdXHJcbiAgICAvLy8gIyBTa2lsbCAgICAgICAgICAgICAgICAgIFJTICBSUCAgTVMgIEhQICBCQiAgQkMgIFJDIFtzaW0gdmFsc11cclxuICAgIC8vLyAjIE9MICAgICAgICAgICAgICAgICAgICAgUlMgIFJQICBNUyAgSFAgIEJCXHJcbiAgICAvLy8gIyBERUYgICAgICAgICAgICAgICAgICAgIFJTICBSUCAgTVMgIEhQICBCQiAgUEkgIFFVIFtzaW0gdmFsc11cclxuICAgIC8vLyAjIEsgICAgICAgICAgICAgICAgICAgICAgUlMgIFJQICBNUyAgSFAgIEJCICBLUCAgS0EgIEFCIFtzaW0gdmFsXVxyXG4gICAgLy8vICMgUCAgICAgICAgICAgICAgICAgICAgICBSUyAgUlAgIE1TICBIUCAgQkIgIEtQIEFCIFtzaW0gdmFsXVxyXG4gICAgLy8vIFFCMSxqaW0gS0VMTFksRmFjZT0weDAwLCMxMiw2OSwyNSwxMywxMywxMyw2Myw4MSw2OSw2OSw3NSxbMzgsRTAsOUVdXHJcbiAgICBwdWJsaWMgY2xhc3MgVFNCMkNvbnZlcnRlclxyXG4gICAge1xyXG4gICAgICAgIC8vIHRoaXMgd2lsbCByZW1vdmUgdGhlICdBZ2lsaXR5JyBhdHRyaWJ1dGVcclxuICAgICAgICBwdWJsaWMgc3RhdGljIFN0cmluZyBDb252ZXJ0VG9UU0IyRnJvbVRTQjMoc3RyaW5nIGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5SZXBsYWNlKFwiXFxyXFxuXCIsIFwiXFxuXCIpO1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBsaW5lcyA9IGlucHV0LlNwbGl0KFwiXFxuXCIuVG9DaGFyQXJyYXkoKSk7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKGlucHV0Lkxlbmd0aCArIGxpbmVzLkxlbmd0aCAqIDIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgdG1wID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIGxpbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgdGhlTGluZSBpbiBsaW5lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IHRoZUxpbmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoU2hvdWxkQ29udmVydFRTQjNQbGF5ZXIobGluZSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IzKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKHRtcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQobGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNob3dFcnJvcnMoKTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbnZlcnRUb1RTQjJGcm9tVFNCMShzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LlJlcGxhY2UoXCJcXHJcXG5cIiwgXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuUmVwbGFjZShcInRpdGFuc1wiLCBcIm9pbGVyc1wiKTtcclxuICAgICAgICAgICAgc3RyaW5nW10gbGluZXMgPSBpbnB1dC5TcGxpdChcIlxcblwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcihpbnB1dC5MZW5ndGggKyBsaW5lcy5MZW5ndGggKiAyKTtcclxuICAgICAgICAgICAgc3RyaW5nIHRtcCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyBsaW5lPVwiXCI7XHJcblxyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgdGhlTGluZSBpbiBsaW5lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IHRoZUxpbmU7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZS5TdGFydHNXaXRoKFwiI1JFMlwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCIjTlQyXCIpIHx8IGxpbmUuU3RhcnRzV2l0aChcIiNMRTJcIikgfHwgbGluZS5TdGFydHNXaXRoKFwiI0xCNVwiKSB8fCBsaW5lLlN0YXJ0c1dpdGgoXCIjREIzXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGxpbmUuU3Vic3RyaW5nKDEpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIiNQTEFZQk9PS1wiKSAmJiBJbnB1dFBhcnNlci5wbGF5Ym9va1JlZ2V4Lk1hdGNoKGxpbmUpICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGxpbmUuU3Vic3RyaW5nKDEpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuVHJpbSgpLlN0YXJ0c1dpdGgoXCIjXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiQ09MT1JTXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiI1wiICsgbGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChTaG91bGRDb252ZXJ0VFNCMVBsYXllcihsaW5lKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBDb252ZXJ0VG9UU0IyUGxheWVyRnJvbVRTQjEobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIlBMQVlCT09LXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IENvbnZlcnRQbGF5Ym9vayhsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZCh0bXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBidWlsZGVyLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJldFZhbCA9IFRTQlhTaW1BdXRvVXBkYXRlci5BdXRvVXBkYXRlUGxheWVyU2ltRGF0YShyZXRWYWwsVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IyICk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIFNob3VsZENvbnZlcnRUU0IxUGxheWVyKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGluZGV4ID0gbGluZS5JbmRleE9mKCcsJyk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwb3MgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKVxyXG4gICAgICAgICAgICAgICAgcG9zID0gbGluZS5TdWJzdHJpbmcoMCwgaW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gVFNCMlRvb2wucG9zaXRpb25OYW1lcy5JbmRleE9mKHBvcykgPiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgU2hvdWxkQ29udmVydFRTQjNQbGF5ZXIoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgaW5kZXggPSBsaW5lLkluZGV4T2YoJywnKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApXHJcbiAgICAgICAgICAgICAgICBwb3MgPSBsaW5lLlN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0IyVG9vbC5wb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zKSA+IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIENvbnZlcnRQbGF5Ym9vayhzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIE1hdGNoIG0gPSBJbnB1dFBhcnNlci5wbGF5Ym9va1JlZ2V4Lk1hdGNoKGxpbmUpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcnVucyA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwYXNzZXMgPSBtLkdyb3Vwc1syXS5Ub1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgcnVucyA9IHJ1bnMuU3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICBwYXNzZXMgPSBwYXNzZXMuU3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gU3RyaW5nLkZvcm1hdChcIlBMQVlCT09LIFJ7MH17MH0sIFB7MX17MX1cIiwgcnVucywgcGFzc2VzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiYXNpY2FsbHkganVzdCByZW1vdmVzIHRoZSBBZ2lsaXR5IGF0dHJpYnV0ZVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb1RTQjJQbGF5ZXJGcm9tVFNCMyhzdHJpbmcgdHNiMVBsYXllckxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgc2ltSW5kZXggPSB0c2IxUGxheWVyTGluZS5JbmRleE9mKFwiW1wiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHNpbVN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIHBhcnRzID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHNpbUluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpbVN0cmluZyA9IHRzYjFQbGF5ZXJMaW5lLlN1YnN0cmluZyhzaW1JbmRleCk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHRzYjFQbGF5ZXJMaW5lLlN1YnN0cmluZygwLCBzaW1JbmRleCAtIDEpLlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gdHNiMVBsYXllckxpbmUuU3BsaXQoXCIsXCIuVG9DaGFyQXJyYXkoKSk7XHJcblxyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoNjApO1xyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gcGFydHNbMF0uVHJpbSgpO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHBhcnRzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSA1KSAvLyBleGNsdWRlIEFHXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKHBhcnRzW2ldLlRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYi5BcHBlbmQoc2ltU3RyaW5nKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0c2IxUGxheWVyTGluZVwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb1RTQjJQbGF5ZXJGcm9tVFNCMShzdHJpbmcgdHNiMVBsYXllckxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgc2ltSW5kZXggPSB0c2IxUGxheWVyTGluZS5JbmRleE9mKFwiW1wiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHNpbVN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIHBhcnRzID1udWxsO1xyXG4gICAgICAgICAgICBpZiAoc2ltSW5kZXggPiAtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2ltU3RyaW5nID0gdHNiMVBsYXllckxpbmUuU3Vic3RyaW5nKHNpbUluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHRzYjFQbGF5ZXJMaW5lLlN1YnN0cmluZygwLCBzaW1JbmRleCAtIDEpLlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gdHNiMVBsYXllckxpbmUuU3BsaXQoXCIsXCIuVG9DaGFyQXJyYXkoKSk7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcig2MCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwb3MgPSBwYXJ0c1swXS5UcmltKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBycyA9IHBhcnRzWzRdOyAvLyBzd2FwIFJTICYgUlBcclxuICAgICAgICAgICAgc3RyaW5nIHJwID0gcGFydHNbNV07XHJcbiAgICAgICAgICAgIHBhcnRzWzVdID0gcnM7XHJcbiAgICAgICAgICAgIHBhcnRzWzRdID0gcnA7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgcGFydHMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjovL2ZhY2UgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZChDb252ZXJ0RmFjZVRvVFNCMihwYXJ0c1tpXS5UcmltKCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQocGFydHNbaV0uVHJpbSgpICtcIixcIik7IC8vIGFkZCBIUFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQoR2V0QkIocG9zLCBwYXJ0c1s2XS5UcmltKCkpKTsgLy8gQkJcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHBvcylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIktcIjogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKHBhcnRzW2ldLlRyaW0oKSArIFwiLFwiKTsgLy8gYWRkIEtQXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKHBhcnRzW2ldLlRyaW0oKSk7ICAgICAgIC8vIGFkZCBLQVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYi5BcHBlbmQocGFydHNbaV0uVHJpbSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOiAvLyBvbmx5IFFCIGhhcyB0aGlzLCBnb3R0YSBhZGQgY29vbG5lc3MgdG9vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZChwYXJ0c1tpXS5UcmltKCkgKyBcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZChHZXRDb29sbmVzcyhwYXJ0c1sxXSwgcGFydHNbMTBdLlRyaW0oKSkgKTsgLy8gYWRkIGNvb2xuZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiLkFwcGVuZChwYXJ0c1tpXS5UcmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIixcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQWRkU2ltVmFsdWVzKHBvcywgc2ltU3RyaW5nLCBzYik7XHJcbiAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBBZGRTaW1WYWx1ZXMoc3RyaW5nIHBvcywgc3RyaW5nIHNpbVN0cmluZywgU3RyaW5nQnVpbGRlciBzYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludFtdIHZhbHMgPSBJbnB1dFBhcnNlci5HZXRTaW1WYWxzKHNpbVN0cmluZywgZmFsc2UpO1xyXG4gICAgICAgICAgICBzdHJpbmcgc2ltVmFscyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocG9zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjpcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzID0gXCJbNTEsMDAsMDZdXCI7IC8vPz8/XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkIxXCI6IHNpbVZhbHMgPSBcIlsxQSwwMCwwNiwwNV1cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkIyXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkIzXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkI0XCI6IHNpbVZhbHMgPSBcIlswMCwwMywwMCwwMF1cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IxXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IyXCI6IHNpbVZhbHMgPSBcIlswMCwwNywwQSwwMF1cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IzXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1I0XCI6IHNpbVZhbHMgPSBcIlswQSwwMCwwMSwwNV1cIjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVEUxXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVEUyXCI6IHNpbVZhbHMgPSBcIlswMywwMCwwMCwwMF1cIjsgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8xOCBkZWZlbmRlcnMgLSAzIGJ5dGVzIGVhY2ggKHNhY2tzL2ludC90YWNrbGVzKSBcclxuICAgICAgICAgICAgICAgIC8vVFNCMSA9PT4gW1NpbSBwYXNzIHJ1c2gsIFNpbSBjb3ZlcmFnZV0uXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJOVFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxFXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkUyXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTlQyXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTEUyXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUk9MQlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJJTEJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMSUxCXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTE9MQlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxCNVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJDQlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxDQlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRCMVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRCMlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkZTXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU1NcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJEQjNcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltVmFscy5MZW5ndGggPiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1WYWxzID0gc3RyaW5nLkZvcm1hdChcIlt7MDpYMn0sezE6WDJ9LHsyOlgyfV1cIiwgdmFsc1swXSAqIDIsIHZhbHNbMV0gKiAzLCB2YWxzWzBdICogMik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1WYWxzID0gXCJbMTAsMTAsMTBdXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiS1wiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBcIjpcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzID0gXCJbXCIgKyB2YWxzWzBdICsgXCJdXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2IuQXBwZW5kKHNpbVZhbHMpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBHZXRDb29sbmVzcyhzdHJpbmcgbmFtZSwgc3RyaW5nIHBhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHNwYWNlID0gbmFtZS5JbmRleE9mKCcgJyk7XHJcbiAgICAgICAgICAgIGlmICggc3BhY2UgPiAtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIGxhc3ROYW1lID0gbmFtZS5TdWJzdHJpbmcoc3BhY2UpLlRvVXBwZXIoKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBjb29sR3V5cyA9IFxyXG4gICAgICAgICAgICAgICAgICAgIFwiIEtFTExZIEtPU0FSIE1PT04gWU9VTkcgRUxXQVkgRkFWUkUgTUFSSU5PIE1PTlRBTkEgTUFOTklORyBCUkFEWSBCUkVFUyBNQUhPTUVTIFJPREdFUlMgUk9FVEhMSVNCRVJHRVIgQlJBRFNIQVcgV0lMU09OIFNUQVVCQUNIIEZPTEVTIFVOSVRBUyBUQVJLRU5UT04gVEVTVEFWRVJERSBcIjtcclxuICAgICAgICAgICAgICAgIGlmIChjb29sR3V5cy5JbmRleE9mKGxhc3ROYW1lKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjgxXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIEdldEJCKHN0cmluZyBwb3MsIHN0cmluZyBtcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIjEzXCI7XHJcbiAgICAgICAgICAgIGludCBtc19pID0gSW50MzIuUGFyc2UobXMpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBvcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJDQlwiOiBjYXNlIFwiTENCXCI6IGNhc2UgXCJEQjFcIjogY2FzZSBcIkRCMlwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJCMVwiOiBjYXNlIFwiUkIyXCI6IGNhc2UgXCJSQjNcIjogY2FzZSBcIlJCNFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IG1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxPTEJcIjogY2FzZSBcIkxJTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIlJPTEJcIjogY2FzZSBcIkxCNVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IFwiMTlcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTU1wiOiBjYXNlIFwiRlNcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXRWYWwgPSBcIjI1XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXUjFcIjogY2FzZSBcIldSMlwiOiBjYXNlIFwiV1IzXCI6IGNhc2UgXCJXUjRcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAobXNfaSA+IDQ0KSByZXRWYWwgPSBcIjQ0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXRWYWwgPSBcIjI1XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBDb252ZXJ0RmFjZVRvVFNCMihzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgdG1wID0gaW5wdXQuUmVwbGFjZShcIkZhY2U9MHhcIixcIlwiKTtcclxuICAgICAgICAgICAgaW50IG51bWJlciA9IFRTQlRvb2wuU3RhdGljVXRpbHMuUGFyc2VJbnRGcm9tSGV4U3RyaW5nKHRtcCk7IC8vIEludDMyLlBhcnNlKHRtcCwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuICAgICAgICAgICAgaWYgKG51bWJlciA8IDB4ODApXHJcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgJiAweDBGO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBudW1iZXIgPSAweDgwICsgKG51bWJlciAmIDB4MEYpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gU3RyaW5nLkZvcm1hdChcIkZhY2U9MHh7MDp4Mn1cIiwgbnVtYmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICNyZWdpb24gVGVzdHNcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVGVzdFFiVFNCMkNvbnZlcnNpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyBqb2UgPSAgICAgICBcIlFCMSxqb2UgTU9OVEFOQSxGYWNlPTB4MSwgIzE2LCAyNSwgNjksIDE5LCAxMywgNTYsIDgxLCA4MSwgNzUgLFszLCAxMiwgMiBdXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXN1bHRKb2UgPSBcIlFCMSxqb2UgTU9OVEFOQSxGYWNlPTB4MDEsIzE2LDY5LDI1LDE5LDEzLDI1LDU2LDgxLDgxLDc1LDgxLFs1MSwwMCwwNl1cIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IxKGpvZSk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdEpvZSwgdGVzdCk7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgdmlubnkgPSBcIlFCMSwgdmlubnkgVEVTVEFWRVJERSwgRmFjZT0weDIzLCAjMTQsIDI1LCA2OSwgMzEsIDEzLCAzMSwgNTYsIDQ0LCA0NCAsWzUsIDQsIDAgXVwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0VmlubnkgPSBcIlFCMSx2aW5ueSBURVNUQVZFUkRFLEZhY2U9MHgwMywjMTQsNjksMjUsMzEsMTMsMjUsMzEsNTYsNDQsNDQsNDQsWzUxLDAwLDA2XVwiO1xyXG4gICAgICAgICAgICB0ZXN0ID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IxKHZpbm55KTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0VmlubnksIHRlc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVGVzdFJiVFNCMkNvbnZlcnNpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyB0aHJ1bWFuID0gXCJSQjEsIHRodXJtYW4gVEhPTUFTLCBGYWNlPTB4ODMsICMzNCwgMzgsICA2OSw2MywyNSw3NSw1MCAsWzEwLCA3LCA4LCA4IF1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRodXJtYW4gPSBcIlJCMSx0aHVybWFuIFRIT01BUyxGYWNlPTB4ODMsIzM0LDY5LDM4LDYzLDI1LDYzLDc1LDUwLFsxQSwwMCwwNiwwNV1cIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IxKHRocnVtYW4pO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHRUaHVybWFuLCB0ZXN0KTtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyByb2dlciA9ICAgICAgXCJSQjEsIHJvZ2VyIENSQUlHLEZhY2U9MHhkMCwjMzMsMzgsNjksNTAsMjUsNTAsNDQsWzYsIDcsIDcsIDIgXVwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0Um9nZXIgPSBcIlJCMSxyb2dlciBDUkFJRyxGYWNlPTB4ODAsIzMzLDY5LDM4LDUwLDI1LDUwLDUwLDQ0LFsxQSwwMCwwNiwwNV1cIjtcclxuICAgICAgICAgICAgdGVzdCA9IENvbnZlcnRUb1RTQjJQbGF5ZXJGcm9tVFNCMShyb2dlcik7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdFJvZ2VyLCB0ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRlc3REYlRTQjJDb252ZXJzaW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgZGVpb24gPSAgICBcIlJDQiwgZGVpb24gU0FOREVSUywgRmFjZT0weDllLCAjMjEsNDQsNTYsNzUsNTYsNTYsNTAsWzEsIDU5IF1cIjsgLy8gIHZhbHNbMF0qMiwgdmFsc1sxXSozLCB2YWxzWzBdKjIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0RGVpb24gPSBcIlJDQixkZWlvbiBTQU5ERVJTLEZhY2U9MHg4ZSwjMjEsNTYsNDQsNzUsNTYsNzUsNTYsNTAsWzAyLEIxLDAyXVwiO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IyUGxheWVyRnJvbVRTQjEoZGVpb24pO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHREZWlvbiwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0TGJUU0IyQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJheSA9IFwiUklMQiwgcmF5IEJFTlRMRVksIEZhY2U9MHgzMCwgIzUwLCAyNSwgMzEsIDM4LCAzOCwgMzEsIDU2ICxbMTMsIDEwIF1cIjsgLy8gIHZhbHNbMF0qMiwgdmFsc1sxXSozLCB2YWxzWzBdKjIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0UmF5ID0gXCJSSUxCLHJheSBCRU5UTEVZLEZhY2U9MHgwMCwjNTAsMzEsMjUsMzgsMzgsMTksMzEsNTYsWzFBLDFFLDFBXVwiO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IyUGxheWVyRnJvbVRTQjEocmF5KTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0UmF5LCB0ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRlc3REbFRTQjJDb252ZXJzaW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgdGFyZ2V0ID0gXCJMRSwgbGVvbiBTRUFMUywgRmFjZT0weGFjLCAjOTYsIDI1LCAzMSwgMzgsIDQ0LCAzMSwgNTAgLFsyNSwgMTggXVwiOyAvLyAgdmFsc1swXSoyLCB2YWxzWzFdKjMsIHZhbHNbMF0qMik7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXN1bHRUYXJnZXQgPSBcIkxFLGxlb24gU0VBTFMsRmFjZT0weDhjLCM5NiwzMSwyNSwzOCw0NCwxMywzMSw1MCxbMzIsMzYsMzJdXCI7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgdGVzdCA9IENvbnZlcnRUb1RTQjJQbGF5ZXJGcm9tVFNCMSh0YXJnZXQpO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHRUYXJnZXQsIHRlc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVGVzdE9sVFNCMkNvbnZlcnNpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyB0YXJnZXQgPSBcIkxHLCBqaW0gUklUQ0hFUiwgRmFjZT0weDcsICM1MSwgMjUsIDY5LCAzOCwgNTZcIjsgLy8gIHZhbHNbMF0qMiwgdmFsc1sxXSozLCB2YWxzWzBdKjIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0VGFyZ2V0ID0gXCJMRyxqaW0gUklUQ0hFUixGYWNlPTB4MDcsIzUxLDY5LDI1LDM4LDU2LDEzLFwiO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IyUGxheWVyRnJvbVRTQjEodGFyZ2V0KTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0VGFyZ2V0LCB0ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRlc3RLaWNrZXJUU0IyQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHRhcmdldCA9IFwiSywgc2NvdHQgTk9SV09PRCwgRmFjZT0weDI5LCAjMTEsIDU2LCA4MSwgODEsIDMxLCA0NCwgNDQgLFs2IF1cIjsgLy8gIHZhbHNbMF0qMiwgdmFsc1sxXSozLCB2YWxzWzBdKjIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0VGFyZ2V0ID0gXCJLLHNjb3R0IE5PUldPT0QsRmFjZT0weDA5LCMxMSw4MSw1Niw4MSwzMSwxMyw0NCw0NCw0NCxbNl1cIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IxKHRhcmdldCk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdFRhcmdldCwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0UHVudGVyVFNCMkNvbnZlcnNpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyB0YXJnZXQgPSAgICAgICBcIlAsY2hyaXMgTU9IUixGYWNlPTB4MDksIzksODEsMjUsNDQsMzEsMTMsNDQsNjksWzhdXCI7IC8vICB2YWxzWzBdKjIsIHZhbHNbMV0qMywgdmFsc1swXSoyKTtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRhcmdldCA9IFwiUCxjaHJpcyBNT0hSLEZhY2U9MHgwOSwjOSwyNSw4MSw0NCwzMSwxMywxMyw0NCw2OSxbOF1cIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMlBsYXllckZyb21UU0IxKHRhcmdldCk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdFRhcmdldCwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICNlbmRyZWdpb25cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgVFNCMUNvbnZlcnRlclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbnZlcnRUb1RTQjFGcm9tVFNCMihzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LlJlcGxhY2UoXCJcXHJcXG5cIiwgXCJcXG5cIik7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIGxpbmVzID0gaW5wdXQuU3BsaXQoXCJcXG5cIi5Ub0NoYXJBcnJheSgpKTtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoaW5wdXQuTGVuZ3RoICsgbGluZXMuTGVuZ3RoICogMik7XHJcbiAgICAgICAgICAgIHN0cmluZyB0bXAgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgbGluZSBpbiBsaW5lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKElzUGxheWVyTGluZShsaW5lKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBDb252ZXJ0VG9UU0IxUGxheWVyKGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKHRtcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsaW5lLlN0YXJ0c1dpdGgoXCJTRUFTT05cIikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCIjXCIgKyBsaW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuU3RhcnRzV2l0aChcIlBMQVlCT09LXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IENvbnZlcnRQbGF5Ym9vayhsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZCh0bXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGluZS5TdGFydHNXaXRoKFwiI0NPTE9SU1wiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChsaW5lLlN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsaW5lLlN0YXJ0c1dpdGgoXCJURUFNX0FCQlwiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChsaW5lLlRvVXBwZXIoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQobGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gVFNCVG9vbC5UZWNtb25zdGVyVFNCMVNpbUF1dG9VcGRhdGVyLkF1dG9VcGRhdGVQbGF5ZXJTaW1EYXRhKCBidWlsZGVyLlRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIENvbnZlcnRQbGF5Ym9vayhzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIiNcIisgbGluZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgSXNQbGF5ZXJMaW5lKHN0cmluZyBsaW5lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGluZGV4ID0gbGluZS5JbmRleE9mKCcsJyk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwb3MgPVwiXCI7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDEpXHJcbiAgICAgICAgICAgICAgICBwb3MgPSBsaW5lLlN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0IyVG9vbC5wb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zKSA+IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29udmVydFRvVFNCMVBsYXllcihzdHJpbmcgdHNiMlBsYXllckxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgc2ltSW5kZXggPSB0c2IyUGxheWVyTGluZS5JbmRleE9mKFwiW1wiKTtcclxuICAgICAgICAgICAgc3RyaW5nIHNpbVN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIHBhcnRzID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHNpbUluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpbVN0cmluZyA9IHRzYjJQbGF5ZXJMaW5lLlN1YnN0cmluZyhzaW1JbmRleCApO1xyXG4gICAgICAgICAgICAgICAgcGFydHMgPSB0c2IyUGxheWVyTGluZS5TdWJzdHJpbmcoMCwgc2ltSW5kZXggLSAxKS5TcGxpdChcIixcIi5Ub0NoYXJBcnJheSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHRzYjJQbGF5ZXJMaW5lLlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RyaW5nIHJzID0gcGFydHNbNF07IC8vIHN3YXAgUlMgJiBSUFxyXG4gICAgICAgICAgICBzdHJpbmcgcnAgPSBwYXJ0c1s1XTtcclxuICAgICAgICAgICAgcGFydHNbNV0gPSBycztcclxuICAgICAgICAgICAgcGFydHNbNF0gPSBycDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIExpc3Q8c3RyaW5nPiBhdHRycyA9IG5ldyBMaXN0PHN0cmluZz4ocGFydHMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDYwKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IHBhcnRzWzBdLlRyaW0oKTtcclxuICAgICAgICAgICAgc3dpdGNoIChwb3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJRQjFcIjogY2FzZSBcIlFCMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLlJlbW92ZUF0KDEzKTsgLy8gcmVtb3ZlIGNvb2xuZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnMuUmVtb3ZlQXQoOCk7ICAvLyByZW1vdmUgYm9keSBiYWxhbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiS1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLlJlbW92ZUF0KDkpOyAvLyByZW1vdmUgS1BcclxuICAgICAgICAgICAgICAgICAgICBhdHRycy5SZW1vdmVBdCg4KTsgLy8gcmVtb3ZlIGJvZHkgYmFsYW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxCNVwiOiBjYXNlIFwiREIzXCI6IGNhc2UgXCJSRTJcIjogY2FzZSBcIk5UMlwiOiBjYXNlIFwiTEUyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiI1wiICsgdHNiMlBsYXllckxpbmU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLlJlbW92ZUF0KDgpOyAvLyByZW1vdmUgYm9keSBiYWxhbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBhdHRycy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzYi5BcHBlbmQoYXR0cnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgc2IuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXCJSRSxOVCxMRSxST0xCLFJJTEIsTElMQixMT0xCLFJDQixMQ0IsRlMsU1NcIi5JbmRleE9mKHBvcykgPiAtMSlcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIlsyLDJdXCIpOyAvLyB0aGVzZSB3aWxsIGdldCByZXBsYWNlZCB3aGVuIHdlIGZvIHRlaCBTSU0gdXBkYXRlXHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBzYi5Ub1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbC5SZXBsYWNlKFwiLCxcIiwgXCIsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBUZXN0c1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0UWJUU0IxQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIGpvZSA9ICAgICAgXCJRQjEsam9lIE1PTlRBTkEsRmFjZT0weDAxLCMxNiwyNSw2OSwxOSwxMywyNSw1Niw4MSw4MSw3NSw4MSxbNTEsMDAsMDZdXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXN1bHRKb2UgPSBcIlFCMSxqb2UgTU9OVEFOQSxGYWNlPTB4MDEsIzE2LDY5LDI1LDE5LDEzLDU2LDgxLDgxLDc1LFwiO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IxUGxheWVyKGpvZSk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdEpvZSwgdGVzdCk7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgdmlubnkgPSAgICAgICBcIlFCMSx2aW5ueSBURVNUQVZFUkRFLEZhY2U9MHgwMywjMTQsMjUsNjksMzEsMTMsMjUsMzEsNTYsNDQsNDQsNDQsWzUxLDAwLDA2XVwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0VmlubnkgPSBcIlFCMSx2aW5ueSBURVNUQVZFUkRFLEZhY2U9MHgwMywjMTQsNjksMjUsMzEsMTMsMzEsNTYsNDQsNDQsXCI7XHJcbiAgICAgICAgICAgIHRlc3QgPSBDb252ZXJ0VG9UU0IxUGxheWVyKHZpbm55KTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0VmlubnksIHRlc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVGVzdFJiVFNCMUNvbnZlcnNpb24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyB0aHJ1bWFuID0gXCJSQjEsdGh1cm1hbiBUSE9NQVMsRmFjZT0weDgzLCMzNCwzOCw2OSw2MywyNSw2Myw3NSw1MCxbMUEsMDAsMDYsMDVdXCI7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXN1bHRUaHVybWFuID0gXCJSQjEsdGh1cm1hbiBUSE9NQVMsRmFjZT0weDgzLCMzNCw2OSwzOCw2MywyNSw3NSw1MCxcIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMVBsYXllcih0aHJ1bWFuKTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0VGh1cm1hbiwgdGVzdCk7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgcm9nZXIgPSAgICAgICBcIlJCMSxyb2dlciBDUkFJRyxGYWNlPTB4ODAsIzMzLDM4LDY5LDUwLDI1LDUwLDUwLDQ0LFsxQSwwMCwwNiwwNV1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFJvZ2VyID0gXCJSQjEscm9nZXIgQ1JBSUcsRmFjZT0weDgwLCMzMyw2OSwzOCw1MCwyNSw1MCw0NCxcIjtcclxuICAgICAgICAgICAgdGVzdCA9IENvbnZlcnRUb1RTQjFQbGF5ZXIocm9nZXIpO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHRSb2dlciwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0RGJUU0IxQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIGRlaW9uID0gXCJSQ0IsZGVpb24gU0FOREVSUyxGYWNlPTB4OGUsIzIxLDQ0LDU2LDc1LDU2LDc1LDU2LDUwLFswMixCMSwwMl1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdERlaW9uID0gXCJSQ0IsZGVpb24gU0FOREVSUyxGYWNlPTB4OGUsIzIxLDU2LDQ0LDc1LDU2LDU2LDUwLFsyLDJdXCI7IC8vICB2YWxzWzBdKjIsIHZhbHNbMV0qMywgdmFsc1swXSoyKTtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMVBsYXllcihkZWlvbik7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdERlaW9uLCB0ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRlc3RMYlRTQjFDb252ZXJzaW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmF5ID0gICAgICAgXCJSSUxCLHJheSBCRU5UTEVZLEZhY2U9MHgwMCwjNTAsMjUsMzEsMzgsMzgsMTksMzEsNTYsWzFBLDFFLDFBXVwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmVzdWx0UmF5ID0gXCJSSUxCLHJheSBCRU5UTEVZLEZhY2U9MHgwMCwjNTAsMzEsMjUsMzgsMzgsMzEsNTYsWzIsMl1cIjsgLy8gIHZhbHNbMF0qMiwgdmFsc1sxXSozLCB2YWxzWzBdKjIpO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IxUGxheWVyKHJheSk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdFJheSwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0RGxUU0IxQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHRhcmdldCA9ICAgICAgIFwiTEUsbGVvbiBTRUFMUyxGYWNlPTB4OGMsIzk2LDI1LDMxLDM4LDQ0LDEzLDMxLDUwLFszMiwzNiwzMl1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRhcmdldCA9IFwiTEUsbGVvbiBTRUFMUyxGYWNlPTB4OGMsIzk2LDMxLDI1LDM4LDQ0LDMxLDUwLFsyLDJdXCI7IC8vIGJ5IGRlZmF1bHQgYWxsIGRlZmVuZGVycyBnZXQgWzIsMl0gYW5kIHdlIHJ1biB0aGUgc2ltIHVwZGF0ZSBjb2RlIHRvIGZpeCBpdFxyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlc3QgPSBDb252ZXJ0VG9UU0IxUGxheWVyKHRhcmdldCk7XHJcbiAgICAgICAgICAgIHJldFZhbCArPSBUU0JUb29sLlN0YXRpY1V0aWxzLkFyZUVxdWFsKHJlc3VsdFRhcmdldCwgdGVzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBUZXN0T2xUU0IxQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHRhcmdldCA9ICAgICAgIFwiTEcsamltIFJJVENIRVIsRmFjZT0weDA3LCM1MSwyNSw2OSwzOCw1NiwxMyxcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRhcmdldCA9IFwiTEcsamltIFJJVENIRVIsRmFjZT0weDA3LCM1MSw2OSwyNSwzOCw1NixcIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMVBsYXllcih0YXJnZXQpO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHRUYXJnZXQsIHRlc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgVGVzdEtpY2tlclRTQjFDb252ZXJzaW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgdGFyZ2V0ID0gICAgICAgXCJLLHNjb3R0IE5PUldPT0QsRmFjZT0weDA5LCMxMSw1Niw4MSw4MSwzMSwxMyw0NCw0NCw0NCxbNl1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRhcmdldCA9IFwiSyxzY290dCBOT1JXT09ELEZhY2U9MHgwOSwjMTEsODEsNTYsODEsMzEsNDQsNDQsXCI7XHJcblxyXG4gICAgICAgICAgICBzdHJpbmcgdGVzdCA9IENvbnZlcnRUb1RTQjFQbGF5ZXIodGFyZ2V0KTtcclxuICAgICAgICAgICAgcmV0VmFsICs9IFRTQlRvb2wuU3RhdGljVXRpbHMuQXJlRXF1YWwocmVzdWx0VGFyZ2V0LCB0ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFRlc3RQdW50ZXJUU0IxQ29udmVyc2lvbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHRhcmdldCA9ICAgICAgIFwiUCxjaHJpcyBNT0hSLEZhY2U9MHgwOSwjOSw4MSwyNSw0NCwzMSwxMywxMyw0NCw2OSxbOF1cIjtcclxuICAgICAgICAgICAgc3RyaW5nIHJlc3VsdFRhcmdldCA9IFwiUCxjaHJpcyBNT0hSLEZhY2U9MHgwOSwjOSwyNSw4MSw0NCwzMSwxMyw0NCw2OSxcIjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZXN0ID0gQ29udmVydFRvVFNCMVBsYXllcih0YXJnZXQpO1xyXG4gICAgICAgICAgICByZXRWYWwgKz0gVFNCVG9vbC5TdGF0aWNVdGlscy5BcmVFcXVhbChyZXN1bHRUYXJnZXQsIHRlc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAjZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIENPTlZFUlRfTVNHID1cclxuQFwiQ29udmVydGluZyBiZXR3ZWVuIFRTQjEsIFRTQjIgYW5kIFRTQjMgZGF0YSBpcyBub3QgZXhhY3QgYW5kIG9uZSBkb2VzIG5vdCAndW4tZG8nIHRoZSBvdGhlci5cclxuV2hlbiBjb252ZXJ0aW5nIGZyb20gVFNCMSAtLT4gVFNCMiBhICdBdXRvLXVwZGF0ZScgc2ltIGRhdGEgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZCAoZmVhdHVyZSB0YWtlbiBmcm9tIFRTQlRvb2xTdXByZW1lKS5cclxuXHJcblwiO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFRTQjNDb252ZXJ0ZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgUmVsb2FkRm9ybXVsYXMoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc0Zvcm11bGFTdHJpbmcgPSBudWxsOy8vIGZvcmNlIHJlLWxvYWQgb2YgdGhlIGZvcm11bGEgZmlsZSB3aGVuIGNhbGxpbmcgJ0Zvcm11bGFTdHJpbmcnXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBiYXNpY2FsbHkgYWRkcyB0aGUgJ2FnaWxpdHknIGF0dHJpYnV0ZVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbnZlcnRUb1RTQjNGcm9tVFNCMihzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBSZWxvYWRGb3JtdWxhcygpO1xyXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LlJlcGxhY2UoXCJcXHJcXG5cIiwgXCJcXG5cIik7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIGxpbmVzID0gaW5wdXQuU3BsaXQoXCJcXG5cIi5Ub0NoYXJBcnJheSgpKTtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoaW5wdXQuTGVuZ3RoICsgbGluZXMuTGVuZ3RoICogMik7XHJcbiAgICAgICAgICAgIHN0cmluZyB0bXAgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgbGluZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyB0aGVMaW5lIGluIGxpbmVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gdGhlTGluZTtcclxuICAgICAgICAgICAgICAgIGlmIChTaG91bGRDb252ZXJ0VFNCM1BsYXllcihsaW5lKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBDb252ZXJ0VG9UU0IzUGxheWVyRnJvbVRTQjIobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodG1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChsaW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2hvd0Vycm9ycygpO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gYnVpbGRlci5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGJvb2wgU2hvdWxkQ29udmVydFRTQjNQbGF5ZXIoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgaW5kZXggPSBsaW5lLkluZGV4T2YoJywnKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApXHJcbiAgICAgICAgICAgICAgICBwb3MgPSBsaW5lLlN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiBUU0IyVG9vbC5wb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zKSA+IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIENvbnZlcnRUb1RTQjNQbGF5ZXJGcm9tVFNCMihzdHJpbmcgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgaW50IHNpbUluZGV4ID0gaW5wdXQuSW5kZXhPZihcIltcIik7XHJcbiAgICAgICAgICAgIHN0cmluZyBzaW1TdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBMaXN0PHN0cmluZz4gcGFydHMgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc2ltSW5kZXggPiAtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2ltU3RyaW5nID0gaW5wdXQuU3Vic3RyaW5nKHNpbUluZGV4KTtcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gbmV3IExpc3Q8c3RyaW5nPihpbnB1dC5TdWJzdHJpbmcoMCwgc2ltSW5kZXggLSAxKS5TcGxpdChcIixcIi5Ub0NoYXJBcnJheSgpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcGFydHMgPSBuZXcgTGlzdDxzdHJpbmc+KGlucHV0LlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpKTtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDYwKTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IHBhcnRzWzBdLlRyaW0oKTtcclxuICAgICAgICAgICAgc3RyaW5nIGhwID0gcGFydHNbN10uVHJpbSgpO1xyXG4gICAgICAgICAgICBzdHJpbmcgbXMgPSBwYXJ0c1s2XS5UcmltKCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBhZyA9IEdldEFHKHBvcywgbXMsIGhwKTtcclxuICAgICAgICAgICAgcGFydHMuSW5zZXJ0KDksIGFnKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBwYXJ0cy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzYi5BcHBlbmQocGFydHNbaV0uVHJpbSgpKTtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIixcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2IuQXBwZW5kKHNpbVN0cmluZyk7XHJcbiAgICAgICAgICAgIHJldFZhbCA9IFVwZGF0ZUZyZWVBZ2VudFZhbHVlKHNiLlRvU3RyaW5nKCkuUmVwbGFjZShcIiwsXCIsIFwiLFwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIFVwZGF0ZUZyZWVBZ2VudFZhbHVlKHN0cmluZyBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBzaW1JbmRleCA9IGlucHV0LkluZGV4T2YoXCJbXCIpO1xyXG4gICAgICAgICAgICBzdHJpbmcgc2ltU3RyaW5nID0gXCJcIjtcclxuICAgICAgICAgICAgTGlzdDxzdHJpbmc+IHBhcnRzID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHNpbUluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpbVN0cmluZyA9IGlucHV0LlN1YnN0cmluZyhzaW1JbmRleCk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IG5ldyBMaXN0PHN0cmluZz4oaW5wdXQuU3Vic3RyaW5nKDAsIHNpbUluZGV4IC0gMSkuU3BsaXQoXCIsXCIuVG9DaGFyQXJyYXkoKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHBhcnRzID0gbmV3IExpc3Q8c3RyaW5nPihpbnB1dC5TcGxpdChcIixcIi5Ub0NoYXJBcnJheSgpKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gcGFydHNbMF0uVHJpbSgpO1xyXG4gICAgICAgICAgICBzdHJpbmcgc3Vic3RpdHV0aW9uU3RyaW5nID1cIlwiO1xyXG4gICAgICAgICAgICBzdHJpbmcgZm9ybXVsYSA9IEdldEZyZWVBZ2VudFBvaW50Rm9ybXVsYShwb3MsIG91dCBzdWJzdGl0dXRpb25TdHJpbmcpO1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBzdWJfcGFydHMgPSBzdWJzdGl0dXRpb25TdHJpbmcuU3BsaXQoXCIsXCIuVG9DaGFyQXJyYXkoKSk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSA0OyBpIDwgc3ViX3BhcnRzLkxlbmd0aDsgaSsrKSAvLyBzdGFydCBhdCAnUlMnXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcm11bGEgPSBmb3JtdWxhLlJlcGxhY2Uoc3ViX3BhcnRzW2ldLlRyaW0oKSwgcGFydHNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvdWJsZSByZXN1bHQgPSAwO1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbXB1dGUoZm9ybXVsYSkuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IERvdWJsZS5QYXJzZShyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oU3RyaW5nLkZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICBcIkVycm9yIGNhbGN1bGF0aW5nIEZyZWVBZ2VudFBvaW50cyBmb3IgJ3swfScgVHJpZWQgdG8gY29tcHV0ZTonezF9J1wiLCBpbnB1dCwgZm9ybXVsYSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ5dGUgZmFwID0gKGJ5dGUpTWF0aC5Sb3VuZChyZXN1bHQpO1xyXG4gICAgICAgICAgICBpZiAoZmFwIDwgMCkgZmFwID0gMDtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZmFwID4gMHgwRikgZmFwID0gMHgwRjtcclxuXHJcbiAgICAgICAgICAgIHN0cmluZyBmYWNlID0gcGFydHNbMl0uVHJpbSgpLlN1YnN0cmluZygwLCBwYXJ0c1syXS5MZW5ndGggLSAxKSArIGZhcC5Ub1N0cmluZyhcIlhcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5SZXBsYWNlKHBhcnRzWzJdLCBmYWNlKTsgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgR2V0RnJlZUFnZW50UG9pbnRGb3JtdWxhKHN0cmluZyBwb3NpdGlvbiwgb3V0IHN0cmluZyBzdWJzdGl0dXRpb25TdHJpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gbnVsbDtcclxuICAgICAgICAgICAgc3RyaW5nIHNlYXJjaFN0ciA9IFwiRkFQX09MXCI7XHJcbiAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiT0wsbmFtZSAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkJcIjtcclxuICAgICAgICAgICAgI3JlZ2lvbiBiaWcgc3dpdGNoIFxyXG4gICAgICAgICAgICBzd2l0Y2ggKHBvc2l0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjpcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hTdHIgPSBcIkZBUF9RQlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiUUIsbmFtZSAgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLFBTLFBDLFBBLEFSLENPXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkIxXCI6ICBjYXNlIFwiUkIyXCI6IGNhc2UgXCJSQjNcIjogY2FzZSBcIlJCNFwiOiBcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hTdHIgPSBcIkZBUF9SQlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiU0tJTEwsbmFtZSAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLEJDLFJDXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IxXCI6IGNhc2UgXCJXUjJcIjogY2FzZSBcIldSM1wiOiBjYXNlIFwiV1I0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3RyID0gXCJGQVBfV1JcIjtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25TdHJpbmcgPSBcIlNLSUxMLG5hbWUgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixBRyxCQyxSQ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlRFMVwiOiBjYXNlIFwiVEUyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3RyID0gXCJGQVBfVEVcIjtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25TdHJpbmcgPSBcIlNLSUxMLG5hbWUgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixBRyxCQyxSQ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRVwiOiBjYXNlIFwiTlRcIjogY2FzZSBcIkxFXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkUyXCI6IGNhc2UgXCJOVDJcIjogY2FzZSBcIkxFMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFN0ciA9IFwiRkFQX0RMXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uU3RyaW5nID0gXCJETCxuYW1lICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixBRyxQSSxRVVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJPTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIkxJTEJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMT0xCXCI6IGNhc2UgXCJMQjVcIjpcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hTdHIgPSBcIkZBUF9MQlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiREVGLG5hbWUgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLFBJLFFVXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkNCXCI6IGNhc2UgXCJMQ0JcIjogY2FzZSBcIkRCMVwiOiBjYXNlIFwiREIyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3RyID0gXCJGQVBfQ0JcIjtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25TdHJpbmcgPSBcIkRFRixuYW1lICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixBRyxQSSxRVVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkZTXCI6IGNhc2UgXCJTU1wiOiBjYXNlIFwiREIzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3RyID0gXCJGQVBfU1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiREVGLG5hbWUgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLFBJLFFVXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiS1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFN0ciA9IFwiRkFQX0tcIjtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25TdHJpbmcgPSBcIkssbmFtZSAgICAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQUcsS1AsS0EsQUJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoU3RyID0gXCJGQVBfUFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvblN0cmluZyA9IFwiUCxuYW1lICAgICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixBRyxLUCxBQlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICNlbmRyZWdpb25cclxuICAgICAgICAgICAgc3RyaW5nIHBhdHRlcm4gPSBTdHJpbmcuRm9ybWF0KFwiezB9XFxcXHMqOlxcXFxzKiguKikkXCIsIHNlYXJjaFN0cik7XHJcbiAgICAgICAgICAgIFJlZ2V4IHJlZyA9IG5ldyBSZWdleChwYXR0ZXJuLCBSZWdleE9wdGlvbnMuTXVsdGlsaW5lKTtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IHJlZy5NYXRjaChGb3JtdWxhU3RyaW5nKTtcclxuICAgICAgICAgICAgaWYgKG0gIT0gTWF0Y2guRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IG0uR3JvdXBzWzFdLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBzRm9ybXVsYVN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgcHJvdGVjdGVkIHN0YXRpYyBzdHJpbmcgRm9ybXVsYVN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChzRm9ybXVsYVN0cmluZyA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4jaWYgIUJSSURHRV9QUk9KRUNUXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIGZpbGVOYW1lID0gXCJGb3JtdWxhc1xcXFxGQVBfRm9ybXVsYXMudHh0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuRXhpc3RzKGZpbGVOYW1lKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc0Zvcm11bGFTdHJpbmcgPSBGaWxlLlJlYWRBbGxUZXh0KGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNGb3JtdWxhU3RyaW5nID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRFbWJlZGRlZFRleHRGaWxlKFwiVFNCVG9vbC5Gb3JtdWxhcy5GQVBfRm9ybXVsYXMudHh0XCIpO1xyXG4jZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHNGb3JtdWxhU3RyaW5nID1cclxuQFwiIyBGcmVlIEFnZW50IHBvaW50IGZvcm11bGFzXHJcblxyXG5GQVBfUUI6IChQUytQQytBUikvMTVcclxuRkFQX1JCOiAoKE1TK0JDK1JDKS0xMTApLzRcclxuRkFQX1dSOiAoKFJDIC0zOCArIE1TIC0gMzgpLzMpIC0yXHJcbkZBUF9URTogKChSQyAtMjUgKyBNUyAtIDI1KS8zKSArMVxyXG5GQVBfT0w6IChIUCAtNDQpLzJcclxuRkFQX0RMOiAoTVMgKyBIUCAtNTApIC8gNlxyXG5GQVBfTEI6IChNUy0zMSArIEhQLTMxKS80XHJcbkZBUF9DQjogKE1TLTMxICsgUEktMjUpLzVcclxuRkFQX1M6IChNUy0zMSArIFBJLTI1ICsgSFAtMzEpLzdcclxuRkFQX0s6IEtBLzZcclxuRkFQX1A6IChLUC0zMSkvNlxyXG5cIjtcclxuI2VuZGlmIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNGb3JtdWxhU3RyaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgR2V0QUcoc3RyaW5nIHBvcywgc3RyaW5nIG1zLCBzdHJpbmcgaHApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0dmFsID0gXCIzMVwiO1xyXG4gICAgICAgICAgICBpbnQgbWF4U3BlZWQgPSBJbnQzMi5QYXJzZShtcyk7XHJcbiAgICAgICAgICAgIGludCBtc0luZGV4ID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRUU0JBYmlsaXR5KG1heFNwZWVkKTtcclxuICAgICAgICAgICAgaW50IGhwSW5kZXggPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFRTQkFiaWxpdHkoSW50MzIuUGFyc2UoaHApKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAocG9zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSQjFcIjogY2FzZSBcIlJCMlwiOiBjYXNlIFwiUkIzXCI6IGNhc2UgXCJSQjRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXUjFcIjogY2FzZSBcIldSMlwiOiBjYXNlIFwiV1IzXCI6IGNhc2UgXCJXUjRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRVwiOiBjYXNlIFwiTlRcIjogY2FzZSBcIkxFXCI6IGNhc2UgXCJSRTJcIjogY2FzZSBcIkxFMlwiOiBjYXNlIFwiTlQyXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU1NcIjogY2FzZSBcIkZTXCI6IGNhc2UgXCJEQjNcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiggbXNJbmRleCA8IDB4MEUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQWJpbGl0eVRvVFNCVmFsdWUobXNJbmRleCArIDEpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLk1hcEFiaWxpdHlUb1RTQlZhbHVlKG1zSW5kZXgpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVEUxXCI6IGNhc2UgXCJURTJcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF4U3BlZWQgPCAzOCkgcmV0dmFsID0gXCIxOVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNcIjogY2FzZSBcIlJHXCI6IGNhc2UgXCJMR1wiOiBjYXNlIFwiUlRcIjogY2FzZSBcIkxUXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zSW5kZXggPCAweDBFKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLk1hcEFiaWxpdHlUb1RTQlZhbHVlKGhwSW5kZXggKyAyKS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gVFNCVG9vbC5TdGF0aWNVdGlscy5NYXBBYmlsaXR5VG9UU0JWYWx1ZShocEluZGV4KS5Ub1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJPTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIkxJTEJcIjogY2FzZSBcIkxPTEJcIjogY2FzZSBcIkxCNVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IG1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxDQlwiOiBjYXNlIFwiUkNCXCI6IGNhc2UgXCJEQjFcIjogY2FzZSBcIkRCMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc0luZGV4IDwgMHgwRSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gVFNCVG9vbC5TdGF0aWNVdGlscy5NYXBBYmlsaXR5VG9UU0JWYWx1ZShtc0luZGV4ICsgMikuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQWJpbGl0eVRvVFNCVmFsdWUobXNJbmRleCkuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJLXCI6IGNhc2UgXCJQXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gXCIzOFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXR2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgVGVjbW9Db252ZXJ0ZXJcclxuICAgIHtcclxuICAgICAgICAvLyBUU0IxLT5UU0IyOyBUU0IxLT4gVFNCMzsgXHJcbiAgICAgICAgLy8gVFNCMi0+VFNCMTsgVFNCMi0+IFRTQjM7XHJcbiAgICAgICAgLy8gVFNCMy0+VFNCMTsgVFNCMy0+IFRTQjI7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgQ29udmVydChUU0JUb29sLlRTQkNvbnRlbnRUeXBlIGZyb20sIFRTQlRvb2wuVFNCQ29udGVudFR5cGUgdG8sIHN0cmluZyBjb250ZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIGZyb20gPT0gdG8pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGlmIChmcm9tID09IFRTQlRvb2wuVFNCQ29udGVudFR5cGUuVFNCMSAmJiB0byA9PSBUU0JUb29sLlRTQkNvbnRlbnRUeXBlLlRTQjIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IFRTQjJDb252ZXJ0ZXIuQ29udmVydFRvVFNCMkZyb21UU0IxKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZyb20gPT0gVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IxICYmIHRvID09IFRTQlRvb2wuVFNCQ29udGVudFR5cGUuVFNCMylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gVFNCMkNvbnZlcnRlci5Db252ZXJ0VG9UU0IyRnJvbVRTQjEoY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgPSBUU0IzQ29udmVydGVyLkNvbnZlcnRUb1RTQjNGcm9tVFNCMihyZXRWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZyb20gPT0gVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IyICYmIHRvID09IFRTQlRvb2wuVFNCQ29udGVudFR5cGUuVFNCMylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gVFNCM0NvbnZlcnRlci5Db252ZXJ0VG9UU0IzRnJvbVRTQjIoY29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbSA9PSBUU0JUb29sLlRTQkNvbnRlbnRUeXBlLlRTQjIgJiYgdG8gPT0gVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IxKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgPSBUU0IxQ29udmVydGVyLkNvbnZlcnRUb1RTQjFGcm9tVFNCMihjb250ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tID09IFRTQlRvb2wuVFNCQ29udGVudFR5cGUuVFNCMyAmJiB0byA9PSBUU0JUb29sLlRTQkNvbnRlbnRUeXBlLlRTQjEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IFRTQjJDb252ZXJ0ZXIuQ29udmVydFRvVFNCMkZyb21UU0IzKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gVFNCMUNvbnZlcnRlci5Db252ZXJ0VG9UU0IxRnJvbVRTQjIocmV0VmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tID09IFRTQlRvb2wuVFNCQ29udGVudFR5cGUuVFNCMyAmJiB0byA9PSBUU0JUb29sLlRTQkNvbnRlbnRUeXBlLlRTQjIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldFZhbCA9IFRTQjJDb252ZXJ0ZXIuQ29udmVydFRvVFNCMkZyb21UU0IzKGNvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcbnVzaW5nIFN5c3RlbS5JTztcclxudXNpbmcgU3lzdGVtLlJlZmxlY3Rpb247XHJcbi8vdXNpbmcgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXI7XHJcbnVzaW5nIE1pY3Jvc29mdC5DU2hhcnA7XHJcblxyXG5uYW1lc3BhY2UgVFNCVG9vbDJcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFRTQlhTaW1BdXRvVXBkYXRlclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBSZWxvYWRGb3JtdWxhcygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBmb3JjZSBhIHJlLWxvYWQgb2YgdGhlICdzU2ltRm9ybXVsYXMnIGZpbGUgd2hlbiBjYWxsaW5nICdTaW1Gb3JtdWxhcycgZ2V0dGVyXHJcbiAgICAgICAgICAgIHNTaW1Gb3JtdWxhcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBBdXRvVXBkYXRlUGxheWVyU2ltRGF0YShzdHJpbmcgdGV4dCwgVFNCVG9vbC5UU0JDb250ZW50VHlwZSBnYW1lVmVyc2lvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFJlbG9hZEZvcm11bGFzKCk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZ2FtZVZlcnNpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IyOiBzU3ViTGluZXMgPSBzU3ViTGluZXNUU0IyOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVFNCVG9vbC5UU0JDb250ZW50VHlwZS5UU0IzOiBzU3ViTGluZXMgPSBzU3ViTGluZXNUU0IzOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIlRTQlhTaW1BdXRvVXBkYXRlcjogSW5jb3JyZWN0IHZlcnNpb24gXCIgKyBnYW1lVmVyc2lvbi5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgVFNCM0NvbnZlcnRlci5SZWxvYWRGb3JtdWxhcygpO1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcih0ZXh0Lkxlbmd0aCk7XHJcbiAgICAgICAgICAgIHN0cmluZ1tdIGxpbmVzID0gdGV4dC5TcGxpdChcIlxcblwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgbGluZSBpbiBsaW5lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuU3RhcnRzV2l0aChcIiNcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQobGluZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChJc1BsYXllckxpbmUobGluZSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChVcGRhdGVQbGF5ZXJTaW1WYWx1ZXMobGluZSwgZ2FtZVZlcnNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBleClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2hvd0Vycm9yKFwiRXJyb3IgUHJvY2Vzc2luZyBsaW5lOiBcIiArIGxpbmUgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuT3BlcmF0aW9uIG5vdCBhcHBsaWVkXCIgKyBleC5Ub1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKGxpbmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIElzUGxheWVyTGluZShzdHJpbmcgbGluZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChJbnB1dFBhcnNlci5wb3NOYW1lRmFjZVJlZ2V4Lk1hdGNoKGxpbmUpICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBVcGRhdGVQbGF5ZXJTaW1WYWx1ZXMoc3RyaW5nIHBsYXllckxpbmUsIFRTQlRvb2wuVFNCQ29udGVudFR5cGUgZ2FtZVZlcnNpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgc2ltSW5kZXggPSBwbGF5ZXJMaW5lLkluZGV4T2YoXCJbXCIpO1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBwYXJ0cyA9IG51bGw7XHJcbiAgICAgICAgICAgIHN0cmluZyBwbGF5ZXJOb1NpbSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChzaW1JbmRleCA+IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJOb1NpbSA9IHBsYXllckxpbmUuU3Vic3RyaW5nKDAsIHNpbUluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0cyA9IHBsYXllck5vU2ltLlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGxheWVyTm9TaW0gPSBwbGF5ZXJMaW5lO1xyXG4gICAgICAgICAgICAgICAgcGFydHMgPSBwbGF5ZXJMaW5lLlNwbGl0KFwiLFwiLlRvQ2hhckFycmF5KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIExpc3Q8Ynl0ZT4gc2ltVmFscyA9IG5ldyBMaXN0PGJ5dGU+KCk7XHJcbiAgICAgICAgICAgIHN0cmluZyBwb3MgPSBwYXJ0c1swXTtcclxuICAgICAgICAgICAgYnl0ZSBzaW0zLCBzaW00O1xyXG4gICAgICAgICAgICAjcmVnaW9uIEJpZyBTd2l0Y2hcclxuICAgICAgICAgICAgc3dpdGNoIChwb3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJRQjFcIjogY2FzZSBcIlFCMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIlFCX1NJTV9DQVJZXCIsIHNTdWJMaW5lc1tcIlFCXCJdLCBwYXJ0cywgMCwgMHgxQykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKSBDYWxjdWxhdGUoXCJRQl9TSU1fUlVTSElOR1wiLCBzU3ViTGluZXNbXCJRQlwiXSwgcGFydHMsIDAsOCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbTMgPSAoYnl0ZSkgQ2FsY3VsYXRlKFwiUUJfU0lNX1BBU1NJTkdcIiwgc1N1YkxpbmVzW1wiUUJcIl0sIHBhcnRzLCAxLCAweDBGKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW00ID0gKGJ5dGUpIENhbGN1bGF0ZShcIlFCX1NJTV9TQ1JBTUJMRVwiLHNTdWJMaW5lc1tcIlFCXCJdLCBwYXJ0cywwLCAzKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSkgKCBzaW0zIDw8IDQgKyBzaW00KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkIxXCI6IGNhc2UgXCJSQjJcIjogY2FzZSBcIlJCM1wiOiBjYXNlIFwiUkI0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiUkJfU0lNX1JVU0hJTkdcIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLCAwLCAweEFEKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiUkJfU0lNX0NBUlJJRVNcIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLCAwLCAxMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIlJCX1NJTV9SRVRVUk5cIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLDAsIDB4RkYpKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW0zID0gKGJ5dGUpQ2FsY3VsYXRlKFwiUkJfU0lNX1lQQ1wiLCBzU3ViTGluZXNbXCJTS0lMTFwiXSwgcGFydHMsIDAsMHgwRik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltNCA9IChieXRlKUNhbGN1bGF0ZShcIlJCX1NJTV9DQVRDSFwiLCBzU3ViTGluZXNbXCJTS0lMTFwiXSwgcGFydHMsIDAsIDB4MEYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKShzaW0zIDw8IDggKyBzaW00KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IxXCI6IGNhc2UgXCJXUjJcIjogY2FzZSBcIldSM1wiOiBjYXNlIFwiV1I0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiV1JfU0lNX1JVU0hJTkdcIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLCAwLCAweEFEKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiV1JfU0lNX0NBUlJJRVNcIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLCAwLCAxMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIldSX1NJTV9SRVRVUk5cIiwgc1N1YkxpbmVzW1wiU0tJTExcIl0sIHBhcnRzLCAwLDB4RkYpKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW0zID0gKGJ5dGUpQ2FsY3VsYXRlKFwiV1JfU0lNX1lQQ1wiLCBzU3ViTGluZXNbXCJTS0lMTFwiXSwgcGFydHMsIDAsMHgwRik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltNCA9IChieXRlKUNhbGN1bGF0ZShcIldSX1NJTV9DQVRDSFwiLCBzU3ViTGluZXNbXCJTS0lMTFwiXSwgcGFydHMsIDAsMHgwRik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpKHNpbTMgPDwgOCArIHNpbTQpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIlRFX1NJTV9SVVNISU5HXCIsIHNTdWJMaW5lc1tcIlNLSUxMXCJdLCBwYXJ0cywgMCwgMHhBRCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIlRFX1NJTV9DQVJSSUVTXCIsIHNTdWJMaW5lc1tcIlNLSUxMXCJdLCBwYXJ0cywgMCwgMTEpKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJURV9TSU1fUkVUVVJOXCIsIHNTdWJMaW5lc1tcIlNLSUxMXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbTMgPSAoYnl0ZSlDYWxjdWxhdGUoXCJURV9TSU1fWVBDXCIsIHNTdWJMaW5lc1tcIlNLSUxMXCJdLCBwYXJ0cywgMCwweDBGKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW00ID0gKGJ5dGUpQ2FsY3VsYXRlKFwiVEVfU0lNX0NBVENIXCIsIHNTdWJMaW5lc1tcIlNLSUxMXCJdLCBwYXJ0cywwLDB4MEYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKShzaW0zIDw8IDggKyBzaW00KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRVwiOiBjYXNlIFwiTlRcIjogY2FzZSBcIkxFXCI6IFxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJFMlwiOiBjYXNlIFwiTlQyXCI6IGNhc2UgXCJMRTJcIjpcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJETF9TSU1fU0FDS0lOR1wiLCBzU3ViTGluZXNbXCJERUZcIl0sIHBhcnRzLDAsMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIkRMX1NJTV9JTlRcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywwLDB4RkYpKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJETF9TSU1fVEFDS0xJTkdcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHgwQSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJPTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIkxJTEJcIjogXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTE9MQlwiOiBjYXNlIFwiTEI1XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiTEJfU0lNX1NBQ0tJTkdcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIkxCX1NJTV9JTlRcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIkxCX1NJTV9UQUNLTElOR1wiLCBzU3ViTGluZXNbXCJERUZcIl0sIHBhcnRzLCAwLCAweDBBKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkNCXCI6IGNhc2UgXCJMQ0JcIjogY2FzZSBcIkRCMVwiOiBjYXNlIFwiREIyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiQ0JfU0lNX1NBQ0tJTkdcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIkNCX1NJTV9JTlRcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIkNCX1NJTV9UQUNLTElOR1wiLCBzU3ViTGluZXNbXCJERUZcIl0sIHBhcnRzLCAwLCAweDBBKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRlNcIjogY2FzZSBcIlNTXCI6IGNhc2UgXCJEQjNcIjpcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJTX1NJTV9TQUNLSU5HXCIsIHNTdWJMaW5lc1tcIkRFRlwiXSwgcGFydHMsIDAsIDB4RkYpKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJTX1NJTV9JTlRcIiwgc1N1YkxpbmVzW1wiREVGXCJdLCBwYXJ0cywgMCwgMHhGRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbVZhbHMuQWRkKChieXRlKUNhbGN1bGF0ZShcIlNfU0lNX1RBQ0tMSU5HXCIsIHNTdWJMaW5lc1tcIkRFRlwiXSwgcGFydHMsIDAsIDB4MEEpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJLXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltVmFscy5BZGQoKGJ5dGUpQ2FsY3VsYXRlKFwiS19TSU1fQUJJTElUWVwiLCBzU3ViTGluZXNbXCJLXCJdLCBwYXJ0cywgMCwgMHgwRikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBcIjpcclxuICAgICAgICAgICAgICAgICAgICBzaW1WYWxzLkFkZCgoYnl0ZSlDYWxjdWxhdGUoXCJQX1NJTV9BQklMSVRZXCIsIHNTdWJMaW5lc1tcIlBcIl0sIHBhcnRzLCAwLCAweDBGKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgI2VuZHJlZ2lvblxyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoMzApO1xyXG4gICAgICAgICAgICBzYi5BcHBlbmQocGxheWVyTm9TaW0pO1xyXG4gICAgICAgICAgICBpZiAoc2ltVmFscy5Db3VudCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIixbXCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCAoYnl0ZSBiIGluIHNpbVZhbHMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKGIuVG9TdHJpbmcoXCJYMlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2IuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNiLlJlbW92ZShzYi5MZW5ndGggLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgIHNiLkFwcGVuZChcIl1cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IHNiLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmIChnYW1lVmVyc2lvbiA9PSBUU0JUb29sLlRTQkNvbnRlbnRUeXBlLlRTQjMpXHJcbiAgICAgICAgICAgICAgICByZXRWYWwgPSBUU0IzQ29udmVydGVyLlVwZGF0ZUZyZWVBZ2VudFZhbHVlKHJldFZhbCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBkb3VibGUgQ2FsY3VsYXRlKHN0cmluZyBmb3JtdWxhTmFtZSwgc3RyaW5nIHN1YnN0U3RyaW5nLCBzdHJpbmdbXSBwbGF5ZXJQYXJ0cywgaW50IG1pbiwgaW50IG1heClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGRvdWJsZSByZXN1bHQgPSAwO1xyXG4gICAgICAgICAgICBzdHJpbmcgZm9ybXVsYSA9IEdldEZvcm11bGEoZm9ybXVsYU5hbWUpO1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBzdWJfcGFydHMgPSBzdWJzdFN0cmluZy5TcGxpdChcIixcIi5Ub0NoYXJBcnJheSgpKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDQ7IGkgPCBzdWJfcGFydHMuTGVuZ3RoOyBpKyspIC8vIHN0YXJ0IGF0ICdSUydcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9ybXVsYSA9IGZvcm11bGEuUmVwbGFjZShzdWJfcGFydHNbaV0uVHJpbSgpLCBwbGF5ZXJQYXJ0c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyByID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21wdXRlKGZvcm11bGEpLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBEb3VibGUuUGFyc2Uocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihTdHJpbmcuRm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIFwiRXJyb3IgcHJvY2Vzc2luZyBmb3JtdWxhICd7MH0nXFxuVHJ5aW5nIHRvIGNhbGN1bGF0ZTonezF9J1wiLCBmb3JtdWxhTmFtZSwgZm9ybXVsYSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPCBtaW4pXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW47XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdCA+IG1heClcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1heDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBHZXRGb3JtdWxhKHN0cmluZyBmb3JtdWxhTmFtZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBSZWdleCBmb3JtdWxhUmVnZXggPSBuZXcgUmVnZXgoU3RyaW5nLkZvcm1hdChcIl5cXFxccyp7MH1cXFxccyo6XFxcXHMqKC4qKSRcIiwgZm9ybXVsYU5hbWUpLCBSZWdleE9wdGlvbnMuTXVsdGlsaW5lKTtcclxuICAgICAgICAgICAgTWF0Y2ggbSA9IGZvcm11bGFSZWdleC5NYXRjaChTaW1Gb3JtdWxhcyk7XHJcbiAgICAgICAgICAgIGlmIChtICE9IE1hdGNoLkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gbS5Hcm91cHNbMV0uVG9TdHJpbmcoKS5UcmltKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgc1NpbUZvcm11bGFzID0gbnVsbDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgU2ltRm9ybXVsYXNcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc1NpbUZvcm11bGFzID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiNpZiAhQlJJREdFX1BST0pFQ1RcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZmlsZU5hbWUgPSBcIkZvcm11bGFzXFxcXFNJTV9Gb3JtdWxhcy50eHRcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZS5FeGlzdHMoZmlsZU5hbWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzU2ltRm9ybXVsYXMgPSBGaWxlLlJlYWRBbGxUZXh0KGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNTaW1Gb3JtdWxhcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0RW1iZWRkZWRUZXh0RmlsZShcIlRTQlRvb2wuRm9ybXVsYXMuU0lNX0Zvcm11bGFzLnR4dFwiKTtcclxuI2Vsc2VcclxuICAgICAgICAgICAgICAgICAgICBzU2ltRm9ybXVsYXMgPVxyXG5AXCIgU0lNX0Zvcm11bGFzLnR4dFxyXG5RQl9TSU1fQ0FSWTogSUlGKE1TID4gNDMsMTAsIElJRihNUyA+IDM3LDgsIElJRihNUyA+IDMwLCA2LCBJSUYoTVMgPiAyNCwgNCxJSUYoTVMgPiAxOCwgMiwgMCkpKSkpXHJcblFCX1NJTV9SVVNISU5HOiBNUyAvNVxyXG5RQl9TSU1fUEFTU0lORzogKFBTIC0zOCArIFBDIC0zMSArIEFSIC0zOCkgLyA2XHJcblFCX1NJTV9TQ1JBTUJMRTogTVMgLzE2XHJcblxyXG5SQl9TSU1fUlVTSElORzogKChNUyAtIDMxKSoyICsgKEhQLTMxKSoyICsgKFJQLTMpKjIpKzEwXHJcblJCX1NJTV9DQVJSSUVTOiAoKChNUyAtIDMxKSoyICsgKEhQLTMxKSoyICsgKFJQLTMpKjIpKzEwKSAvMTBcclxuUkJfU0lNX1JFVFVSTjogKE1TK0hQKS8xMCAtM1xyXG5SQl9TSU1fWVBDOiA0XHJcblJCX1NJTV9DQVRDSDogUkMgLyA1IC0xXHJcblxyXG5XUl9TSU1fUlVTSElORzogMVxyXG5XUl9TSU1fQ0FSUklFUzogMlxyXG5XUl9TSU1fUkVUVVJOOiAoTVMrSFApLzEwIC0zXHJcbldSX1NJTV9ZUEM6IChNUyArIFJDKSAvIDEwXHJcbldSX1NJTV9DQVRDSDogIFJDIC8gNSAtMVxyXG5cclxuVEVfU0lNX1JVU0hJTkc6IDBcclxuVEVfU0lNX0NBUlJJRVM6IDJcclxuVEVfU0lNX1JFVFVSTjogKE1TK0hQKS8xMCAtM1xyXG5URV9TSU1fWVBDOiggTVMgKyBSQykgLyAxMFxyXG5URV9TSU1fQ0FUQ0g6ICBSQyAvIDUgLTFcclxuXHJcbkRMX1NJTV9TQUNLSU5HOiAoUVUtNDQgKyBIUC01MCkgKiAxLjNcclxuRExfU0lNX0lOVDogMFxyXG5ETF9TSU1fVEFDS0xJTkc6IDErIChIUCAvMTApIFxyXG5cclxuTEJfU0lNX1NBQ0tJTkc6IChIUCAtIDM4KSoxLjNcclxuTEJfU0lNX0lOVDogKFBJIC0gNikgKiAwLjQ1XHJcbkxCX1NJTV9UQUNLTElORzogKEhQIC83KSBcclxuXHJcbkNCX1NJTV9TQUNLSU5HOiAoSFAtNDQpKjJcclxuQ0JfU0lNX0lOVDogUEkgKiAwLjY2XHJcbkNCX1NJTV9UQUNLTElORzogUlAvMTBcclxuXHJcblNfU0lNX1NBQ0tJTkc6IChIUC00NCkqMlxyXG5TX1NJTV9JTlQ6IFBJICogMC42NlxyXG5TX1NJTV9UQUNLTElORzogUVUgLzEwXHJcblxyXG5cclxuS19TSU1fQUJJTElUWTogS0EvIDdcclxuUF9TSU1fQUJJTElUWTogS1AgLyA3XHJcblwiO1xyXG4jZW5kaWYgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc1NpbUZvcm11bGFzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBzU3ViTGluZXMgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IHNTdWJMaW5lc1RTQjMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKSwoX28xKT0+e19vMS5BZGQoXCJRQlwiLFwiUUIsbmFtZSAgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLFBTLFBDLFBBLEFSLENPXCIpO19vMS5BZGQoXCJTS0lMTFwiLFwiU0tJTEwsbmFtZSAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEJCLEFHLEJDLFJDXCIpO19vMS5BZGQoXCJPTFwiLFwiT0wsbmFtZSAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQUdcIik7X28xLkFkZChcIkRFRlwiLFwiREVGLG5hbWUgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQUcsUEksUVVcIik7X28xLkFkZChcIktcIixcIkssbmFtZSAgICAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQUcsS1AsS0EsQUJcIik7X28xLkFkZChcIlBcIixcIlAsbmFtZSAgICAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQUcsS1AsQUJcIik7cmV0dXJuIF9vMTt9KTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gc1N1YkxpbmVzVFNCMiA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpLChfbzIpPT57X28yLkFkZChcIlFCXCIsXCJRQixuYW1lICAgICAgICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsUFMsUEMsUEEsQVIsQ09cIik7X28yLkFkZChcIlNLSUxMXCIsXCJTS0lMTCxuYW1lICxmYWNlICAgICwgSk4sUlMsUlAsTVMsSFAsQkIsQkMsUkNcIik7X28yLkFkZChcIk9MXCIsXCJPTCxuYW1lICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQlwiKTtfbzIuQWRkKFwiREVGXCIsXCJERUYsbmFtZSAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixQSSxRVVwiKTtfbzIuQWRkKFwiS1wiLFwiSyxuYW1lICAgICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixLUCxLQSxBQlwiKTtfbzIuQWRkKFwiUFwiLFwiUCxuYW1lICAgICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQixLUCxBQlwiKTtyZXR1cm4gX28yO30pO1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBzU3ViTGluZXNUU0IxID0gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkNhbGxGb3IobmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCksKF9vMyk9PntfbzMuQWRkKFwiUUJcIixcIlFCLG5hbWUgICAgICAgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxQUyxQQyxQQSxBUlwiKTtfbzMuQWRkKFwiU0tJTExcIixcIlNLSUxMLG5hbWUgLGZhY2UgICAgLCBKTixSUyxSUCxNUyxIUCxCQyxSQ1wiKTtfbzMuQWRkKFwiT0xcIixcIk9MLG5hbWUgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQXCIpO19vMy5BZGQoXCJERUZcIixcIkRFRixuYW1lICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLFBJLFFVXCIpO19vMy5BZGQoXCJLXCIsXCJLLG5hbWUgICAgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEtQLEtBLEFCXCIpO19vMy5BZGQoXCJQXCIsXCJQLG5hbWUgICAgICAgICAsZmFjZSAgICAsIEpOLFJTLFJQLE1TLEhQLEtQLEFCXCIpO3JldHVybiBfbzM7fSk7XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8gU3VtbWFyeSBkZXNjcmlwdGlvbiBmb3IgQ1hSb21TY2hlZHVsZUhlbHBlci5cclxuXHQvLy8gPC9zdW1tYXJ5PlxyXG5cdHB1YmxpYyBjbGFzcyBDWFJvbVNjaGVkdWxlSGVscGVyIDogU2NoZWR1bGVIZWxwZXIyXHJcblx0e1xyXG5cdFx0cHVibGljIENYUm9tU2NoZWR1bGVIZWxwZXIoYnl0ZVtdIG91dHB1dFJvbSkgOiBiYXNlKG91dHB1dFJvbSlcclxuXHRcdHtcclxuXHRcdFx0ICAgIC8vd2Vla09uZVN0YXJ0TG9jICAgICAgPSAweDMyOWRiO1xyXG5cdFx0XHRcdGVuZF9zY2hlZHVsZV9zZWN0aW9uID0gMHgzNDAwZTtcclxuXHRcdFx0XHQvL2dhbWVzUGVyV2Vla1N0YXJ0TG9jID0gMHgzMjljOTtcclxuXHRcdFx0XHR3ZWVrUG9pbnRlcnNTdGFydExvYyA9IDB4MzI5YTc7XHJcblx0XHRcdFx0dG90YWxfZ2FtZXNfcG9zc2libGUgPSAxNioxNjtcclxuXHRcdFx0XHRnYW1lUGVyV2Vla0xpbWl0ID0gMTY7XHJcblx0XHRcdFx0dG90YWxHYW1lTGltaXQgPSAxNioxNjtcclxuXHRcdFx0XHQvL3RvdGFsV2Vla3MgPSAxNztcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBZGRNZXNzYWdlKFN0cmluZyBtZXNzYWdlKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggbWVzc2FnZS5JbmRleE9mKFwiQUZDXCIpID09IC0xICYmIG1lc3NhZ2UuSW5kZXhPZihcIk5GQ1wiKSA9PSAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLkFkZE1lc3NhZ2UgKG1lc3NhZ2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBib29sIFNjaGVkdWxlR2FtZShzdHJpbmcgYXdheVRlYW0sIHN0cmluZyBob21lVGVhbSlcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCByZXQgPSBmYWxzZTtcclxuXHRcdFx0aWYoIFRvdGFsR2FtZUNvdW50IDwgdG90YWxfZ2FtZXNfcG9zc2libGUgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gYmFzZS5TY2hlZHVsZUdhbWUgKGF3YXlUZWFtLCBob21lVGVhbSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0QWRkTWVzc2FnZShzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XCJFUlJPUiEgbWF4aW11bSBnYW1lIGxpbWl0IHJlYWNoZWQgKHswfSkgezF9IGF0IHsxfSB3aWxsIG5vdCBiZSBzY2hlZHVsZWRcIixcclxuXHRcdFx0XHRcdHRvdGFsX2dhbWVzX3Bvc3NpYmxlICxhd2F5VGVhbSwgaG9tZVRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHJcblx0fVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLklPO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cclxuXHQvLy8gPHN1bW1hcnk+XHJcblx0Ly8vIFN1bW1hcnkgZGVzY3JpcHRpb24gZm9yIFRlY21vVG9vbC5cclxuXHQvLy8gTG9jYXRpb24gPSBwb2ludGVyIC0gMHg4MDAwICsgMHgwMDEwO1xyXG5cdC8vLyBXaGVyZSBwb2ludGVyIGlzIG9mIHRoZSAnc3dhcHBlZCcgZm9ybWF0IGxpa2UgJzB4ODZkZCdcclxuXHQvLy8gPC9zdW1tYXJ5PlxyXG4gICAgcHVibGljIGNsYXNzIFRlY21vVG9vbCA6IElUZWNtb1Rvb2wsIElUZWNtb0NvbnRlbnRcclxuXHR7XHJcblx0XHQvLyBUT0RPIENoZWNrIFJlZHNraW5zIGFuZCBDb3dib3lzIGRhdGEgaW4gU25lc19UU0JUb29sXHJcblx0XHQvKiAqXHJcblx0XHQgKiBUZWFtIEZvcm1hdGlvbiBEYXRhOlxyXG5cdFx0ICogQmlsbHMgICAgMHgyMUZFMCwgMHgzMUU4MFxyXG5cdFx0ICogRmFsY29ucyAgMHgyMUZGQiwgMHgzMUU5QlxyXG5cdFx0ICoqL1xyXG5cclxuXHRcdC8qICpcclxuXHRcdCAqIFBsYXlib29rIERhdGE6XHJcblx0XHQgKiBCaWxscyAgICAweDFEMzEwLTB4MUQzMTNcclxuXHRcdCAqIEZhbGNvbnMgIDB4MUQzN0MtMHgxRDM3RlxyXG5cdFx0ICogKi9cclxuXHRcdC8vIFRPRE8gY2hhbmdlIGJhY2sgdG8gcHJpdmF0ZTtcclxuXHRcdHByb3RlY3RlZCBieXRlW10gb3V0cHV0Um9tO1xyXG5cdFx0cHJvdGVjdGVkICBpbnQgbmFtZVBvaW50ZXJzU3RhcnQgICAgICAgICA9IDB4NDg7XHJcblx0XHRwcm90ZWN0ZWQgIGludCBsYXN0UGxheWVyTmFtZVBvaW50ZXIgICAgID0gMHg2ZDg7XHJcblx0XHQvLyB0aGUgbG9jYXRpb25zIGJlbG93IGFyZSBjb3JyZWN0IChJIHRoaW5rKSwgYnV0IHRoZXkgYXJlIHVudXNlZC5cclxuXHRcdC8vXHRcdHByaXZhdGUgaW50IHBsYXllck51bWJlck5hbWVEYXRhU3RhcnQgPSAweDA2RGE7XHJcblx0XHQvL1x0XHRwcml2YXRlIGludCBzdGFydFNjcmVlbkxpbmUxTG9jID0gMHhjNGVjOy8vIFRPRE8gYWxsb3cgdXNlciB0byBlZGl0IHRoZXNlIDIgbGluZXMuXHJcblx0XHQvL1x0XHRwcml2YXRlIGludCBzdGFydFNjcmVlbkxpbmUyTG9jID0gMHhjNTA0O1xyXG5cdFx0cHJvdGVjdGVkIGludCB0ZWFtU2ltT2ZmZW5zaXZlUHJlZlN0YXJ0ID0gMHgyNzUyNjtcclxuXHRcdHByb3RlY3RlZCBpbnQgbUJpbGxzUHVudEtpY2tSZXR1cm5lclBvcyA9IDB4MzI4ZDMgO1xyXG5cdFx0cHJvdGVjdGVkIGludCBkYXRhUG9zaXRpb25PZmZzZXQgICAgICAgID0gLTMyNzUyOyAvLyBzbmVzID0gMHgxNzAwMDBcclxuXHRcdHByb3RlY3RlZCBSZWdleCBtTmFtZVJlZ2V4O1xyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgdGhlIHJvbSB2ZXJzaW9uIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgUk9NX1RZUEUgUm9tVmVyc2lvbiB7IGdldCB7IHJldHVybiBST01fVFlQRS5ORVNfT1JJR0lOQUxfVFNCOyB9IH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gUG9zaXRpb25OYW1lc1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHBvc2l0aW9uTmFtZXM7IH1cclxuICAgICAgICAgICAgaW50ZXJuYWwgc2V0IHsgcG9zaXRpb25OYW1lcyA9IHZhbHVlOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiBwb3NpdGlvbk5hbWVzID0gZ2xvYmFsOjpCcmlkZ2UuU2NyaXB0LkNhbGxGb3IobmV3IExpc3Q8c3RyaW5nPigpLChfbzEpPT57X28xLkFkZChcIlFCMVwiKTtfbzEuQWRkKFwiUUIyXCIpO19vMS5BZGQoXCJSQjFcIik7X28xLkFkZChcIlJCMlwiKTtfbzEuQWRkKFwiUkIzXCIpO19vMS5BZGQoXCJSQjRcIik7X28xLkFkZChcIldSMVwiKTtfbzEuQWRkKFwiV1IyXCIpO19vMS5BZGQoXCJXUjNcIik7X28xLkFkZChcIldSNFwiKTtfbzEuQWRkKFwiVEUxXCIpO19vMS5BZGQoXCJURTJcIik7X28xLkFkZChcIkNcIik7X28xLkFkZChcIkxHXCIpO19vMS5BZGQoXCJSR1wiKTtfbzEuQWRkKFwiTFRcIik7X28xLkFkZChcIlJUXCIpO19vMS5BZGQoXCJSRVwiKTtfbzEuQWRkKFwiTlRcIik7X28xLkFkZChcIkxFXCIpO19vMS5BZGQoXCJST0xCXCIpO19vMS5BZGQoXCJSSUxCXCIpO19vMS5BZGQoXCJMSUxCXCIpO19vMS5BZGQoXCJMT0xCXCIpO19vMS5BZGQoXCJSQ0JcIik7X28xLkFkZChcIkxDQlwiKTtfbzEuQWRkKFwiRlNcIik7X28xLkFkZChcIlNTXCIpO19vMS5BZGQoXCJLXCIpO19vMS5BZGQoXCJQXCIpO3JldHVybiBfbzE7fSk7XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBMaXN0PHN0cmluZz4gVGVhbXNcclxuXHRcdHtcclxuXHRcdFx0Z2V0eyByZXR1cm4gdGVhbXM7IH1cclxuXHRcdFx0aW50ZXJuYWwgc2V0IHsgdGVhbXMgPSB2YWx1ZTsgfVxyXG5cdFx0fVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RhdGljICBMaXN0PFN0cmluZz4gdGVhbXMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxzdHJpbmc+KCksKF9vMik9PntfbzIuQWRkKFwiYmlsbHNcIik7X28yLkFkZChcImNvbHRzXCIpO19vMi5BZGQoXCJkb2xwaGluc1wiKTtfbzIuQWRkKFwicGF0cmlvdHNcIik7X28yLkFkZChcImpldHNcIik7X28yLkFkZChcImJlbmdhbHNcIik7X28yLkFkZChcImJyb3duc1wiKTtfbzIuQWRkKFwib2lsZXJzXCIpO19vMi5BZGQoXCJzdGVlbGVyc1wiKTtfbzIuQWRkKFwiYnJvbmNvc1wiKTtfbzIuQWRkKFwiY2hpZWZzXCIpO19vMi5BZGQoXCJyYWlkZXJzXCIpO19vMi5BZGQoXCJjaGFyZ2Vyc1wiKTtfbzIuQWRkKFwic2VhaGF3a3NcIik7X28yLkFkZChcInJlZHNraW5zXCIpO19vMi5BZGQoXCJnaWFudHNcIik7X28yLkFkZChcImVhZ2xlc1wiKTtfbzIuQWRkKFwiY2FyZGluYWxzXCIpO19vMi5BZGQoXCJjb3dib3lzXCIpO19vMi5BZGQoXCJiZWFyc1wiKTtfbzIuQWRkKFwibGlvbnNcIik7X28yLkFkZChcInBhY2tlcnNcIik7X28yLkFkZChcInZpa2luZ3NcIik7X28yLkFkZChcImJ1Y2NhbmVlcnNcIik7X28yLkFkZChcIjQ5ZXJzXCIpO19vMi5BZGQoXCJyYW1zXCIpO19vMi5BZGQoXCJzYWludHNcIik7X28yLkFkZChcImZhbGNvbnNcIik7cmV0dXJuIF9vMjt9KTtcclxuXHRcdHB1YmxpYyBieXRlW10gT3V0cHV0Um9tXHJcblx0XHR7XHJcblx0XHRcdGdldHsgcmV0dXJuIG91dHB1dFJvbTsgfVxyXG5cdFx0XHRzZXR7IG91dHB1dFJvbSA9IHZhbHVlO31cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cHVibGljIGJvb2wgU2hvd09mZlByZWZcclxuXHRcdHtcclxuXHRcdFx0Z2V0eyByZXR1cm4gbVNob3dPZmZQcmVmO31cclxuXHRcdFx0c2V0eyBtU2hvd09mZlByZWYgPSB2YWx1ZTt9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyAgYm9vbCBTaG93VGVhbUZvcm1hdGlvbiA9IGZhbHNlO1xyXG5cdFx0cHVibGljIHN0YXRpYyAgYm9vbCBTaG93UGxheWJvb2sgICAgICA9IGZhbHNlO1xyXG5cdFx0cHVibGljIHN0YXRpYyAgYm9vbCBTaG93Q29sb3JzICAgICAgICA9IGZhbHNlO1xyXG5cdFx0cHVibGljIHN0YXRpYyBib29sIFNob3dUZWFtU3RyaW5ncyAgICA9IGZhbHNlO1xyXG5cdFx0cHVibGljIHN0YXRpYyBib29sIFNob3dQcm9Cb3dsUm9zdGVycyA9IGZhbHNlO1xyXG5cclxuXHRcdFxyXG5cdFx0cHJpdmF0ZSBib29sIG1TaG93T2ZmUHJlZiA9IGZhbHNlO1xyXG5cdFx0cHJvdGVjdGVkIGludCBtYXhOYW1lTGVuZ3RoID0gMTY7XHJcbiAgICAgXHJcblx0XHRwcm90ZWN0ZWQgaW50W10gZ2FtZVllYXJMb2NhdGlvbnMgPSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDB4QzRFNCwgMHgxZTEyOCwgMHgxZTI4YSwgMTIzNTgxLCAxMjkxNzksIDB4YzEyOSB9O1xyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgUmVnZXggTmFtZVJlZ2V4XHJcblx0XHR7XHJcblx0XHRcdGdldFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoIG1OYW1lUmVnZXggPT0gbnVsbCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bU5hbWVSZWdleCA9IG5ldyBSZWdleChcIlthLXpBLVogXFxcXC5dK1wiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG1OYW1lUmVnZXg7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcbiAgICAgICAgLy8gdXNlIHRoaXMgaW5zdGVhZCBvZiBkaXJlY3RveSBzZXR0aW5nIGRhdGEgaW4gT3V0cHV0Um9tXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0Qnl0ZShpbnQgbG9jYXRpb24sIGJ5dGUgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuT3V0cHV0Um9tW2xvY2F0aW9uXSA9IGI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVGVjbW9Ub29sKCkgeyB9XHJcblx0XHRwdWJsaWMgVGVjbW9Ub29sKGJ5dGVbXSByb20pXHJcblx0XHR7XHJcblx0XHRcdEluaXQocm9tKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gV2lsbCBlbnN1cmUgdGhhdCB0aGUgaGVhZGRlciBpcyBjb3JyZWN0LlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgRml4SGVhZGRlcigpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBvdXRwdXRSb20gPT0gbnVsbCApXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0Ynl0ZVtdIGNvcnJlY3RIZWFkZGVyID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDB4NEUsIDB4NDUsIDB4NTMsIDB4MUEsIDB4MTAsIDB4MTAsIDB4NDIsIDB4MDAsIFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgXHJcblx0XHRcdFx0XHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRmb3IoaW50IGkgPSAwO2kgPCBjb3JyZWN0SGVhZGRlci5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG91dHB1dFJvbVtpXSA9IGNvcnJlY3RIZWFkZGVyW2ldO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHB1YmxpYyBib29sIElzVmFsaWRQb3NpdGlvbiggc3RyaW5nIHBvcyApXHJcblx0XHR7XHJcblx0XHRcdGJvb2wgcmV0ID0gZmFsc2U7XHJcblx0XHRcdGZvciggaW50IGkgPSAwOyBpIDwgcG9zaXRpb25OYW1lcy5Db3VudDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYocG9zID09IHBvc2l0aW9uTmFtZXNbaV0gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJldCA9IHRydWU7XHJcblx0XHRcdFx0XHRicmVhazs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGJvb2wgSXNWYWxpZFRlYW0oc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGJvb2wgcmV0ID0gZmFsc2U7XHJcblx0XHRcdGZvciggaW50IGkgPSAwOyBpIDwgdGVhbXMuQ291bnQ7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHRlYW0gPT0gdGVhbXNbaV0gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJldCA9IHRydWU7XHJcblx0XHRcdFx0XHRicmVhazs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIGJvb2wgSW5pdChieXRlW10gcm9tKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gSW5pdFJvbShyb20pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFRlc3QyKClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHRlYW0gPSBcImJpbGxzXCI7XHJcblx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCBwb3NpdGlvbk5hbWVzLkNvdW50O2krKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEluc2VydFBsYXllcih0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sXCJwbGF5ZXJcIix0ZWFtLCAoYnl0ZSkgKGkgJSAxMCkpO1xyXG5cdFx0XHRcdHN3aXRjaChwb3NpdGlvbk5hbWVzW2ldKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgXCJRQjFcIjogIGNhc2UgXCJRQjJcIjogXHJcblx0XHRcdFx0XHRcdFNldFFCQWJpbGl0aWVzKHRlYW0scG9zaXRpb25OYW1lc1tpXSwzMSwzMSwzMSwzMSwzMSwzMSwzMSwzMSk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSBcIlJCMVwiOiBjYXNlIFwiUkIyXCI6IGNhc2UgXCJSQjNcIjogY2FzZSBcIlJCNFwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIldSMVwiOiBjYXNlIFwiV1IyXCI6IGNhc2UgXCJXUjNcIjogY2FzZSBcIldSNFwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIlRFMVwiOiBjYXNlIFwiVEUyXCI6IFxyXG5cdFx0XHRcdFx0XHRTZXRTa2lsbFBsYXllckFiaWxpdGllcyh0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sMzEsMzEsMzEsMzEsMzEsMzEpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgXCJDXCI6ICAgY2FzZSBcIlJHXCI6XHRjYXNlIFwiTEdcIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJSVFwiOlx0Y2FzZSBcIkxUXCI6IFxyXG5cdFx0XHRcdFx0XHRTZXRPTFBsYXllckFiaWxpdGllcyh0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sMzEsMzEsMzEsMzEpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgXCJSRVwiOiAgIGNhc2UgXCJOVFwiOiAgIGNhc2UgXCJMRVwiOiAgIGNhc2UgXCJMT0xCXCI6XHJcblx0XHRcdFx0XHRjYXNlIFwiTElMQlwiOiBjYXNlIFwiUklMQlwiOiBjYXNlIFwiUk9MQlwiOiBjYXNlIFwiUkNCXCI6XHJcblx0XHRcdFx0XHRjYXNlIFwiTENCXCI6ICBjYXNlIFwiRlNcIjogICBjYXNlIFwiU1NcIjogXHJcblx0XHRcdFx0XHRcdFNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyh0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sMzEsMzEsMzEsMzEsMzEsMzEpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgXCJLXCI6ICBcclxuXHRcdFx0XHRcdGNhc2UgXCJQXCI6ICBcclxuXHRcdFx0XHRcdFx0U2V0S2lja1BsYXllckFiaWxpdGllcyh0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sMzEsMzEsMzEsMzEsMzEsMzEpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBzaGlmdFRlc3QoKVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlW10gc3R1ZmYgID0gezB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmYsXHJcblx0XHRcdFx0XHRcdFx0XHQweDRhLCAweDRjLCAweDRlLDB4NTAsIDB4NTIsIDB4NTQsIDB4NTYsIDB4NTgsIDB4NWEsIFxyXG5cdFx0XHRcdFx0XHRcdFx0MHg1YywgMHg1ZSwgMHg2MCwgMHg2MiwgMHg2NCwgMHg2NiwgMHg2OCwgMHg2YSwgMHg2YywgXHJcblx0XHRcdFx0XHRcdFx0XHQweDZlLCAweDcwLCAweDcyLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmXHR9O1xyXG5cdFx0XHRmb3IoaW50IGkgPTA7IGkgPCBzdHVmZi5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHRDb25zb2xlLldyaXRlKFwiIHswOnh9IFwiLHN0dWZmW2ldKTtcclxuXHRcdFx0Q29uc29sZS5Xcml0ZUxpbmUoKTtcclxuXHRcdFx0Q29uc29sZS5Xcml0ZUxpbmUoXCJzaGlmdCAzXCIpO1xyXG5cdFx0XHR0aGlzLlNoaWZ0RGF0YURvd24oNiwgc3R1ZmYuTGVuZ3RoLTcsIDMsIHN0dWZmKTtcclxuXHRcdFx0Zm9yKGludCBpID0wOyBpIDwgc3R1ZmYuTGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0Q29uc29sZS5Xcml0ZShcIiB7MDp4fSBcIixzdHVmZltpXSk7XHJcblx0XHRcdENvbnNvbGUuV3JpdGVMaW5lKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gbGVuIHRoZSBsZW5ndGggb2YgdGhlIFJPTVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIHRoZSBjb3JyZWN0IGxlbmd0aCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIGJvb2wgSXNWYWxpZFJvbVNpemUobG9uZyBsZW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHJldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAobGVuID09IFRlY21vVG9vbEZhY3RvcnkuT1JJR19ORVNfVFNCMV9MRU4pXHJcbiAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBib29sIEluaXRSb20oYnl0ZVtdIHJvbSlcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCByZXQgPSBmYWxzZTtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHQgcmVzdWx0ID0gIFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRpYWxvZ1Jlc3VsdC5ZZXM7XHJcblx0XHRcdFx0bG9uZyBsZW4gPSByb20uTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc1ZhbGlkUm9tU2l6ZShsZW4pKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKCBNYWluQ2xhc3MuR1VJX01PREUgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94LlNob3cobnVsbCwgXHJcblx0XHRcdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRAXCJXYXJuaW5nISBcclxuXHJcblRoZSBpbnB1dCBSb20gaXMgbm90IHRoZSBjb3JyZWN0IFNpemUuIFt7MH0gc2l6ZSA9IHsxfV1cclxuXHJcbllvdSBzaG91bGQgb25seSBjb250aW51ZSBpZiB5b3Uga25vdyBmb3Igc3VyZSB0aGF0IHlvdSBhcmUgbG9hZGluZyBhIG5lcyBUU0IgUk9NLlxyXG5cclxuU3VwcG9ydGVkIHNpemVzIGFyZVt7Mn0sIHszfSwgezR9XVxyXG5cclxuRG8geW91IHdhbnQgdG8gY29udGludWU/XCIsIFwiPGZpbGU+XCIsIGxlbiwgVGVjbW9Ub29sRmFjdG9yeS5PUklHX05FU19UU0IxX0xFTiwgVGVjbW9Ub29sRmFjdG9yeS5DWFJPTV9WMTA1X0xFTiwgVGVjbW9Ub29sRmFjdG9yeS5DWFJPTV9WMTExX0xFTiksXHJcblx0XHRcdFx0XHRcdFx0XCJXQVJOSU5HIVwiLFxyXG5cdFx0XHRcdFx0XHRcdFN5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zLlllc05vLFxyXG5cdFx0XHRcdFx0XHRcdFN5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uLldhcm5pbmcgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RyaW5nIG1zZyA9IFN0cmluZy5Gb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAXCJFUlJPUiEgUk9NICd7MH0nIGlzIG5vdCB0aGUgY29ycmVjdCBsZW5ndGguICBcclxuICAgIFN1cHBvcnRlZCBzaXplcyBhcmUgW3sxfSwgezJ9LCBvciB7M31dIGJ5dGVzIGxvbmcuXHJcbiAgICBJZiB5b3Uga25vdyB0aGlzIGlzIHJlYWxseSBhIG5lcyBUU0IgUk9NLCB5b3UgY2FuIGZvcmNlIFRTQlRvb2xTdXByZW1lIHRvIGxvYWQgaXQgaW4gR1VJIG1vZGUuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjxmaWxlPlwiLCBUZWNtb1Rvb2xGYWN0b3J5Lk9SSUdfTkVTX1RTQjFfTEVOLCBUZWNtb1Rvb2xGYWN0b3J5LkNYUk9NX1YxMDVfTEVOLCBUZWNtb1Rvb2xGYWN0b3J5LkNYUk9NX1YxMTFfTEVOKTtcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IobXNnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoIHJlc3VsdCA9PSBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHQuWWVzIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRvdXRwdXRSb20gPSByb207XHJcblx0XHRcdFx0XHRyZXQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChFeGNlcHRpb24gZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLlNob3dFcnJvcihlLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTYXZlUm9tKHN0cmluZyBmaWxlbmFtZSlcclxuXHRcdHtcclxuXHRcdFx0aWYoIGZpbGVuYW1lICE9IG51bGwgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHJ5XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bG9uZyBsZW4gPSBvdXRwdXRSb20uTGVuZ3RoO1xyXG5cdFx0XHRcdFx0RmlsZVN0cmVhbSBzMSA9IG5ldyBGaWxlU3RyZWFtKGZpbGVuYW1lLCBGaWxlTW9kZS5PcGVuT3JDcmVhdGUpO1xyXG5cdFx0XHRcdFx0czEuV3JpdGUgKG91dHB1dFJvbSwwLChpbnQpbGVuKTtcclxuXHRcdFx0XHRcdHMxLkNsb3NlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhdGNoKEV4Y2VwdGlvbiBlKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLlNob3dFcnJvcihlLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihcIkVSUk9SISBZb3UgcGFzc2VkIGEgbnVsbCBmaWxlbmFtZVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIGEgc3RyaW5nIGNvbnNpc3Rpbmcgb2YgbnVtYmVyLCBuYW1lXFxuIGZvciBhbGwgcGxheWVycyBpbiB0aGUgZ2FtZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRQbGF5ZXJTdHVmZihib29sIGplcnNleU51bWJlcl9iLCBib29sIG5hbWVfYiwgYm9vbCBmYWNlX2IsIFxyXG5cdFx0XHRib29sIGFiaWxpdGllc19iLCBib29sIHNpbURhdGFfYilcclxuXHRcdHtcclxuXHRcdFx0U3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDE2KjI4KjMwKjMpO1xyXG5cdFx0XHRzdHJpbmcgdGVhbT1cIlwiO1xyXG5cdFx0XHRmb3IoaW50IGkgPTA7IGkgPCB0ZWFtcy5Db3VudDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGVhbSA9IHRlYW1zW2ldO1xyXG5cdFx0XHRcdHNiLkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiVEVBTT17MH1cXG5cIix0ZWFtKSk7XHJcblx0XHRcdFx0Zm9yKGludCBqID0gMDsgaiA8IHBvc2l0aW9uTmFtZXMuQ291bnQ7IGorKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzYi5BcHBlbmQoR2V0UGxheWVyRGF0YSh0ZWFtLHBvc2l0aW9uTmFtZXNbal0sYWJpbGl0aWVzX2IsamVyc2V5TnVtYmVyX2IsZmFjZV9iLG5hbWVfYixzaW1EYXRhX2IpK1wiXFxuXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gc2IuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0U2NoZWR1bGUoKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gXCJcIjtcclxuXHRcdFx0aWYoIG91dHB1dFJvbSAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFNjaGVkdWxlSGVscGVyMiBzaDIgPSBuZXcgU2NoZWR1bGVIZWxwZXIyKG91dHB1dFJvbSk7XHJcblx0XHRcdFx0cmV0ID0gc2gyLkdldFNjaGVkdWxlKCk7XHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFllYXIoc3RyaW5nIHllYXIpXHJcblx0XHR7XHJcblx0XHRcdGlmKHllYXIgPT0gbnVsbCB8fCB5ZWFyLkxlbmd0aCAhPSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB7MH0gaXMgbm90IGEgdmFsaWQgeWVhci5cIix5ZWFyKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCBsb2NhdGlvbjtcclxuXHRcdFx0Zm9yKGludCBpID0gMCA7IGkgPCBnYW1lWWVhckxvY2F0aW9ucy5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxvY2F0aW9uID0gZ2FtZVllYXJMb2NhdGlvbnNbaV07XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSAgID0gKGJ5dGUpeWVhclswXTtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMV0gPSAoYnl0ZSl5ZWFyWzFdO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbisyXSA9IChieXRlKXllYXJbMl07XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzNdID0gKGJ5dGUpeWVhclszXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0WWVhcigpXHJcblx0XHR7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IGdhbWVZZWFyTG9jYXRpb25zWzBdO1xyXG5cdFx0XHRzdHJpbmcgcmV0ID1cIlwiO1xyXG5cdFx0XHRmb3IoaW50IGkgPWxvY2F0aW9uOyBpIDwgbG9jYXRpb24rNDsgaSsrKVxyXG5cdFx0XHRcdHJldCArPSAoY2hhcilvdXRwdXRSb21baV07XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgSW5zZXJ0UGxheWVyKHN0cmluZyB0ZWFtLCBcclxuXHRcdFx0c3RyaW5nIHBvc2l0aW9uLCBcclxuXHRcdFx0c3RyaW5nIGZuYW1lLCBcclxuXHRcdFx0c3RyaW5nIGxuYW1lLCBcclxuXHRcdFx0Ynl0ZSBudW1iZXIpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFBvc2l0aW9uKCBwb3NpdGlvbikgfHwgZm5hbWUgPT0gbnVsbCB8fCBsbmFtZSA9PSBudWxsIHx8IGZuYW1lLkxlbmd0aCA8IDEgfHwgbG5hbWUuTGVuZ3RoIDwgMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJFUlJPUiEgKGxvdyBsZXZlbCkgSW5zZXJ0UGxheWVyOjogUGxheWVyIG5hbWUgb3IgcG9zaXRpb24gaW52YWxpZC4gdGVhbTonezB9JzsgcG9zaXRpb246J3sxfSc7IGZuYW1lOid7Mn0nOyBsbmFtZTonezN9J1wiLCBcclxuICAgICAgICAgICAgICAgICAgICB0ZWFtLCBwb3NpdGlvbiwgZm5hbWUsIGxuYW1lKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoIE5hbWVSZWdleC5NYXRjaChmbmFtZStsbmFtZSkgPT0gTWF0Y2guRW1wdHkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuU2hvd0Vycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBvbiBuYW1lIHswfSB7MX1cIiwgZm5hbWUsIGxuYW1lKSk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRmbmFtZSA9IGZuYW1lLlRvTG93ZXIoKTtcclxuXHRcdFx0XHRsbmFtZSA9IGxuYW1lLlRvVXBwZXIoKTsgLy8xNiBjaGFyIG1heCBmb3IgbmFtZVxyXG5cdFx0XHRcdGlmKGxuYW1lLkxlbmd0aCArIGZuYW1lLkxlbmd0aCA+IG1heE5hbWVMZW5ndGggKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISEgVGhlcmUgaXMgYSAxNSBjaGFyYWN0ZXIgbGltaXQgZm9yIG5hbWVzXFxuICd7MH0gezF9JyBpcyB7Mn0gY2hhcmFjdGVycyBsb25nLlwiLFxyXG5cdFx0XHRcdFx0XHRmbmFtZSxsbmFtZSwgZm5hbWUuTGVuZ3RoK2xuYW1lLkxlbmd0aCkpO1xyXG5cdFx0XHRcdFx0aWYobG5hbWUuTGVuZ3RoID4gbWF4TmFtZUxlbmd0aCAtIDIgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRsbmFtZT0gbG5hbWUuU3Vic3RyaW5nKDAsMTIpO1xyXG5cdFx0XHRcdFx0XHQvL2ZuYW1lID1cIlwiK2ZuYW1lWzBdK1wiLlwiO1xyXG5cdFx0XHRcdFx0XHRmbmFtZSA9IHN0cmluZy5Gb3JtYXQoXCJ7MH0uXCIsZm5hbWVbMF0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHRmbmFtZSA9IHN0cmluZy5Gb3JtYXQoXCJ7MH0uXCIsZm5hbWVbMF0pO1xyXG5cdFx0XHRcdFx0Ly9mbmFtZSA9IFwiXCIrZm5hbWVbMF07XHJcblxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIk5hbWUgd2lsbCBiZSB7MH0gezF9XCIsIGZuYW1lLCBsbmFtZSApKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoZm5hbWUuTGVuZ3RoIDwgMSlcclxuXHRcdFx0XHRcdGZuYW1lID0gXCJKb2VcIjtcclxuXHRcdFx0XHRpZihsbmFtZS5MZW5ndGggPCAxKVxyXG5cdFx0XHRcdFx0bG5hbWUgPSBcIk5vYm9keVwiO1xyXG5cdFx0XHRcclxuXHRcdFx0XHRzdHJpbmcgb2xkTmFtZSA9IEdldE5hbWUodGVhbSxwb3NpdGlvbik7XHJcblx0XHRcdFx0Ynl0ZVtdIGJ5dGVzID0gbmV3IGJ5dGVbMStmbmFtZS5MZW5ndGgrbG5hbWUuTGVuZ3RoXTtcclxuXHRcdFx0XHRpbnQgY2hhbmdlID0gYnl0ZXMuTGVuZ3RoIC0gb2xkTmFtZS5MZW5ndGg7XHJcblx0XHRcdFx0aW50IGk9MDtcclxuXHRcdFx0XHRieXRlc1swXSA9IG51bWJlcjtcclxuXHRcdFx0XHRmb3IoaT0xOyBpIDwgZm5hbWUuTGVuZ3RoKzE7IGkrKylcclxuXHRcdFx0XHRcdGJ5dGVzW2ldID0gKGJ5dGUpZm5hbWVbaS0xXTtcclxuXHRcdFx0XHRmb3IoaW50IGogPSAwO2ogPCBsbmFtZS5MZW5ndGg7aisrKVxyXG5cdFx0XHRcdFx0Ynl0ZXNbaSsrXT0oYnl0ZSlsbmFtZVtqXTsgXHJcblx0XHRcdFx0aW50IHBvcyA9IEdldFBvaW50ZXJQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuXHJcblx0XHRcdFx0VXBkYXRlUGxheWVyRGF0YSh0ZWFtLHBvc2l0aW9uLGJ5dGVzLCBjaGFuZ2UpO1xyXG5cdFx0XHRcdEFkanVzdERhdGFQb2ludGVycyhwb3MsIGNoYW5nZSwgbGFzdFBsYXllck5hbWVQb2ludGVyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBVcGRhdGVzIHN0cm5nIHBvaW50ZXJzXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zXCI+VGhlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IHBvaW50ZXI8L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiY2hhbmdlXCI+dGhlIGFtb3VudCBvZiBjaGFuZ2U8L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGFzdFBvaW50ZXJcIj50aGUgbGFzdCBwb2ludGVyIHRvIHVwZGF0ZS48L3BhcmFtPlxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBBZGp1c3REYXRhUG9pbnRlcnMoaW50IGZpcnN0UG9pbnRlckxvY2F0aW9uLCBpbnQgY2hhbmdlLCBpbnQgbGFzdFBvaW50ZXJMb2NhdGlvbilcclxuXHRcdHtcclxuXHRcdFx0Ynl0ZSBsb3csIGhpO1xyXG5cdFx0XHRpbnQgIHdvcmQ7XHJcblx0XHRcdC8vIGxhc3QgcGxheWVyIG5hbWUgcG9pbnRlciBpcyBhdCAweDY5ZCBGb3IgTkVTXHJcblx0XHRcdC8vIHNuZXMgaXMgbGFzdHBvaW50ZXIrMSAoMHgxNzg3MzgrMSlcclxuXHJcblx0XHRcdGludCBpPTA7XHJcblx0XHRcdGludCBlbmQgPSBsYXN0UG9pbnRlckxvY2F0aW9uKzE7XHJcblx0XHRcdGZvciggaSA9IGZpcnN0UG9pbnRlckxvY2F0aW9uKzI7IGkgPCBlbmQ7IGkrPTIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsb3cgID0gIG91dHB1dFJvbVtpXTtcclxuXHRcdFx0XHRoaSAgID0gIG91dHB1dFJvbVtpKzFdO1xyXG5cdFx0XHRcdHdvcmQgPSAgaGk7XHJcblx0XHRcdFx0d29yZCA9ICB3b3JkIDw8IDg7XHJcblx0XHRcdFx0d29yZCArPSBsb3c7XHJcblx0XHRcdFx0d29yZCArPSBjaGFuZ2U7XHJcblx0XHRcdFx0bG93ICA9ICAoYnl0ZSkod29yZCAmIDB4MDBmZik7XHJcblx0XHRcdFx0d29yZCA9ICB3b3JkID4+IDg7XHJcblx0XHRcdFx0aGkgICA9ICAoYnl0ZSl3b3JkO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtpXSA9IGxvdztcclxuXHRcdFx0XHRvdXRwdXRSb21baSsxXSA9IGhpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRoZSB0ZWFtIHRoZSBwbGF5ZXIgaXMgYXNzaWduZWQgdG8uPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+VGhlIHBsYXllcidzIHBvc2l0aW9uICgnUUIxJywgJ1dSMScgLi4uKTwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldE5hbWUoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldE5hbWU6OiB0ZWFtICd7MH0nIG9yIHBvc2l0aW9uICd7MX0nIGlzIGludmFsaWQuXCIsXHJcblx0XHRcdFx0XHR0ZWFtLHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IHBvcyA9IEdldERhdGFQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09IFwiUFwiICYmIHRlYW0gPT0gXCJmYWxjb25zXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0aW50IG5leHRQb3MgPSBHZXROZXh0RGF0YVBvc2l0aW9uKHRlYW0scG9zaXRpb24pO1xyXG5cdFx0XHRpZiggbmV4dFBvcyA9PSAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgcG9pbnRlckxvY2F0aW9uID0gbGFzdFBsYXllck5hbWVQb2ludGVyO1xyXG5cdFx0XHRcdGJ5dGUgbG93Qnl0ZSA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb25dO1xyXG5cdFx0XHRcdGludCAgaGlCeXRlICA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb24rMV07XHJcblx0XHRcdFx0aGlCeXRlID0gIGhpQnl0ZSA8PCA4O1xyXG5cdFx0XHRcdGhpQnl0ZSA9IGhpQnl0ZSArIGxvd0J5dGU7XHJcblxyXG5cdFx0XHRcdC8vaW50IHJldCA9IGhpQnl0ZSAtIDB4ODAwMCArIDB4MDEwO1xyXG5cdFx0XHRcdG5leHRQb3MgPSBoaUJ5dGUgKyBkYXRhUG9zaXRpb25PZmZzZXQ7XHJcblx0XHRcdH1cclxuXHRcdFx0c3RyaW5nIG5hbWUgPVwiXCI7XHJcblxyXG5cdFx0XHRpZiggcG9zIDwgMCApXHJcblx0XHRcdFx0cmV0dXJuIFwiRVJST1IhXCI7XHJcblx0XHRcdGlmKG5leHRQb3MgPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly9zdGFydCBhdCBwb3MrMSB0byBza2lwIGhpcyBqZXJzZXkgbnVtYmVyLiBcclxuXHRcdFx0XHRmb3IoaW50IGkgPSBwb3MrMTtpIDwgbmV4dFBvcyA7IGkrKylcclxuXHRcdFx0XHRcdG5hbWUgKz0gKGNoYXIpb3V0cHV0Um9tW2ldO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vXHRcdFx0ZWxzZVxyXG5cdFx0XHQvL1x0XHRcdHsgLy8gbGFzdCBndXkgKGZhbGNvbidzIHB1bnRlciBvbiBuZXMpXHJcblx0XHRcdC8vXHRcdFx0ICAvLyBERUZFQ1QtLT4gV2hlbiBnYXJiYWdlIGlzIGxlZnQgb3ZlciwgdGhpcyB3aWxsIGdldCB0aGUgZ2FyZ2FiZSB0b28uXHJcblx0XHRcdC8vXHRcdFx0XHRmb3IoaW50IGkgPSBwb3MrMTtvdXRwdXRSb21baV0gIT0gMHhmZiA7IGkrKylcclxuXHRcdFx0Ly9cdFx0XHRcdFx0bmFtZSArPSAoY2hhcilvdXRwdXRSb21baV07XHJcblx0XHRcdC8vXHRcdFx0fVxyXG5cdFx0XHRpbnQgc3BsaXQgPTE7XHJcblx0XHRcdGZvcihpbnQgaT0wOyBpIDwgbmFtZS5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKChieXRlKW5hbWVbaV0gPiA2NCAmJiAoYnl0ZSluYW1lW2ldIDwgOTEpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c3BsaXQgPSBpOyBicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHN0cmluZyBmaXJzdCxsYXN0LGZ1bGw7XHJcblx0XHRcdGZ1bGwgPSBudWxsO1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZpcnN0ID0gbmFtZS5TdWJzdHJpbmcoMCxzcGxpdCk7XHJcblx0XHRcdFx0bGFzdCA9IG5hbWUuU3Vic3RyaW5nKHNwbGl0KTtcclxuXHRcdFx0XHRmdWxsID0gZmlyc3QrXCIgXCIrbGFzdDtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGZ1bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRQbGF5ZXJEYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24sIGJvb2wgYWJpbGl0eV9iLFxyXG5cdFx0XHRib29sIGplcnNleU51bWJlcl9iLCBib29sIGZhY2VfYiwgYm9vbCBuYW1lX2IsYm9vbCBzaW1EYXRhX2IgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgVGVhbSB7MH0gaXMgaW52YWxpZC5cIix0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbihwb3NpdGlvbikgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBwb3NpdGlvbiB7MH0gaXMgaW52YWxpZC5cIixwb3NpdGlvbikpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRTdHJpbmdCdWlsZGVyIHJlc3VsdCA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG5cdFx0XHQvL3Jlc3VsdC5BcHBlbmQoIHN0cmluZy5Gb3JtYXQoXCJ7MH0sIHsxfSwgRmFjZT0weHsyOnh9LCBcIixcclxuXHRcdFx0Ly9cdHBvc2l0aW9uLCBHZXROYW1lKHRlYW0scG9zaXRpb24pLCBHZXRGYWNlKHRlYW0scG9zaXRpb24pKSk7XHJcblx0XHRcdHJlc3VsdC5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfSwgXCIscG9zaXRpb24pKTtcclxuXHRcdFx0aWYobmFtZV9iKVxyXG5cdFx0XHRcdHJlc3VsdC5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfSwgXCIsR2V0TmFtZSh0ZWFtLHBvc2l0aW9uKSkpO1xyXG5cdFx0XHRpZihmYWNlX2IpXHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiRmFjZT0weHswOnh9LCBcIixHZXRGYWNlKHRlYW0scG9zaXRpb24pKSk7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IEdldERhdGFQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuXHJcblx0XHRcdGlmKGxvY2F0aW9uIDwgMCApXHJcblx0XHRcdFx0cmV0dXJuIFwiTWVzc2VkIFVwIFBvaW50ZXJcIjtcclxuXHJcblx0XHRcdHN0cmluZyBqZXJzZXlOdW1iZXIgPSBzdHJpbmcuRm9ybWF0KFwiI3swOnh9LCBcIiwoYnl0ZSlvdXRwdXRSb21bbG9jYXRpb25dKTtcclxuXHRcdFx0aWYoamVyc2V5TnVtYmVyX2IpXHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChqZXJzZXlOdW1iZXIpO1xyXG5cdFx0XHRpZihhYmlsaXR5X2IpXHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChHZXRBYmlsaXR5U3RyaW5nKHRlYW0scG9zaXRpb24pKTtcclxuXHRcdFx0aW50W10gc2ltRGF0YSA9IEdldFBsYXllclNpbURhdGEodGVhbSxwb3NpdGlvbik7XHJcblx0XHRcdGlmKHNpbURhdGEgIT0gbnVsbCAmJiBzaW1EYXRhX2IpXHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZCggc3RyaW5nLkZvcm1hdChcIixbezB9XVwiLFN0cmluZ2lmeUFycmF5KHNpbURhdGEpKSk7XHJcblx0XHRcdHJldHVybiByZXN1bHQuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0S2V5KClcclxuXHRcdHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5Gb3JtYXQoXHJcbkBcIiMgVFNCVG9vbCBGb3J1bTogaHR0cHM6Ly90ZWNtb2Jvd2wub3JnL2ZvcnVtcy90b3BpYy8xMTEwNi10c2ItZWRpdG9yLXRzYnRvb2wtc3VwcmVtZS1zZWFzb24tZ2VuZXJhdG9yL1xyXG4jIEVkaXRpbmc6ICBUZWNtbyBTdXBlciBCb3dsIChuZXMpIFt7MH1dXHJcbiMgS2V5XHJcbiMgVEVBTTpcclxuIyAgbmFtZSwgU2ltRGF0YSAgMHg8b2ZmZW5zZT48ZGVmZW5zZT48b2ZmZW5zZSBwcmVmZXJlbmNlPlxyXG4jICBPZmZlbnNpdmUgcHJlZiB2YWx1ZXMgMC0zLiBcclxuIyAgICAgMCA9IExpdHRsZSBtb3JlIHJ1c2hpbmcsIDEgPSBIZWF2eSBSdXNoaW5nLFxyXG4jICAgICAyID0gbGl0dGxlIG1vcmUgcGFzc2luZywgMyA9IEhlYXZ5IFBhc3NpbmcuXHJcbiMgY3JlZGl0IHRvIEpzdG91dCBmb3IgZmlndXJpbmcgb3V0ICdvZmZlbnNlIHByZWZlcmVuY2UnXHJcbiMgLS0gUXVhcnRlcmJhY2tzOlxyXG4jIFBvc2l0aW9uLCBGaXJzdCBuYW1lIExhc3QgbmFtZSwgRmFjZUlELCBKZXJzZXkgbnVtYmVyLCBSUywgUlAsIE1TLCBIUCwgUFMsIFBDLCBQQSwgQVBCLCBbU2ltIHJ1c2gsIFNpbSBwYXNzLCBTaW0gUG9ja2V0XS5cclxuIyAtLSBPZmZlbnNpdmUgU2tpbGwgcGxheWVycyAobm9uLVFCKTpcclxuIyBQb3NpdGlvbiwgRmlyc3QgbmFtZSBMYXN0IG5hbWUsIEZhY2VJRCwgSmVyc2V5IG51bWJlciwgUlMsIFJQLCBNUywgSFAsIEJDLCBSRUMsIFtTaW0gcnVzaCwgU2ltIGNhdGNoLCBTaW0gcHVudCBSZXQsIFNpbSBraWNrIHJldF0uXHJcbiMgLS0gT2ZmZW5zaXZlIExpbmVtZW46XHJcbiMgUG9zaXRpb24sIEZpcnN0IG5hbWUgTGFzdCBuYW1lLCBGYWNlSUQsIEplcnNleSBudW1iZXIsIFJTLCBSUCwgTVMsIEhQXHJcbiMgLS0gRGVmZW5zaXZlIFBsYXllcnM6XHJcbiMgUG9zaXRpb24sIEZpcnN0IG5hbWUgTGFzdCBuYW1lLCBGYWNlSUQsIEplcnNleSBudW1iZXIsIFJTLCBSUCwgTVMsIEhQLCBQSSwgUVUsIFtTaW0gcGFzcyBydXNoLCBTaW0gY292ZXJhZ2VdLlxyXG4jIC0tIFB1bnRlcnMgYW5kIEtpY2tlcnM6XHJcbiMgUG9zaXRpb24sIEZpcnN0IG5hbWUgTGFzdCBuYW1lLCBGYWNlSUQsIEplcnNleSBudW1iZXIsIFJTLCBSUCwgTVMsIEhQLCBLQSwgQUtCLFsgU2ltIGtpY2tpbmcgYWJpbGl0eV0uXCIsXHJcbiAgICAgICAgICAgIHRoaXMuUm9tVmVyc2lvbik7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1QbGF5ZXJzKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtICkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRUZWFtUGxheWVyczo6IHRlYW0gezB9IGlzIGludmFsaWQuXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRTdHJpbmdCdWlsZGVyIHJlc3VsdCA9IG5ldyBTdHJpbmdCdWlsZGVyKDQxKiBwb3NpdGlvbk5hbWVzLkNvdW50KTtcclxuXHRcdFx0c3RyaW5nIHBvcztcclxuXHRcdFx0Ynl0ZSB0ZWFtU2ltRGF0YSA9IEdldFRlYW1TaW1EYXRhKHRlYW0pO1xyXG5cdFx0XHRzdHJpbmcgZGF0YSA9IFwiXCI7XHJcblx0XHRcdGlmKHRlYW1TaW1EYXRhIDwgMHhmKVxyXG5cdFx0XHRcdGRhdGEgPSBzdHJpbmcuRm9ybWF0KFwiMHswOnh9XCIsdGVhbVNpbURhdGEpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0ZGF0YSA9IHN0cmluZy5Gb3JtYXQoXCJ7MDp4fVwiLHRlYW1TaW1EYXRhKTtcclxuXHRcdFx0aWYoIFNob3dPZmZQcmVmIClcclxuXHRcdFx0XHRkYXRhICs9IEdldFRlYW1TaW1PZmZlbnNlUHJlZih0ZWFtKTtcclxuXHJcblx0XHRcdHN0cmluZyB0ZWFtU3RyaW5nID0gc3RyaW5nLkZvcm1hdChcIlRFQU0gPSB7MH0gU2ltRGF0YT0weHsxfVwiLHRlYW0sIGRhdGEpO1xyXG5cdFx0XHRyZXN1bHQuQXBwZW5kKCB0ZWFtU3RyaW5nICk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiggU2hvd1RlYW1Gb3JtYXRpb24gKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiLCB7MH1cIiwgR2V0VGVhbU9mZmVuc2l2ZUZvcm1hdGlvbih0ZWFtKSApKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXN1bHQuQXBwZW5kKFwiXFxuXCIpO1xyXG5cclxuXHRcdFx0aWYoIFNob3dQbGF5Ym9vayApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJ7MH1cXG5cIiwgR2V0UGxheWJvb2sodGVhbSkpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoU2hvd1RlYW1TdHJpbmdzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJURUFNX0FCQj17MH0sVEVBTV9DSVRZPXsxfSxURUFNX05BTUU9ezJ9XFxuXCIsIEdldFRlYW1BYmJyZXZpYXRpb24odGVhbUluZGV4KSwgR2V0VGVhbUNpdHkodGVhbUluZGV4KSwgR2V0VGVhbU5hbWUodGVhbUluZGV4KSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKFNob3dDb2xvcnMpXHJcblx0XHRcdHtcclxuLy9cdFx0XHRcdHJlc3VsdC5BcHBlbmQoc3RyaW5nLkZvcm1hdChcIkNPTE9SUyB7MH0sIHsxfVxcblwiLFxyXG4vL1x0XHRcdFx0XHRHZXRHYW1lVW5pZm9ybSh0ZWFtKSxcclxuLy9cdFx0XHRcdFx0R2V0Q2hhbXBDb2xvcnModGVhbSlcclxuLy9cdFx0XHRcdFx0KSk7XHJcbi8vXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJDT0xPUlMgezB9XFxuXCIsXHJcbi8vXHRcdFx0XHRcdEdldFVuaWZvcm1Vc2FnZSh0ZWFtKVxyXG4vL1x0XHRcdFx0XHQpKTtcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJDT0xPUlMgezB9LCB7MX0sIHsyfVxcblwiLFxyXG5cdFx0XHRcdFx0R2V0R2FtZVVuaWZvcm0odGVhbSksXHJcblx0XHRcdFx0XHRHZXRDaGFtcENvbG9ycyh0ZWFtKSxcclxuXHRcdFx0XHRcdEdldFVuaWZvcm1Vc2FnZSh0ZWFtKVxyXG5cdFx0XHRcdFx0KSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcihpbnQgaSA9MDsgaSA8IHBvc2l0aW9uTmFtZXMuQ291bnQ7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBvcyA9IHBvc2l0aW9uTmFtZXNbaV07XHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiezB9XFxuXCIsR2V0UGxheWVyRGF0YSh0ZWFtLHBvcyx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUpICkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJlc3VsdC5BcHBlbmQoIHN0cmluZy5Gb3JtYXQoXCJLUiwgezB9XFxuUFIsIHsxfVxcblwiLEdldEtpY2tSZXR1cm5lcih0ZWFtKSxHZXRQdW50UmV0dXJuZXIodGVhbSkpKTtcclxuXHRcdFx0cmVzdWx0LkFwcGVuZChcIlxcblwiKTtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5Ub1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdCNyZWdpb24gVGVhbSBzdHJpbmcgdGFibGUgc3R1ZmZcclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VGVhbU5hbWUoaW50IHRlYW1JbmRleClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldFZhbCA9IEdldFRlYW1TdHJpbmdUYWJsZVN0cmluZyh0ZWFtSW5kZXggKyA2NCk7XHJcblx0XHRcdHJldHVybiByZXRWYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1DaXR5KGludCB0ZWFtSW5kZXgpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXRWYWwgPSBHZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4KzMyKTtcclxuXHRcdFx0cmV0dXJuIHJldFZhbDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VGVhbUFiYnJldmlhdGlvbihpbnQgdGVhbUluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0VmFsID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCk7XHJcblx0XHRcdHJldHVybiByZXRWYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1TdHJpbmdUYWJsZVN0cmluZyhpbnQgc3RyaW5nSW5kZXgpXHJcblx0XHR7XHJcblx0XHRcdGludCBsZW5ndGggPSAwO1xyXG5cdFx0XHRpbnQgc3RyaW5nU3RhcnRpbmdMb2NhdGlvbiA9IEdldFRlYW1TdHJpbmdUYWJsZUxvY2F0aW9uKHN0cmluZ0luZGV4LCBvdXQgbGVuZ3RoKTtcclxuXHJcblx0XHRcdGNoYXJbXSBzdHJpbmdDaGFycyA9IG5ldyBjaGFyW2xlbmd0aF07XHJcblx0XHRcdGZvciAoaW50IGkgPSAwOyBpIDwgc3RyaW5nQ2hhcnMuTGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmdDaGFyc1tpXSA9IChjaGFyKU91dHB1dFJvbVtzdHJpbmdTdGFydGluZ0xvY2F0aW9uICsgaV07XHJcblx0XHRcdH1cclxuXHRcdFx0c3RyaW5nIHJldFZhbCA9IG5ldyBzdHJpbmcoc3RyaW5nQ2hhcnMpO1xyXG5cdFx0XHRyZXR1cm4gcmV0VmFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ1RlYW0nIHN0cmluZyB0YWJsZS4gVGhpcyBzdHJpbmcgdGFibGUgXHJcblx0XHQvLy8gY29udGFpbnMgdGhlIGNpdHkgYWJicmV2aWF0aW9ucywgY2l0eSBuYW1lcyBhbmQgdGVhbSBuYW1lcy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJzdHJpbmdJbmRleFwiPlRoZSBpbmRleCBvZiB0aGUgc3RyaW5nIHRvIGdldC48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwibGVuZ3RoXCI+b3V0IHBhcmFtIHN0b3JlcyB0aGUgbGVuZ3RoLjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+UmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlIHN0cmluZyBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LjwvcmV0dXJucz5cclxuXHRcdHByaXZhdGUgaW50IEdldFRlYW1TdHJpbmdUYWJsZUxvY2F0aW9uKGludCBzdHJpbmdJbmRleCwgb3V0IGludCBsZW5ndGgpXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtX3N0cmluZ190YWJsZV9sb2MgPSBHZXRUZWFtU3RyaW5nVGFibGVTdGFydCgpO1xyXG5cdFx0XHRpbnQgcG9pbnRlcl9sb2MgPSB0ZWFtX3N0cmluZ190YWJsZV9sb2MgKyAyICogc3RyaW5nSW5kZXg7XHJcblx0XHRcdGJ5dGUgYjEgPSBPdXRwdXRSb21bcG9pbnRlcl9sb2MgKyAxXTtcclxuXHRcdFx0Ynl0ZSBiMiA9IE91dHB1dFJvbVtwb2ludGVyX2xvY107XHJcblx0XHRcdGJ5dGUgYjMgPSBPdXRwdXRSb21bcG9pbnRlcl9sb2MgKyAzXTsgLy8gYjMgJiBiNCBmb3IgbGVuZ3RoXHJcblx0XHRcdGJ5dGUgYjQgPSBPdXRwdXRSb21bcG9pbnRlcl9sb2MgKyAyXTtcclxuXHRcdFx0bGVuZ3RoID0gKChiMyA8PCA4KSArIGI0KSAtICgoYjEgPDwgOCkgKyBiMik7XHJcblx0XHRcdGludCBwb2ludGVyVmFsID0gKGIxIDw8IDgpICsgYjI7XHJcblx0XHRcdHBvaW50ZXJWYWwgLT0gNDgxMjg7Ly8gdGFibGUgYWRqdXN0bWVudFxyXG5cdFx0XHRpbnQgc3RyaW5nU3RhcnRpbmdMb2NhdGlvbiA9IHRlYW1fc3RyaW5nX3RhYmxlX2xvYyArIHBvaW50ZXJWYWw7XHJcblx0XHRcdHJldHVybiBzdHJpbmdTdGFydGluZ0xvY2F0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKGludCBzdHJpbmdJbmRleCwgc3RyaW5nIG5ld1ZhbHVlKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQganVuayA9IDA7XHJcblx0XHRcdHN0cmluZyBvbGRWYWx1ZSA9IEdldFRlYW1TdHJpbmdUYWJsZVN0cmluZyhzdHJpbmdJbmRleCk7XHJcblx0XHRcdGlmIChvbGRWYWx1ZSA9PSBuZXdWYWx1ZSlcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdGludCBzaGlmdEFtb3VudCA9IG5ld1ZhbHVlLkxlbmd0aCAtIG9sZFZhbHVlLkxlbmd0aDtcclxuXHRcdFx0aWYgKHNoaWZ0QW1vdW50ICE9IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgY3VycmVudFBvaW50ZXJMb2NhdGlvbiA9IEdldFRlYW1TdHJpbmdUYWJsZVN0YXJ0KCkgKyAyICogc3RyaW5nSW5kZXg7XHJcblx0XHRcdFx0aW50IGxhc3RQb2ludGVyTG9jYXRpb24gPSBHZXRUZWFtU3RyaW5nVGFibGVTdGFydCgpICsgMiAqIE51bWJlck9mU3RyaW5nc0luVGVhbVN0cmluZ1RhYmxlO1xyXG5cdFx0XHRcdEFkanVzdERhdGFQb2ludGVycyhjdXJyZW50UG9pbnRlckxvY2F0aW9uLCBzaGlmdEFtb3VudCwgbGFzdFBvaW50ZXJMb2NhdGlvbik7XHJcblx0XHRcdFx0aW50IHN0YXJ0UG9zaXRpb24gPSBHZXRUZWFtU3RyaW5nVGFibGVMb2NhdGlvbihzdHJpbmdJbmRleCArIDEsIG91dCBqdW5rKSAtMSA7XHJcblx0XHRcdFx0aW50IGVuZFBvc2l0aW9uID0gMHgyMDAwMDtcclxuXHRcdFx0XHRpZiAoc2hpZnRBbW91bnQgPCAwKVxyXG5cdFx0XHRcdFx0U2hpZnREYXRhVXAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHNoaWZ0QW1vdW50ID4gMClcclxuXHRcdFx0XHRcdFNoaWZ0RGF0YURvd24oc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGxheSBkb3duIHRoZSB2YWx1ZVxyXG5cdFx0XHRpbnQgc3RhcnRMb2MgPSBHZXRUZWFtU3RyaW5nVGFibGVMb2NhdGlvbihzdHJpbmdJbmRleCwgb3V0IHNoaWZ0QW1vdW50KTtcclxuXHRcdFx0Zm9yIChpbnQgaSA9IDA7IGkgPCBuZXdWYWx1ZS5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdE91dHB1dFJvbVtzdGFydExvYyArIGldID0gKGJ5dGUpbmV3VmFsdWVbaV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBpbnQgTnVtYmVyT2ZTdHJpbmdzSW5UZWFtU3RyaW5nVGFibGUgeyBnZXQgeyByZXR1cm4gMTE5OyB9IH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1BYmJyZXZpYXRpb24oaW50IHRlYW1JbmRleCwgc3RyaW5nIGFiYilcclxuXHRcdHtcclxuXHRcdFx0aWYgKGFiYiAhPSBudWxsICYmIGFiYi5MZW5ndGggPT0gNClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFNldFRlYW1TdHJpbmdUYWJsZVN0cmluZyh0ZWFtSW5kZXgsIGFiYik7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXHJcblx0XHRcdFx0XHRcIkVycm9yIHNldHRpbmcgdGVhbSBhYmJyZXZpYXRpb24sIHRlYW1JbmRleD17MH07IHZhbHVlIGxlbmd0aCBtdXN0ID09IDQ7IHsxfVwiLFxyXG5cdFx0XHRcdFx0dGVhbUluZGV4LCBhYmIpKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1OYW1lKGludCB0ZWFtSW5kZXgsIHN0cmluZyBuYW1lKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBpZihuYW1lLkxlbmd0aCA+IDEpXHJcblx0XHRcdCAgICBTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4ICsgNjQsIG5hbWUpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihcIidTZXRUZWFtQ2l0eSc6IHRlYW0gbmFtZSBtdXN0IG5vdCBiZSBlbXB0eVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1DaXR5KGludCB0ZWFtSW5kZXgsIHN0cmluZyBjaXR5KVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBpZiAoY2l0eS5MZW5ndGggPiAxKVxyXG4gICAgICAgICAgICAgICAgU2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCArIDMyLCBjaXR5KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuQWRkRXJyb3IoXCInU2V0VGVhbUNpdHknOiBjaXR5IG5hbWUgbXVzdCBub3QgYmUgZW1wdHlcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldFRlYW1TdHJpbmdUYWJsZVN0YXJ0KClcclxuXHRcdHtcclxuXHRcdFx0aW50IHRlYW1fc3RyaW5nX3RhYmxlX2xvYyA9IDB4MWZjMDAgKyAweDEwOyAvLyBuZWVkIHRvIGFkZCAweDEwIGxhdGVyIHRvIGFjY291bnQgZm9yIHRoZSBORVMgaGVhZGVyXHJcblx0XHRcdHJldHVybiB0ZWFtX3N0cmluZ190YWJsZV9sb2M7XHJcblx0XHR9XHJcblx0XHQjZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRBbGwoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRBbGwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0UHJvQm93bFBsYXllcnMoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRQcm9Cb3dsUGxheWVycygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRTY2hlZHVsZShpbnQgc2Vhc29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEdldFNjaGVkdWxlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRBbGwoKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgdGVhbTtcclxuXHRcdFx0U3RyaW5nQnVpbGRlciBhbGwgPSBuZXcgU3RyaW5nQnVpbGRlcigzMCo0MSpwb3NpdGlvbk5hbWVzLkNvdW50KTtcclxuXHRcdFx0c3RyaW5nIHllYXIgPSBzdHJpbmcuRm9ybWF0KFwiWUVBUj17MH1cXG5cIixHZXRZZWFyKCkpO1xyXG5cdFx0XHRhbGwuQXBwZW5kKHllYXIpO1xyXG5cdFx0XHRmb3IoaW50IGkgPSAwOyBpIDwgdGVhbXMuQ291bnQ7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRlYW0gPSB0ZWFtc1tpXTtcclxuXHRcdFx0XHRhbGwuQXBwZW5kKEdldFRlYW1QbGF5ZXJzKHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGFsbC5Ub1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBHZXRzIHRoZSBwb2ludCBpbiB0aGUgcGxheWVyIG51bWJlciBuYW1lIGRhdGEgdGhhdCBhIHBsYXllcidzIGRhdGEgYmVnaW5zLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIGludCBHZXREYXRhUG9zaXRpb24oc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSB8fCAhSXNWYWxpZFBvc2l0aW9uKCBwb3NpdGlvbiApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEV4Y2VwdGlvbihcclxuXHRcdFx0XHRcdHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0RGF0YVBvc2l0aW9uOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCB0ZWFtSW5kZXggICAgID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHQvLyB0aGUgcGxheWVycyB0b3RhbCBpbmRleCAoUUIxIGJpbGxzPTAsIFFCMiBiaWxscz0yIC4uLilcclxuXHRcdFx0aW50IGd1eSA9IHRlYW1JbmRleCAqIHBvc2l0aW9uTmFtZXMuQ291bnQgKyBwb3NpdGlvbkluZGV4O1xyXG5cdFx0XHRpbnQgcG9pbnRlckxvY2F0aW9uID0gbmFtZVBvaW50ZXJzU3RhcnQgKyAoMiAqIGd1eSk7XHJcblx0XHRcdGJ5dGUgbG93Qnl0ZSA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb25dO1xyXG5cdFx0XHRpbnQgIGhpQnl0ZSAgPSBvdXRwdXRSb21bcG9pbnRlckxvY2F0aW9uKzFdO1xyXG5cdFx0XHRoaUJ5dGUgPSAgaGlCeXRlIDw8IDg7XHJcblx0XHRcdGhpQnl0ZSA9IGhpQnl0ZSArIGxvd0J5dGU7XHJcblxyXG5cdFx0XHQvL2ludCByZXQgPSBoaUJ5dGUgLSAweDgwMDAgKyAweDAxMDtcclxuXHRcdFx0aW50IHJldCA9IGhpQnl0ZSArIGRhdGFQb3NpdGlvbk9mZnNldDtcclxuXHRcdFx0cmV0dXJuICByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEdldCB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIGd1eSBBRlRFUiB0aGUgb25lIHBhc3NlZCB0byB0aGlzIG1ldGhvZC5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgdmlydHVhbCBpbnQgR2V0TmV4dERhdGFQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXROZXh0RGF0YVBvc2l0aW9uOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgdGkgPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwaSA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRwaSsrO1xyXG5cdFx0XHQvL2lmKHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHRpZiggcG9zaXRpb24gPT0gcG9zaXRpb25OYW1lc1twb3NpdGlvbk5hbWVzLkNvdW50LTFdIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRpKys7XHJcblx0XHRcdFx0cGk9MDtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2lmKHRlYW0gPT0gXCJmYWxjb25zXCIgJiYgcG9zaXRpb24gPT0gXCJQXCIgKVxyXG5cdFx0XHRpZih0aSA9PSAyOCAmJiBwb3NpdGlvbiA9PSBwb3NpdGlvbk5hbWVzW3Bvc2l0aW9uTmFtZXMuQ291bnQtMV0gKVxyXG5cdFx0XHR7IC8vIFRPRE86IGZhbGNvbnMnIHB1bnRlciBjYXNlXHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHRcdC8vXHRcdFx0XHRyZXR1cm4gbGFzdFBvaW50ZXI7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBHZXREYXRhUG9zaXRpb24odGVhbXNbdGldLHBvc2l0aW9uTmFtZXNbcGldKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgdmlydHVhbCBpbnQgR2V0UG9pbnRlclBvc2l0aW9uKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdC8vIFRPRE86IEZpeCBGYWxjb25zIERFRkVDVCFcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSB8fCAhSXNWYWxpZFBvc2l0aW9uKCBwb3NpdGlvbiApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEV4Y2VwdGlvbihcclxuXHRcdFx0XHRcdHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0UG9pbnRlclBvc2l0aW9uOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCB0ZWFtSW5kZXggICAgID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRpbnQgcGxheWVyU3BvdCAgICA9IHRlYW1JbmRleCAqICBwb3NpdGlvbk5hbWVzLkNvdW50ICsgcG9zaXRpb25JbmRleDtcclxuXHRcdFx0Ly9pZih0ZWFtID09IFwiZmFsY29uc1wiICYmIHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHRpZih0ZWFtID09IHRlYW1zW3RlYW1zLkNvdW50LTFdICYmIHBvc2l0aW9uID09IHBvc2l0aW9uTmFtZXNbcG9zaXRpb25OYW1lcy5Db3VudC0xXSApXHJcblx0XHRcdFx0Ly9yZXR1cm4gMHg2ZDY7XHJcblx0XHRcdFx0cmV0dXJuIGxhc3RQbGF5ZXJOYW1lUG9pbnRlci0yOyAvL1RPRE86IGNoZWNrIHRoaXNcclxuXHRcdFx0aWYocG9zaXRpb25JbmRleCA8IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFBvc2l0aW9uICd7MH0nIGRvZXMgbm90IGV4aXN0LiBWYWxpZCBwb3NpdGlvbnMgYXJlOlwiLHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0Zm9yKGludCBpID0xOyBpIDw9IHBvc2l0aW9uTmFtZXMuQ291bnQ7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5Xcml0ZUVycm9yKHN0cmluZy5Gb3JtYXQoXCJ7MH1cXHRcIiwgcG9zaXRpb25OYW1lc1tpLTFdKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgcmV0ID0gbmFtZVBvaW50ZXJzU3RhcnQgKyAoMipwbGF5ZXJTcG90KTtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgcGxheWVyIGRhdGEgKGplcnNleSBudW1iZXIsIHBsYXllciBuYW1lKSBpbiB0aGUgZGF0YSBzZWdtZW50LlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj5UaGUgdGVhbSB0aGUgcGxheWVyIGlzIGFzc2lnbmVkIHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPlRoZSBwb3NpdGlvbiB0aGUgcGxheWVyIGlzIGFzc2lnbmVkIHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJieXRlc1wiPlRoZSBwbGF5ZXIncyBudW1iZXIgYW5kIG5hbWUgZGF0YS4gPC9wYXJhbT5cclxuXHRcdHB1YmxpYyB2b2lkIFVwZGF0ZVBsYXllckRhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgYnl0ZVtdIGJ5dGVzLCBpbnQgY2hhbmdlKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBVcGRhdGVQbGF5ZXJEYXRhOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCBieXRlcyA9PSBudWxsIClcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRpbnQgZGF0YVN0YXJ0ICAgICA9IHRoaXMuR2V0RGF0YVBvc2l0aW9uKHRlYW0scG9zaXRpb24pO1xyXG5cdFx0XHQvLyBuZWVkIHRvIGRvIGEgY2xlYXZlciBzcGxpY2UgaGVyZS5cclxuXHRcdFx0U2hpZnREYXRhQWZ0ZXIodGVhbSxwb3NpdGlvbiwgY2hhbmdlKTtcclxuXHRcdFx0aW50IGogPSAwO1xyXG5cdFx0XHRmb3IoaW50IGkgPSBkYXRhU3RhcnQ7IGogPCBieXRlcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHRvdXRwdXRSb21baV09IGJ5dGVzW2orK107XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgdm9pZCBTaGlmdERhdGFBZnRlcihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBpbnQgc2hpZnRBbW91bnQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNoaWZ0RGF0YUFmdGVyOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZih0ZWFtID09IHRlYW1zW3RlYW1zLkNvdW50LTFdICYmIHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdGludCBlbmRQb3NpdGlvbiA9IDB4MDMwMEY7IC8vKGVuZCBvZiBuYW1lLW51bWJlciBzZWdtZW50KVxyXG5cdFx0XHR3aGlsZShvdXRwdXRSb21bZW5kUG9zaXRpb25dID09IDB4ZmYpXHJcblx0XHRcdFx0ZW5kUG9zaXRpb24tLTtcclxuXHJcblx0XHRcdGVuZFBvc2l0aW9uKys7Ly8gaXQgd2FzIHNldCB0byBmYWxjb25zIHB1bnRlcidzIGxhc3QgbGV0dGVyXHJcblxyXG5cdFx0XHQvL2ludCBzdGFydFBvc2l0aW9uID0gR2V0RGF0YVBvc2l0aW9uKHRlYW1zW3RlYW1JbmRleF0sIHBvc2l0aW9uTmFtZXNbcG9zaXRpb25JbmRleF0pO1xyXG5cdFx0XHRpbnQgc3RhcnRQb3NpdGlvbiA9IHRoaXMuR2V0TmV4dERhdGFQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuXHRcdFx0aWYoc2hpZnRBbW91bnQgPCAwKVxyXG5cdFx0XHRcdFNoaWZ0RGF0YVVwKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBzaGlmdEFtb3VudCwgb3V0cHV0Um9tKTtcclxuXHRcdFx0ZWxzZSBpZihzaGlmdEFtb3VudCA+IDApXHJcblx0XHRcdFx0U2hpZnREYXRhRG93bihzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgc2hpZnRBbW91bnQsIG91dHB1dFJvbSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZvaWQgU2hpZnREYXRhVXAoaW50IHN0YXJ0UG9zLCBpbnQgZW5kUG9zLCBpbnQgc2hpZnRBbW91bnQsIGJ5dGVbXSBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggc3RhcnRQb3MgIDwgMCB8fCAgZW5kUG9zIDwgMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTaGlmdERhdGFVcDo6IGVpdGhlciBzdGFydFBvcyB7MH0gb3IgZW5kUG9zIHsxfSBpcyBpbnZhbGlkLlwiLCBzdGFydFBvcywgZW5kUG9zKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGNvbW1lbnRlZCBvdXQgY29kZSB3YXMgaW4gcmVsZWFzZSAxXHJcblx0XHRcdC8vaW50IGVuZCA9IGVuZFBvcytzaGlmdEFtb3VudDtcclxuXHRcdFx0aW50IGk7XHJcblx0XHRcdGlmKHNoaWZ0QW1vdW50ID4gMCApXHJcblx0XHRcdFx0Q29uc29sZS5Xcml0ZUxpbmUoXCJwb3NpdGl2ZSBzaGlmdCBhbW91bnQgaW4gU2hpZnREYXRhVXBcIik7XHJcblxyXG5cdFx0XHRmb3IoaSA9IHN0YXJ0UG9zIC8qKyBzaGlmdEFtb3VudCovOyBpIDw9IGVuZFBvcyAvKmVuZCovOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhW2krc2hpZnRBbW91bnRdID0gZGF0YVtpXTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvKmktLTtcclxuXHRcdFx0Zm9yKGludCBqPXNoaWZ0QW1vdW50OyBqIDwgMDsgaisrKSBcclxuXHRcdFx0XHRkYXRhW2krK10gPSAweGZmOyAqL1xyXG5cclxuXHRcdFx0aSs9IHNoaWZ0QW1vdW50O1xyXG5cdFx0XHR3aGlsZSggb3V0cHV0Um9tW2ldICE9IDB4ZmYgJiYgaSA8IDB4MzAwZilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG91dHB1dFJvbVtpXSA9IDB4ZmY7XHJcblx0XHRcdFx0aSsrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCB2b2lkIFNoaWZ0RGF0YURvd24oaW50IHN0YXJ0UG9zLCBpbnQgZW5kUG9zLCBpbnQgc2hpZnRBbW91bnQsIGJ5dGVbXSBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggc3RhcnRQb3MgIDwgMCB8fCAgZW5kUG9zIDwgMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTaGlmdERhdGFEb3duOjogZWl0aGVyIHN0YXJ0UG9zIHswfSBvciBlbmRQb3MgezF9IGlzIGludmFsaWQuXCIsXHJcblx0XHRcdFx0XHRzdGFydFBvcywgZW5kUG9zKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcihpbnQgaSA9IGVuZFBvcyArIHNoaWZ0QW1vdW50OyBpID4gc3RhcnRQb3MgO2ktLSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGFbaV0gPSBkYXRhW2ktc2hpZnRBbW91bnRdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHByb3RlY3RlZCBieXRlW10gR2V0RGF0YUFmdGVyKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldERhdGFBZnRlcjo6IGVpdGhlciB0ZWFtIHswfSBvciBwb3NpdGlvbiB7MX0gaXMgaW52YWxpZC5cIiwgdGVhbSwgcG9zaXRpb24pKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYodGVhbSA9PSB0ZWFtc1t0ZWFtcy5Db3VudC0xXSAmJiBwb3NpdGlvbiA9PSBcIlBcIilcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHRcdGludCB0ZWFtSW5kZXggICAgID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRwb3NpdGlvbkluZGV4Kys7XHJcblx0XHRcdGlmKHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHR7IC8vIGlmIGl0J3MgdGhlIGxhc3QgZ3V5IG9uIHRoZSB0ZWFtLlxyXG5cdFx0XHRcdHRlYW1JbmRleCsrO1xyXG5cdFx0XHRcdHBvc2l0aW9uSW5kZXggPSAwO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCBlbmRQb3NpdGlvbiA9IDB4MDMwMEY7IC8vKGVuZCBvZiBuYW1lLW51bWJ1ciBzZWdtZW50KVxyXG5cdFx0XHR3aGlsZShvdXRwdXRSb21bZW5kUG9zaXRpb25dID09IDB4ZmYpXHJcblx0XHRcdFx0ZW5kUG9zaXRpb24tLTtcclxuXHJcblx0XHRcdGVuZFBvc2l0aW9uKys7Ly8gaXQgd2FzIHNldCB0byBmYWxjb25zIHB1bnRlcidzIGxhc3QgbGV0dGVyXHJcblx0XHRcdGludCBzdGFydFBvc2l0aW9uID0gR2V0RGF0YVBvc2l0aW9uKHRlYW1zW3RlYW1JbmRleF0sIHBvc2l0aW9uTmFtZXNbcG9zaXRpb25JbmRleF0pO1xyXG5cdFx0XHRieXRlW10gcmV0Qnl0ZXMgPSBuZXcgYnl0ZVtlbmRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb25dO1xyXG5cclxuXHRcdFx0aW50IGogPSAwO1xyXG5cdFx0XHRmb3IoaW50IGkgPSBzdGFydFBvc2l0aW9uOyBpIDwgZW5kUG9zaXRpb24rMTsgaSsrKVxyXG5cdFx0XHRcdHJldEJ5dGVzW2orK10gPSBvdXRwdXRSb21baV07XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0Qnl0ZXM7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBpbnQgR2V0VGVhbUluZGV4KHN0cmluZyB0ZWFtTmFtZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRpZih0ZWFtTmFtZS5Ub0xvd2VyKCkgPT0gXCJudWxsXCIpXHJcblx0XHRcdFx0cmV0dXJuIDI1NTtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IHRlYW1zLkNvdW50OyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih0ZWFtc1tpXSA9PSB0ZWFtTmFtZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIHRlYW0gc3BlY2lmaWVkIGJ5IHRoZSBpbmRleCBwYXNzZWQuICgwPSBiaWxscykuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiaW5kZXhcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPnRlYW0gbmFtZSBvbiBzdWNjZXNzLCBudWxsIG9uIGZhaWx1cmU8L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRUZWFtRnJvbUluZGV4KGludCBpbmRleClcclxuXHRcdHtcclxuXHRcdFx0aWYoaW5kZXggPT0gMjU1KVxyXG5cdFx0XHRcdHJldHVybiBcIm51bGxcIjtcclxuXHRcdFx0aWYoaW5kZXggPCAwIHx8IGluZGV4ID4gdGVhbXMuQ291bnQtMSlcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0cmV0dXJuIHRlYW1zW2luZGV4XTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25OYW1lXCI+IGxpa2UgJ1FCMScsICdLJywnUCcgLi4uIDwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHJvdGVjdGVkIGludCBHZXRQb3NpdGlvbkluZGV4KHN0cmluZyBwb3NpdGlvbk5hbWUpXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAtMTtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IHBvc2l0aW9uTmFtZXMuQ291bnQ7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHBvc2l0aW9uTmFtZXNbaV0gPT0gcG9zaXRpb25OYW1lKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJldCA9IGk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJxYlwiPkVpdGhlciAnUUIxJyBvciAnUUIyJzwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRRQkFiaWxpdGllcyhzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBxYiwgXHJcblx0XHRcdGludCBydW5uaW5nU3BlZWQsIFxyXG5cdFx0XHRpbnQgcnVzaGluZ1Bvd2VyLCBcclxuXHRcdFx0aW50IG1heFNwZWVkLFxyXG5cdFx0XHRpbnQgaGl0dGluZ1Bvd2VyLFxyXG5cdFx0XHRpbnQgcGFzc2luZ1NwZWVkLFxyXG5cdFx0XHRpbnQgcGFzc0NvbnRyb2wsXHJcblx0XHRcdGludCBhY2N1cmFjeSwgXHJcblx0XHRcdGludCBhdm9pZFBhc3NCbG9ja1xyXG5cdFx0XHQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihxYiAhPSBcIlFCMVwiICYmIHFiICE9IFwiUUIyXCIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIENhbm5vdCBzZXQgcWIgYWJsaXRpZXMgZm9yIHswfVwiLHFiKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJ1bm5pbmdTcGVlZCA9IEdldEFiaWxpdHkocnVubmluZ1NwZWVkKTtcclxuXHRcdFx0cnVzaGluZ1Bvd2VyID0gR2V0QWJpbGl0eShydXNoaW5nUG93ZXIpO1xyXG5cdFx0XHRtYXhTcGVlZCA9IEdldEFiaWxpdHkobWF4U3BlZWQpO1xyXG5cdFx0XHRoaXR0aW5nUG93ZXIgPSBHZXRBYmlsaXR5KGhpdHRpbmdQb3dlcik7XHJcblx0XHRcdHBhc3NpbmdTcGVlZCA9IEdldEFiaWxpdHkocGFzc2luZ1NwZWVkKTtcclxuXHRcdFx0cGFzc0NvbnRyb2wgPSBHZXRBYmlsaXR5KHBhc3NDb250cm9sKTtcclxuXHRcdFx0YWNjdXJhY3kgPSBHZXRBYmlsaXR5KGFjY3VyYWN5KTtcclxuXHRcdFx0YXZvaWRQYXNzQmxvY2sgPSBHZXRBYmlsaXR5KGF2b2lkUGFzc0Jsb2NrKTtcclxuXHJcblx0XHRcdGlmKCAhSXNWYWxpZEFiaWxpdHkocnVubmluZ1NwZWVkKSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHJ1c2hpbmdQb3dlcikgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShtYXhTcGVlZCkgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGhpdHRpbmdQb3dlcikgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHBhc3NpbmdTcGVlZCkgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHBhc3NDb250cm9sKSB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoYWNjdXJhY3kpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoYXZvaWRQYXNzQmxvY2spIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgQWJpbGl0aWVzIGZvciB7MH0gb24gezF9IHdlcmUgbm90IHNldC5cIixxYix0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scWIscnVubmluZ1NwZWVkLHJ1c2hpbmdQb3dlcixtYXhTcGVlZCxoaXR0aW5nUG93ZXIscGFzc2luZ1NwZWVkLHBhc3NDb250cm9sKTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHBvc0luZGV4ID0gR2V0UG9zaXRpb25JbmRleChxYik7XHJcblx0XHRcdC8vaW50IGxvY2F0aW9uID0gKHRlYW1JbmRleCAqIHRlYW1BYmlsaXR5T2Zmc2V0KSsgYWJpbGl0eU9mZnNldHNbcG9zSW5kZXhdICsgYmlsbHNRQjFBYmlsaXR5U3RhcnQ7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IEdldEF0dHJpYnV0ZUxvY2F0aW9uKHRlYW1JbmRleCwgcG9zSW5kZXgpO1xyXG5cdFx0XHRpbnQgbGFzdEJ5dGUgPSBhY2N1cmFjeSA8PCA0O1xyXG5cdFx0XHRsYXN0Qnl0ZSArPSBhdm9pZFBhc3NCbG9jaztcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzRdID0gKGJ5dGUpIGxhc3RCeXRlO1xyXG5cdFx0XHRsYXN0Qnl0ZSA9IHBhc3NpbmdTcGVlZCA8PCA0O1xyXG5cdFx0XHRsYXN0Qnl0ZSArPSBwYXNzQ29udHJvbDtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzNdID0gKGJ5dGUpIGxhc3RCeXRlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldFNraWxsUGxheWVyQWJpbGl0aWVzKHN0cmluZyB0ZWFtLCBcclxuXHRcdFx0c3RyaW5nIHBvcywgXHJcblx0XHRcdGludCBydW5uaW5nU3BlZWQsIFxyXG5cdFx0XHRpbnQgcnVzaGluZ1Bvd2VyLCBcclxuXHRcdFx0aW50IG1heFNwZWVkLFxyXG5cdFx0XHRpbnQgaGl0dGluZ1Bvd2VyLFxyXG5cdFx0XHRpbnQgYmFsbENvbnRyb2wsXHJcblx0XHRcdGludCByZWNlcHRpb25zXHJcblx0XHRcdClcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIHRlYW0gezB9IGlzIGludmFsaWRcIix0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihwb3MgIT0gXCJSQjFcIiAmJiBwb3MgIT0gXCJSQjJcIiYmIHBvcyAhPSBcIlJCM1wiJiYgcG9zICE9IFwiUkI0XCIgJiZcclxuXHRcdFx0XHRwb3MgIT0gXCJXUjFcIiAmJiBwb3MgIT0gXCJXUjJcIiYmIHBvcyAhPSBcIldSM1wiJiYgcG9zICE9IFwiV1I0XCIgXHJcblx0XHRcdFx0JiYgcG9zICE9IFwiVEUxXCImJiBwb3MgIT0gXCJURTJcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgQ2Fubm90IHNldCBza2lsbCBwbGF5ZXIgYWJsaXRpZXMgZm9yIHswfS5cIixwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0cnVubmluZ1NwZWVkID0gR2V0QWJpbGl0eShydW5uaW5nU3BlZWQpO1xyXG5cdFx0XHRydXNoaW5nUG93ZXIgPSBHZXRBYmlsaXR5KHJ1c2hpbmdQb3dlcik7XHJcblx0XHRcdG1heFNwZWVkID0gR2V0QWJpbGl0eShtYXhTcGVlZCk7XHJcblx0XHRcdGhpdHRpbmdQb3dlciA9IEdldEFiaWxpdHkoaGl0dGluZ1Bvd2VyKTtcclxuXHRcdFx0YmFsbENvbnRyb2wgPSBHZXRBYmlsaXR5KGJhbGxDb250cm9sKTtcclxuXHRcdFx0cmVjZXB0aW9ucyA9IEdldEFiaWxpdHkocmVjZXB0aW9ucyk7XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRBYmlsaXR5KHJ1bm5pbmdTcGVlZCkgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShydXNoaW5nUG93ZXIpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkobWF4U3BlZWQpICAgICB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoaGl0dGluZ1Bvd2VyKSB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkocmVjZXB0aW9ucyApICB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoYmFsbENvbnRyb2wpICAgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgSW52YWxpZCBhdHRyaWJ1dGUuIEFiaWxpdGllcyBmb3IgezB9IG9uIHsxfSB3ZXJlIG5vdCBzZXQuXCIscG9zLHRlYW0pKTtcclxuXHRcdFx0XHRQcmludFZhbGlkQWJpbGl0aWVzKCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFNhdmVBYmlsaXRpZXModGVhbSxwb3MscnVubmluZ1NwZWVkLHJ1c2hpbmdQb3dlcixtYXhTcGVlZCxoaXR0aW5nUG93ZXIsYmFsbENvbnRyb2wsIHJlY2VwdGlvbnMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldEtpY2tQbGF5ZXJBYmlsaXRpZXMoc3RyaW5nIHRlYW0sIFxyXG5cdFx0XHRzdHJpbmcgcG9zLCBcclxuXHRcdFx0aW50IHJ1bm5pbmdTcGVlZCwgXHJcblx0XHRcdGludCBydXNoaW5nUG93ZXIsIFxyXG5cdFx0XHRpbnQgbWF4U3BlZWQsXHJcblx0XHRcdGludCBoaXR0aW5nUG93ZXIsXHJcblx0XHRcdGludCBraWNraW5nQWJpbGl0eSxcclxuXHRcdFx0aW50IGF2b2lkS2lja0Jsb2NrXHJcblx0XHRcdClcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIHRlYW0gezB9IGlzIGludmFsaWRcIix0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihwb3MgIT0gXCJLXCIgJiYgcG9zICE9IFwiUFwiIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJDYW5ub3Qgc2V0IGtpY2sgcGxheWVyIGFibGl0aWVzIGZvciB7MH0uXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJ1bm5pbmdTcGVlZCA9IEdldEFiaWxpdHkocnVubmluZ1NwZWVkKTtcclxuXHRcdFx0cnVzaGluZ1Bvd2VyID0gR2V0QWJpbGl0eShydXNoaW5nUG93ZXIpO1xyXG5cdFx0XHRtYXhTcGVlZCA9IEdldEFiaWxpdHkobWF4U3BlZWQpO1xyXG5cdFx0XHRoaXR0aW5nUG93ZXIgPSBHZXRBYmlsaXR5KGhpdHRpbmdQb3dlcik7XHJcblx0XHRcdGtpY2tpbmdBYmlsaXR5ID0gR2V0QWJpbGl0eShraWNraW5nQWJpbGl0eSk7XHJcblx0XHRcdGF2b2lkS2lja0Jsb2NrID0gR2V0QWJpbGl0eShhdm9pZEtpY2tCbG9jayk7XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRBYmlsaXR5KHJ1bm5pbmdTcGVlZCkgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShydXNoaW5nUG93ZXIpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkobWF4U3BlZWQpICAgICB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoaGl0dGluZ1Bvd2VyKSB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoa2lja2luZ0FiaWxpdHkgKSAgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGF2b2lkS2lja0Jsb2NrKSAgICApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiQWJpbGl0aWVzIGZvciB7MH0gb24gezF9IHdlcmUgbm90IHNldC5cIixwb3MsdGVhbSkpO1xyXG5cdFx0XHRcdFByaW50VmFsaWRBYmlsaXRpZXMoKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0U2F2ZUFiaWxpdGllcyh0ZWFtLHBvcyxydW5uaW5nU3BlZWQscnVzaGluZ1Bvd2VyLG1heFNwZWVkLGhpdHRpbmdQb3dlcixraWNraW5nQWJpbGl0eSwgYXZvaWRLaWNrQmxvY2spO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyhzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBwb3MsIFxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBcclxuXHRcdFx0aW50IHJ1c2hpbmdQb3dlciwgXHJcblx0XHRcdGludCBtYXhTcGVlZCxcclxuXHRcdFx0aW50IGhpdHRpbmdQb3dlcixcclxuXHRcdFx0aW50IHBhc3NSdXNoLFxyXG5cdFx0XHRpbnQgaW50ZXJjZXB0aW9uc1xyXG5cdFx0XHQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9zICE9IFwiUkVcIiAmJiBwb3MgIT0gXCJOVFwiJiYgcG9zICE9IFwiTEVcIiYmIHBvcyAhPSBcIlJPTEJcIiAmJlxyXG5cdFx0XHRcdHBvcyAhPSBcIlJJTEJcIiAmJiBwb3MgIT0gXCJMSUxCXCImJiBwb3MgIT0gXCJMT0xCXCImJiBwb3MgIT0gXCJSQ0JcIiBcclxuXHRcdFx0XHQmJiBwb3MgIT0gXCJMQ0JcIiYmIHBvcyAhPSBcIlNTXCImJiBwb3MgIT0gXCJGU1wiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBzZXQgZGVmZW5zaXZlIHBsYXllciBhYmxpdGllcyBmb3IgezB9LlwiLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRydW5uaW5nU3BlZWQgPSBHZXRBYmlsaXR5KHJ1bm5pbmdTcGVlZCk7XHJcblx0XHRcdHJ1c2hpbmdQb3dlciA9IEdldEFiaWxpdHkocnVzaGluZ1Bvd2VyKTtcclxuXHRcdFx0bWF4U3BlZWQgPSBHZXRBYmlsaXR5KG1heFNwZWVkKTtcclxuXHRcdFx0aGl0dGluZ1Bvd2VyID0gR2V0QWJpbGl0eShoaXR0aW5nUG93ZXIpO1xyXG5cdFx0XHRwYXNzUnVzaCA9IEdldEFiaWxpdHkocGFzc1J1c2gpO1xyXG5cdFx0XHRpbnRlcmNlcHRpb25zID0gR2V0QWJpbGl0eShpbnRlcmNlcHRpb25zKTtcclxuXHJcblx0XHRcdGlmKCAhSXNWYWxpZEFiaWxpdHkocnVubmluZ1NwZWVkKSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHJ1c2hpbmdQb3dlcikgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShtYXhTcGVlZCkgICAgIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShoaXR0aW5nUG93ZXIpIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShwYXNzUnVzaCApICAgIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShpbnRlcmNlcHRpb25zKSAgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJBYmlsaXRpZXMgZm9yIHswfSBvbiB7MX0gd2VyZSBub3Qgc2V0LlwiLHBvcyx0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scG9zLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLHBhc3NSdXNoLCBpbnRlcmNlcHRpb25zKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRPTFBsYXllckFiaWxpdGllcyhzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBwb3MsIFxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBcclxuXHRcdFx0aW50IHJ1c2hpbmdQb3dlciwgXHJcblx0XHRcdGludCBtYXhTcGVlZCxcclxuXHRcdFx0aW50IGhpdHRpbmdQb3dlciApXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9zICE9IFwiQ1wiICYmIHBvcyAhPSBcIlJHXCImJiBwb3MgIT0gXCJMR1wiJiYgcG9zICE9IFwiUlRcIiAmJlxyXG5cdFx0XHRcdHBvcyAhPSBcIkxUXCIgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBzZXQgT0wgcGxheWVyIGFibGl0aWVzIGZvciB7MH0uXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJ1bm5pbmdTcGVlZCA9IEdldEFiaWxpdHkocnVubmluZ1NwZWVkKTtcclxuXHRcdFx0cnVzaGluZ1Bvd2VyID0gR2V0QWJpbGl0eShydXNoaW5nUG93ZXIpO1xyXG5cdFx0XHRtYXhTcGVlZCA9IEdldEFiaWxpdHkobWF4U3BlZWQpO1xyXG5cdFx0XHRoaXR0aW5nUG93ZXIgPSBHZXRBYmlsaXR5KGhpdHRpbmdQb3dlcik7XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRBYmlsaXR5KHJ1bm5pbmdTcGVlZCkgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShydXNoaW5nUG93ZXIpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkobWF4U3BlZWQpICAgICB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoaGl0dGluZ1Bvd2VyKSAgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJBYmlsaXRpZXMgZm9yIHswfSBvbiB7MX0gd2VyZSBub3Qgc2V0LlwiLHBvcyx0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fS8vR2V0QWJpbGl0eVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scG9zLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLC0xLC0xKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgU2F2ZUFiaWxpdGllcyhzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcyxcclxuXHRcdFx0aW50IHJ1bm5pbmdTcGVlZCwgXHJcblx0XHRcdGludCBydXNoaW5nUG93ZXIsIFxyXG5cdFx0XHRpbnQgbWF4U3BlZWQsXHJcblx0XHRcdGludCBoaXR0aW5nUG93ZXIsXHJcblx0XHRcdGludCBiYyxcclxuXHRcdFx0aW50IHJlYylcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTYXZlQWJpbGl0aWVzOjogdGVhbSB7MH0gaXMgaW52YWxpZFwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbihwb3MpIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2F2ZUFiaWxpdGllczo6IHBvc2l0aW9uIHswfSBpcyBpbnZhbGlkXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgYnl0ZTEsIGJ5dGUyLCBieXRlMztcclxuXHRcdFx0Ynl0ZTEgPShieXRlKXJ1c2hpbmdQb3dlcjtcclxuXHRcdFx0Ynl0ZTEgPSBieXRlMSA8PCA0O1xyXG5cdFx0XHRieXRlMSArPSAoYnl0ZSlydW5uaW5nU3BlZWQ7XHJcblx0XHRcdGJ5dGUyID0gKGJ5dGUpIG1heFNwZWVkO1xyXG5cdFx0XHRieXRlMiA9IGJ5dGUyIDw8IDQ7XHJcblx0XHRcdGJ5dGUyICs9IChieXRlKWhpdHRpbmdQb3dlcjtcclxuXHRcdFx0Ynl0ZTMgPSAoYnl0ZSkgYmM7XHJcblx0XHRcdGJ5dGUzID0gYnl0ZTMgPDwgNDtcclxuXHRcdFx0Ynl0ZTMgKz0gKGJ5dGUpcmVjO1xyXG5cdFx0XHQvLyBzYXZlIGRhdGEgaGVyZSBpbiByb20gXHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NJbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSAodGVhbUluZGV4ICogdGVhbUFiaWxpdHlPZmZzZXQpKyBhYmlsaXR5T2Zmc2V0c1twb3NJbmRleF0gKyBiaWxsc1FCMUFiaWxpdHlTdGFydDtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0QXR0cmlidXRlTG9jYXRpb24odGVhbUluZGV4LCBwb3NJbmRleCk7XHJcblxyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpYnl0ZTE7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbisxXSA9IChieXRlKWJ5dGUyO1xyXG5cclxuXHRcdFx0aWYoYmMgPiAtMSAmJiByZWMgPiAtMSlcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rM10gPSAoYnl0ZSlieXRlMztcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0aW50ZXJuYWwgYm9vbCBJc1ZhbGlkQWJpbGl0eShpbnQgYWIpXHJcblx0XHR7XHJcbiAgICAgICAgICAgIHJldHVybiBhYiA+PSAwICYmIGFiIDw9IDB4RjtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgYnl0ZSBHZXRBYmlsaXR5KGludCBhYilcclxuXHRcdHtcclxuXHRcdFx0Ynl0ZSByZXQgPSAwO1xyXG5cdFx0XHRzd2l0Y2goYWIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIDY6ICByZXQgPSAweDAwOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDEzOiByZXQgPSAweDAxOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDE5OiByZXQgPSAweDAyOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDI1OiByZXQgPSAweDAzOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDMxOiByZXQgPSAweDA0OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDM4OiByZXQgPSAweDA1OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDQ0OiByZXQgPSAweDA2OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDUwOiByZXQgPSAweDA3OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDU2OiByZXQgPSAweDA4OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDYzOiByZXQgPSAweDA5OyBicmVhazsgXHJcblx0XHRcdFx0Y2FzZSA2OTogcmV0ID0gMHgwYTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA3NTogcmV0ID0gMTE7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgODE6IHJldCA9IDB4MGM7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgODg6IHJldCA9IDB4MGQ7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgOTQ6IHJldCA9IDB4MGU7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMTAwOiByZXQgPSAweDBmOyBicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBieXRlIE1hcEFiYWxpdHkoaW50IGFiKVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlIHJldCA9IDA7XHJcblx0XHRcdHN3aXRjaChhYilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNhc2UgMHgwMDogIHJldCA9IDY7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwMTogcmV0ID0gMTM7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwMjogcmV0ID0gMTk7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwMzogcmV0ID0gMjU7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwNDogcmV0ID0gMzE7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwNTogcmV0ID0gMzg7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwNjogcmV0ID0gNDQ7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwNzogcmV0ID0gNTA7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwODogcmV0ID0gNTY7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwOTogcmV0ID0gNjM7IGJyZWFrOyBcclxuXHRcdFx0XHRjYXNlIDB4MEE6IHJldCA9IDY5OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDExOiByZXQgPSA3NTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAweDBDOiByZXQgPSA4MTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAweDBEOiByZXQgPSA4ODsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAweDBFOiByZXQgPSA5NDsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAweDBGOiByZXQgPSAxMDA7IGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW50cyBtYXBwaW5nIHRvIGEgcGxheWVyJ3MgYWJpbGl0aWVzLlxyXG5cdFx0Ly8vIExpa2UgeyAxMywgMTMsIDUwLCA1NiwgMzEsIDI1fS4gVGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkgcmV0dXJuZWQgdmFyaWVzIGRlcGVuZGluZ1xyXG5cdFx0Ly8vIG9uIHBvc2l0aW9uLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj5UZWFtIG5hbWUgbGlrZSAnb2lsZXJzJy48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj5Qb3NpdGlvbiBuYW1lIGxpa2UgJ1JCNCcuPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz5hbiBhcnJheSBvZiBpbnRzLjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBpbnRbXSBHZXRBYmlsaXRpZXMoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSAgfHwgICFJc1ZhbGlkUG9zaXRpb24ocG9zaXRpb24pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnRbXSByZXQgPSB7MH07IC8vIHJldCBpcyByZS1jcmVhdGVkIGxhdGVyLlxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0Ly9cdFx0XHRpbnQgbG9jYXRpb24gPSAodGVhbUluZGV4ICogdGVhbUFiaWxpdHlPZmZzZXQpKyBhYmlsaXR5T2Zmc2V0c1twb3NJbmRleF0gKyBiaWxsc1FCMUFiaWxpdHlTdGFydDtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0QXR0cmlidXRlTG9jYXRpb24odGVhbUluZGV4LCBwb3NJbmRleCk7XHJcblx0XHRcdC8vIHdpbGQxIGFuZCB3aWxkMiBtYXAgdG8gW3JlY2VwdGlvbnMgYW5kIGJhbGwgY29udHJvbF0sIFtwYXNzIGludGVyY2VwdGlvbnMgYW5kIHF1aWNrbmVzc10sXHJcblx0XHRcdC8vIFtraWNraW5nIGFiaWxpdHkgYW5kIGF2b2lkIGtpY2sgYmxvY2tdXHJcblx0XHRcdGludCBydW5uaW5nU3BlZWQsIHJ1c2hpbmdQb3dlciwgbWF4U3BlZWQsIGhpdHRpbmdQb3dlciwgd2lsZDEsIHdpbGQyLCBhY2N1cmFjeSwgYXZvaWRQYXNzQmxvY2s7XHJcblx0XHRcdGludCBiMSxiMixiMyxiNDsgLy8gbm90ZSAzcmQgYnl0ZSBtYXBzIHRvIHRoZSBwbGF5ZXIncyBmYWNlXHJcblx0XHRcdGIxID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0YjIgPSBvdXRwdXRSb21bbG9jYXRpb24rMV07XHJcblx0XHRcdGIzID0gb3V0cHV0Um9tW2xvY2F0aW9uKzNdO1xyXG5cdFx0XHRiNCA9IG91dHB1dFJvbVtsb2NhdGlvbis0XTsgLy8gdGhpcyBpcyBvbmx5IHVzZWQgZm9yIHFiLCBidXQgc2luY2Ugd2UgYXJlIG5vdCBhc3NpZ25pbmcgaXQgaGVyZSxcclxuXHRcdFx0Ly8gaXQgZG9lc24ndCBodXJ0IHRvIGdldCBpdC5cclxuXHRcdFx0cnVubmluZ1NwZWVkICAgPSBiMSAmIDB4MEY7IHJ1bm5pbmdTcGVlZCAgPSBNYXBBYmFsaXR5KHJ1bm5pbmdTcGVlZCk7XHJcblx0XHRcdHJ1c2hpbmdQb3dlciAgID0gYjEgJiAweEYwOyBydXNoaW5nUG93ZXIgID0gTWFwQWJhbGl0eShydXNoaW5nUG93ZXIgPj4gNCk7XHJcblx0XHRcdG1heFNwZWVkICAgICAgID0gYjIgJiAweEYwOyBtYXhTcGVlZCAgICAgID0gTWFwQWJhbGl0eShtYXhTcGVlZCA+PiA0KTtcclxuXHRcdFx0aGl0dGluZ1Bvd2VyICAgPSBiMiAmIDB4MEY7IGhpdHRpbmdQb3dlciAgPSBNYXBBYmFsaXR5KGhpdHRpbmdQb3dlcik7XHJcblx0XHRcdHdpbGQxICAgICAgICAgID0gYjMgJiAweEYwOyB3aWxkMSAgICAgICAgID0gTWFwQWJhbGl0eSh3aWxkMSA+PiA0KTtcclxuXHRcdFx0d2lsZDIgICAgICAgICAgPSBiMyAmIDB4MEY7IHdpbGQyICAgICAgICAgPSBNYXBBYmFsaXR5KHdpbGQyKTtcclxuXHRcdFx0YWNjdXJhY3kgICAgICAgPSBiNCAmIDB4RjA7IGFjY3VyYWN5ICAgICAgPSBNYXBBYmFsaXR5KGFjY3VyYWN5ID4+IDQpO1xyXG5cdFx0XHRhdm9pZFBhc3NCbG9jayA9IGI0ICYgMHgwRjsgYXZvaWRQYXNzQmxvY2s9IE1hcEFiYWxpdHkoYXZvaWRQYXNzQmxvY2spO1xyXG5cdFx0XHRzd2l0Y2gocG9zaXRpb24pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIFwiQ1wiOlxyXG5cdFx0XHRcdGNhc2UgXCJSR1wiOlxyXG5cdFx0XHRcdGNhc2UgXCJMR1wiOlxyXG5cdFx0XHRcdGNhc2UgXCJSVFwiOlxyXG5cdFx0XHRcdGNhc2UgXCJMVFwiOiBcclxuXHRcdFx0XHRcdHJldCA9IG5ldyBpbnRbNF07ICBicmVhaztcclxuXHRcdFx0XHRjYXNlIFwiUUIxXCI6XHJcblx0XHRcdFx0Y2FzZSBcIlFCMlwiOiBcclxuXHRcdFx0XHRcdHJldCA9IG5ldyBpbnRbOF07IFxyXG5cdFx0XHRcdFx0cmV0WzRdID0gd2lsZDE7XHJcblx0XHRcdFx0XHRyZXRbNV0gPSB3aWxkMjtcclxuXHRcdFx0XHRcdHJldFs2XSA9IGFjY3VyYWN5O1xyXG5cdFx0XHRcdFx0cmV0WzddID0gYXZvaWRQYXNzQmxvY2s7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0Olx0XHJcblx0XHRcdFx0XHRyZXQgPSBuZXcgaW50WzZdOyBcclxuXHRcdFx0XHRcdHJldFs0XSA9IHdpbGQxO1xyXG5cdFx0XHRcdFx0cmV0WzVdID0gd2lsZDI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXRbMF0gPSBydW5uaW5nU3BlZWQ7XHJcblx0XHRcdHJldFsxXSA9IHJ1c2hpbmdQb3dlcjtcclxuXHRcdFx0cmV0WzJdID0gbWF4U3BlZWQ7XHJcblx0XHRcdHJldFszXSA9IGhpdHRpbmdQb3dlcjtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgdmlydHVhbCBpbnQgR2V0QXR0cmlidXRlTG9jYXRpb24oaW50IHRlYW1JbmRleCwgaW50IHBvc0luZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSAodGVhbUluZGV4ICogdGVhbUFiaWxpdHlPZmZzZXQpKyBhYmlsaXR5T2Zmc2V0c1twb3NJbmRleF0gKyBiaWxsc1FCMUFiaWxpdHlTdGFydDtcclxuXHRcdFx0cmV0dXJuIGxvY2F0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIGEgc3RyaW5nIGNvbnNpc3Rpbmcgb2YgbnVtYmVycywgc3BhY2VzIGFuZCBjb21tYXMuXHJcblx0XHQvLy8gTGlrZSBcIjMxLCA2OSwgMTMsIDEzLCAzMSwgNDRcIlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0QWJpbGl0eVN0cmluZyhzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pICB8fCAgIUlzVmFsaWRQb3NpdGlvbihwb3NpdGlvbikgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50W10gYWJpbGl0aWVzID0gR2V0QWJpbGl0aWVzKHRlYW0scG9zaXRpb24pO1xyXG5cdFx0XHRTdHJpbmdCdWlsZGVyIHN0dWZmID1uZXcgU3RyaW5nQnVpbGRlcigpO1xyXG5cclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IGFiaWxpdGllcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0dWZmLkFwcGVuZChhYmlsaXRpZXNbaV0pO1xyXG5cdFx0XHRcdHN0dWZmLkFwcGVuZChcIiwgXCIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0dWZmLlJlbW92ZShzdHVmZi5MZW5ndGgtMiwxKTsvLyB0cmltIG9mZiBsYXN0IGNvbW1hXHJcblx0XHRcdC8vQ29uc29sZS5Xcml0ZUxpbmUoc3R1ZmYpO1xyXG5cdFx0XHRyZXR1cm4gc3R1ZmYuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyB0aGUgc2ltdWxhdGlvbiBkYXRhIGZvciB0aGUgZ2l2ZW4gdGVhbS5cclxuXHRcdC8vLyBTaW11bGF0aW9uIGRhdGEgaXMgb2YgdGhlIGZvcm0gJzB4Tk4nIHdoZXJlIE4gaXMgYSBudW1iZXIgMS1GIChoZXgpLlxyXG5cdFx0Ly8vIEEgdGVhbSdzIHNpbSBkYXRhIG9mICcweDU3JyBzaWduaWZpZXMgdGhhdCB0aGUgdGVhbSBoYXMgYSBzaW11bGF0aW9uIGZpZ3VyZSBvZlxyXG5cdFx0Ly8vICc1JyBmb3Igb2ZmZW5zZSwgYW5kICc3JyBmb3IgZGVmZW5zZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGhlIHRlYW0gb2YgaW50ZXJlc3Q8L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIGJ5dGUgR2V0VGVhbVNpbURhdGEoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPj0gMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIGJpbGxzVGVhbVNpbUxvYztcclxuXHRcdFx0XHRyZXR1cm4gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gMHgwMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgZ2l2ZW4gdGVhbSdzIG9mZmVuc2UgYW5kIGRlZmVuc2Ugc2ltIHZhbHVlcy5cclxuXHRcdC8vLyBTaW11bGF0aW9uIGRhdGEgaXMgb2YgdGhlIGZvcm0gJzB4Tk4nIHdoZXJlIE4gaXMgYSBudW1iZXIgMS1GIChoZXgpLlxyXG5cdFx0Ly8vIEEgdGVhbSdzIHNpbSBkYXRhIG9mICcweDU3JyBzaWduaWZpZXMgdGhhdCB0aGUgdGVhbSBoYXMgYSBzaW11bGF0aW9uIGZpZ3VyZSBvZlxyXG5cdFx0Ly8vICc1JyBmb3Igb2ZmZW5zZSwgYW5kICc3JyBmb3IgZGVmZW5zZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGhlIHRlYW0gdG8gc2V0LjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZXNcIj5UaGUgdmFsdWUgdG8gc2V0IGl0IHRvLjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1TaW1EYXRhKHN0cmluZyB0ZWFtLCBieXRlIHZhbHVlcylcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRUZWFtU2ltRGF0YTo6IHRlYW0gezB9IGlzIGludmFsaWQgXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gdGVhbUluZGV4KnRlYW1TaW1PZmZzZXQgKyBiaWxsc1RlYW1TaW1Mb2M7XHJcblx0XHRcdGludCBjdXJyZW50VmFsdWUgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gdmFsdWVzO1xyXG5cdFx0XHRjdXJyZW50VmFsdWUgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtIHNpbSBvZmZlbnNlIHRlbmRlbmN5IC4gXHJcblx0XHQvLy8gMDAgPSBMaXR0bGUgbW9yZSBydXNoaW5nLCAwMSA9IEhlYXZ5IFJ1c2hpbmcsIFxyXG5cdFx0Ly8vIDAyID0gbGl0dGxlIG1vcmUgcGFzc2luZywgMDMgPSBIZWF2eSBQYXNzaW5nLiBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+dGhlIHRlYW0gbmFtZTwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ2YWxcIj50aGUgbnVtYmVyIHRvIHNldCBpdCB0by48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPnRydWUgaWYgc2V0LCBmYWxlcyBpZiBjb3VsZCBub3Qgc2V0IGl0LjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIGJvb2wgU2V0VGVhbVNpbU9mZmVuc2VQcmVmKHN0cmluZyB0ZWFtLCBpbnQgdmFsKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdmFsID4gLTEgJiYgdmFsIDwgNCAmJiB0ZWFtSW5kZXggIT0gLTEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jID0gdGVhbVNpbU9mZmVuc2l2ZVByZWZTdGFydCArIHRlYW1JbmRleDtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jXSA9IChieXRlKSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYodGVhbUluZGV4ICE9IC0xKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbid0IHNldCBvZmZlbnNpdmUgcHJlZiB0byAnezB9JyB2YWxpZCB2YWx1ZXMgYXJlIDAtMy5cXG5cIix2YWwpKTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiVGVhbSAnezB9JyBpcyBpbnZhbGlkXFxuXCIsdGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtIHNpbSBvZmZlbnNlIHRlbmRlbmN5IC4gXHJcblx0XHQvLy8gMDAgPSBMaXR0bGUgbW9yZSBydXNoaW5nLCAwMSA9IEhlYXZ5IFJ1c2hpbmcsIFxyXG5cdFx0Ly8vIDAyID0gbGl0dGxlIG1vcmUgcGFzc2luZywgMDMgPSBIZWF2eSBQYXNzaW5nLiBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGVoIHRlYW0gbmFtZS48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPnRoZWlyIHNpbSBvZmZlbnNlIHByZWYgKDAgLSAzKTwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIGludCBHZXRUZWFtU2ltT2ZmZW5zZVByZWYoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCB2YWwgPSAtMTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IGxvYyA9IHRlYW1TaW1PZmZlbnNpdmVQcmVmU3RhcnQgKyB0ZWFtSW5kZXg7XHJcblx0XHRcdFx0dmFsID0gb3V0cHV0Um9tW2xvY107XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlRlYW0gJ3swfScgaXMgaW52YWxpZFxcblwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBpbnRbXSBHZXRQbGF5ZXJTaW1EYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFBsYXllclNpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCAhSXNWYWxpZFBvc2l0aW9uKCBwb3MgKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0UGxheWVyU2ltRGF0YTo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvcykpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzd2l0Y2gocG9zKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FzZSBcIlFCMVwiOiAgY2FzZSBcIlFCMlwiOiBcclxuXHRcdFx0XHRcdHJldHVybiBHZXRRQlNpbURhdGEodGVhbSwgcG9zKTtcclxuXHRcdFx0XHRjYXNlIFwiUkIxXCI6IGNhc2UgXCJSQjJcIjogY2FzZSBcIlJCM1wiOiBjYXNlIFwiUkI0XCI6XHJcblx0XHRcdFx0Y2FzZSBcIldSMVwiOiBjYXNlIFwiV1IyXCI6IGNhc2UgXCJXUjNcIjogY2FzZSBcIldSNFwiOlxyXG5cdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOiBcclxuXHRcdFx0XHRcdHJldHVybiBHZXRTa2lsbFNpbURhdGEodGVhbSxwb3MpO1xyXG5cdFx0XHRcdGNhc2UgXCJSRVwiOiAgIGNhc2UgXCJOVFwiOiAgIGNhc2UgXCJMRVwiOiAgIGNhc2UgXCJMT0xCXCI6XHJcblx0XHRcdFx0Y2FzZSBcIkxJTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIlJPTEJcIjogY2FzZSBcIlJDQlwiOlxyXG5cdFx0XHRcdGNhc2UgXCJMQ0JcIjogIGNhc2UgXCJGU1wiOiAgIGNhc2UgXCJTU1wiOiBcclxuXHRcdFx0XHRcdHJldHVybiBHZXREZWZlbnNpdmVTaW1EYXRhKHRlYW0sIHBvcyk7XHJcblx0XHRcdFx0Y2FzZSBcIktcIjogIFxyXG5cdFx0XHRcdFx0cmV0dXJuIEdldEtpY2tpbmdTaW1EYXRhKHRlYW0pO1xyXG5cdFx0XHRcdGNhc2UgXCJQXCI6ICBcclxuXHRcdFx0XHRcdHJldHVybiBHZXRQdW50aW5nU2ltRGF0YSh0ZWFtKTtcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50W10gR2V0S2lja2luZ1NpbURhdGEoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0S2lja2luZ1NpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnRbXSByZXQgPSBuZXcgaW50WzFdO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHQvL1FCMSArIDB4MkVcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIGJpbGxzUUIxU2ltTG9jICsgMHgyRTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0UHVua0tpY2tTaW1EYXRhTG9jYXRpb24odGVhbUluZGV4KTtcclxuXHRcdFx0cmV0WzBdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSA+PiA0O1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0S2lja2luZ1NpbURhdGEoc3RyaW5nIHRlYW0sIGludCBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldEtpY2tpbmdTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdC8vUUIxICsgMHgyRVxyXG5cdFx0XHQvL2ludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgYmlsbHNRQjFTaW1Mb2MgKyAweDJFO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSBHZXRQdW5rS2lja1NpbURhdGFMb2NhdGlvbih0ZWFtSW5kZXgpO1xyXG5cdFx0XHRpbnQgZyA9ICBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRnID0gZyAmIDB4MEY7XHJcblx0XHRcdGludCBnMiA9IGRhdGEgPDwgNDtcclxuXHRcdFx0ZyA9IGcgKyBnMjtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKWc7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50W10gR2V0UHVudGluZ1NpbURhdGEoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0UHVudGluZ1NpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnRbXSByZXQgPSBuZXcgaW50WzFdO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHQvL1FCMSArIDB4MkVcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIGJpbGxzUUIxU2ltTG9jICsgMHgyRTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0UHVua0tpY2tTaW1EYXRhTG9jYXRpb24odGVhbUluZGV4KTtcclxuXHRcdFx0cmV0WzBdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSAmIDB4MEY7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRQdW50aW5nU2ltRGF0YShzdHJpbmcgdGVhbSwgaW50IGRhdGEpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0UHVudGluZ1NpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0Ly9RQjEgKyAweDJFXHJcblx0XHRcdGludCBsb2NhdGlvbiA9IEdldFB1bmtLaWNrU2ltRGF0YUxvY2F0aW9uKHRlYW1JbmRleCk7XHJcblx0XHRcdC8vaW50IGxvY2F0aW9uID0gdGVhbUluZGV4KnRlYW1TaW1PZmZzZXQgKyBiaWxsc1FCMVNpbUxvYyArIDB4MkU7XHJcblx0XHRcdGludCBkID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0ZCA9IGQgJiAweEYwO1xyXG5cdFx0XHRkICs9IGRhdGE7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gPSAoYnl0ZSlkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCB2aXJ0dWFsIGludCBHZXRQdW5rS2lja1NpbURhdGFMb2NhdGlvbihpbnQgdGVhbUluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gdGVhbUluZGV4KnRlYW1TaW1PZmZzZXQgKyBiaWxsc1FCMVNpbUxvYyArIDB4MkU7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50W10gR2V0RGVmZW5zaXZlU2ltRGF0YShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcylcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXREZWZlbnNpdmVTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbiggcG9zICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldERlZmVuc2l2ZVNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50W10gcmV0ID0gbmV3IGludFsyXTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHBvc2l0aW9uSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvcyk7XHJcblx0XHRcdC8vaW50IGxvY2F0aW9uID0gdGVhbUluZGV4KnRlYW1TaW1PZmZzZXQgKyAocG9zaXRpb25JbmRleCoyKSArYmlsbHNRQjFTaW1Mb2MgLSAweDBBOyAvLyBPTC1tZW4gaGF2ZSBubyBzaW0gZGF0YSwgMio1PTB4QVxyXG5cdFx0XHQvL2ludCBsb2NhdGlvbiA9IHRlYW1JbmRleCAqIHRlYW1TaW1PZmZzZXQgKyAocG9zaXRpb25JbmRleCAtIDE3KSsgYmlsbHNSRVNpbUxvYztcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0RGVmaW5zaXZlUGxheWVyU2ltRGF0YUxvY2F0aW9uKHRlYW0sIHBvcyk7XHJcblx0XHRcdHJldFswXSA9IG91dHB1dFJvbVtsb2NhdGlvbl07IC8vcGFzcyBydXNoXHJcblx0XHRcdHJldFsxXSA9IG91dHB1dFJvbVtsb2NhdGlvbisxMV07Ly8gaW50ZXJjZXB0aW9uIGFiaWxpdHlcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgc2ltdWxhdGlvbiBkYXRhIGZvciBhIGRlZmVuc2l2ZSBwbGF5ZXIuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRoZSB0ZWFtIHRoZSBwbGF5ZXIgYmVsb25ncyB0by48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zXCI+dGhlIHBvc2l0aW9uIGhlIHBsYXlzLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJkYXRhXCI+dGhlIGRhdGEgdG8gc2V0IGl0IHRvIChsZW5ndGggPSAyKS48L3BhcmFtPlxyXG5cdFx0cHVibGljIHZvaWQgU2V0RGVmZW5zaXZlU2ltRGF0YShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcywgaW50W10gZGF0YSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXREZWZlbnNpdmVTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXREZWZlbnNpdmVTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoZGF0YSA9PSBudWxsIHx8IGRhdGEuTGVuZ3RoIDwgMilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBzZXR0aW5nIHNpbSBkYXRhIGZvciB7MH0sIHsxfS4gU2ltIGRhdGEgbm90IHNldC5cIix0ZWFtLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4KjIpICtiaWxsc0xFU2ltTG9jIC0gMHgwQTsgLy8gT0wtbWVuIGhhdmUgbm8gc2ltIGRhdGEsIDIqNT0weEFcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXggKiB0ZWFtU2ltT2Zmc2V0ICsgKHBvc2l0aW9uSW5kZXggLSAxNykrIGJpbGxzUkVTaW1Mb2M7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IEdldERlZmluc2l2ZVBsYXllclNpbURhdGFMb2NhdGlvbih0ZWFtLCBwb3MpO1xyXG5cdFx0XHRieXRlIGJ5dGUxLGJ5dGUyO1xyXG5cdFx0XHRieXRlMSA9IChieXRlKWRhdGFbMF07XHJcblx0XHRcdGJ5dGUyPSAoYnl0ZSlkYXRhWzFdO1xyXG5cclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IGJ5dGUxOyAvL3Bhc3MgcnVzaFxyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMTFdID0gYnl0ZTI7Ly8gaW50ZXJjZXB0aW9uIGFiaWxpdHlcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgdmlydHVhbCBpbnQgR2V0RGVmaW5zaXZlUGxheWVyU2ltRGF0YUxvY2F0aW9uKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCAqIHRlYW1TaW1PZmZzZXQgKyAocG9zaXRpb25JbmRleCAtIDE3KSsgYmlsbHNSRVNpbUxvYztcclxuXHRcdFx0cmV0dXJuIGxvY2F0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgaW50W10gR2V0U2tpbGxTaW1EYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFNraWxsU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRTa2lsbFNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50W10gcmV0ID0gbmV3IGludFs0XTtcclxuXHRcdFx0Ly9cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHQvL1x0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3MpO1xyXG5cdFx0XHQvL1x0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgKHBvc2l0aW9uSW5kZXgqMikgK2JpbGxzUUIxU2ltTG9jO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSBHZXRPZmZlbnNpdmVQbGF5ZXJTaW1EYXRhTG9jYXRpb24odGVhbSwgcG9zKTtcclxuXHRcdFx0cmV0WzBdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSAgID4+IDQ7XHJcblx0XHRcdHJldFsxXSA9IG91dHB1dFJvbVtsb2NhdGlvbl0gICAmICAweDBGO1xyXG5cdFx0XHRyZXRbMl0gPSBvdXRwdXRSb21bbG9jYXRpb24rMV0gPj4gNDtcclxuXHRcdFx0cmV0WzNdID0gb3V0cHV0Um9tW2xvY2F0aW9uKzFdICYgIDB4MEY7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgU2V0U2tpbGxTaW1EYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zLCBpbnRbXSBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldFNraWxsU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCAhSXNWYWxpZFBvc2l0aW9uKCBwb3MgKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0U2tpbGxTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoZGF0YSA9PSBudWxsIHx8IGRhdGEuTGVuZ3RoIDwgNClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBzZXR0aW5nIHNpbSBkYXRhIGZvciB7MH0sIHsxfS4gU2ltIGRhdGEgbm90IHNldC5cIix0ZWFtLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHQvL1x0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3MpO1xyXG5cdFx0XHQvL1x0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgKHBvc2l0aW9uSW5kZXgqMikgK2JpbGxzUUIxU2ltTG9jO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSBHZXRPZmZlbnNpdmVQbGF5ZXJTaW1EYXRhTG9jYXRpb24odGVhbSwgcG9zKTtcclxuXHRcdFx0aW50IGJ5dGUxLGJ5dGUyO1xyXG5cdFx0XHRieXRlMSA9IGRhdGFbMF08PDQ7XHJcblx0XHRcdGJ5dGUxID0gYnl0ZTErZGF0YVsxXTtcclxuXHRcdFx0Ynl0ZTIgPSBkYXRhWzJdIDw8IDQ7XHJcblx0XHRcdGJ5dGUyICs9IGRhdGFbM107XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gID0gKGJ5dGUpYnl0ZTE7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbisxXT0gKGJ5dGUpYnl0ZTI7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIGludFtdIEdldFFCU2ltRGF0YShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcylcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRRQlNpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCAhSXNWYWxpZFBvc2l0aW9uKCBwb3MgKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0UUJTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGludFtdIHJldCA9IG5ldyBpbnRbM107XHJcblx0XHRcdC8vXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0Ly9cdFx0XHRcclxuXHRcdFx0Ly9cdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArYmlsbHNRQjFTaW1Mb2M7XHJcblx0XHRcdC8vXHRcdFx0aWYocG9zID09IFwiUUIyXCIpXHJcblx0XHRcdC8vXHRcdFx0XHRsb2NhdGlvbis9MjtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0T2ZmZW5zaXZlUGxheWVyU2ltRGF0YUxvY2F0aW9uKHRlYW0sIHBvcyk7XHJcblxyXG5cdFx0XHRyZXRbMF0gPSBvdXRwdXRSb21bbG9jYXRpb25dID4+IDQ7XHJcblx0XHRcdHJldFsxXSA9IG91dHB1dFJvbVtsb2NhdGlvbl0gJiAweDBGO1xyXG5cdFx0XHRyZXRbMl0gPSBvdXRwdXRSb21bbG9jYXRpb24rMV07XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldE9mZmVuc2l2ZVBsYXllclNpbURhdGFMb2NhdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4KjIpICtiaWxsc1FCMVNpbUxvYztcclxuXHRcdFx0cmV0dXJuIGxvY2F0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldFFCU2ltRGF0YShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcywgaW50W10gZGF0YSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRRQlNpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRRQlNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoZGF0YSA9PSBudWxsIHx8IGRhdGEuTGVuZ3RoIDwgMilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFcnJvciBzZXR0aW5nIHNpbSBkYXRhIGZvciB7MH0sIHsxfS4gU2ltIGRhdGEgbm90IHNldC5cIix0ZWFtLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHQvL1x0XHRcdFxyXG5cdFx0XHQvL1x0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICtiaWxsc1FCMVNpbUxvYztcclxuXHRcdFx0Ly9cdFx0XHRpZihwb3MgPT0gXCJRQjJcIilcclxuXHRcdFx0Ly9cdFx0XHRcdGxvY2F0aW9uKz0yO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSBHZXRPZmZlbnNpdmVQbGF5ZXJTaW1EYXRhTG9jYXRpb24odGVhbSwgcG9zKTtcclxuXHRcdFx0aW50IGJ5dGUxLGJ5dGUyO1xyXG5cdFx0XHRieXRlMSA9IChieXRlKWRhdGFbMF0gPDwgNDtcclxuXHRcdFx0Ynl0ZTEgPSAgYnl0ZTEgKyAoYnl0ZSlkYXRhWzFdO1xyXG5cdFx0XHRieXRlMiA9IChieXRlKWRhdGFbMl07XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gICA9IChieXRlKWJ5dGUxO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMV0gPSAoYnl0ZSlieXRlMjtcclxuXHRcdH1cclxuXHRcdFxyXG5cclxuXHRcdHByb3RlY3RlZCAgaW50IGJpbGxzUUIxU2ltTG9jICA9IDB4MTgxNjM7XHJcblx0XHRwcm90ZWN0ZWQgIGludCBiaWxsc1JFU2ltTG9jICAgPSA5ODY4MztcclxuXHRcdHByb3RlY3RlZCAgaW50IGJpbGxzVGVhbVNpbUxvYyA9IDB4MTgxOTI7XHJcblx0XHRwcm90ZWN0ZWQgIGludCB0ZWFtU2ltT2Zmc2V0ICAgPSAweDMwO1xyXG5cdFx0cHJvdGVjdGVkICBpbnQgYmlsbHNRQjFBYmlsaXR5U3RhcnQgPSAweDMwMTA7XHJcblx0XHRwcm90ZWN0ZWQgIGludCB0ZWFtQWJpbGl0eU9mZnNldCA9IDB4NzU7XHJcblxyXG5cdFx0cHJvdGVjdGVkIGludFtdIGFiaWxpdHlPZmZzZXRzPXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgICAweDAwLCAweDA1LCAweDBBLCAweDBFLCAweDEyLCAweDE2LCAweDFBLCAweDFFLCAweDIyLCAweDI2LCAweDJBLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgIDB4MkUsIDB4MzIsIDB4MzUsIDB4MzgsIDU5LCAweDNFLCAweDQxLCAweDQ1LCAweDQ5LCAweDRELCAweDUxLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgIDB4NTUsIDB4NTksIDB4NUQsIDB4NjEsIDB4NjUsIDB4NjksIDB4NkQsIDB4NzEgfTtcclxuXHJcblx0XHRwcm90ZWN0ZWQgaW50W10gZmFjZU9mZnNldHMgPXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgMHgwMCwgMHgwNSwgMHgwQSwgMHgwRSwgMHgxMiwgMHgxNiwgMHgxQSwgMHgxRSwgMHgyMiwgMHgyNixcdDB4MkEsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0IDB4MkUsIDB4MzIsIDB4MzUsIDB4MzgsIDU5LCAweDNFLCAweDQxLCAweDQ1LFx0MHg0OSwgMHg0RCxcdDB4NTEsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0IDB4NTUsIDB4NTksIDB4NUQsIDB4NjEsIC8qMHg1Ni0tPiBkZWZlY3QqLyAweDY1LCAweDY5ICwgMHg2RCwgMHg3MSB9O1xyXG5cclxuXHRcdHByb3RlY3RlZCBpbnRbXSBmYWNlVGVhbU9mZnNldHM9e1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0MHgzMDEyLCAweDMwODcsIDB4MzBGQywgMHgzMTcxLCAweDMxRTYsXHQxMjg5MSwgMHgzMkQwLCAweDMzNDUsIDEzMjQyLCAweDM0MkYsIDB4MzRBNCwgMHgzNTE5LCAweDM1OGUsIDB4MzYwMyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDB4Mzg0QywgMHgzNmVkLCAweDM3NjIsIDB4MzdENywgMHgzNjc4LCAweDM4QzEsIDB4MzkzNiwgMTQ3NjMsIDB4M0EyMCwgMHgzQTk1LCAxNTExNCwgMTUyMzEsXHQxNTM0OCwgMHgzQzY5IH07XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0IHRoZSBmYWNlIG51bWJlciBmcm9tIHRoZSBnaXZlbiB0ZWFtL3Bvc2l0aW9uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgaW50IEdldEZhY2Uoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aW50IHBvc2l0aW9uT2Zmc2V0ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKHBvc2l0aW9uT2Zmc2V0IDwgMCB8fCB0ZWFtSW5kZXggPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHZXRGYWNlIEVycm9yIGdldHRpbmcgZmFjZSBmb3IgezB9IHsxfVwiLHRlYW0scG9zaXRpb24pKTtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IGxvYyA9IGZhY2VPZmZzZXRzW3Bvc2l0aW9uT2Zmc2V0XSArIGZhY2VUZWFtT2Zmc2V0c1t0ZWFtSW5kZXhdO1xyXG5cdFx0XHRsb2MgPSAweDMwMTIgKyBmYWNlT2Zmc2V0c1twb3NpdGlvbk9mZnNldF0gKyB0ZWFtSW5kZXgqMHg3NTtcclxuXHRcdFx0aW50IHJldCA9IG91dHB1dFJvbVtsb2NdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSBmYWNlIGZvciB0aGUgZ3V5IGF0IHBvc2l0aW9uICdwb3NpdGlvbicgb24gdGVhbSAndGVhbScuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJmYWNlXCI+PC9wYXJhbT5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0RmFjZShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBpbnQgZmFjZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHBvc2l0aW9uT2Zmc2V0ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKHBvc2l0aW9uT2Zmc2V0IDwgMCB8fCB0ZWFtSW5kZXggPCAwIHx8IGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlNldEZhY2UgRXJyb3Igc2V0dGluZyBmYWNlIGZvciB7MH0gezF9IGZhY2U9ezJ9XCIsdGVhbSxwb3NpdGlvbixmYWNlKSk7XHJcblx0XHRcdFx0aWYoIGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlZhbGlkIEZhY2UgbnVtYmVycyBhcmUgMHgwMCAtIDB4RDRcIikpO1xyXG5cdFx0XHRcdHJldHVybiA7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IGxvYyA9IGZhY2VPZmZzZXRzW3Bvc2l0aW9uT2Zmc2V0XSArIGZhY2VUZWFtT2Zmc2V0c1t0ZWFtSW5kZXhdO1xyXG5cdFx0XHRsb2MgPSAweDMwMTIgKyBmYWNlT2Zmc2V0c1twb3NpdGlvbk9mZnNldF0gKyB0ZWFtSW5kZXgqMHg3NTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY10gPSAoYnl0ZSlmYWNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXQgdGhlIHB1bnQgcmV0dXJuZXIgYnkgcG9zaXRpb24uXHJcblx0XHQvLy8gSGkgbmliYmxlLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRQdW50UmV0dXJuZXIoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRQdW50UmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldFB1bnRSZXR1cm5lcjo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQmlsbHMgS1IvUFIgc3RvcmVkIGF0IDB4MjM5ZDMsIGNvbHRzIGF0IDB4MjM5ZDQgLi4uIFxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb25fMSA9IDB4MjM5ZDMgKyB0ZWFtcy5JbmRleE9mKHRlYW0pOy8vIHRlYW1zLkluZGV4T2YodGVhbSk7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IDB4MzI4ZDMgKyB0ZWFtcy5JbmRleE9mKHRlYW0pOyAvLyB0ZWFtcy5JbmRleE9mKHRlYW0pO1xyXG5cdFx0XHRzd2l0Y2gocG9zaXRpb24pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjogY2FzZSBcIkNcIjogY2FzZSBcIkxHXCI6IC8vIHRoZXNlIGd1eXMgY2FuIHJldHVybiBwdW50cy9raWNrcyB0b28uXHJcblx0XHRcdFx0Y2FzZSBcIlJCMVwiOiBjYXNlIFwiUkIyXCI6IGNhc2UgXCJSQjNcIjogY2FzZSBcIlJCNFwiOiBcclxuXHRcdFx0XHRjYXNlIFwiV1IxXCI6IGNhc2UgXCJXUjJcIjogY2FzZSBcIldSM1wiOiBjYXNlIFwiV1I0XCI6IFxyXG5cdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGludCBwb3MgPSBwb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zaXRpb24pOyAvLyBJbmRleChwb3NpdGlvbk5hbWVzLCBwb3NpdGlvbik7XHJcblx0XHRcdFx0XHRpbnQgYiA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdFx0XHRiID0gYiAmIDB4RjA7XHJcblx0XHRcdFx0XHRiID0gYiArIHBvcztcclxuXHRcdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gPSAoYnl0ZSliO1xyXG5cdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXzFdID0gKGJ5dGUpYjtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiQ2Fubm90IGFzc2lnbiAnezB9JyBhcyBhIHB1bnQgcmV0dXJuZXJcIixwb3NpdGlvbikpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IFxyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXQgdGhlIGtpY2sgcmV0dXJuZXIgYnkgcG9zaXRpb24uXHJcblx0XHQvLy8gTG8gbmliYmxlLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRLaWNrUmV0dXJuZXIoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRLaWNrUmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldEtpY2tSZXR1cm5lcjo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQmlsbHMgS1IvUFIgc3RvcmVkIGF0IDB4MjM5ZDMsIGNvbHRzIGF0IDB4MjM5ZDQgLi4uIFxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb25fMSA9IDB4MjM5ZDMgKyB0ZWFtcy5JbmRleE9mKHRlYW0pO1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSAweDMyOGQzICsgdGVhbXMuSW5kZXhPZih0ZWFtKTsgXHJcblx0XHRcdHN3aXRjaChwb3NpdGlvbilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNhc2UgXCJRQjFcIjogY2FzZSBcIlFCMlwiOiBjYXNlIFwiQ1wiOiBjYXNlIFwiTEdcIjogIC8vIHRoZXNlIGd1eXMgY2FuIHJldHVybiBwdW50cy9raWNrcyB0b28uXHJcblx0XHRcdFx0Y2FzZSBcIlJCMVwiOiBjYXNlIFwiUkIyXCI6IGNhc2UgXCJSQjNcIjogY2FzZSBcIlJCNFwiOiBcclxuXHRcdFx0XHRjYXNlIFwiV1IxXCI6IGNhc2UgXCJXUjJcIjogY2FzZSBcIldSM1wiOiBjYXNlIFwiV1I0XCI6IFxyXG5cdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGludCBwb3MgPSBwb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zaXRpb24pOyBcclxuXHRcdFx0XHRcdGludCBiID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0XHRcdGIgPSBiICYgMHgwRjtcclxuXHRcdFx0XHRcdGIgPSBiICsgKCBwb3MgPDwgNCk7XHJcblx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpYjtcclxuXHRcdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl8xXSA9IChieXRlKWI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBhc3NpZ24gJ3swfScgYXMgYSBraWNrIHJldHVybmVyXCIscG9zaXRpb24pKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgcG9zaXRpb24gd2hvIHJldHVybnMgcHVudHMuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFB1bnRSZXR1cm5lcihzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRQdW50UmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gbUJpbGxzUHVudEtpY2tSZXR1cm5lclBvcyArIHRlYW1zLkluZGV4T2YodGVhbSk7XHJcblx0XHRcdGludCBiID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0YiA9IGIgJiAweDBGO1xyXG5cdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW2JdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBHZXRzIHRoZSBwb3NpdGlvbiB3aG8gcmV0dXJucyBraWNrcy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0S2lja1JldHVybmVyKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldEtpY2tSZXR1cm5lcjo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzdHJpbmcgcmV0ID0gXCJcIjtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gMHgzMjhkMyArIHRlYW1zLkluZGV4T2YodGVhbSk7XHJcblx0XHRcdGludCBiID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0YiA9IGIgJiAweEYwO1xyXG5cdFx0XHRiID0gYiA+PiA0O1xyXG5cdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW2JdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgUmVnZXggc2ltcGxlU2V0UmVnZXg7XHJcblxyXG5cdFx0cHVibGljIHZvaWQgQXBwbHlTZXQoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBzaW1wbGVTZXRSZWdleCA9PSBudWxsKVxyXG5cdFx0XHRcdHNpbXBsZVNldFJlZ2V4ID0gbmV3IFJlZ2V4KFwiU0VUXFxcXHMqXFxcXChcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqLFxcXFxzKigweFswLTlhLWZBLUZdKylcXFxccypcXFxcKVwiKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKCBzaW1wbGVTZXRSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFwcGx5U2ltcGxlU2V0KGxpbmUsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiNpZiAhQlJJREdFX1BST0pFQ1RcclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS5JbmRleE9mKFwiUHJvbXB0VXNlclwiLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWxJZ25vcmVDYXNlKSA+IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZS5JbmRleE9mKFJvbVZlcnNpb24uVG9TdHJpbmcoKSwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkgPiAtMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBnb29kIHRvIGdvISBhcHBseSBpdFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBzaW1wbGVTZXRMaW5lID0gU3RyaW5nSW5wdXREbGcuUHJvbXB0Rm9yU2V0VXNlcklucHV0KGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RyaW5nLklzTnVsbE9yRW1wdHkoc2ltcGxlU2V0TGluZSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBseVNldChzaW1wbGVTZXRMaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9TdGF0aWNVdGlscy5TaG93RXJyb3IoXCJSb20gdmVyc2lvbiBub3Qgc3BlY2lmaWVkIGluIEhhY2s6IFwiICsgbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcImxpbmUgJ3swfScgbm90IGFwcGxpZWQ7IHJvbVZlcnNpb24gPSB7MX1cIixsaW5lLCBSb21WZXJzaW9uLlRvU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4jZW5kaWZcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SIHdpdGggbGluZSBcXFwiezB9XFxcIlwiLGxpbmUpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBjb25zdCBzdHJpbmcgbTJSQl8yV1JfMVRFID0gXCIyUkJfMldSXzFURVwiO1xyXG5cdFx0cHJvdGVjdGVkIGNvbnN0IHN0cmluZyBtMVJCXzNXUl8xVEUgPSBcIjFSQl8zV1JfMVRFXCI7XHJcblx0XHRwcm90ZWN0ZWQgY29uc3Qgc3RyaW5nIG0xUkJfNFdSICAgICA9IFwiMVJCXzRXUlwiO1xyXG5cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGludCBtVGVhbUZvcm1hdGlvbkhhY2tMb2MgPSAweDIxNjQyO1xyXG5cdFx0cHJvdGVjdGVkIGludCBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyA9ICAgMHgyMUZFMDsvLzB4ZWRmMztcclxuXHRcdHByb3RlY3RlZCBpbnQgbVRlYW1Gb3JtYXRpb25zU3RhcnRpbmdMb2MyID0gIDB4MzFFODA7Ly8weGVkZjM7XHJcblx0XHRcclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtJ3Mgb2ZmZW5zaXZlIGZvcm1hdGlvbi5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImZvcm1hdGlvblwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24oIHN0cmluZyB0ZWFtLCBzdHJpbmcgZm9ybWF0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gLTEgJiYgdGVhbUluZGV4IDwgMjU1IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBsb2NhdGlvbiAgPSBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyAgKyB0ZWFtSW5kZXg7XHJcblx0XHRcdFx0aW50IGxvY2F0aW9uMiA9IG1UZWFtRm9ybWF0aW9uc1N0YXJ0aW5nTG9jMiArIHRlYW1JbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXRSb21bbVRlYW1Gb3JtYXRpb25IYWNrTG9jXSA9PSAweEEwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBmb3JtYXRpb24gaGFjayBoYXNuJ3QgYmVlbiBzZXR1cCB5ZXRcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BcHBseVNpbXBsZVNldChcIlNFVCgweDIxNjQyLCAweDhBQTY2RUJDRDA5RkFBNEM1MDk2ICkgXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcblx0XHRcdFx0c3dpdGNoKCBmb3JtYXRpb24gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgbTJSQl8yV1JfMVRFOlxyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24gXSA9IChieXRlKTB4MDA7XHJcblx0XHRcdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbjJdID0gKGJ5dGUpMHgwMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIG0xUkJfM1dSXzFURTpcclxuXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uIF0gPSAoYnl0ZSkweDAyO1xyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24yXSA9IChieXRlKTB4MDI7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSBtMVJCXzRXUjpcclxuXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uIF0gPSAoYnl0ZSkweDAxO1xyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24yXSA9IChieXRlKTB4MDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRcIkVSUk9SISBGb3JtYXRpb24gezA6eH0gZm9yIHRlYW0gezF9IGlzIGludmFsaWQuXCIsZm9ybWF0aW9uLCB0ZWFtKSk7XHJcblx0XHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCIgIFZhbGlkIGZvcm1hdGlvbnMgYXJlOlxcbiAgezB9XFxuICB7MX1cXG4gIHsyfVwiLFxyXG5cdFx0XHRcdFx0XHRcdG0yUkJfMldSXzFURSwgbTFSQl8zV1JfMVRFLCBtMVJCXzRXUiApKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgVGVhbSAnezB9JyBpcyBpbnZhbGlkLCBPZmZlbnNpdmUgRm9ybWF0aW9uIG5vdCBzZXRcIix0ZWFtKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgdGVhbSdzIG9mZmVuc2l2ZSBmb3JtYXRpb24uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24oc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgoIHRlYW0pO1xyXG5cdFx0XHRzdHJpbmcgcmV0PSBcIk9GRkVOU0lWRV9GT1JNQVRJT04gPSBcIjtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICYmIHRlYW1JbmRleCA8IDI1NSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyArIHRlYW1JbmRleDtcclxuXHRcdFx0XHRpbnQgZm9ybWF0aW9uID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHJcblx0XHRcdFx0c3dpdGNoKCBmb3JtYXRpb24gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgMHgwMDpcclxuXHRcdFx0XHRcdFx0cmV0ICs9IG0yUkJfMldSXzFURTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIDB4MDI6XHJcblx0XHRcdFx0XHRcdHJldCArPSBtMVJCXzNXUl8xVEU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAweDAxOlxyXG5cdFx0XHRcdFx0XHRyZXQgKz0gbTFSQl80V1I7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRcIkVSUk9SISBGb3JtYXRpb24gezA6eH0gZm9yIHRlYW0gezF9IGlzIGludmFsaWQsIFJPTSBGT1JNQVRJT05TIGNvdWxkIGJlIG1lc3NlZCB1cC5cIixmb3JtYXRpb24sIHRlYW0pKTtcclxuXHRcdFx0XHRcdFx0cmV0PVwiXCI7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQ9XCJcIjtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFRlYW0gJ3swfScgaXMgaW52YWxpZCwgT2ZmZW5zaXZlIEZvcm1hdGlvbiBnZXQgZmFpbGVkLlwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgIGludCBtUGxheWJvb2tTdGFydExvYyA9ICAweDFkMzEwOy8vMHgxNzBkMzA7XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldFBsYXlib29rTG9jYXRpb24oaW50IHRlYW1faW5kZXgpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBtUGxheWJvb2tTdGFydExvYyArICh0ZWFtX2luZGV4ICogNCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYSBzdHJpbmcgbGlrZSBcIlBMQVlCT09LIFIxLCBSNCwgUjYsIFI4LCBQMSwgUDMsIFA3LCBQM1wiXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFBsYXlib29rKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gXCJcIjtcclxuXHRcdFx0aW50IHJTbG90MSwgclNsb3QyLCByU2xvdDMsIHJTbG90NCxcclxuXHRcdFx0XHRwU2xvdDEsIHBTbG90MiwgcFNsb3QzLCBwU2xvdDQ7XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gdGVhbXMuSW5kZXhPZih0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL2ludCBwYkxvY2F0aW9uID0gbVBsYXlib29rU3RhcnRMb2MgKyAodGVhbUluZGV4ICogNCk7XHJcblx0XHRcdFx0aW50IHBiTG9jYXRpb24gPSBHZXRQbGF5Ym9va0xvY2F0aW9uKHRlYW1JbmRleCApO1xyXG5cdFx0XHRcdHJTbG90MSA9IG91dHB1dFJvbVtwYkxvY2F0aW9uXSA+PiA0O1xyXG5cdFx0XHRcdHJTbG90MiA9IG91dHB1dFJvbVtwYkxvY2F0aW9uXSAmIDB4MGY7XHJcblx0XHRcdFx0clNsb3QzID0gb3V0cHV0Um9tW3BiTG9jYXRpb24rMV0gPj4gNDtcclxuXHRcdFx0XHRyU2xvdDQgPSBvdXRwdXRSb21bcGJMb2NhdGlvbisxXSAmIDB4MGY7XHJcblxyXG5cdFx0XHRcdHBTbG90MSA9IG91dHB1dFJvbVtwYkxvY2F0aW9uKzJdID4+IDQ7XHJcblx0XHRcdFx0cFNsb3QyID0gb3V0cHV0Um9tW3BiTG9jYXRpb24rMl0gJiAweDBmO1xyXG5cdFx0XHRcdHBTbG90MyA9IG91dHB1dFJvbVtwYkxvY2F0aW9uKzNdID4+IDQ7XHJcblx0XHRcdFx0cFNsb3Q0ID0gb3V0cHV0Um9tW3BiTG9jYXRpb24rM10gJiAweDBmO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHJldCA9IHN0cmluZy5Gb3JtYXQoXHJcblx0XHRcdFx0XHRcIlBMQVlCT09LIFJ7MH17MX17Mn17M30sIFB7NH17NX17Nn17N30gXCIsXHJcblx0XHRcdFx0XHRyU2xvdDErMSwgclNsb3QyKzEsIHJTbG90MysxLCByU2xvdDQrMSxcclxuXHRcdFx0XHRcdHBTbG90MSsxLCBwU2xvdDIrMSwgcFNsb3QzKzEsIHBTbG90NCsxICk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0UmVnZXggcnVuUmVnZXgsIHBhc3NSZWdleDtcclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgdGVhbSdzIHBsYXlib29rXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicnVuUGxheXNcIj5TdHJpbmcgbGlrZSBcIlIxMjM0XCI8L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicGFzc1BsYXlzXCI+U3RyaW5nIGxpa2UgXCJQNDU2N1wiPC9wYXJhbT5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0UGxheWJvb2soIHN0cmluZyB0ZWFtLCBzdHJpbmcgcnVuUGxheXMsIHN0cmluZyBwYXNzUGxheXMgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggcnVuUmVnZXggPT0gbnVsbCB8fCBwYXNzUmVnZXggPT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRydW5SZWdleCAgPSBuZXcgUmVnZXgoXCJSKFsxLThdKShbMS04XSkoWzEtOF0pKFsxLThdKVwiKTtcclxuXHRcdFx0XHRwYXNzUmVnZXggPSBuZXcgUmVnZXgoXCJQKFsxLThdKShbMS04XSkoWzEtOF0pKFsxLThdKVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRNYXRjaCBydW5zID0gcnVuUmVnZXguTWF0Y2gocnVuUGxheXMpO1xyXG5cdFx0XHRNYXRjaCBwYXNzID0gcGFzc1JlZ2V4Lk1hdGNoKHBhc3NQbGF5cyk7XHJcblxyXG5cdFx0XHRpbnQgcjEscjIscjMscjQscDEscDIscDMscDQ7XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gdGVhbXMuSW5kZXhPZih0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICYmIHJ1bnMgIT0gTWF0Y2guRW1wdHkgJiYgcGFzcyAhPSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL2ludCBwYkxvY2F0aW9uID0gbVBsYXlib29rU3RhcnRMb2MgKyAodGVhbUluZGV4ICogNCk7XHJcblx0XHRcdFx0aW50IHBiTG9jYXRpb24gPSBHZXRQbGF5Ym9va0xvY2F0aW9uKHRlYW1JbmRleCApO1xyXG5cclxuXHRcdFx0XHRyMSA9IEludDMyLlBhcnNlKCBydW5zLkdyb3Vwc1sxXS5Ub1N0cmluZygpKSAtIDE7XHJcblx0XHRcdFx0cjIgPSBJbnQzMi5QYXJzZSggcnVucy5Hcm91cHNbMl0uVG9TdHJpbmcoKSkgLSAxO1xyXG5cdFx0XHRcdHIzID0gSW50MzIuUGFyc2UoIHJ1bnMuR3JvdXBzWzNdLlRvU3RyaW5nKCkpIC0gMTtcclxuXHRcdFx0XHRyNCA9IEludDMyLlBhcnNlKCBydW5zLkdyb3Vwc1s0XS5Ub1N0cmluZygpKSAtIDE7XHJcblxyXG5cdFx0XHRcdHAxID0gSW50MzIuUGFyc2UoIHBhc3MuR3JvdXBzWzFdLlRvU3RyaW5nKCkpIC0gMTtcclxuXHRcdFx0XHRwMiA9IEludDMyLlBhcnNlKCBwYXNzLkdyb3Vwc1syXS5Ub1N0cmluZygpKSAtIDE7XHJcblx0XHRcdFx0cDMgPSBJbnQzMi5QYXJzZSggcGFzcy5Hcm91cHNbM10uVG9TdHJpbmcoKSkgLSAxO1xyXG5cdFx0XHRcdHA0ID0gSW50MzIuUGFyc2UoIHBhc3MuR3JvdXBzWzRdLlRvU3RyaW5nKCkpIC0gMTtcclxuXHJcblx0XHRcdFx0cjEgPSAocjEgPDwgNCkgKyByMjtcclxuXHRcdFx0XHRyMyA9IChyMyA8PCA0KSArIHI0O1xyXG5cdFx0XHRcdHAxID0gKHAxIDw8IDQpICsgcDI7XHJcblx0XHRcdFx0cDMgPSAocDMgPDwgNCkgKyBwNDtcclxuXHRcdFx0XHRvdXRwdXRSb21bcGJMb2NhdGlvbl0gICA9IChieXRlKXIxO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtwYkxvY2F0aW9uKzFdID0gKGJ5dGUpcjM7XHJcblx0XHRcdFx0b3V0cHV0Um9tW3BiTG9jYXRpb24rMl0gPSAoYnl0ZSlwMTtcclxuXHRcdFx0XHRvdXRwdXRSb21bcGJMb2NhdGlvbiszXSA9IChieXRlKXAzO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCB0ZWFtSW5kZXggPCAwIClcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgU2V0UGxheWJvb2s6IFRlYW0gezB9IGlzIEludmFsaWQuXCIsdGVhbSkpO1xyXG5cdFx0XHRcdGlmKCBydW5zID09ICBNYXRjaC5FbXB0eSApXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFNldFBsYXlib29rIFJ1biBwbGF5IGRlZmluaXRpb24gJ3swfSAnaXMgSW52YWxpZFwiLCBydW5QbGF5cykpO1xyXG5cdFx0XHRcdGlmKCBwYXNzID09IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgU2V0UGxheWJvb2sgUGFzcyBwbGF5IGRlZmluaXRpb24gJ3swfSAnaXMgSW52YWxpZFwiLCBwYXNzUGxheXMpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyAgaW50IEpVSUNFX0xPQ0FUSU9OID0gMHgxREYxMDtcclxuXHRcdHByb3RlY3RlZCAgYnl0ZVtdIG1fSnVpY2VBcnJheSA9IFxyXG5cdCAgIHtcclxuXHRcdCAgIDAsIDEsIDAsIDAsIDAsXHJcblx0XHQgICAxLCAyLCAxLCAxLCAxLFxyXG5cdFx0ICAgMSwgMiwgMSwgMiwgMiwgXHJcblx0XHQgICAxLCAyLCAxLCAzLCAyLCBcclxuXHRcdCAgIDIsIDIsIDIsIDMsIDMsIFxyXG5cdFx0ICAgMiwgMiwgMiwgNCwgMywgXHJcblx0XHQgICAyLCAyLCAyLCA0LCA0LCBcclxuXHRcdCAgIDIsIDIsIDIsIDUsIDQsIFxyXG5cdFx0ICAgMiwgMiwgMywgNSwgNSwgXHJcblx0XHQgICAyLCAyLCAzLCA2LCA1LCBcclxuXHRcdCAgIDIsIDIsIDQsIDYsIDYsIFxyXG5cdFx0ICAgMywgMiwgNCwgNywgNiwgXHJcblx0XHQgICAzLCAzLCA0LCA3LCA3LCBcclxuXHRcdCAgIDMsIDMsIDUsIDgsIDcsIFxyXG5cdFx0ICAgMywgMywgNSwgOCwgOCwgXHJcblx0XHQgICAzLCAzLCA1LCA5LCA4LFxyXG5cdFx0ICAgMywgNCwgNiwgOSwgOVxyXG5cdCAgIH07XHJcblxyXG5cdFx0cHVibGljIGJvb2wgQXBwbHlKdWljZShpbnQgd2VlaywgaW50IGFtdClcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCByZXQgPSB0cnVlO1xyXG5cdFx0XHRpZiggd2VlayA+IDE3IHx8IHdlZWsgPCAwIHx8IGFtdCA+IDE3IHx8IGFtdCA8IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgcm9tX2xvY2F0aW9uID0gSlVJQ0VfTE9DQVRJT04gKyAod2VlayAqIDUpO1xyXG5cdFx0XHRcdGludCBpbmRleCA9IChhbXQgLSAxICkqIDU7XHJcblx0XHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IDU7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRvdXRwdXRSb21bcm9tX2xvY2F0aW9uK2ldID0gbV9KdWljZUFycmF5W2luZGV4K2ldO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIGFuIEFycmF5TGlzdCBvZiBlcnJvcnMgdGhhdCB3ZXJlIGVuY291bnRlcmVkIGR1cmluZyB0aGUgb3BlcmF0aW9uLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInNjaGVkdWxlTGlzdFwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBBcHBseVNjaGVkdWxlKCBMaXN0PHN0cmluZz4gc2NoZWR1bGVMaXN0IClcclxuXHRcdHtcclxuXHRcdFx0aWYoIHNjaGVkdWxlTGlzdCAhPSBudWxsICYmIG91dHB1dFJvbSAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFNjaGVkdWxlSGVscGVyMiBzY2ggPSBuZXcgU2NoZWR1bGVIZWxwZXIyKCBvdXRwdXRSb20gKTtcclxuXHRcdFx0XHRzY2guQXBwbHlTY2hlZHVsZSggc2NoZWR1bGVMaXN0ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgdm9pZCBQcmludFZhbGlkQWJpbGl0aWVzKClcclxuXHRcdHtcclxuXHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcIlZhbGlkIHBsYXllciBhYmlsaXRpZXMgYXJlIDYsIDEzLCAxOSwgMjUsIDMxLCAzOCwgNDQsIDUwLCA1NiwgNjMsIDY5LCA3NSwgODEsIDg4LCA5NCwgMTAwXCIpKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RyaW5nIFN0cmluZ2lmeUFycmF5KGludFtdIGlucHV0KVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggaW5wdXQgPT0gbnVsbCApXHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0XHRTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIoNDApO1xyXG5cdFx0XHRmb3IoaW50IGkgPSAwOyBpIDwgaW5wdXQuTGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0c2IuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJ7MH0sIFwiLGlucHV0W2ldKSk7XHJcblx0XHRcdHNiLlJlbW92ZShzYi5MZW5ndGgtMiwxKTsgLy90cmltIGxhc3QgY29tbWFcclxuXHRcdFx0cmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnQgbUJpbGxzVW5pZm9ybUxvYyA9IDB4MmMyZTQ7XHJcblxyXG5cdFx0cHJvdGVjdGVkIGludCBCaWxsc1VuaWZvcm1Mb2NcclxuXHRcdHtcclxuXHRcdFx0Z2V0eyByZXR1cm4gbUJpbGxzVW5pZm9ybUxvYzt9XHJcblx0XHRcdHNldHsgbUJpbGxzVW5pZm9ybUxvYyA9IHZhbHVlO31cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldEhvbWVVbmlmb3JtKHN0cmluZyB0ZWFtLCBzdHJpbmcgY29sb3JTdHJpbmcpXHJcblx0XHR7XHJcblx0XHRcdGludCBsb2MgPSBHZXRVbmlmb3JtTG9jKHRlYW0pO1xyXG5cdFx0XHRpbnQgbG9jMj0gR2V0QWN0aW9uU2VxVW5pZm9ybUxvYyh0ZWFtKTtcclxuXHRcdFx0Ynl0ZVtdIGJ5dGVzID0gSW5wdXRQYXJzZXIuR2V0Qnl0ZXNGcm9tU3RyaW5nKGNvbG9yU3RyaW5nKTtcclxuXHRcdFx0aWYobG9jID4gLTEgJiYgbG9jMiA+IC0xICYmIGJ5dGVzICE9IG51bGwgJiYgYnl0ZXMuTGVuZ3RoID4gMiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRieXRlIHBhbnRzQ29sb3IgICAgPSBieXRlc1swXTtcclxuXHRcdFx0XHRieXRlIHNraW5Db2xvciAgICAgPSBieXRlc1sxXTtcclxuXHRcdFx0XHRieXRlIGplcnNleUNvbG9yICAgPSBieXRlc1syXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jXSAgICAgPSBwYW50c0NvbG9yO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MgKyAxXSA9IHNraW5Db2xvcjtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jICsgMl0gPSBqZXJzZXlDb2xvcjtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jMl0gICAgPSBwYW50c0NvbG9yO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MyKyAxXSA9IGplcnNleUNvbG9yO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiBzZXR0aW5nIFVuaWZvcm0xIGZvciB0ZWFtIHswfSwnezF9J1wiLFxyXG5cdFx0XHRcdFx0dGVhbSxjb2xvclN0cmluZykpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRBd2F5VW5pZm9ybShzdHJpbmcgdGVhbSwgc3RyaW5nIGNvbG9yU3RyaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgbG9jID0gR2V0VW5pZm9ybUxvYyh0ZWFtKTtcclxuXHRcdFx0aW50IGxvYzI9IEdldEFjdGlvblNlcVVuaWZvcm1Mb2ModGVhbSk7XHJcblxyXG5cdFx0XHRieXRlW10gYnl0ZXMgPSBJbnB1dFBhcnNlci5HZXRCeXRlc0Zyb21TdHJpbmcoY29sb3JTdHJpbmcpO1xyXG5cdFx0XHRpZihsb2MgPiAtMSAgJiYgbG9jMiA+IC0xICYmIGJ5dGVzICE9IG51bGwgJiYgYnl0ZXMuTGVuZ3RoID4gMiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRieXRlIHBhbnRzQ29sb3IgICAgPSBieXRlc1swXTtcclxuXHRcdFx0XHRieXRlIHNraW5Db2xvciAgICAgPSBieXRlc1sxXTtcclxuXHRcdFx0XHRieXRlIGplcnNleUNvbG9yICAgPSBieXRlc1syXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jICsgM10gPSBwYW50c0NvbG9yO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MgKyA0XSA9IHNraW5Db2xvcjtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jICsgNV0gPSBqZXJzZXlDb2xvcjtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jMisgMl0gPSBwYW50c0NvbG9yO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MyKyAzXSA9IGplcnNleUNvbG9yO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiBzZXR0aW5nIFVuaWZvcm0yIGZvciB0ZWFtIHswfSwnezF9J1wiLFxyXG5cdFx0XHRcdFx0dGVhbSxjb2xvclN0cmluZykpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRIb21lVW5pZm9ybShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0aW50IGxvYyA9IEdldFVuaWZvcm1Mb2ModGVhbSk7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFwiVW5pZm9ybTE9MHh7MDp4Mn17MTp4Mn17Mjp4Mn1cIixcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2NdLCBcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MgKyAxXSwgXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jICsgMl0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRBd2F5VW5pZm9ybShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0aW50IGxvYyA9IEdldFVuaWZvcm1Mb2ModGVhbSk7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFwiVW5pZm9ybTI9MHh7MDp4Mn17MTp4Mn17Mjp4Mn1cIixcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MgKyAzXSwgXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jICsgNF0sIFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvYyArIDVdICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEdldHMgdGhlIGxvY2F0aW9uIG9mIHRoZSBnaXZlbiB0ZWFtJ3MgdW5pZm9ybSBkYXRhLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPlRoZSBsb2NhdGlvbiBvZiB0aGUgZ2l2ZW4gdGVhbSdzIHVuaWZvcm0gZGF0YSwgLTEgb24gZXJyb3I8L3JldHVybnM+XHJcblx0XHRwcm90ZWN0ZWQgdmlydHVhbCBpbnQgR2V0VW5pZm9ybUxvYyhzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gLTEgJiYgdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gQmlsbHNVbmlmb3JtTG9jICsgKHRlYW1JbmRleCAqIDB4YSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGludCBtQmlsbHNBY3Rpb25TZXFMb2MgPSAweDM0MmQ4O1xyXG5cclxuXHRcdHByb3RlY3RlZCBpbnQgQmlsbHNBY3Rpb25TZXFMb2NcclxuXHRcdHtcclxuXHRcdFx0Z2V0e3JldHVybiBtQmlsbHNBY3Rpb25TZXFMb2M7fVxyXG5cdFx0XHRzZXR7IG1CaWxsc0FjdGlvblNlcUxvYyA9IHZhbHVlO31cclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgbG9jYXRpb24gb2YgdGhlIGdpdmVuIHRlYW0ncyB1bmlmb3JtIGRhdGEuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+VGhlIGxvY2F0aW9uIG9mIHRoZSBnaXZlbiB0ZWFtJ3MgdW5pZm9ybSBkYXRhLCAtMSBvbiBlcnJvcjwvcmV0dXJucz5cclxuXHRcdHByb3RlY3RlZCB2aXJ0dWFsIGludCBHZXRBY3Rpb25TZXFVbmlmb3JtTG9jKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAtMSAmJiB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBCaWxsc0FjdGlvblNlcUxvYyArICh0ZWFtSW5kZXggKiAweDgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRHYW1lVW5pZm9ybShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0cmV0ID0gc3RyaW5nLkZvcm1hdChcInswfSwgezF9XCIsIEdldEhvbWVVbmlmb3JtKHRlYW0pLCBHZXRBd2F5VW5pZm9ybSh0ZWFtKSk7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnQgbUJpbGxzRGl2Q2hhbXBMb2MgID0gMHgzNDNlODtcclxuXHJcblx0XHRwcm90ZWN0ZWQgaW50IEJpbGxzRGl2Q2hhbXBMb2NcclxuXHRcdHtcclxuXHRcdFx0Z2V0eyByZXR1cm4gbUJpbGxzRGl2Q2hhbXBMb2M7IH1cclxuXHRcdFx0c2V0XHJcblx0XHRcdHtcclxuXHRcdFx0XHRtQmlsbHNEaXZDaGFtcExvYyA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRwcml2YXRlIGludCBtQmlsbHNDb25mQ2hhbXBMb2MgPSAweDM0NDk0O1xyXG5cclxuXHRcdHByb3RlY3RlZCBpbnQgQmlsbHNDb25mQ2hhbXBMb2NcclxuXHRcdHtcclxuXHRcdFx0Z2V0e3JldHVybiBtQmlsbHNDb25mQ2hhbXBMb2M7fVxyXG5cdFx0XHRzZXR7IG1CaWxsc0NvbmZDaGFtcExvYyA9IHZhbHVlO31cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldERpdkNoYW1wTG9jKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAtMSAmJiB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBCaWxsc0RpdkNoYW1wTG9jICsgKHRlYW1JbmRleCAqIDB4NSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldENvbmZDaGFtcExvYyhzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gLTEgJiYgdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gQmlsbHNDb25mQ2hhbXBMb2MgKyAodGVhbUluZGV4ICogMHg0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0RGl2Q2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0sIHN0cmluZyBjb2xvclN0cmluZylcclxuXHRcdHtcclxuXHRcdFx0aW50IGxvYyA9IEdldERpdkNoYW1wTG9jKHRlYW0pO1xyXG5cdFx0XHRieXRlW10gY29sb3JCeXRlcyA9IElucHV0UGFyc2VyLkdldEJ5dGVzRnJvbVN0cmluZyhjb2xvclN0cmluZyk7XHJcblx0XHRcdC8vajEsajIsajMsaDEsaDI7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSAmJiBjb2xvckJ5dGVzICE9IG51bGwgJiYgY29sb3JCeXRlcy5MZW5ndGggPiA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0T3V0cHV0Um9tW2xvY10gPSBjb2xvckJ5dGVzWzBdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrMV0gPSBjb2xvckJ5dGVzWzFdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrMl0gPSBjb2xvckJ5dGVzWzJdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrM10gPSBjb2xvckJ5dGVzWzNdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrNF0gPSBjb2xvckJ5dGVzWzRdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXREaXZDaGFtcENvbG9ycyhzdHJpbmcgdGVhbSApXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXQgPSBTdHJpbmcuRW1wdHk7XHJcblx0XHRcdGludCBsb2MgPSBHZXREaXZDaGFtcExvYyh0ZWFtKTtcclxuXHRcdFx0aWYoIGxvYyA+IC0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldCA9IHN0cmluZy5Gb3JtYXQoXCJEaXZDaGFtcD0weHswOngyfXsxOngyfXsyOngyfXszOngyfXs0OngyfVwiLFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvY10sXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jKzFdLFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvYysyXSxcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MrM10sXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jKzRdXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRDb25mQ2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0sIHN0cmluZyBjb2xvclN0cmluZylcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IFN0cmluZy5FbXB0eTtcclxuXHRcdFx0aW50IGxvYyA9IEdldENvbmZDaGFtcExvYyh0ZWFtKTtcclxuXHRcdFx0Ynl0ZVtdIGNvbG9yQnl0ZXMgPSBJbnB1dFBhcnNlci5HZXRCeXRlc0Zyb21TdHJpbmcoY29sb3JTdHJpbmcpO1xyXG5cdFx0XHRpZiggbG9jID4gLTEgJiYgY29sb3JCeXRlcyAhPSBudWxsICYmIGNvbG9yQnl0ZXMuTGVuZ3RoID4gMylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2NdICAgPSBjb2xvckJ5dGVzWzNdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrMV0gPSBjb2xvckJ5dGVzWzBdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrMl0gPSBjb2xvckJ5dGVzWzFdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MrM10gPSBjb2xvckJ5dGVzWzJdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRDaGFtcENvbG9ycyhzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5Gb3JtYXQoXCJ7MH0sIHsxfVwiLFxyXG5cdFx0XHRcdEdldERpdkNoYW1wQ29sb3JzKHRlYW0pLFxyXG5cdFx0XHRcdEdldENvbmZDaGFtcENvbG9ycyh0ZWFtKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldENvbmZDaGFtcENvbG9ycyhzdHJpbmcgdGVhbSApXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXQgPSBTdHJpbmcuRW1wdHk7XHJcblx0XHRcdGludCBsb2MgPSBHZXRDb25mQ2hhbXBMb2ModGVhbSk7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFwiQ29uZkNoYW1wPTB4ezA6eDJ9ezE6eDJ9ezI6eDJ9ezM6eDJ9XCIsXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jKzFdLFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvYysyXSxcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MrM10sXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jXVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0VW5pZm9ybVVzYWdlKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gU3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRpbnQgbG9jID0gR2V0VW5pZm9ybUxvYyh0ZWFtKSs2O1xyXG5cdFx0XHQvLyA0IGJ5dGVzLzMyYml0c1xyXG5cdFx0XHRpZiggbG9jID4gLTEgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gc3RyaW5nLkZvcm1hdChcIlVuaWZvcm1Vc2FnZT0weHswOngyfXsxOngyfXsyOngyfXszOngyfVwiLFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvY10sXHJcblx0XHRcdFx0XHRPdXRwdXRSb21bbG9jKzFdLFxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW2xvYysyXSxcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MrM11cclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRVbmlmb3JtVXNhZ2Uoc3RyaW5nIHRlYW0sIHN0cmluZyB1c2FnZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IGxvYyA9IEdldFVuaWZvcm1Mb2ModGVhbSkrNjtcclxuXHRcdFx0aW50IGxvYzIgPSBHZXRBY3Rpb25TZXFVbmlmb3JtTG9jKHRlYW0pKzQ7XHJcblx0XHRcdGJ5dGVbXSBjb2xvckJ5dGVzID0gSW5wdXRQYXJzZXIuR2V0Qnl0ZXNGcm9tU3RyaW5nKHVzYWdlKTtcclxuXHRcdFx0aWYoIGxvYyA+IC0xICYmIGNvbG9yQnl0ZXMgIT0gbnVsbCAmJiBjb2xvckJ5dGVzLkxlbmd0aCA+IDMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jXSAgID0gY29sb3JCeXRlc1swXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jKzFdID0gY29sb3JCeXRlc1sxXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jKzJdID0gY29sb3JCeXRlc1syXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jKzNdID0gY29sb3JCeXRlc1szXTtcclxuXHJcblx0XHRcdFx0T3V0cHV0Um9tW2xvYzJdICAgPSBjb2xvckJ5dGVzWzBdO1xyXG5cdFx0XHRcdE91dHB1dFJvbVtsb2MyKzFdID0gY29sb3JCeXRlc1sxXTtcclxuXHRcdFx0XHRPdXRwdXRSb21bbG9jMisyXSA9IGNvbG9yQnl0ZXNbMl07XHJcblx0XHRcdFx0T3V0cHV0Um9tW2xvYzIrM10gPSBjb2xvckJ5dGVzWzNdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldFJldHVyblRlYW0oc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MwLCBzdHJpbmcgcG9zMSwgc3RyaW5nIHBvczIpXHJcblx0XHR7XHJcblx0XHRcdC8vIGRvIG5vdGhpbmdcclxuXHRcdH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBTRVQoIDB4MzI4NTMsIDB4MDgwMCApXHJcbiAgICAgICAgLy9odHRwOi8vdGVjbW9ib3dsLm9yZy90b3BpYy8xMTc1NS1lZGl0aW5nLXByby1ib3dsLXJvc3RlcnMtZm9yLTMyLXRlYW0tcm9tLyNlbnRyeTEwNDQ5M1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgaW50IG1Qcm93Ym93bFN0YXJ0aW5nTG9jID0gMHgzMjg1MztcclxuXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjb25mXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJwcm9Cb3dsUG9zXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJmcm9tVGVhbVwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZnJvbVRlYW1Qb3NcIj48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFByb0Jvd2xQbGF5ZXIoQ29uZmVyZW5jZSBjb25mLCBTdHJpbmcgcHJvQm93bFBvcywgU3RyaW5nIGZyb21UZWFtLCBUU0JQbGF5ZXIgZnJvbVRlYW1Qb3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL05GQyA9PiAzMCoyICsgKGludCkgXHJcbiAgICAgICAgICAgIGludCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoY29uZiA9PSBDb25mZXJlbmNlLk5GQylcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA2MDsgLy8oMzAgc3BvdHMgKiAyIGJ5dGVzKTtcclxuICAgICAgICAgICAgaW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleChmcm9tVGVhbSk7XHJcbiAgICAgICAgICAgIGlmICh0ZWFtSW5kZXggPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFN0cmluZy5Gb3JtYXQoXCJFcnJvciwgdGVhbSAnezB9JyBpcyBpbnZhbGlkXCIsZnJvbVRlYW0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBieXRlIHZhbDEgPSAoYnl0ZSl0ZWFtSW5kZXg7XHJcbiAgICAgICAgICAgIGJ5dGUgdmFsMiA9IChieXRlKWZyb21UZWFtUG9zO1xyXG5cclxuICAgICAgICAgICAgaW50IHBvc0luZGV4ID0gR2V0UG9zaXRpb25JbmRleChwcm9Cb3dsUG9zKTtcclxuICAgICAgICAgICAgaW50IGxvYyA9IG1Qcm93Ym93bFN0YXJ0aW5nTG9jICsgb2Zmc2V0ICsgKDIqIHBvc0luZGV4KTtcclxuICAgICAgICAgICAgT3V0cHV0Um9tW2xvY10gPSB2YWwxO1xyXG4gICAgICAgICAgICBPdXRwdXRSb21bbG9jKzFdID0gdmFsMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJjb25mXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJwcm9Cb3dsUG9zXCI+PC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBTdHJpbmcgR2V0UHJvQm93bFBsYXllcihDb25mZXJlbmNlIGNvbmYsIFN0cmluZyBwcm9Cb3dsUG9zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nIHJldCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGludCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoY29uZiA9PSBDb25mZXJlbmNlLk5GQylcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA2MDsgLy8oMzAgc3BvdHMgKiAyIGJ5dGVzKTtcclxuICAgICAgICAgICAgaW50IGxvYyA9IG1Qcm93Ym93bFN0YXJ0aW5nTG9jICsgb2Zmc2V0ICsgKDIqIEdldFBvc2l0aW9uSW5kZXgocHJvQm93bFBvcykpO1xyXG4gICAgICAgICAgICBpbnQgdGVhbUluZGV4ID0gT3V0cHV0Um9tW2xvY107XHJcbiAgICAgICAgICAgIGludCBwb3MgPSBPdXRwdXRSb21bbG9jKzFdO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0gPSBUZWFtc1t0ZWFtSW5kZXhdO1xyXG4gICAgICAgICAgICByZXQgPSBTdHJpbmcuRm9ybWF0KFwiezB9LHsxfSx7Mn0sezN9XCIsY29uZi5Ub1N0cmluZygpLCBcclxuICAgICAgICAgICAgICAgIHByb0Jvd2xQb3MuVG9TdHJpbmcoKSx0ZWFtLCAoKFRTQlBsYXllcilwb3MpLlRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBTdHJpbmcgR2V0Q29uZmVyZW5jZVByb0Jvd2xQbGF5ZXJzKENvbmZlcmVuY2UgY29uZilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKDUwMCk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgcG9zaXRpb25OYW1lcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRQcm9Cb3dsUGxheWVyKGNvbmYsIHBvc2l0aW9uTmFtZXNbaV0pKTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU3RyaW5nIEdldFByb0Jvd2xQbGF5ZXJzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKDEwMDApO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIiMgQUZDIFByb0Jvd2wgcGxheWVyc1xcclxcblwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0Q29uZmVyZW5jZVByb0Jvd2xQbGF5ZXJzKENvbmZlcmVuY2UuQUZDKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxyXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCIjIE5GQyBQcm9Cb3dsIHBsYXllcnNcXHJcXG5cIik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldENvbmZlcmVuY2VQcm9Cb3dsUGxheWVycyhDb25mZXJlbmNlLk5GQykpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcclxcblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgUHJvY2Vzc1RleHQoc3RyaW5nIHRleHQpXHJcblx0XHR7XHJcblx0XHRcdElucHV0UGFyc2VyIHBhcnNlciA9IG5ldyBJbnB1dFBhcnNlcih0aGlzKTtcclxuXHRcdFx0dGV4dCA9IHRleHQuUmVwbGFjZShcIlxcclxcblwiLCBcIlxcblwiKTtcclxuXHRcdFx0c3RyaW5nW10gbGluZXMgPSB0ZXh0LlNwbGl0KFwiXFxuXCIuVG9DaGFyQXJyYXkoKSk7XHJcblx0XHRcdHBhcnNlci5Qcm9jZXNzTGluZXMobGluZXMpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5JTztcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2xcclxue1xyXG5cdC8vLyA8c3VtbWFyeT5cclxuXHQvLy8gU3VtbWFyeSBkZXNjcmlwdGlvbiBmb3IgU05FU19UZWNtb1Rvb2wuXHJcblx0Ly8vIExvY2F0aW9uID0gcG9pbnRlciAtIDB4ODAwMCArIDB4MDAxMDtcclxuXHQvLy8gV2hlcmUgcG9pbnRlciBpcyBvZiB0aGUgJ3N3YXBwZWQnIGZvcm1hdCBsaWtlICcweDg2ZGQnXHJcblx0Ly8vIDwvc3VtbWFyeT5cclxuICAgIHB1YmxpYyBjbGFzcyBTTkVTX1RlY21vVG9vbCA6IElUZWNtb1Rvb2wsIElUZWNtb0NvbnRlbnRcclxuXHR7XHJcblx0XHRwcml2YXRlIGJ5dGVbXSBvdXRwdXRSb207XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBuYW1lTnVtYmVyU2VnbWVudEVuZCAgICAgID0gMTU1NDQxNjtcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IG5hbWVQb2ludGVyc1N0YXJ0ICAgICAgICAgPSAweDE3ODAzODtcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IHBsYXllck51bWJlck5hbWVEYXRhU3RhcnQgPSAweDE3ODczYTtcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IHRlYW1TaW1PZmZlbnNpdmVQcmVmU3RhcnQgPSAweDE1REZBOyAvLzB4Mjc1MjY7XHJcblx0XHRwcm90ZWN0ZWQgICAgIGludCBkYXRhUG9zaXRpb25PZmZzZXQgICAgICAgID0gMHgxNzAwMDA7XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBwcl9rcl9zdGFydF9vZmZzZXQgICAgICAgID0gMHgxNzBjOTA7XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBwcl9rcl90ZWFtX3N0YXJ0X29mZnNldCAgID0gMTUxMDU3NjtcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IGxhc3RQb2ludGVyICAgICAgICAgICAgICAgPSAweDE3ODczODsgLy89IDB4MTc4NzM2O1xyXG5cclxuXHRcdHByaXZhdGUgY29uc3QgaW50IFJPTV9MRU5HVEggICAgICAgICAgICAgICAgPSAxNTcyODY0O1xyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgdGhlIHJvbSB2ZXJzaW9uIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgUk9NX1RZUEUgUm9tVmVyc2lvbiB7IGdldCB7IHJldHVybiBST01fVFlQRS5TTkVTX1RTQjE7IH0gfVxyXG5cclxuXHRcdC8vXHRcdHByaXZhdGUgYm9vbCBtU2hvd1RlYW1Gb3JtYXRpb24gPSBmYWxzZTtcclxuXHRcdC8vXHJcblx0XHQvL1x0XHRwcml2YXRlIGludCBzdGFydFNjcmVlbkxpbmUxTG9jID0gMHhjNGVjOy8vIFRPRE8gYWxsb3cgdXNlciB0byBlZGl0IHRoZXNlIDIgbGluZXMuXHJcblx0XHQvL1x0XHRwcml2YXRlIGludCBzdGFydFNjcmVlbkxpbmUyTG9jID0gMHhjNTA0O1xyXG5cdFx0XHJcblx0XHRwdWJsaWMgYnl0ZVtdIE91dHB1dFJvbVxyXG5cdFx0e1xyXG5cdFx0XHRnZXR7IHJldHVybiBvdXRwdXRSb207fVxyXG5cdFx0XHRzZXR7IG91dHB1dFJvbSA9IHZhbHVlOyB9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGJvb2wgU2hvd09mZlByZWZcclxuXHRcdHtcclxuXHRcdFx0Z2V0eyByZXR1cm4gbVNob3dPZmZQcmVmO31cclxuXHRcdFx0c2V0eyBtU2hvd09mZlByZWYgPSB2YWx1ZTt9XHJcblx0XHR9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBHVUlfTU9ERSA9IGZhbHNlO1xyXG5cdFx0cHVibGljIHN0YXRpYyBib29sIEFVVE9fQ09SUkVDVF9TQ0hFRFVMRSA9IHRydWU7XHJcblxyXG5cdFx0cHJpdmF0ZSBib29sIG1TaG93T2ZmUHJlZiA9IHRydWU7XHJcblx0XHRcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IGJpbGxzUUIxU2ltTG9jICA9IDB4MjZhY2Y7IC8vMHgxODE2MztcclxuXHRcdHByaXZhdGUgY29uc3QgaW50IGJpbGxzUkVTaW1Mb2MgICA9IDB4MjZhZTc7IC8vMHgxODE3YjtcclxuXHRcdFxyXG5cdFx0cHJpdmF0ZSBjb25zdCBpbnQgYmlsbHNUZWFtU2ltTG9jID0gMHgyNmFmZTsvLzB4MTgxOTI7XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCB0ZWFtU2ltT2Zmc2V0ICAgPSAweDMwO1xyXG5cdFx0XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBiaWxsc1FCMUFiaWxpdHlTdGFydCA9IDB4MTdlMDAwO1xyXG5cdFx0cHJpdmF0ZSBjb25zdCBpbnQgdGVhbUFiaWxpdHlPZmZzZXQgPSAweDdEO1xyXG5cdFx0cHVibGljICBjb25zdCBpbnQgUVVBUlRFUl9MRU5HVEggPSAweEEwRUU7XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnRbXSBhYmlsaXR5T2Zmc2V0cz17ICAgMHgwMCwgMHgwNSwgMHgwQSwgMHgwRSwgMHgxMiwgMHgxNiwgMHgxQSwgMHgxRSwgMHgyMiwgMHgyNiwgMHgyQSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgMHgyRSwgMHgzMiwgMHgzNSwgMHgzOCwgNTksIDB4M0UsIDB4NDEsIDB4NDUsIDB4NDksIDB4NEQsIDB4NTEsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0IDB4NTUsIDB4NTksIDB4NUQsIDB4NjEsIDB4NjUsIDB4NjksIDB4NkQsIDB4NzEsIDB4NzUsIDB4NzkgIH07XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnRbXSBnYW1lWWVhckxvY2F0aW9ucyA9IHsgMTg4Nzc5LCAgMHgxMjMyOWUsIDB4MTIzMzQ4LCAweDE3MTA2OSwgMTUxMjE4NyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgMHgxNzEzM2MsIDB4MTcyYzg0LCAweDE3MmQwMiwgLy8weDE3MmQxMCwgLy8weDE3MmNhZSwgXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIC8qMHgxNzJkMDIsKi8gMHgxNzJkM2UsIDE1MTg5MzksIDBYMTcyRDFGXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICB9O1xyXG5cclxuXHRcdHByaXZhdGUgIHN0cmluZ1tdIHBvc2l0aW9uTmFtZXMgPSB7IFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBcIlFCMVwiLCBcIlFCMlwiLCBcIlJCMVwiLCBcIlJCMlwiLCAgXCJSQjNcIiwgIFwiUkI0XCIsICBcIldSMVwiLCAgXCJXUjJcIiwgXCJXUjNcIiwgXCJXUjRcIiwgXCJURTFcIiwgXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIFwiVEUyXCIsIFwiQ1wiLCAgIFwiTEdcIiwgIFwiUkdcIiwgICBcIkxUXCIsICAgXCJSVFwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICBcIlJFXCIsICBcIk5UXCIsICBcIkxFXCIsICBcIlJPTEJcIiwgXCJSSUxCXCIsIFwiTElMQlwiLCBcIkxPTEJcIiwgXCJSQ0JcIiwgXCJMQ0JcIiwgXCJGU1wiLCAgXCJTU1wiLCAgXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIFwiS1wiLCAgIFwiUFwiICwgIFwiREIxXCIsIFwiREIyXCJcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIH07XHJcblxyXG5cdFx0cHJpdmF0ZSBzdGF0aWMgIHN0cmluZ1tdIHRlYW1zID1cclxuXHRcdHtcclxuXHRcdFx0XCJiaWxsc1wiLCAgIFwiY29sdHNcIiwgIFwiZG9scGhpbnNcIiwgXCJwYXRyaW90c1wiLCAgXCJqZXRzXCIsXHJcblx0XHRcdFwiYmVuZ2Fsc1wiLCBcImJyb3duc1wiLCBcIm9pbGVyc1wiLCAgIFwic3RlZWxlcnNcIixcclxuXHRcdFx0XCJicm9uY29zXCIsIFwiY2hpZWZzXCIsIFwicmFpZGVyc1wiLCAgXCJjaGFyZ2Vyc1wiLCAgXCJzZWFoYXdrc1wiLFxyXG5cdFx0XHRcImNvd2JveXNcIiwgXCJnaWFudHNcIiwgXCJlYWdsZXNcIiwgICBcImNhcmRpbmFsc1wiLCBcInJlZHNraW5zXCIsXHJcblx0XHRcdFwiYmVhcnNcIiwgICBcImxpb25zXCIsICBcInBhY2tlcnNcIiwgIFwidmlraW5nc1wiLCAgIFwiYnVjY2FuZWVyc1wiLFxyXG5cdFx0XHRcImZhbGNvbnNcIiwgXCJyYW1zXCIsICAgXCJzYWludHNcIiwgICBcIjQ5ZXJzXCJcclxuXHRcdH07XHJcblxyXG5cdFx0cHJpdmF0ZSBzdGF0aWMgIHN0cmluZ1tdIG1TaW1UZWFtcyA9XHJcblx0XHR7XHJcblx0XHRcdFwiYmlsbHNcIiwgICAgXCJjb2x0c1wiLCAgXCJkb2xwaGluc1wiLCBcInBhdHJpb3RzXCIsICBcImpldHNcIixcclxuXHRcdFx0XCJiZW5nYWxzXCIsICBcImJyb3duc1wiLCBcIm9pbGVyc1wiLCAgIFwic3RlZWxlcnNcIixcclxuXHRcdFx0XCJicm9uY29zXCIsICBcImNoaWVmc1wiLCBcInJhaWRlcnNcIiwgIFwiY2hhcmdlcnNcIiwgIFwic2VhaGF3a3NcIixcclxuXHRcdFx0XCJyZWRza2luc1wiLCBcImdpYW50c1wiLCBcImVhZ2xlc1wiLCAgIFwiY2FyZGluYWxzXCIsIFwiY293Ym95c1wiLFxyXG5cdFx0XHRcImJlYXJzXCIsICAgIFwibGlvbnNcIiwgIFwicGFja2Vyc1wiLCAgXCJ2aWtpbmdzXCIsICAgXCJidWNjYW5lZXJzXCIsXHJcblx0XHRcdFwiNDllcnNcIiwgICAgXCJyYW1zXCIsICAgXCJzYWludHNcIiwgICBcImZhbGNvbnNcIlxyXG5cdFx0fTtcclxuXHJcblx0XHRwdWJsaWMgU05FU19UZWNtb1Rvb2woYnl0ZVtdIHJvbSlcclxuXHRcdHtcclxuXHRcdFx0SW5pdChyb20pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmdbXSBHZXRUZWFtcygpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0ZWFtcztcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RyaW5nW10gR2V0UG9zaXRpb25OYW1lcygpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBwb3NpdGlvbk5hbWVzO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBib29sIElzVmFsaWRQb3NpdGlvbiggc3RyaW5nIHBvcyApXHJcblx0XHR7XHJcblx0XHRcdGJvb2wgcmV0ID0gZmFsc2U7XHJcblx0XHRcdGZvciggaW50IGkgPSAwOyBpIDwgcG9zaXRpb25OYW1lcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHBvcyA9PSBwb3NpdGlvbk5hbWVzW2ldIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0YnJlYWs7O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBib29sIElzVmFsaWRUZWFtKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRib29sIHJldCA9IGZhbHNlO1xyXG5cdFx0XHRmb3IoIGludCBpID0gMDsgaSA8IHRlYW1zLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYodGVhbSA9PSB0ZWFtc1tpXSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cmV0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGJyZWFrOztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuICAgICAgICAvLyB1c2UgdGhpcyBpbnN0ZWFkIG9mIGRpcmVjdG95IHNldHRpbmcgZGF0YSBpbiBPdXRwdXRSb21cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRCeXRlKGludCBsb2NhdGlvbiwgYnl0ZSBiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5PdXRwdXRSb21bbG9jYXRpb25dID0gYjtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cHJvdGVjdGVkIGJvb2wgSW5pdChieXRlW10gcm9tKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gUmVhZFJvbShyb20pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFRlc3QyKClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHRlYW0gPSBcImJpbGxzXCI7XHJcblx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCBwb3NpdGlvbk5hbWVzLkxlbmd0aDtpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRJbnNlcnRQbGF5ZXIodGVhbSxwb3NpdGlvbk5hbWVzW2ldLFwicGxheWVyXCIsdGVhbSwgKGJ5dGUpIChpICUgMTApKTtcclxuXHRcdFx0XHRzd2l0Y2gocG9zaXRpb25OYW1lc1tpXSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYXNlIFwiUUIxXCI6ICBjYXNlIFwiUUIyXCI6IFxyXG5cdFx0XHRcdFx0XHRTZXRRQkFiaWxpdGllcyh0ZWFtLHBvc2l0aW9uTmFtZXNbaV0sMzEsMzEsMzEsMzEsMzEsMzEsMzEsMzEpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgXCJSQjFcIjogY2FzZSBcIlJCMlwiOiBjYXNlIFwiUkIzXCI6IGNhc2UgXCJSQjRcIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJXUjFcIjogY2FzZSBcIldSMlwiOiBjYXNlIFwiV1IzXCI6IGNhc2UgXCJXUjRcIjpcclxuXHRcdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOiBcclxuXHRcdFx0XHRcdFx0U2V0U2tpbGxQbGF5ZXJBYmlsaXRpZXModGVhbSxwb3NpdGlvbk5hbWVzW2ldLDMxLDMxLDMxLDMxLDMxLDMxKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIFwiQ1wiOiAgIGNhc2UgXCJSR1wiOlx0Y2FzZSBcIkxHXCI6XHJcblx0XHRcdFx0XHRjYXNlIFwiUlRcIjpcdGNhc2UgXCJMVFwiOiBcclxuXHRcdFx0XHRcdFx0U2V0T0xQbGF5ZXJBYmlsaXRpZXModGVhbSxwb3NpdGlvbk5hbWVzW2ldLDMxLDMxLDMxLDMxKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIFwiUkVcIjogICBjYXNlIFwiTlRcIjogICBjYXNlIFwiTEVcIjogICBjYXNlIFwiTE9MQlwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIkxJTEJcIjogY2FzZSBcIlJJTEJcIjogY2FzZSBcIlJPTEJcIjogY2FzZSBcIlJDQlwiOlxyXG5cdFx0XHRcdFx0Y2FzZSBcIkxDQlwiOiAgY2FzZSBcIkZTXCI6ICAgY2FzZSBcIlNTXCI6IFxyXG5cdFx0XHRcdFx0XHRTZXREZWZlbnNpdmVQbGF5ZXJBYmlsaXRpZXModGVhbSxwb3NpdGlvbk5hbWVzW2ldLDMxLDMxLDMxLDMxLDMxLDMxKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIFwiS1wiOiAgXHJcblx0XHRcdFx0XHRjYXNlIFwiUFwiOiAgXHJcblx0XHRcdFx0XHRcdFNldEtpY2tQbGF5ZXJBYmlsaXRpZXModGVhbSxwb3NpdGlvbk5hbWVzW2ldLDMxLDMxLDMxLDMxLDMxLDMxKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgc2hpZnRUZXN0KClcclxuXHRcdHtcclxuXHRcdFx0Ynl0ZVtdIHN0dWZmICA9IHsweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxyXG5cdFx0XHRcdFx0XHRcdFx0MHg0YSwgMHg0YywgMHg0ZSwweDUwLCAweDUyLCAweDU0LCAweDU2LCAweDU4LCAweDVhLCBcclxuXHRcdFx0XHRcdFx0XHRcdDB4NWMsIDB4NWUsIDB4NjAsIDB4NjIsIDB4NjQsIDB4NjYsIDB4NjgsIDB4NmEsIDB4NmMsIFxyXG5cdFx0XHRcdFx0XHRcdFx0MHg2ZSwgMHg3MCwgMHg3MiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZlx0fTtcclxuXHRcdFx0Zm9yKGludCBpID0wOyBpIDwgc3R1ZmYuTGVuZ3RoOyBpKyspXHJcblx0XHRcdFx0Q29uc29sZS5Xcml0ZShcIiB7MDp4fSBcIixzdHVmZltpXSk7XHJcblx0XHRcdENvbnNvbGUuV3JpdGVMaW5lKCk7XHJcblx0XHRcdENvbnNvbGUuV3JpdGVMaW5lKFwic2hpZnQgM1wiKTtcclxuXHRcdFx0dGhpcy5TaGlmdERhdGFEb3duKDYsIHN0dWZmLkxlbmd0aC03LCAzLCBzdHVmZik7XHJcblx0XHRcdGZvcihpbnQgaSA9MDsgaSA8IHN0dWZmLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHRcdENvbnNvbGUuV3JpdGUoXCIgezA6eH0gXCIsc3R1ZmZbaV0pO1xyXG5cdFx0XHRDb25zb2xlLldyaXRlTGluZSgpO1xyXG5cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cHVibGljIGJvb2wgUmVhZFJvbShieXRlW10gcm9tIClcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCByZXQgPSBmYWxzZTtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHQgcmVzdWx0ID0gXHJcblx0XHRcdFx0XHRTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHQuWWVzO1xyXG5cdFx0XHRcdGxvbmcgbGVuID0gcm9tLkxlbmd0aDtcclxuXHRcdFx0XHRpZiggbGVuICE9IFJPTV9MRU5HVEggKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKCBNYWluQ2xhc3MuR1VJX01PREUgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94LlNob3cobnVsbCwgXHJcblx0XHRcdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRAXCJXYXJuaW5nISBcclxuXHJcblRoZSBpbnB1dCBSb20gaXMgbm90IHRoZSBjb3JyZWN0IFNpemUgKHswfSBieXRlcykuXHJcblxyXG5Zb3Ugc2hvdWxkIG9ubHkgY29udGludWUgaWYgeW91IGtub3cgZm9yIHN1cmUgdGhhdCB5b3UgYXJlIGxvYWRpbmcgYSBzbmVzIFRTQjEgUk9NLlxyXG5cclxuRG8geW91IHdhbnQgdG8gY29udGludWU/XCIsUk9NX0xFTkdUSCksXHJcblx0XHRcdFx0XHRcdFx0XCJXQVJOSU5HIVwiLFxyXG5cdFx0XHRcdFx0XHRcdFN5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zLlllc05vLFxyXG5cdFx0XHRcdFx0XHRcdFN5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uLldhcm5pbmcgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RyaW5nIG1zZyA9IFN0cmluZy5Gb3JtYXQoXHJcblx0XHRcdFx0XHRcdFx0QFwiRVJST1IhIFJPTSAnezB9JyBpcyBub3QgdGhlIGNvcnJlY3QgbGVuZ3RoLiAgXHJcbiAgICBMZWdpdCBUU0IxIHNuZXMgUk9NUyBhcmUgezF9IGJ5dGVzIGxvbmcuXHJcbiAgICBJZiB5b3Uga25vdyB0aGlzIGlzIHJlYWxseSBhIHNuZXMgVFNCMSBST00sIHlvdSBjYW4gZm9yY2UgVFNCVG9vbFN1cHJlbWUgdG8gbG9hZCBpdCBpbiBHVUkgbW9kZS5cIixcclxuXHRcdFx0XHRcdFx0XHRcIjxmaWxlbmFtZT5cIiwgUk9NX0xFTkdUSCk7XHJcblx0XHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKG1zZyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKCByZXN1bHQgPT0gU3lzdGVtLldpbmRvd3MuRm9ybXMuRGlhbG9nUmVzdWx0LlllcyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0b3V0cHV0Um9tID0gcm9tOyBcclxuXHRcdFx0XHRcdC8vXHRcdFx0XHRcdGlmKCBsZW4gPT0gUk9NX0xFTkdUSCArIDB4MjAwICkvLyB3b3Jrc1xyXG5cdFx0XHRcdFx0Ly9cdFx0XHRcdFx0ey8vIHNvbWUgVFNCMSBzbmVzIFJPTVMgYXJlIGxpa2UgdGhpcywgd2UnbGwganVzdCBzdHJpcCB0aGUgZmlyc3QgXHJcblx0XHRcdFx0XHQvL1x0XHRcdFx0XHRcdGJ5dGVbXSBuZXdSb20gPSBuZXcgYnl0ZVtST01fTEVOR1RIXTtcclxuXHRcdFx0XHRcdC8vXHRcdFx0XHRcdFx0QXJyYXkuQ29weShvdXRwdXRSb20sMHgyMDAsIG5ld1JvbSwwLG5ld1JvbS5MZW5ndGgpO1xyXG5cdFx0XHRcdFx0Ly9cdFx0XHRcdFx0XHRvdXRwdXRSb20gPSBuZXdSb207XHJcblx0XHRcdFx0XHQvL1x0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChFeGNlcHRpb24gZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLlNob3dFcnJvcihlLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgU2F2ZVJvbShzdHJpbmcgZmlsZW5hbWUpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBmaWxlbmFtZSAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRyeVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGxvbmcgbGVuID0gb3V0cHV0Um9tLkxlbmd0aDtcclxuXHRcdFx0XHRcdEZpbGVTdHJlYW0gczEgPSBuZXcgRmlsZVN0cmVhbShmaWxlbmFtZSwgRmlsZU1vZGUuT3Blbk9yQ3JlYXRlKTtcclxuXHRcdFx0XHRcdHMxLldyaXRlIChvdXRwdXRSb20sMCwoaW50KWxlbik7XHJcblx0XHRcdFx0XHRzMS5DbG9zZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjYXRjaChFeGNlcHRpb24gZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3IoZS5Ub1N0cmluZygpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IoXCJFUlJPUiEgWW91IHBhc3NlZCBhIG51bGwgZmlsZW5hbWVcIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyBhIHN0cmluZyBjb25zaXN0aW5nIG9mIG51bWJlciwgbmFtZVxcbiBmb3IgYWxsIHBsYXllcnMgaW4gdGhlIGdhbWUuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0UGxheWVyU3R1ZmYoYm9vbCBqZXJzZXlOdW1iZXJfYiwgYm9vbCBuYW1lX2IsIGJvb2wgZmFjZV9iLCBcclxuXHRcdFx0Ym9vbCBhYmlsaXRpZXNfYiwgYm9vbCBzaW1EYXRhX2IpXHJcblx0XHR7XHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcigxNioyOCozMCozKTtcclxuXHRcdFx0c3RyaW5nIHRlYW09XCJcIjtcclxuXHRcdFx0Zm9yKGludCBpID0wOyBpIDwgdGVhbXMuTGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0ZWFtID0gdGVhbXNbaV07XHJcblx0XHRcdFx0c2IuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJURUFNPXswfVxcblwiLHRlYW0pKTtcclxuXHRcdFx0XHRmb3IoaW50IGogPSAwOyBqIDwgcG9zaXRpb25OYW1lcy5MZW5ndGg7IGorKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzYi5BcHBlbmQoR2V0UGxheWVyRGF0YSh0ZWFtLHBvc2l0aW9uTmFtZXNbal0sYWJpbGl0aWVzX2IsamVyc2V5TnVtYmVyX2IsZmFjZV9iLG5hbWVfYixzaW1EYXRhX2IpK1wiXFxuXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gc2IuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFNjaGVkdWxlKClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IFwiXCI7XHJcblx0XHRcdGlmKCBvdXRwdXRSb20gIT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTTkVTX1NjaGVkdWxlSGVscGVyIHNoMiA9IG5ldyBTTkVTX1NjaGVkdWxlSGVscGVyKG91dHB1dFJvbSk7XHJcblx0XHRcdFx0cmV0ID0gc2gyLkdldFNjaGVkdWxlKCk7XHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5TaG93RXJyb3JzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRZZWFyKHN0cmluZyB5ZWFyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZih5ZWFyID09IG51bGwgfHwgeWVhci5MZW5ndGggIT0gNClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgezB9IGlzIG5vdCBhIHZhbGlkIHllYXIuXCIseWVhcikpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgbG9jYXRpb247XHJcblx0XHRcdGZvcihpbnQgaSA9IDAgOyBpIDwgZ2FtZVllYXJMb2NhdGlvbnMuTGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsb2NhdGlvbiA9IGdhbWVZZWFyTG9jYXRpb25zW2ldO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gICA9IChieXRlKXllYXJbMF07XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzFdID0gKGJ5dGUpeWVhclsxXTtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMl0gPSAoYnl0ZSl5ZWFyWzJdO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbiszXSA9IChieXRlKXllYXJbM107XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoeWVhciAhPSBcIjE5OTNcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vIFRoaXMgc3BvdCBpbiB0aGUgUk9NIGRvZXNuJ3QgbGlrZSBjaGFuZ2VcclxuXHRcdFx0XHQvLyBzbyB3ZSBqdXN0IGJsYW5rIGl0IG91dC5cclxuXHRcdFx0XHRvdXRwdXRSb21bMHgxNzJkMDJdID0gKGJ5dGUpJyAnO1xyXG5cdFx0XHRcdG91dHB1dFJvbVsweDE3MmQwM10gPSAoYnl0ZSknICc7XHJcblx0XHRcdFx0b3V0cHV0Um9tWzB4MTcyZDA0XSA9IChieXRlKScgJztcclxuXHRcdFx0XHRvdXRwdXRSb21bMHgxNzJkMDVdID0gKGJ5dGUpJyAnO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly8weDJFMTkzID0gMjh0aCAgKDI4dGggc3VwZXJib3dsKVxyXG5cdFx0XHRcdGludCB0aGVZZWFyID0gSW50MzIuUGFyc2UoeWVhcik7XHJcblx0XHRcdFx0aW50IHN1cGVyYm93bE51bWJlciA9IHRoZVllYXItMTk2NTtcclxuXHRcdFx0XHRpZiggc3VwZXJib3dsTnVtYmVyIDwgMCApXHJcblx0XHRcdFx0XHRzdXBlcmJvd2xOdW1iZXIgPSAwO1xyXG5cclxuXHRcdFx0XHRzdHJpbmcgc2J3Oy8vID0gc3VwZXJib3dsTnVtYmVyLlRvU3RyaW5nKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRcdHN0cmluZyBzdWZmaXggPSBcIlRIXCI7XHJcblx0XHRcdFx0aW50IHRlc3QgPSBzdXBlcmJvd2xOdW1iZXIgJSAxMDtcclxuXHRcdFx0XHJcblx0XHRcdFx0c3dpdGNoKHRlc3QpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y2FzZSAxOiBzdWZmaXggPSBcIlNUXCI7IGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAyOiBzdWZmaXggPSBcIk5EXCI7IGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAzOiBzdWZmaXggPSBcIlJEXCI7IGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihzdXBlcmJvd2xOdW1iZXIgPCAxMClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzYncgPSBcIiBcIitzdXBlcmJvd2xOdW1iZXIrc3VmZml4O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKCBzdXBlcmJvd2xOdW1iZXIgPCAyMSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c2J3ID0gXCIgXCIrc3VwZXJib3dsTnVtYmVyK1wiVEhcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHNidyA9IHN1cGVyYm93bE51bWJlcitzdWZmaXg7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHJcblx0XHRcdFx0b3V0cHV0Um9tWzB4MkUxOTNdID0gKGJ5dGUpc2J3WzBdO1xyXG5cdFx0XHRcdG91dHB1dFJvbVsweDJFMTk0XSA9IChieXRlKXNid1sxXTtcclxuXHRcdFx0XHRvdXRwdXRSb21bMHgyRTE5NV0gPSAoYnl0ZSlzYndbMl07XHJcblx0XHRcdFx0b3V0cHV0Um9tWzB4MkUxOTZdID0gKGJ5dGUpc2J3WzNdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKEV4Y2VwdGlvbiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihcIlByb2JsZW0gc2V0dGluZyBzdXBlcmJvd2wgbnVtYmVyLlwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0WWVhcigpXHJcblx0XHR7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IGdhbWVZZWFyTG9jYXRpb25zWzBdO1xyXG5cdFx0XHRzdHJpbmcgcmV0ID1cIlwiO1xyXG5cdFx0XHRmb3IoaW50IGkgPWxvY2F0aW9uOyBpIDwgbG9jYXRpb24rNDsgaSsrKVxyXG5cdFx0XHRcdHJldCArPSAoY2hhcilvdXRwdXRSb21baV07XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIEluc2VydFBsYXllcihzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBwb3NpdGlvbiwgXHJcblx0XHRcdHN0cmluZyBmbmFtZSwgXHJcblx0XHRcdHN0cmluZyBsbmFtZSwgXHJcblx0XHRcdGJ5dGUgbnVtYmVyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24pIHx8IGZuYW1lID09IG51bGwgfHwgbG5hbWUgPT0gbnVsbCB8fCBmbmFtZS5MZW5ndGggPCAxIHx8IGxuYW1lLkxlbmd0aCA8IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEluc2VydFBsYXllcjo6IFBsYXllciBuYW1lIG9yIHBvc2l0aW9uIGludmFsaWRcIikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZuYW1lID0gZm5hbWUuVG9Mb3dlcigpO1xyXG5cdFx0XHRcdGxuYW1lID0gbG5hbWUuVG9VcHBlcigpOyAvLzE1IDE4ICBjaGFyIG1heCBmb3IgbmFtZVxyXG5cdFx0XHRcdGlmKGxuYW1lLkxlbmd0aCArIGZuYW1lLkxlbmd0aCA+IDE3KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJXYXJuaW5nISEgVGhlcmUgaXMgYSAxNyBjaGFyYWN0ZXIgbGltaXQgZm9yIG5hbWVzXFxuICd7MH0gezF9JyBpcyB7Mn0gY2hhcmFjdGVycyBsb25nLlwiLFxyXG5cdFx0XHRcdFx0XHRmbmFtZSxsbmFtZSwgZm5hbWUuTGVuZ3RoK2xuYW1lLkxlbmd0aCkpO1xyXG5cdFx0XHRcdFx0aWYobG5hbWUuTGVuZ3RoID4gMTYpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGxuYW1lPSBsbmFtZS5TdWJzdHJpbmcoMCwxMik7XHJcblx0XHRcdFx0XHRcdC8vZm5hbWUgPVwiXCIrZm5hbWVbMF0rXCIuXCI7XHJcblx0XHRcdFx0XHRcdGZuYW1lID0gc3RyaW5nLkZvcm1hdChcInswfS5cIixmbmFtZVswXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdGZuYW1lID0gc3RyaW5nLkZvcm1hdChcInswfS5cIixmbmFtZVswXSk7XHJcblx0XHRcdFx0XHQvL2ZuYW1lID0gXCJcIitmbmFtZVswXTtcclxuXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiTmFtZSB3aWxsIGJlIHswfSB7MX1cIiwgZm5hbWUsIGxuYW1lICkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihmbmFtZS5MZW5ndGggPCAxKVxyXG5cdFx0XHRcdFx0Zm5hbWUgPSBcIkpvZVwiO1xyXG5cdFx0XHRcdGlmKGxuYW1lLkxlbmd0aCA8IDEpXHJcblx0XHRcdFx0XHRsbmFtZSA9IFwiTm9ib2R5XCI7XHJcblx0XHRcdFxyXG5cdFx0XHRcdHN0cmluZyBvbGROYW1lID0gR2V0TmFtZSh0ZWFtLHBvc2l0aW9uKTtcclxuXHRcdFx0XHRieXRlW10gYnl0ZXMgPSBuZXcgYnl0ZVsxK2ZuYW1lLkxlbmd0aCtsbmFtZS5MZW5ndGhdO1xyXG5cdFx0XHRcdGludCBjaGFuZ2UgPSBieXRlcy5MZW5ndGggLSBvbGROYW1lLkxlbmd0aDtcclxuXHRcdFx0XHRpbnQgaT0wO1xyXG5cdFx0XHRcdGJ5dGVzWzBdID0gbnVtYmVyO1xyXG5cdFx0XHRcdGZvcihpPTE7IGkgPCBmbmFtZS5MZW5ndGgrMTsgaSsrKVxyXG5cdFx0XHRcdFx0Ynl0ZXNbaV0gPSAoYnl0ZSlmbmFtZVtpLTFdO1xyXG5cdFx0XHRcdGZvcihpbnQgaiA9IDA7aiA8IGxuYW1lLkxlbmd0aDtqKyspXHJcblx0XHRcdFx0XHRieXRlc1tpKytdPShieXRlKWxuYW1lW2pdOyBcclxuXHRcdFx0XHRpbnQgcG9zID0gR2V0UG9pbnRlclBvc2l0aW9uKHRlYW0scG9zaXRpb24pO1xyXG5cclxuXHRcdFx0XHRVcGRhdGVQbGF5ZXJEYXRhKHRlYW0scG9zaXRpb24sYnl0ZXMsIGNoYW5nZSk7XHJcblx0XHRcdFx0QWRqdXN0RGF0YVBvaW50ZXJzKHBvcywgY2hhbmdlLCBsYXN0UG9pbnRlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgQWRqdXN0RGF0YVBvaW50ZXJzKGludCBwb3MsIGludCBjaGFuZ2UsIGludCBsYXN0UG9pbnRlckxvY2F0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlIGxvdywgaGk7XHJcblx0XHRcdGludCAgd29yZDtcclxuXHRcdFx0Ly8gbGFzdCBwb2ludGVyIGlzIGF0IDB4MTc4NzM4XHJcblx0XHRcdFxyXG5cdFx0XHRpbnQgaT0wO1xyXG5cdFx0XHRpbnQgZW5kID0gbGFzdFBvaW50ZXJMb2NhdGlvbiArMTsvL2hlcmUgd2FzIGp1c3QgbGFzdFBvaW50ZXJcclxuXHRcdFx0Zm9yKCBpID0gcG9zKzI7IGkgPCBlbmQ7IGkrPTIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsb3cgID0gIG91dHB1dFJvbVtpXTtcclxuXHRcdFx0XHRoaSAgID0gIG91dHB1dFJvbVtpKzFdO1xyXG5cdFx0XHRcdHdvcmQgPSAgaGk7XHJcblx0XHRcdFx0d29yZCA9ICB3b3JkIDw8IDg7XHJcblx0XHRcdFx0d29yZCArPSBsb3c7XHJcblx0XHRcdFx0d29yZCArPSBjaGFuZ2U7XHJcblx0XHRcdFx0bG93ICA9ICAoYnl0ZSkod29yZCAmIDB4MDBmZik7XHJcblx0XHRcdFx0d29yZCA9ICB3b3JkID4+IDg7XHJcblx0XHRcdFx0aGkgICA9ICAoYnl0ZSl3b3JkO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtpXSA9IGxvdztcclxuXHRcdFx0XHRvdXRwdXRSb21baSsxXSA9IGhpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRoZSB0ZWFtIHRoZSBwbGF5ZXIgaXMgYXNzaWduZWQgdG8uPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+VGhlIHBsYXllcidzIHBvc2l0aW9uICgnUUIxJywgJ1dSMScgLi4uKTwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0cmluZyBHZXROYW1lKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXROYW1lOjogdGVhbSAnezB9JyBvciBwb3NpdGlvbiAnezF9JyBpcyBpbnZhbGlkLlwiLFxyXG5cdFx0XHRcdFx0dGVhbSxwb3NpdGlvbikpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCBwb3MgPSBHZXREYXRhUG9zaXRpb24odGVhbSxwb3NpdGlvbik7XHJcblx0XHRcdGludCBuZXh0UG9zID0gR2V0TmV4dERhdGFQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuXHRcdFx0c3RyaW5nIG5hbWUgPVwiXCI7XHJcblxyXG5cdFx0XHRpZiggcG9zIDwgMCApXHJcblx0XHRcdFx0cmV0dXJuIFwiRVJST1IhXCI7XHJcblx0XHRcdGlmKG5leHRQb3MgPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly9zdGFydCBhdCBwb3MrMSB0byBza2lwIGhpcyBqZXJzZXkgbnVtYmVyLiBcclxuXHRcdFx0XHRmb3IoaW50IGkgPSBwb3MrMTtpIDwgbmV4dFBvcyA7IGkrKylcclxuXHRcdFx0XHRcdG5hbWUgKz0gKGNoYXIpb3V0cHV0Um9tW2ldO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0eyAvLyA0OWVycyBEQjJcclxuXHRcdFx0XHRmb3IoaW50IGkgPSBwb3MrMTtvdXRwdXRSb21baV0gIT0gMHhmZiA7IGkrKylcclxuXHRcdFx0XHRcdG5hbWUgKz0gKGNoYXIpb3V0cHV0Um9tW2ldO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCBzcGxpdCA9MTtcclxuXHRcdFx0Zm9yKGludCBpPTA7IGkgPCBuYW1lLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoKGJ5dGUpbmFtZVtpXSA+IDY0ICYmIChieXRlKW5hbWVbaV0gPCA5MSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzcGxpdCA9IGk7IGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nIGZpcnN0LGxhc3QsZnVsbDtcclxuXHRcdFx0ZnVsbCA9IG51bGw7XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zmlyc3QgPSBuYW1lLlN1YnN0cmluZygwLHNwbGl0KTtcclxuXHRcdFx0XHRsYXN0ID0gbmFtZS5TdWJzdHJpbmcoc3BsaXQpO1xyXG5cdFx0XHRcdGZ1bGwgPSBmaXJzdCtcIiBcIitsYXN0O1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gZnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFBsYXllckRhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgYm9vbCBhYmlsaXR5X2IsXHJcblx0XHRcdGJvb2wgamVyc2V5TnVtYmVyX2IsIGJvb2wgZmFjZV9iLCBib29sIG5hbWVfYixib29sIHNpbURhdGFfYiApXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBUZWFtIHswfSBpcyBpbnZhbGlkLlwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCAhSXNWYWxpZFBvc2l0aW9uKHBvc2l0aW9uKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIHBvc2l0aW9uIHswfSBpcyBpbnZhbGlkLlwiLHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgcmVzdWx0ID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcclxuXHJcblx0XHRcdC8vcmVzdWx0LkFwcGVuZCggc3RyaW5nLkZvcm1hdChcInswfSwgezF9LCBGYWNlPTB4ezI6eH0sIFwiLFxyXG5cdFx0XHQvL1x0cG9zaXRpb24sIEdldE5hbWUodGVhbSxwb3NpdGlvbiksIEdldEZhY2UodGVhbSxwb3NpdGlvbikpKTtcclxuXHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiezB9LCBcIixwb3NpdGlvbikpO1xyXG5cdFx0XHRpZihuYW1lX2IpXHJcblx0XHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiezB9LCBcIixHZXROYW1lKHRlYW0scG9zaXRpb24pKSk7XHJcblx0XHRcdGlmKGZhY2VfYilcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJGYWNlPTB4ezA6eH0sIFwiLEdldEZhY2UodGVhbSxwb3NpdGlvbikpKTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gR2V0RGF0YVBvc2l0aW9uKHRlYW0scG9zaXRpb24pO1xyXG5cclxuXHRcdFx0aWYobG9jYXRpb24gPCAwIClcclxuXHRcdFx0XHRyZXR1cm4gXCJNZXNzZWQgVXAgUG9pbnRlclwiO1xyXG5cclxuXHRcdFx0c3RyaW5nIGplcnNleU51bWJlciA9IHN0cmluZy5Gb3JtYXQoXCIjezA6eH0sIFwiLChieXRlKW91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG5cdFx0XHRpZihqZXJzZXlOdW1iZXJfYilcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKGplcnNleU51bWJlcik7XHJcblx0XHRcdGlmKGFiaWxpdHlfYilcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKEdldEFiaWxpdHlTdHJpbmcodGVhbSxwb3NpdGlvbikpO1xyXG5cdFx0XHRpbnRbXSBzaW1EYXRhID0gR2V0UGxheWVyU2ltRGF0YSh0ZWFtLHBvc2l0aW9uKTtcclxuXHRcdFx0aWYoc2ltRGF0YSAhPSBudWxsICYmIHNpbURhdGFfYilcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKCBzdHJpbmcuRm9ybWF0KFwiLFt7MH1dXCIsU3RyaW5naWZ5QXJyYXkoc2ltRGF0YSkpKTtcclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5Ub1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0S2V5KClcclxuXHRcdHtcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5Gb3JtYXQoXHJcbkBcIiMgVFNCVG9vbCBGb3J1bTogaHR0cHM6Ly90ZWNtb2Jvd2wub3JnL2ZvcnVtcy90b3BpYy8xMTEwNi10c2ItZWRpdG9yLXRzYnRvb2wtc3VwcmVtZS1zZWFzb24tZ2VuZXJhdG9yL1xyXG4jIEVkaXRpbmc6IFRlY21vIFN1cGVyIEJvd2wgSSAoc25lcykgW3swfV1cclxuIyBcclxuIyBEb3VibGUgY2xpY2sgb24gYSB0ZWFtIG5hbWUgKG9yIHBsYXlib29rKSB0byBicmluZyB1cCB0aGUgZWRpdCBUZWFtIEdVSS5cclxuIyBEb3VibGUgY2xpY2sgb24gYSBwbGF5ZXIgdG8gYnJpbmcgdXAgdGhlIGVkaXQgcGxheWVyIEdVSSAoQ2xpY2sgJ1NpbSBEYXRhJ1xyXG4jICAgYnV0dG9uIHRvIGZpbmQgb3V0IG1vcmUgb24gU2ltIERhdGEpLiBcclxuIyBLZXlcclxuIyAtLSBRdWFydGVyYmFja3M6XHJcbiMgUG9zaXRpb24sIE5hbWUgKGZpcnN0IExBU1QpLCBGYWNlSUQsIEplcnNleSBudW1iZXIsIFJQLCBSUywgTVMsIEhQLCBQUywgUEMsIFBBLCBBUEIsIFtTaW0gcnVzaCwgU2ltIHBhc3MsIFNpbSBQb2NrZXRdLlxyXG4jIC0tIE9mZmVuc2l2ZSBTa2lsbCBwbGF5ZXJzIChub24tUUIpOlxyXG4jIFBvc2l0aW9uLCBOYW1lIChmaXJzdCBMQVNUKSwgRmFjZUlELCBKZXJzZXkgbnVtYmVyLCBSUCwgUlMsIE1TLCBIUCwgQkMsIFJFQywgW1NpbSBydXNoLCBTaW0gY2F0Y2gsIFNpbSBwdW50IFJldCwgU2ltIGtpY2sgcmV0XS5cclxuIyAtLSBPZmZlbnNpdmUgTGluZW1lbjpcclxuIyBQb3NpdGlvbiwgTmFtZSAoZmlyc3QgTEFTVCksIEZhY2VJRCwgSmVyc2V5IG51bWJlciwgUlAsIFJTLCBNUywgSFBcclxuIyAtLSBEZWZlbnNpdmUgUGxheWVyczpcclxuIyBQb3NpdGlvbiwgTmFtZSAoZmlyc3QgTEFTVCksIEZhY2VJRCwgSmVyc2V5IG51bWJlciwgUlAsIFJTLCBNUywgSFAsIFBJLCBRVSwgW1NpbSBwYXNzIHJ1c2gsIFNpbSBjb3ZlcmFnZV0uXHJcbiMgLS0gUHVudGVycyBhbmQgS2lja2VyczpcclxuIyBQb3NpdGlvbiwgTmFtZSAoZmlyc3QgTEFTVCksIEZhY2VJRCwgSmVyc2V5IG51bWJlciwgUlAsIFJTLCBNUywgSFAsIEtBLCBBS0IsWyBTaW0ga2lja2luZyBhYmlsaXR5XS5cclxuIyBURUFNOlxcblxyXG4jICBuYW1lLCBTaW1EYXRhICAweDxvZmZlbnNlPjxkZWZlbnNlPjxvZmZlbnNlIHByZWZlcmVuY2U+XHJcbiMgIE9mZmVuc2l2ZSBwcmVmIHZhbHVlcyAwLTMuIFxyXG4jICAgICAwID0gTGl0dGxlIG1vcmUgcnVzaGluZywgMSA9IEhlYXZ5IFJ1c2hpbmcsXHJcbiMgICAgIDIgPSBsaXR0bGUgbW9yZSBwYXNzaW5nLCAzID0gSGVhdnkgUGFzc2luZy5cclxuIyBjcmVkaXQgdG8gZWx3YXk3IGZvciBmaW5kaW5nXHQnb2ZmZW5zZSBwcmVmZXJlbmNlJ1wiLCB0aGlzLlJvbVZlcnNpb24pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0VGVhbVBsYXllcnMoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0gKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFRlYW1QbGF5ZXJzOjogdGVhbSB7MH0gaXMgaW52YWxpZC5cIix0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgcmVzdWx0ID0gbmV3IFN0cmluZ0J1aWxkZXIoNDEqIHBvc2l0aW9uTmFtZXMuTGVuZ3RoKTtcclxuXHRcdFx0c3RyaW5nIHBvcztcclxuXHRcdFx0Ynl0ZSB0ZWFtU2ltRGF0YSA9IEdldFRlYW1TaW1EYXRhKHRlYW0pO1xyXG5cdFx0XHRzdHJpbmcgZGF0YSA9IFwiXCI7XHJcblx0XHRcdGlmKHRlYW1TaW1EYXRhIDwgMHhmKVxyXG5cdFx0XHRcdGRhdGEgPSBzdHJpbmcuRm9ybWF0KFwiMHswOnh9XCIsdGVhbVNpbURhdGEpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0ZGF0YSA9IHN0cmluZy5Gb3JtYXQoXCJ7MDp4fVwiLHRlYW1TaW1EYXRhKTtcclxuXHRcdFx0aWYoIFNob3dPZmZQcmVmIClcclxuXHRcdFx0XHRkYXRhICs9IEdldFRlYW1TaW1PZmZlbnNlUHJlZih0ZWFtKTtcclxuXHJcblx0XHRcdHN0cmluZyB0ZWFtU3RyaW5nID0gc3RyaW5nLkZvcm1hdChcIlRFQU0gPSB7MH0gU2ltRGF0YT0weHsxfVwiLHRlYW0sIGRhdGEpO1xyXG5cdFx0XHRyZXN1bHQuQXBwZW5kKCB0ZWFtU3RyaW5nICk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiggVGVjbW9Ub29sLlNob3dUZWFtRm9ybWF0aW9uIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJlc3VsdC5BcHBlbmQoc3RyaW5nLkZvcm1hdChcIiwgezB9XCIsIEdldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24odGVhbSkgKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmVzdWx0LkFwcGVuZChcIlxcblwiKTtcclxuXHJcblx0XHRcdGlmKCBUZWNtb1Rvb2wuU2hvd1BsYXlib29rIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJlc3VsdC5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfVxcblwiLCBHZXRQbGF5Ym9vayh0ZWFtKSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChUZWNtb1Rvb2wuU2hvd1RlYW1TdHJpbmdzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJURUFNX0FCQj17MH0sVEVBTV9DSVRZPXsxfSxURUFNX05BTUU9ezJ9XFxuXCIsIEdldFRlYW1BYmJyZXZpYXRpb24odGVhbUluZGV4KSwgR2V0VGVhbUNpdHkodGVhbUluZGV4KSwgR2V0VGVhbU5hbWUodGVhbUluZGV4KSkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IoaW50IGkgPTA7IGkgPCBwb3NpdGlvbk5hbWVzLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cG9zID0gcG9zaXRpb25OYW1lc1tpXTtcclxuXHRcdFx0XHRyZXN1bHQuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJ7MH1cXG5cIixHZXRQbGF5ZXJEYXRhKHRlYW0scG9zLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSkgKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmVzdWx0LkFwcGVuZChzdHJpbmcuRm9ybWF0KFwiezB9XFxuXCIsIEdldFJldHVyblRlYW0odGVhbSkgKSApO1xyXG5cdFx0XHRyZXN1bHQuQXBwZW5kKCBzdHJpbmcuRm9ybWF0KFwiS1IsIHswfVxcblBSLCB7MX1cXG5cIixHZXRLaWNrUmV0dXJuZXIodGVhbSksR2V0UHVudFJldHVybmVyKHRlYW0pKSk7XHJcblx0XHRcdHJlc3VsdC5BcHBlbmQoXCJcXG5cIik7XHJcblx0XHRcdHJldHVybiByZXN1bHQuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHQjcmVnaW9uIFRlYW0gU3RyaW5nIFRhYmxlIFN0dWZmXHJcblx0XHRwdWJsaWMgdmlydHVhbCBpbnQgTnVtYmVyT2ZTdHJpbmdzSW5UZWFtU3RyaW5nVGFibGUgeyBnZXQgeyByZXR1cm4gMzA7IH0gfVxyXG5cclxuXHRcdHB1YmxpYyB2b2lkIFNldFRlYW1TdHJpbmdUYWJsZVN0cmluZyhpbnQgc3RyaW5nSW5kZXgsIHN0cmluZyBuZXdWYWx1ZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IGp1bmsgPSAwO1xyXG5cdFx0XHRzdHJpbmcgb2xkVmFsdWUgPSBHZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcoc3RyaW5nSW5kZXgpO1xyXG5cdFx0XHRpZiAob2xkVmFsdWUgPT0gbmV3VmFsdWUpXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRpbnQgc2hpZnRBbW91bnQgPSBuZXdWYWx1ZS5MZW5ndGggLSBvbGRWYWx1ZS5MZW5ndGg7XHJcblx0XHRcdGlmIChzaGlmdEFtb3VudCAhPSAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IGN1cnJlbnRQb2ludGVyTG9jYXRpb24gPSBHZXRUZWFtU3RyaW5nVGFibGVTdGFydCgpICsgMiAqIHN0cmluZ0luZGV4O1xyXG5cdFx0XHRcdGludCBsYXN0UG9pbnRlckxvY2F0aW9uID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RhcnQoKSArIDIgKiBOdW1iZXJPZlN0cmluZ3NJblRlYW1TdHJpbmdUYWJsZTtcclxuXHRcdFx0XHRBZGp1c3REYXRhUG9pbnRlcnMoY3VycmVudFBvaW50ZXJMb2NhdGlvbiwgc2hpZnRBbW91bnQsIGxhc3RQb2ludGVyTG9jYXRpb24pO1xyXG5cdFx0XHRcdGludCBzdGFydFBvc2l0aW9uID0gR2V0VGVhbVN0cmluZ1RhYmxlTG9jYXRpb24oc3RyaW5nSW5kZXggKyAxLCBvdXQganVuaykgLSAxO1xyXG5cdFx0XHRcdGludCBlbmRQb3NpdGlvbiA9IDB4NzMzMDtcclxuXHRcdFx0XHRpZiAoc2hpZnRBbW91bnQgPCAwKVxyXG5cdFx0XHRcdFx0U2hpZnREYXRhVXAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHNoaWZ0QW1vdW50ID4gMClcclxuXHRcdFx0XHRcdFNoaWZ0RGF0YURvd24oc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGxheSBkb3duIHRoZSB2YWx1ZVxyXG5cdFx0XHRpbnQgc3RhcnRMb2MgPSBHZXRUZWFtU3RyaW5nVGFibGVMb2NhdGlvbihzdHJpbmdJbmRleCwgb3V0IHNoaWZ0QW1vdW50KTtcclxuXHRcdFx0Zm9yIChpbnQgaSA9IDA7IGkgPCBuZXdWYWx1ZS5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmIChuZXdWYWx1ZVtpXSA9PSAnKicpIC8vIGRvIHRoZSBzdGFyIHN1YnN0aXR1dGlvblxyXG5cdFx0XHRcdFx0T3V0cHV0Um9tW3N0YXJ0TG9jICsgaV0gPSAwO1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdE91dHB1dFJvbVtzdGFydExvYyArIGldID0gKGJ5dGUpbmV3VmFsdWVbaV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKGludCBzdHJpbmdJbmRleClcclxuXHRcdHtcclxuXHRcdFx0aW50IGxlbmd0aCA9IDA7XHJcblx0XHRcdGludCBzdHJpbmdTdGFydGluZ0xvY2F0aW9uID0gR2V0VGVhbVN0cmluZ1RhYmxlTG9jYXRpb24oc3RyaW5nSW5kZXgsIG91dCBsZW5ndGgpO1xyXG5cclxuXHRcdFx0Y2hhcltdIHN0cmluZ0NoYXJzID0gbmV3IGNoYXJbbGVuZ3RoXTtcclxuXHRcdFx0Zm9yIChpbnQgaSA9IDA7IGkgPCBzdHJpbmdDaGFycy5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0cmluZ0NoYXJzW2ldID0gKGNoYXIpT3V0cHV0Um9tW3N0cmluZ1N0YXJ0aW5nTG9jYXRpb24gKyBpXTtcclxuXHRcdFx0XHRpZiAoc3RyaW5nQ2hhcnNbaV0gPT0gMClcclxuXHRcdFx0XHRcdHN0cmluZ0NoYXJzW2ldID0gJyonO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0cmluZyByZXRWYWwgPSBuZXcgc3RyaW5nKHN0cmluZ0NoYXJzKTtcclxuXHRcdFx0cmV0dXJuIHJldFZhbDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlICdUZWFtJyBzdHJpbmcgdGFibGUuIFRoaXMgc3RyaW5nIHRhYmxlIFxyXG5cdFx0Ly8vIGNvbnRhaW5zIHRoZSBjaXR5IGFiYnJldmlhdGlvbnMsIGNpdHkgbmFtZXMgYW5kIHRlYW0gbmFtZXMuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwic3RyaW5nSW5kZXhcIj5UaGUgaW5kZXggb2YgdGhlIHN0cmluZyB0byBnZXQuPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImxlbmd0aFwiPm91dCBwYXJhbSBzdG9yZXMgdGhlIGxlbmd0aC48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPlJldHVybnMgdGhlIGxvY2F0aW9uIG9mIHRoZSBzdHJpbmcgYXQgdGhlIHNwZWNpZmllZCBpbmRleC48L3JldHVybnM+XHJcblx0XHRwcml2YXRlIGludCBHZXRUZWFtU3RyaW5nVGFibGVMb2NhdGlvbihpbnQgc3RyaW5nSW5kZXgsIG91dCBpbnQgbGVuZ3RoKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbV9zdHJpbmdfdGFibGVfbG9jID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RhcnQoKTtcclxuXHRcdFx0aW50IHBvaW50ZXJfbG9jID0gdGVhbV9zdHJpbmdfdGFibGVfbG9jICsgMiAqIHN0cmluZ0luZGV4O1xyXG5cdFx0XHRieXRlIGIxID0gT3V0cHV0Um9tW3BvaW50ZXJfbG9jICsgMV07XHJcblx0XHRcdGJ5dGUgYjIgPSBPdXRwdXRSb21bcG9pbnRlcl9sb2NdO1xyXG5cdFx0XHRieXRlIGIzID0gT3V0cHV0Um9tW3BvaW50ZXJfbG9jICsgM107IC8vIGIzICYgYjQgZm9yIGxlbmd0aFxyXG5cdFx0XHRieXRlIGI0ID0gT3V0cHV0Um9tW3BvaW50ZXJfbG9jICsgMl07XHJcblx0XHRcdGxlbmd0aCA9ICgoYjMgPDwgOCkgKyBiNCkgLSAoKGIxIDw8IDgpICsgYjIpO1xyXG5cdFx0XHRpZiAoc3RyaW5nSW5kZXggPT0gTnVtYmVyT2ZTdHJpbmdzSW5UZWFtU3RyaW5nVGFibGUgLSAxKVxyXG5cdFx0XHRcdGxlbmd0aCA9IDk7IC8vIGhhY2suIHRoZXJlIGFyZSBubyBtb3JlIHBvaW50ZXJzIHRvIHVzZSBmb3IgbGVuZ3RoICAgOicoXHJcblx0XHRcdGludCBwb2ludGVyVmFsID0gKGIxIDw8IDgpICsgYjI7XHJcblx0XHRcdGludCBzdHJpbmdTdGFydGluZ0xvY2F0aW9uID0gcG9pbnRlclZhbCAtIDB4ODAwMDsvLyB0YWJsZSBhZGp1c3RtZW50XHJcblx0XHRcdHJldHVybiBzdHJpbmdTdGFydGluZ0xvY2F0aW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCB2aXJ0dWFsIGludCBHZXRUZWFtU3RyaW5nVGFibGVTdGFydCgpXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtX3N0cmluZ190YWJsZV9sb2MgPSAweDcwMDA7XHJcblx0XHRcdHJldHVybiB0ZWFtX3N0cmluZ190YWJsZV9sb2M7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1OYW1lKGludCB0ZWFtSW5kZXgpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXRWYWwgPSBHZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4KTtcclxuXHRcdFx0aW50IGxhc3RTcGFjZSA9IHJldFZhbC5MYXN0SW5kZXhPZignICcpO1xyXG5cdFx0XHRyZXRWYWwgPSByZXRWYWwuU3Vic3RyaW5nKGxhc3RTcGFjZSsxKS5SZXBsYWNlKFwiKlwiLFwiXCIpO1xyXG5cdFx0XHRyZXR1cm4gcmV0VmFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRUZWFtQ2l0eShpbnQgdGVhbUluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0VmFsID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCkuU3Vic3RyaW5nKDUpO1xyXG5cdFx0XHRpbnQgbGFzdFNwYWNlID0gcmV0VmFsLkxhc3RJbmRleE9mKCcgJyk7XHJcblx0XHRcdHJldFZhbCA9IHJldFZhbC5TdWJzdHJpbmcoMCwgbGFzdFNwYWNlKTtcclxuXHRcdFx0cmV0dXJuIHJldFZhbDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VGVhbUFiYnJldmlhdGlvbihpbnQgdGVhbUluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0VmFsID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCk7XHJcblx0XHRcdHJldFZhbCA9IHJldFZhbC5TdWJzdHJpbmcoMCwgNCk7XHJcblx0XHRcdHJldHVybiByZXRWYWw7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRUZWFtQWJicmV2aWF0aW9uKGludCB0ZWFtSW5kZXgsIHN0cmluZyBhYmIpXHJcblx0XHR7XHJcblx0XHRcdGlmIChhYmIgPT0gbnVsbCB8fCBhYmIuTGVuZ3RoICE9IDQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihTdHJpbmcuRm9ybWF0KFwiRXJyb3IgU2V0dGluZyBUZWFtQWJicmV2aWF0aW9uOyBUZWFtSW5kZXg6ezB9OyBhYmI6ezF9XCIsdGVhbUluZGV4LCBhYmIpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgdGVhbVN0cmluZyA9IFN0cmluZy5Gb3JtYXQoXCJ7MH0qezF9IHsyfSpcIixhYmIsIEdldFRlYW1DaXR5KHRlYW1JbmRleCksIEdldFRlYW1OYW1lKHRlYW1JbmRleCkgKTtcclxuXHRcdFx0XHRTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4LCB0ZWFtU3RyaW5nKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0VGVhbU5hbWUoaW50IHRlYW1JbmRleCwgc3RyaW5nIG5hbWUpXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyB0ZWFtU3RyaW5nID0gU3RyaW5nLkZvcm1hdChcInswfSp7MX0gezJ9KlwiLCBHZXRUZWFtQWJicmV2aWF0aW9uKHRlYW1JbmRleCksIEdldFRlYW1DaXR5KHRlYW1JbmRleCksIG5hbWUpO1xyXG5cdFx0XHRTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4LCB0ZWFtU3RyaW5nKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1DaXR5KGludCB0ZWFtSW5kZXgsIHN0cmluZyBjaXR5KVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgdGVhbVN0cmluZyA9IFN0cmluZy5Gb3JtYXQoXCJ7MH0qezF9IHsyfSpcIiwgR2V0VGVhbUFiYnJldmlhdGlvbih0ZWFtSW5kZXgpLGNpdHksIEdldFRlYW1OYW1lKHRlYW1JbmRleCkpO1xyXG5cdFx0XHRTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4LCB0ZWFtU3RyaW5nKTtcclxuXHRcdH1cclxuXHRcdCNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgc3RyaW5nIEdldEFsbChpbnQgc2Vhc29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEdldEFsbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRQcm9Cb3dsUGxheWVycyhpbnQgc2Vhc29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEdldFByb0Jvd2xQbGF5ZXJzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldFNjaGVkdWxlKGludCBzZWFzb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gR2V0U2NoZWR1bGUoKTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRBbGwoKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgdGVhbTtcclxuXHRcdFx0U3RyaW5nQnVpbGRlciBhbGwgPSBuZXcgU3RyaW5nQnVpbGRlcigzMCo0MSpwb3NpdGlvbk5hbWVzLkxlbmd0aCk7XHJcblx0XHRcdHN0cmluZyB5ZWFyID0gc3RyaW5nLkZvcm1hdChcIllFQVI9ezB9XFxuXCIsR2V0WWVhcigpKTtcclxuXHRcdFx0YWxsLkFwcGVuZCh5ZWFyKTtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IHRlYW1zLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGVhbSA9IHRlYW1zW2ldO1xyXG5cdFx0XHRcdGFsbC5BcHBlbmQoR2V0VGVhbVBsYXllcnModGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhbGwuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgcG9pbnQgaW4gdGhlIHBsYXllciBudW1iZXIgbmFtZSBkYXRhIHRoYXQgYSBwbGF5ZXIncyBkYXRhIGJlZ2lucy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgaW50IEdldERhdGFQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXREYXRhUG9zaXRpb246OiBlaXRoZXIgdGVhbSB7MH0gb3IgcG9zaXRpb24gezF9IGlzIGludmFsaWQuXCIsIHRlYW0sIHBvc2l0aW9uKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IHRlYW1JbmRleCAgICAgPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdC8vIHRoZSBwbGF5ZXJzIHRvdGFsIGluZGV4IChRQjEgYmlsbHM9MCwgUUIyIGJpbGxzPTIgLi4uKVxyXG5cdFx0XHRpbnQgZ3V5ID0gdGVhbUluZGV4ICogcG9zaXRpb25OYW1lcy5MZW5ndGggKyBwb3NpdGlvbkluZGV4O1xyXG5cdFx0XHRpbnQgcG9pbnRlckxvY2F0aW9uID0gbmFtZVBvaW50ZXJzU3RhcnQgKyAoMiAqIGd1eSk7XHJcblx0XHRcdGJ5dGUgbG93Qnl0ZSA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb25dO1xyXG5cdFx0XHRpbnQgIGhpQnl0ZSAgPSBvdXRwdXRSb21bcG9pbnRlckxvY2F0aW9uKzFdO1xyXG5cdFx0XHRoaUJ5dGUgPSAgaGlCeXRlIDw8IDg7XHJcblx0XHRcdGhpQnl0ZSA9IGhpQnl0ZSArIGxvd0J5dGU7XHJcblxyXG5cdFx0XHQvL2ludCByZXQgPSBoaUJ5dGUgLSAweDgwMDAgKyAweDAxMDtcclxuXHRcdFx0aW50IHJldCA9IGhpQnl0ZSArIGRhdGFQb3NpdGlvbk9mZnNldDsgLy89IDB4MTcwMDAwO1xyXG5cdFx0XHRyZXR1cm4gIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0IHRoZSBzdGFydGluZyBwb2ludCBvZiB0aGUgZ3V5IEFGVEVSIHRoZSBvbmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBpbnQgR2V0TmV4dERhdGFQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXROZXh0RGF0YVBvc2l0aW9uOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgdGkgPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwaSA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRwaSsrO1xyXG5cdFx0XHRpZihwb3NpdGlvbiA9PSBcIkRCMlwiLypcIlBcIiovKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGkrKztcclxuXHRcdFx0XHRwaT0wO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vaWYodGVhbSA9PSBcImZhbGNvbnNcIiAmJiBwb3NpdGlvbiA9PSBcIlBcIiApXHJcblx0XHRcdGlmKHRlYW0gPT0gXCI0OWVyc1wiICYmIHBvc2l0aW9uID09IFwiREIyXCIgKVxyXG5cdFx0XHR7IFxyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIEdldERhdGFQb3NpdGlvbih0ZWFtc1t0aV0scG9zaXRpb25OYW1lc1twaV0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgaW50IEdldFBvaW50ZXJQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRQb2ludGVyUG9zaXRpb246OiBlaXRoZXIgdGVhbSB7MH0gb3IgcG9zaXRpb24gezF9IGlzIGludmFsaWQuXCIsIHRlYW0sIHBvc2l0aW9uKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IHRlYW1JbmRleCAgICAgPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCBwbGF5ZXJTcG90ICAgID0gdGVhbUluZGV4ICogIHBvc2l0aW9uTmFtZXMuTGVuZ3RoICsgcG9zaXRpb25JbmRleDtcclxuXHRcdFx0Ly9pZih0ZWFtID09IFwiZmFsY29uc1wiICYmIHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHQvL1x0cmV0dXJuIDB4NmQ2O1xyXG5cdFx0XHRpZiggdGVhbSA9PSBcIjQ5ZXJzXCIgJiYgcG9zaXRpb24gPT0gXCJEQjJcIiApXHJcblx0XHRcdFx0Ly9yZXR1cm4gbGFzdFBvaW50ZXI7XHJcblx0XHRcdFx0cmV0dXJuIGxhc3RQb2ludGVyLTI7XHJcblxyXG5cdFx0XHRpZihwb3NpdGlvbkluZGV4IDwgMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgUG9zaXRpb24gJ3swfScgZG9lcyBub3QgZXhpc3QuIFZhbGlkIHBvc2l0aW9ucyBhcmU6XCIscG9zaXRpb24pKTtcclxuXHRcdFx0XHRmb3IoaW50IGkgPTE7IGkgPD0gcG9zaXRpb25OYW1lcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHR7XHJcbiAgICAgICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuV3JpdGVFcnJvcihzdHJpbmcuRm9ybWF0KCBcInswfVxcdFwiLCBwb3NpdGlvbk5hbWVzW2ktMV0pKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCBsb2MgPSBuYW1lUG9pbnRlcnNTdGFydCArICh0ZWFtSW5kZXggKiAweDQwKSArICggcG9zaXRpb25JbmRleCAqIDIgKTtcclxuXHRcdFx0cmV0dXJuIGxvYztcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgcGxheWVyIGRhdGEgKGplcnNleSBudW1iZXIsIHBsYXllciBuYW1lKSBpbiB0aGUgZGF0YSBzZWdtZW50LlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj5UaGUgdGVhbSB0aGUgcGxheWVyIGlzIGFzc2lnbmVkIHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPlRoZSBwb3NpdGlvbiB0aGUgcGxheWVyIGlzIGFzc2lnbmVkIHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJieXRlc1wiPlRoZSBwbGF5ZXIncyBudW1iZXIgYW5kIG5hbWUgZGF0YS4gPC9wYXJhbT5cclxuXHRcdHB1YmxpYyB2b2lkIFVwZGF0ZVBsYXllckRhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgYnl0ZVtdIGJ5dGVzLCBpbnQgY2hhbmdlKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBVcGRhdGVQbGF5ZXJEYXRhOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCBieXRlcyA9PSBudWxsIClcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRpbnQgZGF0YVN0YXJ0ICAgICA9IHRoaXMuR2V0RGF0YVBvc2l0aW9uKHRlYW0scG9zaXRpb24pO1xyXG5cdFx0XHQvLyBuZWVkIHRvIGRvIGEgY2xlYXZlciBzcGxpY2UgaGVyZS5cclxuXHRcdFx0U2hpZnREYXRhQWZ0ZXIodGVhbSxwb3NpdGlvbiwgY2hhbmdlKTtcclxuXHRcdFx0aW50IGogPSAwO1xyXG5cdFx0XHRpbnQgaTtcclxuXHRcdFx0Zm9yKGkgPSBkYXRhU3RhcnQ7IGogPCBieXRlcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHRvdXRwdXRSb21baV09IGJ5dGVzW2orK107XHJcblxyXG5cdFx0XHRpZih0ZWFtID09IFwiNDllcnNcIiAmJiBwb3NpdGlvbiA9PSBcIkRCMlwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0d2hpbGUob3V0cHV0Um9tW2ldICE9IDB4ZmYpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0b3V0cHV0Um9tW2krK10gPSAweGZmO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTaGlmdERhdGFBZnRlcihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBpbnQgc2hpZnRBbW91bnQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNoaWZ0RGF0YUFmdGVyOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZih0ZWFtID09IHRlYW1zW3RlYW1zLkxlbmd0aC0xXSAmJiBwb3NpdGlvbiA9PSBcIkRCMlwiIC8qIFwiUFwiKi8pXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0Ly9pbnQgZW5kUG9zaXRpb24gPSAweDAzMDBGOyAvLyhlbmQgb2YgbmFtZS1udW1iZXIgc2VnbWVudClcclxuXHRcdFx0XHJcblx0XHRcdGludCBlbmRQb3NpdGlvbiA9IG5hbWVOdW1iZXJTZWdtZW50RW5kO1xyXG5cclxuXHRcdFx0d2hpbGUob3V0cHV0Um9tW2VuZFBvc2l0aW9uXSA9PSAweGZmKVxyXG5cdFx0XHRcdGVuZFBvc2l0aW9uLS07XHJcblxyXG5cdFx0XHRlbmRQb3NpdGlvbisrOy8vIGl0IHdhcyBzZXQgdG8gZmFsY29ucyBwdW50ZXIncyBsYXN0IGxldHRlclxyXG5cclxuXHRcdFx0Ly9pbnQgc3RhcnRQb3NpdGlvbiA9IEdldERhdGFQb3NpdGlvbih0ZWFtc1t0ZWFtSW5kZXhdLCBwb3NpdGlvbk5hbWVzW3Bvc2l0aW9uSW5kZXhdKTtcclxuXHRcdFx0aW50IHN0YXJ0UG9zaXRpb24gPSB0aGlzLkdldE5leHREYXRhUG9zaXRpb24odGVhbSxwb3NpdGlvbik7XHJcblx0XHRcdGlmKHNoaWZ0QW1vdW50IDwgMClcclxuXHRcdFx0XHRTaGlmdERhdGFVcChzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbiwgc2hpZnRBbW91bnQsIG91dHB1dFJvbSk7XHJcblx0XHRcdGVsc2UgaWYoc2hpZnRBbW91bnQgPiAwKVxyXG5cdFx0XHRcdFNoaWZ0RGF0YURvd24oc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTaGlmdERhdGFVcChpbnQgc3RhcnRQb3MsIGludCBlbmRQb3MsIGludCBzaGlmdEFtb3VudCwgYnl0ZVtdIGRhdGEpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBzdGFydFBvcyAgPCAwIHx8ICBlbmRQb3MgPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNoaWZ0RGF0YVVwOjogZWl0aGVyIHN0YXJ0UG9zIHswfSBvciBlbmRQb3MgezF9IGlzIGludmFsaWQuXCIsIHN0YXJ0UG9zLCBlbmRQb3MpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gY29tbWVudGVkIG91dCBjb2RlIHdhcyBpbiByZWxlYXNlIDFcclxuXHRcdFx0Ly9pbnQgZW5kID0gZW5kUG9zK3NoaWZ0QW1vdW50O1xyXG5cdFx0XHRpbnQgaTtcclxuXHRcdFx0aWYoc2hpZnRBbW91bnQgPiAwIClcclxuXHRcdFx0XHRDb25zb2xlLldyaXRlTGluZShcInBvc2l0aXZlIHNoaWZ0IGFtb3VudCBpbiBTaGlmdERhdGFVcFwiKTtcclxuXHJcblx0XHRcdGZvcihpID0gc3RhcnRQb3MgLyorIHNoaWZ0QW1vdW50Ki87IGkgPD0gZW5kUG9zIC8qZW5kKi87IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGRhdGFbaStzaGlmdEFtb3VudF0gPSBkYXRhW2ldO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8qaS0tO1xyXG5cdFx0XHRmb3IoaW50IGo9c2hpZnRBbW91bnQ7IGogPCAwOyBqKyspIFxyXG5cdFx0XHRcdGRhdGFbaSsrXSA9IDB4ZmY7ICovXHJcblxyXG5cdFx0XHRpKz0gc2hpZnRBbW91bnQ7XHJcblx0XHRcdHdoaWxlKCBvdXRwdXRSb21baV0gIT0gMHhmZiAmJiBpIDwgbmFtZU51bWJlclNlZ21lbnRFbmQgLyoweDMwMGYqLylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG91dHB1dFJvbVtpXSA9IDB4ZmY7XHJcblx0XHRcdFx0aSsrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgdm9pZCBTaGlmdERhdGFEb3duKGludCBzdGFydFBvcywgaW50IGVuZFBvcywgaW50IHNoaWZ0QW1vdW50LCBieXRlW10gZGF0YSlcclxuXHRcdHtcclxuXHRcdFx0aWYoIHN0YXJ0UG9zICA8IDAgfHwgIGVuZFBvcyA8IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEV4Y2VwdGlvbihcclxuXHRcdFx0XHRcdHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2hpZnREYXRhVXA6OiBlaXRoZXIgc3RhcnRQb3MgezB9IG9yIGVuZFBvcyB7MX0gaXMgaW52YWxpZC5cIiwgc3RhcnRQb3MsIGVuZFBvcykpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IoaW50IGkgPSBlbmRQb3MgKyBzaGlmdEFtb3VudDsgaSA+IHN0YXJ0UG9zIDtpLS0pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRkYXRhW2ldID0gZGF0YVtpLXNoaWZ0QW1vdW50XTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcml2YXRlIGJ5dGVbXSBHZXREYXRhQWZ0ZXIoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSB8fCAhSXNWYWxpZFBvc2l0aW9uKCBwb3NpdGlvbiApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEV4Y2VwdGlvbihcclxuXHRcdFx0XHRcdHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0RGF0YUFmdGVyOjogZWl0aGVyIHRlYW0gezB9IG9yIHBvc2l0aW9uIHsxfSBpcyBpbnZhbGlkLlwiLCB0ZWFtLCBwb3NpdGlvbikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZih0ZWFtID09IHRlYW1zW3RlYW1zLkxlbmd0aC0xXSAmJiBwb3NpdGlvbiA9PSBcIkRCMlwiKVxyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdFx0aW50IHRlYW1JbmRleCAgICAgPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdHBvc2l0aW9uSW5kZXgrKztcclxuXHRcdFx0aWYocG9zaXRpb24gPT0gXCJEQjJcIilcclxuXHRcdFx0eyAvLyBpZiBpdCdzIHRoZSBsYXN0IGd1eSBvbiB0aGUgdGVhbS5cclxuXHRcdFx0XHR0ZWFtSW5kZXgrKztcclxuXHRcdFx0XHRwb3NpdGlvbkluZGV4ID0gMDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgZW5kUG9zaXRpb24gPSBuYW1lTnVtYmVyU2VnbWVudEVuZDsgLy8weDAzMDBGOyAvLyhlbmQgb2YgbmFtZS1udW1idXIgc2VnbWVudClcclxuXHRcdFx0d2hpbGUob3V0cHV0Um9tW2VuZFBvc2l0aW9uXSA9PSAweGZmKVxyXG5cdFx0XHRcdGVuZFBvc2l0aW9uLS07XHJcblxyXG5cdFx0XHRlbmRQb3NpdGlvbisrOy8vIGl0IHdhcyBzZXQgdG8gNDllcnMgREIyJ3MgbGFzdCBsZXR0ZXJcclxuXHRcdFx0aW50IHN0YXJ0UG9zaXRpb24gPSBHZXREYXRhUG9zaXRpb24odGVhbXNbdGVhbUluZGV4XSwgcG9zaXRpb25OYW1lc1twb3NpdGlvbkluZGV4XSk7XHJcblx0XHRcdGJ5dGVbXSByZXRCeXRlcyA9IG5ldyBieXRlW2VuZFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbl07XHJcblxyXG5cdFx0XHRpbnQgaiA9IDA7XHJcblx0XHRcdGZvcihpbnQgaSA9IHN0YXJ0UG9zaXRpb247IGkgPCBlbmRQb3NpdGlvbisxOyBpKyspXHJcblx0XHRcdFx0cmV0Qnl0ZXNbaisrXSA9IG91dHB1dFJvbVtpXTtcclxuXHJcblx0XHRcdHJldHVybiByZXRCeXRlcztcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgc3RhdGljIGludCBHZXRUZWFtSW5kZXgoc3RyaW5nIHRlYW1OYW1lKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGlmKHRlYW1OYW1lLlRvTG93ZXIoKSA9PSBcIm51bGxcIilcclxuXHRcdFx0XHRyZXR1cm4gMjU1O1xyXG5cdFx0XHRmb3IoaW50IGkgPSAwOyBpIDwgdGVhbXMuTGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih0ZWFtc1tpXSA9PSB0ZWFtTmFtZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBpbnQgR2V0U2ltVGVhbUluZGV4KHN0cmluZyB0ZWFtTmFtZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRpZih0ZWFtTmFtZS5Ub0xvd2VyKCkgPT0gXCJudWxsXCIpXHJcblx0XHRcdFx0cmV0dXJuIDI1NTtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IG1TaW1UZWFtcy5MZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKG1TaW1UZWFtc1tpXSA9PSB0ZWFtTmFtZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIHRlYW0gc3BlY2lmaWVkIGJ5IHRoZSBpbmRleCBwYXNzZWQuICgwPSBiaWxscykuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiaW5kZXhcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPnRlYW0gbmFtZSBvbiBzdWNjZXNzLCBudWxsIG9uIGZhaWx1cmU8L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRUZWFtRnJvbUluZGV4KGludCBpbmRleClcclxuXHRcdHtcclxuXHRcdFx0aWYoaW5kZXggPT0gMjU1KVxyXG5cdFx0XHRcdHJldHVybiBcIm51bGxcIjtcclxuXHRcdFx0aWYoaW5kZXggPCAwIHx8IGluZGV4ID4gdGVhbXMuTGVuZ3RoLTEpXHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdHJldHVybiB0ZWFtc1tpbmRleF07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uTmFtZVwiPiBsaWtlICdRQjEnLCAnSycsJ1AnIC4uLiA8L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdGludGVybmFsIGludCBHZXRQb3NpdGlvbkluZGV4KHN0cmluZyBwb3NpdGlvbk5hbWUpXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAtMTtcclxuXHRcdFx0Zm9yKGludCBpID0gMDsgaSA8IHBvc2l0aW9uTmFtZXMuTGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZihwb3NpdGlvbk5hbWVzW2ldID09IHBvc2l0aW9uTmFtZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicWJcIj5FaXRoZXIgJ1FCMScgb3IgJ1FCMic8L3BhcmFtPlxyXG5cdFx0cHVibGljIHZvaWQgU2V0UUJBYmlsaXRpZXMoc3RyaW5nIHRlYW0sIFxyXG5cdFx0XHRzdHJpbmcgcWIsIFxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBcclxuXHRcdFx0aW50IHJ1c2hpbmdQb3dlciwgXHJcblx0XHRcdGludCBtYXhTcGVlZCxcclxuXHRcdFx0aW50IGhpdHRpbmdQb3dlcixcclxuXHRcdFx0aW50IHBhc3NpbmdTcGVlZCxcclxuXHRcdFx0aW50IHBhc3NDb250cm9sLFxyXG5cdFx0XHRpbnQgYWNjdXJhY3ksIFxyXG5cdFx0XHRpbnQgYXZvaWRQYXNzQmxvY2tcclxuXHRcdFx0KVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgdGVhbSB7MH0gaXMgaW52YWxpZFwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aWYocWIgIT0gXCJRQjFcIiAmJiBxYiAhPSBcIlFCMlwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBDYW5ub3Qgc2V0IHFiIGFibGl0aWVzIGZvciB7MH1cIixxYikpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRydW5uaW5nU3BlZWQgPSBHZXRBYmlsaXR5KHJ1bm5pbmdTcGVlZCk7XHJcblx0XHRcdHJ1c2hpbmdQb3dlciA9IEdldEFiaWxpdHkocnVzaGluZ1Bvd2VyKTtcclxuXHRcdFx0bWF4U3BlZWQgPSBHZXRBYmlsaXR5KG1heFNwZWVkKTtcclxuXHRcdFx0aGl0dGluZ1Bvd2VyID0gR2V0QWJpbGl0eShoaXR0aW5nUG93ZXIpO1xyXG5cdFx0XHRwYXNzaW5nU3BlZWQgPSBHZXRBYmlsaXR5KHBhc3NpbmdTcGVlZCk7XHJcblx0XHRcdHBhc3NDb250cm9sID0gR2V0QWJpbGl0eShwYXNzQ29udHJvbCk7XHJcblx0XHRcdGFjY3VyYWN5ID0gR2V0QWJpbGl0eShhY2N1cmFjeSk7XHJcblx0XHRcdGF2b2lkUGFzc0Jsb2NrID0gR2V0QWJpbGl0eShhdm9pZFBhc3NCbG9jayk7XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRBYmlsaXR5KHJ1bm5pbmdTcGVlZCkgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShydXNoaW5nUG93ZXIpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkobWF4U3BlZWQpIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShoaXR0aW5nUG93ZXIpIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShwYXNzaW5nU3BlZWQpIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShwYXNzQ29udHJvbCkgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGFjY3VyYWN5KSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGF2b2lkUGFzc0Jsb2NrKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEFiaWxpdGllcyBmb3IgezB9IG9uIHsxfSB3ZXJlIG5vdCBzZXQuXCIscWIsdGVhbSkpO1xyXG5cdFx0XHRcdFByaW50VmFsaWRBYmlsaXRpZXMoKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0U2F2ZUFiaWxpdGllcyh0ZWFtLHFiLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLHBhc3NpbmdTcGVlZCxwYXNzQ29udHJvbCk7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NJbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocWIpO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSAodGVhbUluZGV4ICogdGVhbUFiaWxpdHlPZmZzZXQpKyBhYmlsaXR5T2Zmc2V0c1twb3NJbmRleF0gKyBiaWxsc1FCMUFiaWxpdHlTdGFydDtcclxuXHRcdFx0aW50IGxhc3RCeXRlID0gYWNjdXJhY3kgPDwgNDtcclxuXHRcdFx0bGFzdEJ5dGUgKz0gYXZvaWRQYXNzQmxvY2s7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbis0XSA9IChieXRlKSBsYXN0Qnl0ZTtcclxuXHRcdFx0bGFzdEJ5dGUgPSBwYXNzaW5nU3BlZWQgPDwgNDtcclxuXHRcdFx0bGFzdEJ5dGUgKz0gcGFzc0NvbnRyb2w7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbiszXSA9IChieXRlKSBsYXN0Qnl0ZTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRTa2lsbFBsYXllckFiaWxpdGllcyhzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBwb3MsIFxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBcclxuXHRcdFx0aW50IHJ1c2hpbmdQb3dlciwgXHJcblx0XHRcdGludCBtYXhTcGVlZCxcclxuXHRcdFx0aW50IGhpdHRpbmdQb3dlcixcclxuXHRcdFx0aW50IGJhbGxDb250cm9sLFxyXG5cdFx0XHRpbnQgcmVjZXB0aW9uc1xyXG5cdFx0XHQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9zICE9IFwiUkIxXCIgJiYgcG9zICE9IFwiUkIyXCImJiBwb3MgIT0gXCJSQjNcIiYmIHBvcyAhPSBcIlJCNFwiICYmXHJcblx0XHRcdFx0cG9zICE9IFwiV1IxXCIgJiYgcG9zICE9IFwiV1IyXCImJiBwb3MgIT0gXCJXUjNcIiYmIHBvcyAhPSBcIldSNFwiIFxyXG5cdFx0XHRcdCYmIHBvcyAhPSBcIlRFMVwiJiYgcG9zICE9IFwiVEUyXCIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIENhbm5vdCBzZXQgc2tpbGwgcGxheWVyIGFibGl0aWVzIGZvciB7MH0uXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJ1bm5pbmdTcGVlZCA9IEdldEFiaWxpdHkocnVubmluZ1NwZWVkKTtcclxuXHRcdFx0cnVzaGluZ1Bvd2VyID0gR2V0QWJpbGl0eShydXNoaW5nUG93ZXIpO1xyXG5cdFx0XHRtYXhTcGVlZCA9IEdldEFiaWxpdHkobWF4U3BlZWQpO1xyXG5cdFx0XHRoaXR0aW5nUG93ZXIgPSBHZXRBYmlsaXR5KGhpdHRpbmdQb3dlcik7XHJcblx0XHRcdGJhbGxDb250cm9sID0gR2V0QWJpbGl0eShiYWxsQ29udHJvbCk7XHJcblx0XHRcdHJlY2VwdGlvbnMgPSBHZXRBYmlsaXR5KHJlY2VwdGlvbnMpO1xyXG5cclxuXHRcdFx0aWYoICFJc1ZhbGlkQWJpbGl0eShydW5uaW5nU3BlZWQpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkocnVzaGluZ1Bvd2VyKSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KG1heFNwZWVkKSAgICAgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGhpdHRpbmdQb3dlcikgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHJlY2VwdGlvbnMgKSAgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGJhbGxDb250cm9sKSAgICApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEludmFsaWQgYXR0cmlidXRlLiBBYmlsaXRpZXMgZm9yIHswfSBvbiB7MX0gd2VyZSBub3Qgc2V0LlwiLHBvcyx0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scG9zLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLGJhbGxDb250cm9sLCByZWNlcHRpb25zKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRLaWNrUGxheWVyQWJpbGl0aWVzKHN0cmluZyB0ZWFtLCBcclxuXHRcdFx0c3RyaW5nIHBvcywgXHJcblx0XHRcdGludCBydW5uaW5nU3BlZWQsIFxyXG5cdFx0XHRpbnQgcnVzaGluZ1Bvd2VyLCBcclxuXHRcdFx0aW50IG1heFNwZWVkLFxyXG5cdFx0XHRpbnQgaGl0dGluZ1Bvd2VyLFxyXG5cdFx0XHRpbnQga2lja2luZ0FiaWxpdHksXHJcblx0XHRcdGludCBhdm9pZEtpY2tCbG9ja1xyXG5cdFx0XHQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9zICE9IFwiS1wiICYmIHBvcyAhPSBcIlBcIiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiQ2Fubm90IHNldCBraWNrIHBsYXllciBhYmxpdGllcyBmb3IgezB9LlwiLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRydW5uaW5nU3BlZWQgPSBHZXRBYmlsaXR5KHJ1bm5pbmdTcGVlZCk7XHJcblx0XHRcdHJ1c2hpbmdQb3dlciA9IEdldEFiaWxpdHkocnVzaGluZ1Bvd2VyKTtcclxuXHRcdFx0bWF4U3BlZWQgPSBHZXRBYmlsaXR5KG1heFNwZWVkKTtcclxuXHRcdFx0aGl0dGluZ1Bvd2VyID0gR2V0QWJpbGl0eShoaXR0aW5nUG93ZXIpO1xyXG5cdFx0XHRraWNraW5nQWJpbGl0eSA9IEdldEFiaWxpdHkoa2lja2luZ0FiaWxpdHkpO1xyXG5cdFx0XHRhdm9pZEtpY2tCbG9jayA9IEdldEFiaWxpdHkoYXZvaWRLaWNrQmxvY2spO1xyXG5cclxuXHRcdFx0aWYoICFJc1ZhbGlkQWJpbGl0eShydW5uaW5nU3BlZWQpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkocnVzaGluZ1Bvd2VyKSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KG1heFNwZWVkKSAgICAgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGhpdHRpbmdQb3dlcikgfHwgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KGtpY2tpbmdBYmlsaXR5ICkgIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShhdm9pZEtpY2tCbG9jaykgICAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkFiaWxpdGllcyBmb3IgezB9IG9uIHsxfSB3ZXJlIG5vdCBzZXQuXCIscG9zLHRlYW0pKTtcclxuXHRcdFx0XHRQcmludFZhbGlkQWJpbGl0aWVzKCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdFNhdmVBYmlsaXRpZXModGVhbSxwb3MscnVubmluZ1NwZWVkLHJ1c2hpbmdQb3dlcixtYXhTcGVlZCxoaXR0aW5nUG93ZXIsa2lja2luZ0FiaWxpdHksIGF2b2lkS2lja0Jsb2NrKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXREZWZlbnNpdmVQbGF5ZXJBYmlsaXRpZXMoc3RyaW5nIHRlYW0sIFxyXG5cdFx0XHRzdHJpbmcgcG9zLCBcclxuXHRcdFx0aW50IHJ1bm5pbmdTcGVlZCwgXHJcblx0XHRcdGludCBydXNoaW5nUG93ZXIsIFxyXG5cdFx0XHRpbnQgbWF4U3BlZWQsXHJcblx0XHRcdGludCBoaXR0aW5nUG93ZXIsXHJcblx0XHRcdGludCBwYXNzUnVzaCxcclxuXHRcdFx0aW50IGludGVyY2VwdGlvbnNcclxuXHRcdFx0KVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgdGVhbSB7MH0gaXMgaW52YWxpZFwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKHBvcyAhPSBcIlJFXCIgICAmJiBwb3MgIT0gXCJOVFwiICAgJiYgcG9zICE9IFwiTEVcIiAgICYmIHBvcyAhPSBcIlJPTEJcIiAmJlxyXG5cdFx0XHRcdHBvcyAhPSBcIlJJTEJcIiAmJiBwb3MgIT0gXCJMSUxCXCIgJiYgcG9zICE9IFwiTE9MQlwiICYmIHBvcyAhPSBcIlJDQlwiICAmJiBcclxuXHRcdFx0XHRwb3MgIT0gXCJMQ0JcIiAgJiYgcG9zICE9IFwiU1NcIiAgICYmIHBvcyAhPSBcIkZTXCIgICAmJiBwb3MgIT0gXCJEQjJcIiAgJiYgcG9zICE9IFwiREIxXCIgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBzZXQgZGVmZW5zaXZlIHBsYXllciBhYmxpdGllcyBmb3IgezB9LlwiLHBvcykpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRydW5uaW5nU3BlZWQgPSBHZXRBYmlsaXR5KHJ1bm5pbmdTcGVlZCk7XHJcblx0XHRcdHJ1c2hpbmdQb3dlciA9IEdldEFiaWxpdHkocnVzaGluZ1Bvd2VyKTtcclxuXHRcdFx0bWF4U3BlZWQgPSBHZXRBYmlsaXR5KG1heFNwZWVkKTtcclxuXHRcdFx0aGl0dGluZ1Bvd2VyID0gR2V0QWJpbGl0eShoaXR0aW5nUG93ZXIpO1xyXG5cdFx0XHRwYXNzUnVzaCA9IEdldEFiaWxpdHkocGFzc1J1c2gpO1xyXG5cdFx0XHRpbnRlcmNlcHRpb25zID0gR2V0QWJpbGl0eShpbnRlcmNlcHRpb25zKTtcclxuXHJcblx0XHRcdGlmKCAhSXNWYWxpZEFiaWxpdHkocnVubmluZ1NwZWVkKSB8fCAgXHJcblx0XHRcdFx0IUlzVmFsaWRBYmlsaXR5KHJ1c2hpbmdQb3dlcikgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShtYXhTcGVlZCkgICAgIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShoaXR0aW5nUG93ZXIpIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShwYXNzUnVzaCApICAgIHx8IFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShpbnRlcmNlcHRpb25zKSAgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJBYmlsaXRpZXMgZm9yIHswfSBvbiB7MX0gd2VyZSBub3Qgc2V0LlwiLHBvcyx0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scG9zLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLHBhc3NSdXNoLCBpbnRlcmNlcHRpb25zKTtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRPTFBsYXllckFiaWxpdGllcyhzdHJpbmcgdGVhbSwgXHJcblx0XHRcdHN0cmluZyBwb3MsIFxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBcclxuXHRcdFx0aW50IHJ1c2hpbmdQb3dlciwgXHJcblx0XHRcdGludCBtYXhTcGVlZCxcclxuXHRcdFx0aW50IGhpdHRpbmdQb3dlciApXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSB0ZWFtIHswfSBpcyBpbnZhbGlkXCIsdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9zICE9IFwiQ1wiICYmIHBvcyAhPSBcIlJHXCImJiBwb3MgIT0gXCJMR1wiJiYgcG9zICE9IFwiUlRcIiAmJlxyXG5cdFx0XHRcdHBvcyAhPSBcIkxUXCIgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBzZXQgT0wgcGxheWVyIGFibGl0aWVzIGZvciB7MH0uXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJ1bm5pbmdTcGVlZCA9IEdldEFiaWxpdHkocnVubmluZ1NwZWVkKTtcclxuXHRcdFx0cnVzaGluZ1Bvd2VyID0gR2V0QWJpbGl0eShydXNoaW5nUG93ZXIpO1xyXG5cdFx0XHRtYXhTcGVlZCA9IEdldEFiaWxpdHkobWF4U3BlZWQpO1xyXG5cdFx0XHRoaXR0aW5nUG93ZXIgPSBHZXRBYmlsaXR5KGhpdHRpbmdQb3dlcik7XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRBYmlsaXR5KHJ1bm5pbmdTcGVlZCkgfHwgIFxyXG5cdFx0XHRcdCFJc1ZhbGlkQWJpbGl0eShydXNoaW5nUG93ZXIpIHx8ICBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkobWF4U3BlZWQpICAgICB8fCBcclxuXHRcdFx0XHQhSXNWYWxpZEFiaWxpdHkoaGl0dGluZ1Bvd2VyKSAgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJBYmlsaXRpZXMgZm9yIHswfSBvbiB7MX0gd2VyZSBub3Qgc2V0LlwiLHBvcyx0ZWFtKSk7XHJcblx0XHRcdFx0UHJpbnRWYWxpZEFiaWxpdGllcygpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fS8vR2V0QWJpbGl0eVxyXG5cdFx0XHRTYXZlQWJpbGl0aWVzKHRlYW0scG9zLHJ1bm5pbmdTcGVlZCxydXNoaW5nUG93ZXIsbWF4U3BlZWQsaGl0dGluZ1Bvd2VyLC0xLC0xKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgU2F2ZUFiaWxpdGllcyhzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcyxcclxuXHRcdFx0aW50IHJ1bm5pbmdTcGVlZCwgXHJcblx0XHRcdGludCBydXNoaW5nUG93ZXIsIFxyXG5cdFx0XHRpbnQgbWF4U3BlZWQsXHJcblx0XHRcdGludCBoaXR0aW5nUG93ZXIsXHJcblx0XHRcdGludCBiYyxcclxuXHRcdFx0aW50IHJlYylcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSh0ZWFtKSAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTYXZlQWJpbGl0aWVzOjogdGVhbSB7MH0gaXMgaW52YWxpZFwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbihwb3MpIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2F2ZUFiaWxpdGllczo6IHBvc2l0aW9uIHswfSBpcyBpbnZhbGlkXCIscG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgYnl0ZTEsIGJ5dGUyLCBieXRlMztcclxuXHRcdFx0Ynl0ZTEgPShieXRlKXJ1c2hpbmdQb3dlcjtcclxuXHRcdFx0Ynl0ZTEgPSBieXRlMSA8PCA0O1xyXG5cdFx0XHRieXRlMSArPSAoYnl0ZSlydW5uaW5nU3BlZWQ7XHJcblx0XHRcdGJ5dGUyID0gKGJ5dGUpIG1heFNwZWVkO1xyXG5cdFx0XHRieXRlMiA9IGJ5dGUyIDw8IDQ7XHJcblx0XHRcdGJ5dGUyICs9IChieXRlKWhpdHRpbmdQb3dlcjtcclxuXHRcdFx0Ynl0ZTMgPSAoYnl0ZSkgYmM7XHJcblx0XHRcdGJ5dGUzID0gYnl0ZTMgPDwgNDtcclxuXHRcdFx0Ynl0ZTMgKz0gKGJ5dGUpcmVjO1xyXG5cdFx0XHQvLyBzYXZlIGRhdGEgaGVyZSBpbiByb20gXHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBwb3NJbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gKHRlYW1JbmRleCAqIHRlYW1BYmlsaXR5T2Zmc2V0KSsgYWJpbGl0eU9mZnNldHNbcG9zSW5kZXhdICsgYmlsbHNRQjFBYmlsaXR5U3RhcnQ7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gPSAoYnl0ZSlieXRlMTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uKzFdID0gKGJ5dGUpYnl0ZTI7XHJcblxyXG5cdFx0XHRpZihiYyA+IC0xICYmIHJlYyA+IC0xKVxyXG5cdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbiszXSA9IChieXRlKWJ5dGUzO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBib29sIElzVmFsaWRBYmlsaXR5KGludCBhYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhYiA+PSAwICYmIGFiIDw9IDB4RjtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cHJpdmF0ZSBieXRlIEdldEFiaWxpdHkoaW50IGFiKVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlIHJldCA9IDA7XHJcblx0XHRcdHN3aXRjaChhYilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNhc2UgNjogIHJldCA9IDB4MDA7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMTM6IHJldCA9IDB4MDE7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMTk6IHJldCA9IDB4MDI7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMjU6IHJldCA9IDB4MDM7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMzE6IHJldCA9IDB4MDQ7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMzg6IHJldCA9IDB4MDU7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNDQ6IHJldCA9IDB4MDY7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNTA6IHJldCA9IDB4MDc7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNTY6IHJldCA9IDB4MDg7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgNjM6IHJldCA9IDB4MDk7IGJyZWFrOyBcclxuXHRcdFx0XHRjYXNlIDY5OiByZXQgPSAweDBhOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDc1OiByZXQgPSAxMTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA4MTogcmV0ID0gMHgwYzsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA4ODogcmV0ID0gMHgwZDsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSA5NDogcmV0ID0gMHgwZTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAxMDA6IHJldCA9IDB4MGY7IGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBieXRlIE1hcEFiYWxpdHkoaW50IGFiKVxyXG5cdFx0e1xyXG5cdFx0XHQvKmlmKGFiaWxpdHlNYXAuQ29udGFpbnNLZXkoYWIpKVxyXG5cdFx0XHRcdHJldHVybiAoYnl0ZSkgYWJpbGl0eU1hcFthYl07XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXR1cm4gMDsqL1xyXG5cdFx0XHRcclxuXHRcdFx0Ynl0ZSByZXQgPSAwO1xyXG5cdFx0XHRzd2l0Y2goYWIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIDB4MDA6ICByZXQgPSA2OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDE6IHJldCA9IDEzOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDI6IHJldCA9IDE5OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDM6IHJldCA9IDI1OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDQ6IHJldCA9IDMxOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDU6IHJldCA9IDM4OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDY6IHJldCA9IDQ0OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDc6IHJldCA9IDUwOyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDg6IHJldCA9IDU2OyBicmVhaztcclxuXHRcdFx0XHRjYXNlIDB4MDk6IHJldCA9IDYzOyBicmVhazsgXHJcblx0XHRcdFx0Y2FzZSAweDBBOiByZXQgPSA2OTsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAxMTogcmV0ID0gNzU7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwQzogcmV0ID0gODE7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwRDogcmV0ID0gODg7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwRTogcmV0ID0gOTQ7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgMHgwRjogcmV0ID0gMTAwOyBicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGludHMgbWFwcGluZyB0byBhIHBsYXllcidzIGFiaWxpdGllcy5cclxuXHRcdC8vLyBMaWtlIHsgMTMsIDEzLCA1MCwgNTYsIDMxLCAyNX0uIFRoZSBsZW5ndGggb2YgdGhlIGFycmF5IHJldHVybmVkIHZhcmllcyBkZXBlbmRpbmdcclxuXHRcdC8vLyBvbiBwb3NpdGlvbi5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGVhbSBuYW1lIGxpa2UgJ29pbGVycycuPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+UG9zaXRpb24gbmFtZSBsaWtlICdSQjQnLjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+YW4gYXJyYXkgb2YgaW50cy48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgaW50W10gR2V0QWJpbGl0aWVzKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgIHx8ICAhSXNWYWxpZFBvc2l0aW9uKHBvc2l0aW9uKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50W10gcmV0ID0gezB9OyAvLyByZXQgaXMgcmUtY3JlYXRlZCBsYXRlci5cclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHBvc0luZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9ICh0ZWFtSW5kZXggKiB0ZWFtQWJpbGl0eU9mZnNldCkrIGFiaWxpdHlPZmZzZXRzW3Bvc0luZGV4XSArIGJpbGxzUUIxQWJpbGl0eVN0YXJ0O1xyXG5cdFx0XHQvLyB3aWxkMSBhbmQgd2lsZDIgbWFwIHRvIFtyZWNlcHRpb25zIGFuZCBiYWxsIGNvbnRyb2xdLCBbcGFzcyBpbnRlcmNlcHRpb25zIGFuZCBxdWlja25lc3NdLFxyXG5cdFx0XHQvLyBba2lja2luZyBhYmlsaXR5IGFuZCBhdm9pZCBraWNrIGJsb2NrXVxyXG5cdFx0XHRpbnQgcnVubmluZ1NwZWVkLCBydXNoaW5nUG93ZXIsIG1heFNwZWVkLCBoaXR0aW5nUG93ZXIsIHdpbGQxLCB3aWxkMiwgYWNjdXJhY3ksIGF2b2lkUGFzc0Jsb2NrO1xyXG5cdFx0XHRpbnQgYjEsYjIsYjMsYjQ7IC8vIG5vdGUgM3JkIGJ5dGUgbWFwcyB0byB0aGUgcGxheWVyJ3MgZmFjZVxyXG5cdFx0XHRiMSA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdGIyID0gb3V0cHV0Um9tW2xvY2F0aW9uKzFdO1xyXG5cdFx0XHRiMyA9IG91dHB1dFJvbVtsb2NhdGlvbiszXTtcclxuXHRcdFx0YjQgPSBvdXRwdXRSb21bbG9jYXRpb24rNF07IC8vIHRoaXMgaXMgb25seSB1c2VkIGZvciBxYiwgYnV0IHNpbmNlIHdlIGFyZSBub3QgYXNzaWduaW5nIGl0IGhlcmUsXHJcblx0XHRcdC8vIGl0IGRvZXNuJ3QgaHVydCB0byBnZXQgaXQuXHJcblx0XHRcdHJ1bm5pbmdTcGVlZCAgID0gYjEgJiAweDBGOyBydW5uaW5nU3BlZWQgID0gTWFwQWJhbGl0eShydW5uaW5nU3BlZWQpO1xyXG5cdFx0XHRydXNoaW5nUG93ZXIgICA9IGIxICYgMHhGMDsgcnVzaGluZ1Bvd2VyICA9IE1hcEFiYWxpdHkocnVzaGluZ1Bvd2VyID4+IDQpO1xyXG5cdFx0XHRtYXhTcGVlZCAgICAgICA9IGIyICYgMHhGMDsgbWF4U3BlZWQgICAgICA9IE1hcEFiYWxpdHkobWF4U3BlZWQgPj4gNCk7XHJcblx0XHRcdGhpdHRpbmdQb3dlciAgID0gYjIgJiAweDBGOyBoaXR0aW5nUG93ZXIgID0gTWFwQWJhbGl0eShoaXR0aW5nUG93ZXIpO1xyXG5cdFx0XHR3aWxkMSAgICAgICAgICA9IGIzICYgMHhGMDsgd2lsZDEgICAgICAgICA9IE1hcEFiYWxpdHkod2lsZDEgPj4gNCk7XHJcblx0XHRcdHdpbGQyICAgICAgICAgID0gYjMgJiAweDBGOyB3aWxkMiAgICAgICAgID0gTWFwQWJhbGl0eSh3aWxkMik7XHJcblx0XHRcdGFjY3VyYWN5ICAgICAgID0gYjQgJiAweEYwOyBhY2N1cmFjeSAgICAgID0gTWFwQWJhbGl0eShhY2N1cmFjeSA+PiA0KTtcclxuXHRcdFx0YXZvaWRQYXNzQmxvY2sgPSBiNCAmIDB4MEY7IGF2b2lkUGFzc0Jsb2NrPSBNYXBBYmFsaXR5KGF2b2lkUGFzc0Jsb2NrKTtcclxuXHRcdFx0c3dpdGNoKHBvc2l0aW9uKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FzZSBcIkNcIjpcclxuXHRcdFx0XHRjYXNlIFwiUkdcIjpcclxuXHRcdFx0XHRjYXNlIFwiTEdcIjpcclxuXHRcdFx0XHRjYXNlIFwiUlRcIjpcclxuXHRcdFx0XHRjYXNlIFwiTFRcIjogXHJcblx0XHRcdFx0XHRyZXQgPSBuZXcgaW50WzRdOyAgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIlFCMVwiOlxyXG5cdFx0XHRcdGNhc2UgXCJRQjJcIjogXHJcblx0XHRcdFx0XHRyZXQgPSBuZXcgaW50WzhdOyBcclxuXHRcdFx0XHRcdHJldFs0XSA9IHdpbGQxO1xyXG5cdFx0XHRcdFx0cmV0WzVdID0gd2lsZDI7XHJcblx0XHRcdFx0XHRyZXRbNl0gPSBhY2N1cmFjeTtcclxuXHRcdFx0XHRcdHJldFs3XSA9IGF2b2lkUGFzc0Jsb2NrO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcdFxyXG5cdFx0XHRcdFx0cmV0ID0gbmV3IGludFs2XTsgXHJcblx0XHRcdFx0XHRyZXRbNF0gPSB3aWxkMTtcclxuXHRcdFx0XHRcdHJldFs1XSA9IHdpbGQyO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0WzBdID0gcnVubmluZ1NwZWVkO1xyXG5cdFx0XHRyZXRbMV0gPSBydXNoaW5nUG93ZXI7XHJcblx0XHRcdHJldFsyXSA9IG1heFNwZWVkO1xyXG5cdFx0XHRyZXRbM10gPSBoaXR0aW5nUG93ZXI7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYSBzdHJpbmcgY29uc2lzdGluZyBvZiBudW1iZXJzLCBzcGFjZXMgYW5kIGNvbW1hcy5cclxuXHRcdC8vLyBMaWtlIFwiMzEsIDY5LCAxMywgMTMsIDMxLCA0NFwiXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIHN0cmluZyBHZXRBYmlsaXR5U3RyaW5nKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgIHx8ICAhSXNWYWxpZFBvc2l0aW9uKHBvc2l0aW9uKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnRbXSBhYmlsaXRpZXMgPSBHZXRBYmlsaXRpZXModGVhbSxwb3NpdGlvbik7XHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgc3R1ZmYgPW5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG5cdFx0XHRmb3IoaW50IGkgPSAwOyBpIDwgYWJpbGl0aWVzLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3R1ZmYuQXBwZW5kKGFiaWxpdGllc1tpXSk7XHJcblx0XHRcdFx0c3R1ZmYuQXBwZW5kKFwiLCBcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R1ZmYuUmVtb3ZlKHN0dWZmLkxlbmd0aC0yLDEpOy8vIHRyaW0gb2ZmIGxhc3QgY29tbWFcclxuXHRcdFx0Ly9Db25zb2xlLldyaXRlTGluZShzdHVmZik7XHJcblx0XHRcdHJldHVybiBzdHVmZi5Ub1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBSZXR1cm5zIHRoZSBzaW11bGF0aW9uIGRhdGEgZm9yIHRoZSBnaXZlbiB0ZWFtLlxyXG5cdFx0Ly8vIFNpbXVsYXRpb24gZGF0YSBpcyBvZiB0aGUgZm9ybSAnMHhOTicgd2hlcmUgTiBpcyBhIG51bWJlciAxLUYgKGhleCkuXHJcblx0XHQvLy8gQSB0ZWFtJ3Mgc2ltIGRhdGEgb2YgJzB4NTcnIHNpZ25pZmllcyB0aGF0IHRoZSB0ZWFtIGhhcyBhIHNpbXVsYXRpb24gZmlndXJlIG9mXHJcblx0XHQvLy8gJzUnIGZvciBvZmZlbnNlLCBhbmQgJzcnIGZvciBkZWZlbnNlLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj5UaGUgdGVhbSBvZiBpbnRlcmVzdDwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIGJ5dGUgR2V0VGVhbVNpbURhdGEoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRTaW1UZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPj0gMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIGJpbGxzVGVhbVNpbUxvYztcclxuXHRcdFx0XHRyZXR1cm4gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gMHgwMDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgZ2l2ZW4gdGVhbSdzIG9mZmVuc2UgYW5kIGRlZmVuc2Ugc2ltIHZhbHVlcy5cclxuXHRcdC8vLyBTaW11bGF0aW9uIGRhdGEgaXMgb2YgdGhlIGZvcm0gJzB4Tk4nIHdoZXJlIE4gaXMgYSBudW1iZXIgMS1GIChoZXgpLlxyXG5cdFx0Ly8vIEEgdGVhbSdzIHNpbSBkYXRhIG9mICcweDU3JyBzaWduaWZpZXMgdGhhdCB0aGUgdGVhbSBoYXMgYSBzaW11bGF0aW9uIGZpZ3VyZSBvZlxyXG5cdFx0Ly8vICc1JyBmb3Igb2ZmZW5zZSwgYW5kICc3JyBmb3IgZGVmZW5zZS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGhlIHRlYW0gdG8gc2V0LjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZXNcIj5UaGUgdmFsdWUgdG8gc2V0IGl0IHRvLjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRUZWFtU2ltRGF0YShzdHJpbmcgdGVhbSwgYnl0ZSB2YWx1ZXMpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0VGVhbVNpbURhdGE6OiB0ZWFtIHswfSBpcyBpbnZhbGlkIFwiLHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRTaW1UZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgYmlsbHNUZWFtU2ltTG9jO1xyXG5cdFx0XHQvL2ludCBjdXJyZW50VmFsdWUgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gdmFsdWVzO1xyXG5cdFx0XHQvL2N1cnJlbnRWYWx1ZSA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldHMgdGhlIHRlYW0gc2ltIG9mZmVuc2UgdGVuZGVuY3kgLiBcclxuXHRcdC8vLyAwMCA9IExpdHRsZSBtb3JlIHJ1c2hpbmcsIDAxID0gSGVhdnkgUnVzaGluZywgXHJcblx0XHQvLy8gMDIgPSBsaXR0bGUgbW9yZSBwYXNzaW5nLCAwMyA9IEhlYXZ5IFBhc3NpbmcuIFxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj50aGUgdGVhbSBuYW1lPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInZhbFwiPnRoZSBudW1iZXIgdG8gc2V0IGl0IHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+dHJ1ZSBpZiBzZXQsIGZhbGVzIGlmIGNvdWxkIG5vdCBzZXQgaXQuPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIGJvb2wgU2V0VGVhbVNpbU9mZmVuc2VQcmVmKHN0cmluZyB0ZWFtLCBpbnQgdmFsKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdmFsID4gLTEgJiYgdmFsIDwgNCAmJiB0ZWFtSW5kZXggIT0gLTEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jID0gdGVhbVNpbU9mZmVuc2l2ZVByZWZTdGFydCArIHRlYW1JbmRleDtcclxuXHRcdFx0XHRvdXRwdXRSb21bbG9jXSA9IChieXRlKSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYodGVhbUluZGV4ICE9IC0xKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbid0IHNldCBvZmZlbnNpdmUgcHJlZiB0byAnezB9JyB2YWxpZCB2YWx1ZXMgYXJlIDAtMy5cXG5cIix2YWwpKTtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiVGVhbSAnezB9JyBpcyBpbnZhbGlkXFxuXCIsdGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtIHNpbSBvZmZlbnNlIHRlbmRlbmN5IC4gXHJcblx0XHQvLy8gMDAgPSBMaXR0bGUgbW9yZSBydXNoaW5nLCAwMSA9IEhlYXZ5IFJ1c2hpbmcsIFxyXG5cdFx0Ly8vIDAyID0gbGl0dGxlIG1vcmUgcGFzc2luZywgMDMgPSBIZWF2eSBQYXNzaW5nLiBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGVoIHRlYW0gbmFtZS48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPnRoZWlyIHNpbSBvZmZlbnNlIHByZWYgKDAgLSAzKTwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBpbnQgR2V0VGVhbVNpbU9mZmVuc2VQcmVmKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgdmFsID0gLTE7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAtMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBsb2MgPSB0ZWFtU2ltT2ZmZW5zaXZlUHJlZlN0YXJ0ICsgdGVhbUluZGV4O1xyXG5cdFx0XHRcdHZhbCA9IG91dHB1dFJvbVtsb2NdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJUZWFtICd7MH0nIGlzIGludmFsaWRcXG5cIix0ZWFtKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0cHJpdmF0ZSBjb25zdCBzdHJpbmcgbTJSQl8yV1JfMVRFID0gXCIyUkJfMldSXzFURVwiO1xyXG5cdFx0cHJpdmF0ZSBjb25zdCBzdHJpbmcgbTFSQl8zV1JfMVRFID0gXCIxUkJfM1dSXzFURVwiO1xyXG5cdFx0cHJpdmF0ZSBjb25zdCBzdHJpbmcgbTFSQl80V1IgICAgID0gXCIxUkJfNFdSXCI7XHJcblxyXG5cclxuXHRcdHByaXZhdGUgaW50IG1UZWFtRm9ybWF0aW9uc1N0YXJ0aW5nTG9jID0gMHhlZGYzO1xyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtJ3Mgb2ZmZW5zaXZlIGZvcm1hdGlvbi5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImZvcm1hdGlvblwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRUZWFtT2ZmZW5zaXZlRm9ybWF0aW9uKCBzdHJpbmcgdGVhbSwgc3RyaW5nIGZvcm1hdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICYmIHRlYW1JbmRleCA8IDI1NSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyArIHRlYW1JbmRleDtcclxuXHJcblx0XHRcdFx0c3dpdGNoKCBmb3JtYXRpb24gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgbTJSQl8yV1JfMVRFOlxyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpMHgwMDtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIG0xUkJfM1dSXzFURTpcclxuXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKTB4MDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSBtMVJCXzRXUjpcclxuXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKTB4MDI7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRcIkVSUk9SISBGb3JtYXRpb24gezA6eH0gZm9yIHRlYW0gJ3sxfScgaXMgaW52YWxpZC5cIixmb3JtYXRpb24sIHRlYW0pKTtcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIiAgVmFsaWQgZm9ybWF0aW9ucyBhcmU6XFxuICB7MH1cXG4gIHsxfVxcbiAgezJ9XCIsXHJcblx0XHRcdFx0XHRcdFx0bTJSQl8yV1JfMVRFLCBtMVJCXzNXUl8xVEUsIG0xUkJfNFdSICkpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISBUZWFtICd7MH0nIGlzIGludmFsaWQsIE9mZmVuc2l2ZSBGb3JtYXRpb24gbm90IHNldFwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBHZXRzIHRoZSB0ZWFtJ3Mgb2ZmZW5zaXZlIGZvcm1hdGlvbi5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24oc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgoIHRlYW0pO1xyXG5cdFx0XHRzdHJpbmcgcmV0PSBcIk9GRkVOU0lWRV9GT1JNQVRJT04gPSBcIjtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICYmIHRlYW1JbmRleCA8IDI1NSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyArIHRlYW1JbmRleDtcclxuXHRcdFx0XHRpbnQgZm9ybWF0aW9uID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHJcblx0XHRcdFx0c3dpdGNoKCBmb3JtYXRpb24gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgMHgwMDpcclxuXHRcdFx0XHRcdFx0cmV0ICs9IG0yUkJfMldSXzFURTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlIDB4MDE6XHJcblx0XHRcdFx0XHRcdHJldCArPSBtMVJCXzNXUl8xVEU7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAweDAyOlxyXG5cdFx0XHRcdFx0XHRyZXQgKz0gbTFSQl80V1I7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFx0XHRcIkVSUk9SISBGb3JtYXRpb24gezA6eH0gZm9yIHRlYW0gezF9IGlzIGludmFsaWQsIFJPTSBGT1JNQVRJT05TIGNvdWxkIGJlIG1lc3NlZCB1cC5cIixmb3JtYXRpb24sIHRlYW0pKTtcclxuXHRcdFx0XHRcdFx0cmV0PVwiXCI7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQ9XCJcIjtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFRlYW0gJ3swfScgaXMgaW52YWxpZCwgT2ZmZW5zaXZlIEZvcm1hdGlvbiBnZXQgZmFpbGVkLlwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgY29uc3QgaW50IG1QbGF5Ym9va1N0YXJ0TG9jID0gMHgxNzBkMzA7XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyBhIHN0cmluZyBsaWtlIFwiUExBWUJPT0sgUjEsIFI0LCBSNiwgUjgsIFAxLCBQMywgUDcsIFAzXCJcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFBsYXlib29rKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gXCJcIjtcclxuXHRcdFx0aW50IHJTbG90MSwgclNsb3QyLCByU2xvdDMsIHJTbG90NCxcclxuXHRcdFx0XHRwU2xvdDEsIHBTbG90MiwgcFNsb3QzLCBwU2xvdDQ7XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gSW5kZXgodGVhbXMsIHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gLTEgIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBwYkxvY2F0aW9uID0gbVBsYXlib29rU3RhcnRMb2MgKyAodGVhbUluZGV4ICogNCk7XHJcblx0XHRcdFx0clNsb3QxID0gb3V0cHV0Um9tW3BiTG9jYXRpb25dID4+IDQ7XHJcblx0XHRcdFx0clNsb3QyID0gb3V0cHV0Um9tW3BiTG9jYXRpb25dICYgMHgwZjtcclxuXHRcdFx0XHRyU2xvdDMgPSBvdXRwdXRSb21bcGJMb2NhdGlvbisxXSA+PiA0O1xyXG5cdFx0XHRcdHJTbG90NCA9IG91dHB1dFJvbVtwYkxvY2F0aW9uKzFdICYgMHgwZjtcclxuXHJcblx0XHRcdFx0cFNsb3QxID0gb3V0cHV0Um9tW3BiTG9jYXRpb24rMl0gPj4gNDtcclxuXHRcdFx0XHRwU2xvdDIgPSBvdXRwdXRSb21bcGJMb2NhdGlvbisyXSAmIDB4MGY7XHJcblx0XHRcdFx0cFNsb3QzID0gb3V0cHV0Um9tW3BiTG9jYXRpb24rM10gPj4gNDtcclxuXHRcdFx0XHRwU2xvdDQgPSBvdXRwdXRSb21bcGJMb2NhdGlvbiszXSAmIDB4MGY7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0cmV0ID0gc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFwiUExBWUJPT0sgUnswfXsxfXsyfXszfSwgUHs0fXs1fXs2fXs3fSBcIixcclxuXHRcdFx0XHRcdHJTbG90MSsxLCByU2xvdDIrMSwgclNsb3QzKzEsIHJTbG90NCsxLFxyXG5cdFx0XHRcdFx0cFNsb3QxKzEsIHBTbG90MisxLCBwU2xvdDMrMSwgcFNsb3Q0KzEgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRSZWdleCBydW5SZWdleCwgcGFzc1JlZ2V4O1xyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSB0ZWFtJ3MgcGxheWJvb2tcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJydW5QbGF5c1wiPlN0cmluZyBsaWtlIFwiUjEyMzRcIjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwYXNzUGxheXNcIj5TdHJpbmcgbGlrZSBcIlA0NTY3XCI8L3BhcmFtPlxyXG5cdFx0cHVibGljIHZvaWQgU2V0UGxheWJvb2soIHN0cmluZyB0ZWFtLCBzdHJpbmcgcnVuUGxheXMsIHN0cmluZyBwYXNzUGxheXMgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggcnVuUmVnZXggPT0gbnVsbCB8fCBwYXNzUmVnZXggPT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRydW5SZWdleCAgPSBuZXcgUmVnZXgoXCJSKFsxLThdKShbMS04XSkoWzEtOF0pKFsxLThdKVwiKTtcclxuXHRcdFx0XHRwYXNzUmVnZXggPSBuZXcgUmVnZXgoXCJQKFsxLThdKShbMS04XSkoWzEtOF0pKFsxLThdKVwiKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRNYXRjaCBydW5zID0gcnVuUmVnZXguTWF0Y2gocnVuUGxheXMpO1xyXG5cdFx0XHRNYXRjaCBwYXNzID0gcGFzc1JlZ2V4Lk1hdGNoKHBhc3NQbGF5cyk7XHJcblxyXG5cdFx0XHRpbnQgcjEscjIscjMscjQscDEscDIscDMscDQ7XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gSW5kZXgodGVhbXMsIHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gLTEgJiYgcnVucyAhPSBNYXRjaC5FbXB0eSAmJiBwYXNzICE9IE1hdGNoLkVtcHR5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBwYkxvY2F0aW9uID0gbVBsYXlib29rU3RhcnRMb2MgKyAodGVhbUluZGV4ICogNCk7XHJcblx0XHRcdFx0cjEgPSBJbnQzMi5QYXJzZSggcnVucy5Hcm91cHNbMV0uVG9TdHJpbmcoKSkgLSAxO1xyXG5cdFx0XHRcdHIyID0gSW50MzIuUGFyc2UoIHJ1bnMuR3JvdXBzWzJdLlRvU3RyaW5nKCkpIC0gMTtcclxuXHRcdFx0XHRyMyA9IEludDMyLlBhcnNlKCBydW5zLkdyb3Vwc1szXS5Ub1N0cmluZygpKSAtIDE7XHJcblx0XHRcdFx0cjQgPSBJbnQzMi5QYXJzZSggcnVucy5Hcm91cHNbNF0uVG9TdHJpbmcoKSkgLSAxO1xyXG5cclxuXHRcdFx0XHRwMSA9IEludDMyLlBhcnNlKCBwYXNzLkdyb3Vwc1sxXS5Ub1N0cmluZygpKSAtIDE7XHJcblx0XHRcdFx0cDIgPSBJbnQzMi5QYXJzZSggcGFzcy5Hcm91cHNbMl0uVG9TdHJpbmcoKSkgLSAxO1xyXG5cdFx0XHRcdHAzID0gSW50MzIuUGFyc2UoIHBhc3MuR3JvdXBzWzNdLlRvU3RyaW5nKCkpIC0gMTtcclxuXHRcdFx0XHRwNCA9IEludDMyLlBhcnNlKCBwYXNzLkdyb3Vwc1s0XS5Ub1N0cmluZygpKSAtIDE7XHJcblxyXG5cdFx0XHRcdHIxID0gKHIxIDw8IDQpICsgcjI7XHJcblx0XHRcdFx0cjMgPSAocjMgPDwgNCkgKyByNDtcclxuXHRcdFx0XHRwMSA9IChwMSA8PCA0KSArIHAyO1xyXG5cdFx0XHRcdHAzID0gKHAzIDw8IDQpICsgcDQ7XHJcblx0XHRcdFx0b3V0cHV0Um9tW3BiTG9jYXRpb25dICAgPSAoYnl0ZSlyMTtcclxuXHRcdFx0XHRvdXRwdXRSb21bcGJMb2NhdGlvbisxXSA9IChieXRlKXIzO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtwYkxvY2F0aW9uKzJdID0gKGJ5dGUpcDE7XHJcblx0XHRcdFx0b3V0cHV0Um9tW3BiTG9jYXRpb24rM10gPSAoYnl0ZSlwMztcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZiggdGVhbUluZGV4IDwgMCApXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFNldFBsYXlib29rOiBUZWFtIHswfSBpcyBJbnZhbGlkLlwiLHRlYW0pKTtcclxuXHRcdFx0XHRpZiggcnVucyA9PSAgTWF0Y2guRW1wdHkgKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISBTZXRQbGF5Ym9vayBSdW4gcGxheSBkZWZpbml0aW9uICd7MH0gJ2lzIEludmFsaWRcIiwgcnVuUGxheXMpKTtcclxuXHRcdFx0XHRpZiggcGFzcyA9PSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFNldFBsYXlib29rIFBhc3MgcGxheSBkZWZpbml0aW9uICd7MH0gJ2lzIEludmFsaWRcIiwgcGFzc1BsYXlzKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgY29uc3QgaW50IEpVSUNFX0xPQ0FUSU9OID0gMHgyNjk5YTtcclxuXHRcdHByaXZhdGUgIGJ5dGVbXSBtX0p1aWNlQXJyYXkgPSBcclxuXHQgICB7XHJcblx0XHQgICAwLCAxLCAwLCAwLCAwLFxyXG5cdFx0ICAgMSwgMiwgMSwgMSwgMSxcclxuXHRcdCAgIDEsIDIsIDEsIDIsIDIsIFxyXG5cdFx0ICAgMSwgMiwgMSwgMywgMiwgXHJcblx0XHQgICAyLCAyLCAyLCAzLCAzLCBcclxuXHRcdCAgIDIsIDIsIDIsIDQsIDMsIFxyXG5cdFx0ICAgMiwgMiwgMiwgNCwgNCwgXHJcblx0XHQgICAyLCAyLCAyLCA1LCA0LCBcclxuXHRcdCAgIDIsIDIsIDMsIDUsIDUsIFxyXG5cdFx0ICAgMiwgMiwgMywgNiwgNSwgXHJcblx0XHQgICAyLCAyLCA0LCA2LCA2LCBcclxuXHRcdCAgIDMsIDIsIDQsIDcsIDYsIFxyXG5cdFx0ICAgMywgMywgNCwgNywgNywgXHJcblx0XHQgICAzLCAzLCA1LCA4LCA3LCBcclxuXHRcdCAgIDMsIDMsIDUsIDgsIDgsIFxyXG5cdFx0ICAgMywgMywgNSwgOSwgOCxcclxuXHRcdCAgIDMsIDQsIDYsIDksIDlcclxuXHQgICB9O1xyXG5cclxuXHRcdHB1YmxpYyBib29sIEFwcGx5SnVpY2UoaW50IHdlZWssIGludCBhbXQpXHJcblx0XHR7XHJcblx0XHRcdGJvb2wgcmV0ID0gdHJ1ZTtcclxuXHRcdFx0aWYoIHdlZWsgPiAxNyB8fCB3ZWVrIDwgMCB8fCBhbXQgPiAxNyB8fCBhbXQgPCAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHJvbV9sb2NhdGlvbiA9IEpVSUNFX0xPQ0FUSU9OICsgKHdlZWsgKiA1KTtcclxuXHRcdFx0XHRpbnQgaW5kZXggPSAoYW10IC0gMSApKiA1O1xyXG5cdFx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCA1OyBpKyspXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0b3V0cHV0Um9tW3JvbV9sb2NhdGlvbitpXSA9IG1fSnVpY2VBcnJheVtpbmRleCtpXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHVibGljIGludFtdIEdldFBsYXllclNpbURhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0UGxheWVyU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRQbGF5ZXJTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHN3aXRjaChwb3MpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIFwiUUIxXCI6ICBjYXNlIFwiUUIyXCI6IFxyXG5cdFx0XHRcdFx0cmV0dXJuIEdldFFCU2ltRGF0YSh0ZWFtLCBwb3MpO1xyXG5cdFx0XHRcdGNhc2UgXCJSQjFcIjogY2FzZSBcIlJCMlwiOiBjYXNlIFwiUkIzXCI6IGNhc2UgXCJSQjRcIjpcclxuXHRcdFx0XHRjYXNlIFwiV1IxXCI6IGNhc2UgXCJXUjJcIjogY2FzZSBcIldSM1wiOiBjYXNlIFwiV1I0XCI6XHJcblx0XHRcdFx0Y2FzZSBcIlRFMVwiOiBjYXNlIFwiVEUyXCI6IFxyXG5cdFx0XHRcdFx0cmV0dXJuIEdldFNraWxsU2ltRGF0YSh0ZWFtLHBvcyk7XHJcblx0XHRcdFx0Y2FzZSBcIlJFXCI6ICAgY2FzZSBcIk5UXCI6ICAgY2FzZSBcIkxFXCI6ICAgY2FzZSBcIkxPTEJcIjpcclxuXHRcdFx0XHRjYXNlIFwiTElMQlwiOiBjYXNlIFwiUklMQlwiOiBjYXNlIFwiUk9MQlwiOiBjYXNlIFwiUkNCXCI6XHJcblx0XHRcdFx0Y2FzZSBcIkxDQlwiOiAgY2FzZSBcIkZTXCI6ICAgY2FzZSBcIlNTXCI6IFxyXG5cdFx0XHRcdFx0cmV0dXJuIEdldERlZmVuc2l2ZVNpbURhdGEodGVhbSwgcG9zKTtcclxuXHRcdFx0XHRjYXNlIFwiS1wiOiAgXHJcblx0XHRcdFx0XHRyZXR1cm4gR2V0S2lja2luZ1NpbURhdGEodGVhbSk7XHJcblx0XHRcdFx0Y2FzZSBcIlBcIjogIFxyXG5cdFx0XHRcdFx0cmV0dXJuIEdldFB1bnRpbmdTaW1EYXRhKHRlYW0pO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcml2YXRlIGludFtdIEdldEtpY2tpbmdTaW1EYXRhKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldEtpY2tpbmdTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50W10gcmV0ID0gbmV3IGludFsxXTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFNpbVRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0Ly9RQjEgKyAweDJFXHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgYmlsbHNRQjFTaW1Mb2MgKyAweDJFO1xyXG5cdFx0XHRyZXRbMF0gPSBvdXRwdXRSb21bbG9jYXRpb25dID4+IDQ7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgU2V0S2lja2luZ1NpbURhdGEoc3RyaW5nIHRlYW0sIGludCBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldEtpY2tpbmdTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vaW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFNpbVRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0Ly9RQjEgKyAweDJFXHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgYmlsbHNRQjFTaW1Mb2MgKyAweDJFO1xyXG5cdFx0XHRpbnQgZyA9ICBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRnID0gZyAmIDB4MEY7XHJcblx0XHRcdGludCBnMiA9IGRhdGEgPDwgNDtcclxuXHRcdFx0ZyA9IGcgKyBnMjtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKWc7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBpbnRbXSBHZXRQdW50aW5nU2ltRGF0YShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRQdW50aW5nU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludFtdIHJldCA9IG5ldyBpbnRbMV07XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRTaW1UZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdC8vUUIxICsgMHgyRVxyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIGJpbGxzUUIxU2ltTG9jICsgMHgyRTtcclxuXHRcdFx0cmV0WzBdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSAmIDB4MEY7XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgU2V0UHVudGluZ1NpbURhdGEoc3RyaW5nIHRlYW0sIGludCBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldFB1bnRpbmdTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vaW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFNpbVRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0Ly9RQjEgKyAweDJFXHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgYmlsbHNRQjFTaW1Mb2MgKyAweDJFO1xyXG5cdFx0XHRpbnQgZCA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdGQgPSBkICYgMHhGMDtcclxuXHRcdFx0ZCArPSBkYXRhO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpZDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGludFtdIEdldERlZmVuc2l2ZVNpbURhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0RGVmZW5zaXZlU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXREZWZlbnNpdmVTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGludFtdIHJldCA9IG5ldyBpbnRbMl07XHJcblx0XHRcdGludCB0ZWFtSW5kZXggICAgID0gR2V0U2ltVGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4KjIpICtiaWxsc1FCMVNpbUxvYyAtIDB4MEE7IC8vIE9MLW1lbiBoYXZlIG5vIHNpbSBkYXRhLCAyKjU9MHhBXHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCAqIHRlYW1TaW1PZmZzZXQgKyAocG9zaXRpb25JbmRleCAtIDE3KSsgYmlsbHNSRVNpbUxvYztcclxuXHRcdFx0cmV0WzBdID0gb3V0cHV0Um9tW2xvY2F0aW9uXTsgLy9wYXNzIHJ1c2hcclxuXHRcdFx0cmV0WzFdID0gb3V0cHV0Um9tW2xvY2F0aW9uKzExXTsvLyBpbnRlcmNlcHRpb24gYWJpbGl0eVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSBzaW11bGF0aW9uIGRhdGEgZm9yIGEgZGVmZW5zaXZlIHBsYXllci5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+VGhlIHRlYW0gdGhlIHBsYXllciBiZWxvbmdzIHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NcIj50aGUgcG9zaXRpb24gaGUgcGxheXMuPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImRhdGFcIj50aGUgZGF0YSB0byBzZXQgaXQgdG8gKGxlbmd0aCA9IDIpLjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXREZWZlbnNpdmVTaW1EYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zLCBpbnRbXSBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldERlZmVuc2l2ZVNpbURhdGE6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbiggcG9zICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldERlZmVuc2l2ZVNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihkYXRhID09IG51bGwgfHwgZGF0YS5MZW5ndGggPCAyKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVycm9yIHNldHRpbmcgc2ltIGRhdGEgZm9yIHswfSwgezF9LiBTaW0gZGF0YSBub3Qgc2V0LlwiLHRlYW0scG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGludCB0ZWFtSW5kZXggICAgID0gR2V0U2ltVGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4KjIpICtiaWxsc0xFU2ltTG9jIC0gMHgwQTsgLy8gT0wtbWVuIGhhdmUgbm8gc2ltIGRhdGEsIDIqNT0weEFcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gdGVhbUluZGV4ICogdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4IC0gMTcpKyBiaWxsc1JFU2ltTG9jO1xyXG5cdFx0XHRieXRlIGJ5dGUxLGJ5dGUyO1xyXG5cdFx0XHRieXRlMSA9IChieXRlKWRhdGFbMF07XHJcblx0XHRcdGJ5dGUyPSAoYnl0ZSlkYXRhWzFdO1xyXG5cclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IGJ5dGUxOyAvL3Bhc3MgcnVzaFxyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMTFdID0gYnl0ZTI7Ly8gaW50ZXJjZXB0aW9uIGFiaWxpdHlcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHJpdmF0ZSBpbnRbXSBHZXRTa2lsbFNpbURhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgR2V0U2tpbGxTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggIUlzVmFsaWRQb3NpdGlvbiggcG9zICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFNraWxsU2ltRGF0YTo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvcykpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnRbXSByZXQgPSBuZXcgaW50WzRdO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ICAgICA9IEdldFNpbVRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aW50IHBvc2l0aW9uSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvcyk7XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICsgKHBvc2l0aW9uSW5kZXgqMikgK2JpbGxzUUIxU2ltTG9jO1xyXG5cdFx0XHRyZXRbMF0gPSBvdXRwdXRSb21bbG9jYXRpb25dICAgPj4gNDtcclxuXHRcdFx0cmV0WzFdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSAgICYgIDB4MEY7XHJcblx0XHRcdHJldFsyXSA9IG91dHB1dFJvbVtsb2NhdGlvbisxXSA+PiA0O1xyXG5cdFx0XHRyZXRbM10gPSBvdXRwdXRSb21bbG9jYXRpb24rMV0gJiAgMHgwRjtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRTa2lsbFNpbURhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MsIGludFtdIGRhdGEpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0U2tpbGxTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRTa2lsbFNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihkYXRhID09IG51bGwgfHwgZGF0YS5MZW5ndGggPCA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVycm9yIHNldHRpbmcgc2ltIGRhdGEgZm9yIHswfSwgezF9LiBTaW0gZGF0YSBub3Qgc2V0LlwiLHRlYW0scG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0U2ltVGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zKTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gdGVhbUluZGV4KnRlYW1TaW1PZmZzZXQgKyAocG9zaXRpb25JbmRleCoyKSArYmlsbHNRQjFTaW1Mb2M7XHJcblx0XHRcdGludCBieXRlMSxieXRlMjtcclxuXHRcdFx0Ynl0ZTEgPSBkYXRhWzBdPDw0O1xyXG5cdFx0XHRieXRlMSA9IGJ5dGUxK2RhdGFbMV07XHJcblx0XHRcdGJ5dGUyID0gZGF0YVsyXSA8PCA0O1xyXG5cdFx0XHRieXRlMiArPSBkYXRhWzNdO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dICA9IChieXRlKWJ5dGUxO1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb24rMV09IChieXRlKWJ5dGUyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgaW50W10gR2V0UUJTaW1EYXRhKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKCB0ZWFtKSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFFCU2ltRGF0YTo6IEludmFsaWQgdGVhbSB7MH1cIiwgdGVhbSkpO1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvcyApKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRRQlNpbURhdGE6OiBJbnZhbGlkIFBvc2l0aW9uIHswfVwiLCBwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50W10gcmV0ID0gbmV3IGludFszXTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFNpbVRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0XHJcblx0XHRcdGludCBsb2NhdGlvbiA9IHRlYW1JbmRleCp0ZWFtU2ltT2Zmc2V0ICtiaWxsc1FCMVNpbUxvYztcclxuXHRcdFx0aWYocG9zID09IFwiUUIyXCIpXHJcblx0XHRcdFx0bG9jYXRpb24rPTI7XHJcblx0XHRcdHJldFswXSA9IG91dHB1dFJvbVtsb2NhdGlvbl0gPj4gNDtcclxuXHRcdFx0cmV0WzFdID0gb3V0cHV0Um9tW2xvY2F0aW9uXSAmIDB4MEY7XHJcblx0XHRcdHJldFsyXSA9IG91dHB1dFJvbVtsb2NhdGlvbisxXTtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRRQlNpbURhdGEoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3MsIGludFtdIGRhdGEpXHJcblx0XHR7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0oIHRlYW0pIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0UUJTaW1EYXRhOjogSW52YWxpZCB0ZWFtIHswfVwiLCB0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCAhSXNWYWxpZFBvc2l0aW9uKCBwb3MgKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgKGxvdyBsZXZlbCkgU2V0UUJTaW1EYXRhOjogSW52YWxpZCBQb3NpdGlvbiB7MH1cIiwgcG9zKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGRhdGEgPT0gbnVsbCB8fCBkYXRhLkxlbmd0aCA8IDIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRXJyb3Igc2V0dGluZyBzaW0gZGF0YSBmb3IgezB9LCB7MX0uIFNpbSBkYXRhIG5vdCBzZXQuXCIsdGVhbSxwb3MpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRTaW1UZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdFxyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSB0ZWFtSW5kZXgqdGVhbVNpbU9mZnNldCArYmlsbHNRQjFTaW1Mb2M7XHJcblx0XHRcdGlmKHBvcyA9PSBcIlFCMlwiKVxyXG5cdFx0XHRcdGxvY2F0aW9uKz0yO1xyXG5cdFx0XHRpbnQgYnl0ZTEsYnl0ZTI7XHJcblx0XHRcdGJ5dGUxID0gKGJ5dGUpZGF0YVswXSA8PCA0O1xyXG5cdFx0XHRieXRlMSA9ICBieXRlMSArIChieXRlKWRhdGFbMV07XHJcblx0XHRcdGJ5dGUyID0gKGJ5dGUpZGF0YVsyXTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSAgID0gKGJ5dGUpYnl0ZTE7XHJcblx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbisxXSA9IChieXRlKWJ5dGUyO1xyXG5cdFx0fVxyXG5cdFx0XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEdldCB0aGUgZmFjZSBudW1iZXIgZnJvbSB0aGUgZ2l2ZW4gdGVhbS9wb3NpdGlvblxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBpbnQgR2V0RmFjZShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcG9zaXRpb25PZmZzZXQgPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYocG9zaXRpb25PZmZzZXQgPCAwIHx8IHRlYW1JbmRleCA8IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkdldEZhY2UgRXJyb3IgZ2V0dGluZyBmYWNlIGZvciB7MH0gezF9XCIsdGVhbSxwb3NpdGlvbikpO1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgbG9jID0gKHRlYW1JbmRleCAqIHRlYW1BYmlsaXR5T2Zmc2V0KSsgYWJpbGl0eU9mZnNldHNbcG9zaXRpb25PZmZzZXRdICsgYmlsbHNRQjFBYmlsaXR5U3RhcnQrMjtcclxuXHJcblx0XHRcdC8vaW50IGxvYyA9IGZhY2VPZmZzZXRzW3Bvc2l0aW9uT2Zmc2V0XSArIGZhY2VUZWFtT2Zmc2V0c1t0ZWFtSW5kZXhdO1xyXG5cdFx0XHQvL2xvYyA9IDB4MzAxMiArIGZhY2VPZmZzZXRzW3Bvc2l0aW9uT2Zmc2V0XSArIHRlYW1JbmRleCoweDc1O1xyXG5cdFx0XHRpbnQgcmV0ID0gb3V0cHV0Um9tW2xvY107XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldHMgdGhlIGZhY2UgZm9yIHRoZSBndXkgYXQgcG9zaXRpb24gJ3Bvc2l0aW9uJyBvbiB0ZWFtICd0ZWFtJy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cImZhY2VcIj48L3BhcmFtPlxyXG5cdFx0cHVibGljIHZvaWQgU2V0RmFjZShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBpbnQgZmFjZSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHBvc2l0aW9uT2Zmc2V0ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKHBvc2l0aW9uT2Zmc2V0IDwgMCB8fCB0ZWFtSW5kZXggPCAwIHx8IGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlNldEZhY2UgRXJyb3Igc2V0dGluZyBmYWNlIGZvciB7MH0gezF9IGZhY2U9ezJ9XCIsdGVhbSxwb3NpdGlvbixmYWNlKSk7XHJcblx0XHRcdFx0aWYoIGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlZhbGlkIEZhY2UgbnVtYmVycyBhcmUgMHgwMCAtIDB4RDRcIikpO1xyXG5cdFx0XHRcdHJldHVybiA7XHJcblx0XHRcdH1cclxuXHRcdFx0aW50IGxvYyA9ICh0ZWFtSW5kZXggKiB0ZWFtQWJpbGl0eU9mZnNldCkrIGFiaWxpdHlPZmZzZXRzW3Bvc2l0aW9uT2Zmc2V0XSArIGJpbGxzUUIxQWJpbGl0eVN0YXJ0KzI7XHJcblx0XHRcdGludCBza2luID0weDgwO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoZmFjZSA8IDB4NTMpXHJcblx0XHRcdFx0c2tpbiA9MHgwMDtcclxuXHJcblx0XHRcdFNldEN1dFNjZW5lUmFjZSh0ZWFtSW5kZXgsIHBvc2l0aW9uT2Zmc2V0LCBmYWNlKTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY10gPSAoYnl0ZSlza2luOy8vKGJ5dGUpZmFjZTtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBtUmFjZUN1dHNjZW5lU3RhcnRQb3MgPSAweDE3RUY7XHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIFNldEN1dFNjZW5lUmFjZShpbnQgdGVhbUluZGV4LCBpbnQgcG9zaXRpb25JbmRleCwgaW50IGNvbG9yKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcGkgPSAocG9zaXRpb25JbmRleC84KTtcclxuXHRcdFx0aW50IHJvbVBvc2l0aW9uID0gbVJhY2VDdXRzY2VuZVN0YXJ0UG9zICsgcGkgICsgdGVhbUluZGV4KjQ7XHJcblx0XHRcdGJ5dGUgb2xkVmFsdWUgPSBvdXRwdXRSb21bcm9tUG9zaXRpb25dO1xyXG5cdFx0XHQvL1x0XHRcdGJ5dGUgbWFzayA9IEdldE1hc2socG9zaXRpb25JbmRleCwgY29sb3IpO1xyXG5cdFx0XHQvL1x0XHRcdGJ5dGUgbmV3VmFsdWUgPSAoYnl0ZSkgKG9sZFZhbHVlICYgbWFzayk7XHJcblx0XHRcdGJ5dGUgbmV3VmFsdWUgPSBHZXROZXdWYWx1ZShvbGRWYWx1ZSwgcG9zaXRpb25JbmRleCwgY29sb3IpO1xyXG5cdFx0XHQvL1x0XHRcdEZvciBpbml0aWFsIGRlYnVnZ2luZ1xyXG5cdFx0XHQvL1x0XHRcdFN5c3RlbS5EaWFnbm9zdGljcy5EZWJ1Zy5Bc3NlcnQob2xkVmFsdWUgPT0gbmV3VmFsdWUsIFwiUmFjZSBFcnJvciFcIiwgXHJcblx0XHRcdC8vXHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwidGVhbUluZGV4PXswfSwgcG9zaXRpb25JbmRleD17MX0sIGNvbG9yPXsyfVwiLHRlYW1JbmRleCwgcG9zaXRpb25JbmRleCwgY29sb3IpKTtcclxuXHRcdFx0b3V0cHV0Um9tW3JvbVBvc2l0aW9uXSA9IG5ld1ZhbHVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgYnl0ZSBHZXROZXdWYWx1ZShieXRlIG9sZFZhbHVlLCBpbnQgcG9zaXRpb25JbmRleCwgaW50IHJhY2UpXHJcblx0XHR7XHJcblx0XHRcdGJ5dGUgbWFzayA9IDB4RkY7XHJcblx0XHRcdGJ5dGUgcmV0ID0gb2xkVmFsdWU7XHJcblx0XHRcdGludCBiaXRJbmRleCA9IHBvc2l0aW9uSW5kZXggJSA4O1xyXG5cdFx0XHRpZiggcmFjZSA9PSAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG1hc2sgPSBHZXRXaGl0ZU1hc2socG9zaXRpb25JbmRleCk7XHJcblx0XHRcdFx0cmV0ID0gKGJ5dGUpKHJldCAmIG1hc2spO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG1hc2sgPSBHZXRDb2xvck1hc2socG9zaXRpb25JbmRleCk7XHJcblx0XHRcdFx0cmV0ID0gKGJ5dGUpKHJldCB8IG1hc2spO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSBieXRlIEdldFdoaXRlTWFzayhpbnQgcG9zaXRpb25JbmRleClcclxuXHRcdHtcclxuXHRcdFx0Ynl0ZSByZXQgPSAweEZGO1xyXG5cdFx0XHRpbnQgYml0SW5kZXggPSBwb3NpdGlvbkluZGV4ICUgODtcclxuXHRcdFx0c3dpdGNoKGJpdEluZGV4KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FzZSAwOiByZXQgPSAweDdGOyBicmVhazsvLzAxMTExMTExXHJcblx0XHRcdFx0Y2FzZSAxOiByZXQgPSAxOTE7IGJyZWFrOy8vMTAxMTExMTFcclxuXHRcdFx0XHRjYXNlIDI6IHJldCA9IDB4REY7IGJyZWFrOy8vMTEwMTExMTFcclxuXHRcdFx0XHRjYXNlIDM6IHJldCA9IDB4RUY7IGJyZWFrOy8vMTExMDExMTFcclxuXHRcdFx0XHRjYXNlIDQ6IHJldCA9IDB4Rjc7IGJyZWFrOy8vMTExMTAxMTFcclxuXHRcdFx0XHRjYXNlIDU6IHJldCA9IDI1MTsgYnJlYWs7Ly8xMTExMTAxMVxyXG5cdFx0XHRcdGNhc2UgNjogcmV0ID0gMHhGRDsgYnJlYWs7Ly8xMTExMTEwMVxyXG5cdFx0XHRcdGNhc2UgNzogcmV0ID0gMHhGRTsgYnJlYWs7Ly8xMTExMTExMFxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0XHRwcml2YXRlIGJ5dGUgR2V0Q29sb3JNYXNrKGludCBwb3NpdGlvbkluZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRieXRlIHJldCA9IDB4MDA7XHJcblx0XHRcdGludCBiaXRJbmRleCA9IHBvc2l0aW9uSW5kZXggJSA4O1xyXG5cdFx0XHRzd2l0Y2goYml0SW5kZXgpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIDA6IHJldCA9IDB4ODA7IGJyZWFrOy8vMTAwMDAwMDBcclxuXHRcdFx0XHRjYXNlIDE6IHJldCA9IDB4NDA7IGJyZWFrOy8vMDEwMDAwMDBcclxuXHRcdFx0XHRjYXNlIDI6IHJldCA9IDB4MjA7IGJyZWFrOy8vMDAxMDAwMDBcclxuXHRcdFx0XHRjYXNlIDM6IHJldCA9IDB4MTA7IGJyZWFrOy8vMDAwMTAwMDBcclxuXHRcdFx0XHRjYXNlIDQ6IHJldCA9IDB4MDg7IGJyZWFrOy8vMDAwMDEwMDBcclxuXHRcdFx0XHRjYXNlIDU6IHJldCA9IDB4MDQ7IGJyZWFrOy8vMDAwMDAxMDBcclxuXHRcdFx0XHRjYXNlIDY6IHJldCA9IDB4MDI7IGJyZWFrOy8vMDAwMDAwMTBcclxuXHRcdFx0XHRjYXNlIDc6IHJldCA9IDB4MDE7IGJyZWFrOy8vMDAwMDAwMDFcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSByZXR1cm4gdGVhbSBmb3IgJ3RlYW0nXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3MwXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvczFcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zMlwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRSZXR1cm5UZWFtKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zMCwgc3RyaW5nIHBvczEsIHN0cmluZyBwb3MyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggSW5kZXgocG9zaXRpb25OYW1lcywgcG9zMCkgPiAtMSAmJiBcclxuXHRcdFx0XHRJbmRleChwb3NpdGlvbk5hbWVzLHBvczEpICA+IC0xICYmIFxyXG5cdFx0XHRcdEluZGV4KHBvc2l0aW9uTmFtZXMsIHBvczIpID4gLTEgICAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0SW5zZXJ0R3V5T25SZXR1cm5UZWFtKHBvczAsIHRlYW0sIDApO1xyXG5cdFx0XHRcdEluc2VydEd1eU9uUmV0dXJuVGVhbShwb3MxLCB0ZWFtLCAxKTtcclxuXHRcdFx0XHRJbnNlcnRHdXlPblJldHVyblRlYW0ocG9zMiwgdGVhbSwgMik7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcclxuXHRcdFx0XHRcdFwiRVJST1IhIEludmFsaWQgcG9zaXRpb24gb24gUkVUVVJOX1RFQU0gezB9IHsxfSB7Mn1cIixwb3MwLHBvczEscG9zMikpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYSBzdHJpbmcgbGlrZSBcIlJFVFVSTl9URUFNIFdSMywgUkIzLCBSQ0JcIlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0UmV0dXJuVGVhbShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IG51bGw7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBJbmRleCh0ZWFtcyx0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDAgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IoIHN0cmluZy5Gb3JtYXQoXCJFUlJPUiEgR2V0UmV0dXJuVGVhbS5JbnZhbGlkIHRlYW0gezB9XCIsdGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCB0ZWFtTG9jYXRpb24gPSBwcl9rcl90ZWFtX3N0YXJ0X29mZnNldCArICg0KnRlYW1JbmRleCk7XHJcblx0XHRcdFx0aW50IHBvczAsIHBvczEsIHBvczI7XHJcblxyXG5cdFx0XHRcdHBvczAgPSBvdXRwdXRSb21bdGVhbUxvY2F0aW9uXTtcclxuXHRcdFx0XHRwb3MxID0gb3V0cHV0Um9tW3RlYW1Mb2NhdGlvbisxXTtcclxuXHRcdFx0XHRwb3MyID0gb3V0cHV0Um9tW3RlYW1Mb2NhdGlvbisyXTtcclxuXHJcblx0XHRcdFx0Ly8gZmluaXNoIHRoaXMgKGVycm9yIGNoZWNraW5nKVxyXG5cdFx0XHRcdGlmKCBwb3MwID4gLTEgJiYgcG9zMCA8IHBvc2l0aW9uTmFtZXMuTGVuZ3RoICYmXHJcblx0XHRcdFx0XHRwb3MxID4gLTEgJiYgcG9zMSA8IHBvc2l0aW9uTmFtZXMuTGVuZ3RoICYmXHJcblx0XHRcdFx0XHRwb3MyID4gLTEgJiYgcG9zMiA8IHBvc2l0aW9uTmFtZXMuTGVuZ3RoIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XHRcIlJFVFVSTl9URUFNIHswfSwgezF9LCB7Mn1cIixcclxuXHRcdFx0XHRcdFx0cG9zaXRpb25OYW1lc1twb3MwXSAscG9zaXRpb25OYW1lc1twb3MxXSwgcG9zaXRpb25OYW1lc1twb3MyXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3IoXCJFUlJPUiEgUmV0dXJuIFRlYW0gTWVzc2VkIHVwIGluIFJPTS5cIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldCB0aGUgcHVudCByZXR1cm5lciBieSBwb3NpdGlvbi5cclxuXHRcdC8vLyBIaSBuaWJibGUuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRQdW50UmV0dXJuZXIoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRQdW50UmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldFB1bnRSZXR1cm5lcjo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50IGluZGV4ID0gSXNHdXlPblJldHVyblRlYW0ocG9zaXRpb24sIHRlYW0pO1xyXG5cdFx0XHRpZiggaW5kZXggPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGluZGV4ID0gMTtcclxuXHRcdFx0XHRJbnNlcnRHdXlPblJldHVyblRlYW0ocG9zaXRpb24sIHRlYW0sIGluZGV4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEluZGV4KHRlYW1zLCB0ZWFtKTtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gcHJfa3Jfc3RhcnRfb2Zmc2V0KyB0ZWFtSW5kZXg7XHJcblx0XHRcdGludCBrcl9wciA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdFxyXG5cdFx0XHRrcl9wciA9IGtyX3ByICYgMHhmMDtcclxuXHRcdFx0a3JfcHIgPSBrcl9wciArIGluZGV4O1xyXG5cdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpa3JfcHI7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldCB0aGUga2ljayByZXR1cm5lciBieSBwb3NpdGlvbi5cclxuXHRcdC8vLyBMbyBuaWJibGUuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgdm9pZCBTZXRLaWNrUmV0dXJuZXIoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTZXRLaWNrUmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldEtpY2tSZXR1cm5lcjo6IEludmFsaWQgUG9zaXRpb24gezB9XCIsIHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0cmV0dXJuIDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50IGluZGV4ID0gSXNHdXlPblJldHVyblRlYW0ocG9zaXRpb24sIHRlYW0pO1xyXG5cdFx0XHRpZiggaW5kZXggPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGluZGV4ID0gMDtcclxuXHRcdFx0XHRJbnNlcnRHdXlPblJldHVyblRlYW0ocG9zaXRpb24sIHRlYW0sIGluZGV4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gSW5kZXgodGVhbXMsIHRlYW0pO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSBwcl9rcl9zdGFydF9vZmZzZXQrIHRlYW1JbmRleDtcclxuXHRcdFx0aW50IGtyX3ByID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0a3JfcHIgPSBrcl9wciAmIDB4MGY7XHJcblx0XHRcdGtyX3ByICs9IChpbmRleCA8PCA0KTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IChieXRlKWtyX3ByO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBHZXRzIHRoZSBwb3NpdGlvbiB3aG8gcmV0dXJucyBwdW50cy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldEtpY2tSZXR1cm5lcihzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRLaWNrUmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0Ly9pbnQgbG9jYXRpb24gPSAweDMyOGQzICsgSW5kZXgodGVhbXMsdGVhbSk7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBJbmRleCh0ZWFtcywgdGVhbSk7XHJcblx0XHRcdGludCByZXR1cm5UZWFtSW5kZXggPSBvdXRwdXRSb21bcHJfa3Jfc3RhcnRfb2Zmc2V0ICsgdGVhbUluZGV4IF0gPj4gNDtcclxuXHRcdFx0aW50IHRlYW1Mb2NhdGlvbiA9IHByX2tyX3RlYW1fc3RhcnRfb2Zmc2V0ICsgKDQqdGVhbUluZGV4KTtcclxuXHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gb3V0cHV0Um9tWyByZXR1cm5UZWFtSW5kZXggKyB0ZWFtTG9jYXRpb25dO1xyXG5cclxuXHRcdFx0aWYoIHBvc2l0aW9uSW5kZXggPCBwb3NpdGlvbk5hbWVzLkxlbmd0aCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW3Bvc2l0aW9uSW5kZXhdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFxyXG5cdFx0XHQvKlxyXG5cdFx0XHRpbnQgYiA9IG91dHB1dFJvbVtsb2MxXTtcclxuXHRcdFx0YiA9IGIgJiAweDBGO1xyXG5cdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW2JdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHQqL1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBcclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJndXlcIj50aGUgcG9zaXRpb24gbmFtZSBvZiBhIGd1eTwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+dGhlIHRlYW08L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHByaXZhdGUgaW50IElzR3V5T25SZXR1cm5UZWFtKHN0cmluZyBndXksIHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBJbmRleCh0ZWFtcywgdGVhbSk7XHJcblx0XHRcdGludCBwb3NJbmRleCAgPSBJbmRleChwb3NpdGlvbk5hbWVzLCBndXkpO1xyXG5cdFx0XHRpbnQgdGVhbUxvY2F0aW9uID0gcHJfa3JfdGVhbV9zdGFydF9vZmZzZXQgKyAoNCp0ZWFtSW5kZXgpO1xyXG5cclxuXHRcdFx0aWYoIG91dHB1dFJvbVt0ZWFtTG9jYXRpb25dID09IHBvc0luZGV4IClcclxuXHRcdFx0XHRyZXQgPSAwO1xyXG5cdFx0XHRlbHNlIGlmKCBvdXRwdXRSb21bdGVhbUxvY2F0aW9uKzFdID09IHBvc0luZGV4IClcclxuXHRcdFx0XHRyZXQgPSAxO1xyXG5cdFx0XHRlbHNlIGlmKCBvdXRwdXRSb21bdGVhbUxvY2F0aW9uKzJdID09IHBvc0luZGV4IClcclxuXHRcdFx0XHRyZXQgPSAyO1xyXG5cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRwcml2YXRlIHZvaWQgSW5zZXJ0R3V5T25SZXR1cm5UZWFtKCBzdHJpbmcgcG9zaXRpb24sIHN0cmluZyB0ZWFtLCBpbnQgaW5kZXggKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gSW5kZXgodGVhbXMsIHRlYW0pO1xyXG5cdFx0XHRpbnQgcG9zSW5kZXggID0gSW5kZXgocG9zaXRpb25OYW1lcywgcG9zaXRpb24pO1xyXG5cclxuXHRcdFx0aWYoIGluZGV4IDwgMCB8fCBpbmRleCA+IDIgfHx0ZWFtSW5kZXggPCAwIHx8IHRlYW1JbmRleCA+IDI3IHx8IHBvc0luZGV4IDwgMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFx0XCJJbnNlcnRHdXlPblJldHVyblRlYW06IGludmFsaWQgYXJndW1lbnRzIHswfSwgezF9LCB7Mn1cIixwb3NpdGlvbiwgdGVhbSwgaW5kZXgpKTtcclxuXHRcdFx0XHRyZXR1cm4gO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpbnQgdGVhbUxvY2F0aW9uID0gcHJfa3JfdGVhbV9zdGFydF9vZmZzZXQgKyAoNCp0ZWFtSW5kZXgpO1xyXG5cdFx0XHRvdXRwdXRSb21bdGVhbUxvY2F0aW9uK2luZGV4XSA9IChieXRlKXBvc0luZGV4O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBHZXRzIHRoZSBwb3NpdGlvbiB3aG8gcmV0dXJucyBraWNrcy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgc3RyaW5nIEdldFB1bnRSZXR1cm5lcihzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aWYoICFJc1ZhbGlkVGVhbSggdGVhbSkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBHZXRQdW50UmV0dXJuZXI6OiBJbnZhbGlkIHRlYW0gezB9XCIsIHRlYW0pKTtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEluZGV4KHRlYW1zLCB0ZWFtKTtcclxuXHRcdFx0aW50IHJldHVyblRlYW1JbmRleCA9IG91dHB1dFJvbVsocHJfa3Jfc3RhcnRfb2Zmc2V0ICsgdGVhbUluZGV4ICldICYgMHgwZjtcclxuXHRcdFx0aW50IHRlYW1Mb2NhdGlvbiA9IHByX2tyX3RlYW1fc3RhcnRfb2Zmc2V0ICsgKDQqdGVhbUluZGV4KTtcclxuXHJcblx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gb3V0cHV0Um9tWyByZXR1cm5UZWFtSW5kZXggKyB0ZWFtTG9jYXRpb25dO1xyXG5cclxuXHRcdFx0aWYoIHBvc2l0aW9uSW5kZXggPCBwb3NpdGlvbk5hbWVzLkxlbmd0aCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW3Bvc2l0aW9uSW5kZXhdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdC8qXHJcblx0XHRcdHN0cmluZyByZXQgPSBcIlwiO1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSAweDMyOGQzICsgSW5kZXgodGVhbXMsdGVhbSk7XHJcblx0XHRcdGludCBiID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0YiA9IGIgJiAweEYwO1xyXG5cdFx0XHRiID0gYiA+PiA0O1xyXG5cdFx0XHRyZXQgPSBwb3NpdGlvbk5hbWVzW2JdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHQqL1xyXG5cdFx0fVxyXG5cclxuXHJcbiAgICAgICAgaW50IG1Qcm93Ym93bFN0YXJ0aW5nTG9jID0gMHgxNzBDMDA7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFByb0Jvd2xQbGF5ZXIoQ29uZmVyZW5jZSBjb25mLCBTdHJpbmcgcHJvQm93bFBvcywgU3RyaW5nIGZyb21UZWFtLCBUU0JQbGF5ZXIgZnJvbVRlYW1Qb3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL05GQyA9PiAzMCoyICsgKGludCkgXHJcbiAgICAgICAgICAgIGludCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoY29uZiA9PSBDb25mZXJlbmNlLk5GQylcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAweDQ4OyAvLygzMCBzcG90cyAqIDIgYnl0ZXMpO1xyXG4gICAgICAgICAgICBpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KGZyb21UZWFtKTtcclxuICAgICAgICAgICAgYnl0ZSB0aSA9IChieXRlKXRlYW1JbmRleDtcclxuICAgICAgICAgICAgYnl0ZSBwaSA9IChieXRlKWZyb21UZWFtUG9zO1xyXG5cclxuICAgICAgICAgICAgaW50IHBvc0luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIHN3aXRjaChwcm9Cb3dsUG9zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVUMVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVUMlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5MZW5ndGggKzE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVUM1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5MZW5ndGggKzI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcG9zSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHByb0Jvd2xQb3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW50IGxvYyA9IG1Qcm93Ym93bFN0YXJ0aW5nTG9jICsgb2Zmc2V0ICsgKDIgKiBwb3NJbmRleCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBPdXRwdXRSb21bbG9jIF0gPSBwaTtcclxuICAgICAgICAgICAgT3V0cHV0Um9tW2xvYyArIDFdID0gdGk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblx0XHRwdWJsaWMgdm9pZCBTZXRRdWFydGVyTGVuZ3RoKGJ5dGUgbGVuKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggb3V0cHV0Um9tICE9IG51bGwgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b3V0cHV0Um9tWyBRVUFSVEVSX0xFTkdUSCBdID0gbGVuO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIGJ5dGUgR2V0UXVhcnRlckxlbmd0aCgpXHJcblx0XHR7XHJcblx0XHRcdGJ5dGUgcmV0ID0gMDtcclxuXHRcdFx0aWYoIG91dHB1dFJvbSAhPSBudWxsIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldCA9IG91dHB1dFJvbVsgUVVBUlRFUl9MRU5HVEggXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgUmVnZXggc2ltcGxlU2V0UmVnZXg7XHJcblxyXG5cdFx0cHVibGljIHZvaWQgQXBwbHlTZXQoc3RyaW5nIGxpbmUpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBzaW1wbGVTZXRSZWdleCA9PSBudWxsKVxyXG5cdFx0XHRcdHNpbXBsZVNldFJlZ2V4ID0gbmV3IFJlZ2V4KFwiU0VUXFxcXHMqXFxcXChcXFxccyooMHhbMC05YS1mQS1GXSspXFxcXHMqLFxcXFxzKigweFswLTlhLWZBLUZdKylcXFxccypcXFxcKVwiKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKCBzaW1wbGVTZXRSZWdleC5NYXRjaChsaW5lKSAhPSBNYXRjaC5FbXB0eSApXHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQXBwbHlTaW1wbGVTZXQobGluZSwgdGhpcyk7XHJcbiNpZiAhQlJJREdFX1BST0pFQ1RcclxuICAgICAgICAgICAgZWxzZSBpZiAobGluZS5JbmRleE9mKFwiUHJvbXB0VXNlclwiLCBTdHJpbmdDb21wYXJpc29uLk9yZGluYWxJZ25vcmVDYXNlKSA+IC0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGluZS5JbmRleE9mKFJvbVZlcnNpb24uVG9TdHJpbmcoKSwgU3RyaW5nQ29tcGFyaXNvbi5PcmRpbmFsSWdub3JlQ2FzZSkgPiAtMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBnb29kIHRvIGdvISBhcHBseSBpdFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBzaW1wbGVTZXRMaW5lID0gU3RyaW5nSW5wdXREbGcuUHJvbXB0Rm9yU2V0VXNlcklucHV0KCBsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiggIXN0cmluZy5Jc051bGxPckVtcHR5KHNpbXBsZVNldExpbmUpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlTZXQoIHNpbXBsZVNldExpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1N0YXRpY1V0aWxzLlNob3dFcnJvcihcIlJvbSB2ZXJzaW9uIG5vdCBzcGVjaWZpZWQgaW4gSGFjazogXCIgKyBsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwibGluZSAnezB9JyBub3QgYXBwbGllZDsgUm9tVmVyc2lvbiA9IHsxfVwiLCBsaW5lLCBSb21WZXJzaW9uLlRvU3RyaW5nKCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4jZW5kaWZcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1Igd2l0aCBsaW5lIFxcXCJ7MH1cXFwiXCIsIGxpbmUpKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgYnl0ZVtdIEdldEhleEJ5dGVzKHN0cmluZyBpbnB1dClcclxuXHRcdHtcclxuXHRcdFx0aWYoIGlucHV0ID09IG51bGwpXHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0XHRieXRlW10gcmV0ID0gbmV3IGJ5dGVbaW5wdXQuTGVuZ3RoLzJdO1xyXG5cdFx0XHRzdHJpbmcgYj1cIlwiO1xyXG5cdFx0XHRpbnQgdG1wPTA7XHJcblx0XHRcdGludCBqID0gMDtcclxuXHJcblx0XHRcdGZvcihpbnQgaSA9MDsgaSA8IGlucHV0Lkxlbmd0aDsgaSs9MiApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiID0gaW5wdXQuU3Vic3RyaW5nKGksMik7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBTdGF0aWNVdGlscy5QYXJzZUludEZyb21IZXhTdHJpbmcoYik7Ly8gSW50MzIuUGFyc2UoYiwgU3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuXHRcdFx0XHRyZXRbaisrXSA9IChieXRlKXRtcDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIGZpcnN0IGluZGV4IG9mIGVsZW1lbnQgdGhhdCBvY2N1cnMgaW4gJ2FycmF5Jy4gcmV0dXJuc1xyXG5cdFx0Ly8vIC0xIGlmICdlbGVtZW50JyBkb2Vzbid0IG9jY3VyIGluICdhcnJheScuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiYXJyYXlcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiZWxlbWVudFwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHJpdmF0ZSBpbnQgSW5kZXgoc3RyaW5nW10gYXJyYXksIHN0cmluZyBlbGVtZW50KVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IoaW50IGkgPTA7IGkgPCBhcnJheS5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHRpZihhcnJheVtpXSA9PSBlbGVtZW50KVxyXG5cdFx0XHRcdFx0cmV0dXJuIGk7XHJcblxyXG5cdFx0XHRyZXR1cm4gLTE7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIFByaW50VmFsaWRBYmlsaXRpZXMoKVxyXG5cdFx0e1xyXG5cdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFxyXG5cdFx0XHRcdFwiVmFsaWQgcGxheWVyIGFiaWxpdGllcyBhcmUgNiwgMTMsIDE5LCAyNSwgMzEsIDM4LCA0NCwgNTAsIDU2LCA2MywgNjksIDc1LCA4MSwgODgsIDk0LCAxMDBcIikpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgU3RyaW5naWZ5QXJyYXkoaW50W10gaW5wdXQpXHJcblx0XHR7XHJcblx0XHRcdGlmKCBpbnB1dCA9PSBudWxsIClcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHRcdFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcig0MCk7XHJcblx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCBpbnB1dC5MZW5ndGg7IGkrKylcclxuXHRcdFx0XHRzYi5BcHBlbmQoc3RyaW5nLkZvcm1hdChcInswfSwgXCIsaW5wdXRbaV0pKTtcclxuXHRcdFx0c2IuUmVtb3ZlKHNiLkxlbmd0aC0yLDEpOyAvL3RyaW0gbGFzdCBjb21tYVxyXG5cdFx0XHRyZXR1cm4gc2IuVG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gUmV0dXJucyBhbiBBcnJheUxpc3Qgb2YgZXJyb3JzIHRoYXQgd2VyZSBlbmNvdW50ZXJlZCBkdXJpbmcgdGhlIG9wZXJhdGlvbi5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJzY2hlZHVsZUxpc3RcIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgQXBwbHlTY2hlZHVsZSggU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuTGlzdDxzdHJpbmc+IHNjaGVkdWxlTGlzdCApXHJcblx0XHR7XHJcblx0XHRcdGlmKCBzY2hlZHVsZUxpc3QgIT0gbnVsbCAmJiBvdXRwdXRSb20gIT0gbnVsbCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTTkVTX1NjaGVkdWxlSGVscGVyIHNjaCA9IG5ldyBTTkVTX1NjaGVkdWxlSGVscGVyKCBvdXRwdXRSb20gKTtcclxuXHRcdFx0XHRzY2guQXBwbHlTY2hlZHVsZSggc2NoZWR1bGVMaXN0ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuICAgICAgICBcclxuXHRcdHByaXZhdGUgaW50IG1CaWxsc1VuaWZvcm1Mb2MgPSAweDJjMmU0Oy8vIHRoaXMgaXMgZm9yIHRoZSBORVMgdmVyc2lvblxyXG5cclxuXHRcdHByb3RlY3RlZCBpbnQgQmlsbHNVbmlmb3JtTG9jXHJcblx0XHR7XHJcblx0XHRcdGdldHsgcmV0dXJuIG1CaWxsc1VuaWZvcm1Mb2M7fVxyXG5cdFx0XHRzZXR7IG1CaWxsc1VuaWZvcm1Mb2MgPSB2YWx1ZTt9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRIb21lVW5pZm9ybShzdHJpbmcgdGVhbSwgc3RyaW5nIGNvbG9yU3RyaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgbG9jID0gR2V0VW5pZm9ybUxvYyh0ZWFtKTtcclxuXHRcdFx0aWYoIGxvYyA+IC0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vXHRcdFx0XHRPdXRwdXRSb21bbG9jXSAgICAgPSBwYW50c0NvbG9yO1xyXG5cdFx0XHRcdC8vXHRcdFx0XHRPdXRwdXRSb21bbG9jICsgMl0gPSBqZXJzZXlDb2xvcjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0QXdheVVuaWZvcm0oc3RyaW5nIHRlYW0sIHN0cmluZyBjb2xvclN0cmluZylcclxuXHRcdHtcclxuXHRcdFx0aW50IGxvYyA9IEdldFVuaWZvcm1Mb2ModGVhbSk7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL1x0XHRcdFx0T3V0cHV0Um9tW2xvYyArIDNdID0gcGFudHNDb2xvcjtcclxuXHRcdFx0XHQvL1x0XHRcdFx0T3V0cHV0Um9tW2xvYyArIDVdID0gamVyc2V5Q29sb3I7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cHVibGljIHZpcnR1YWwgc3RyaW5nIEdldEhvbWVVbmlmb3JtKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRpbnQgbG9jID0gR2V0VW5pZm9ybUxvYyh0ZWFtKTtcclxuXHRcdFx0aWYoIGxvYyA+IC0xIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vXHRcdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFwiSG9tZT0weHswOngyfXsxOngyfVwiLFxyXG5cdFx0XHRcdC8vXHRcdFx0XHRcdE91dHB1dFJvbVtsb2NdLCBcclxuXHRcdFx0XHQvL1x0XHRcdFx0XHRPdXRwdXRSb21bbG9jICsgMl0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRBd2F5VW5pZm9ybShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0aW50IGxvYyA9IEdldFVuaWZvcm1Mb2ModGVhbSk7XHJcblx0XHRcdGlmKCBsb2MgPiAtMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL1x0XHRcdFx0cmV0ID0gc3RyaW5nLkZvcm1hdChcIkF3YXk9MHh7MDp4Mn17MTp4Mn1cIixcclxuXHRcdFx0XHQvL1x0XHRcdFx0XHRPdXRwdXRSb21bbG9jICsgM10sIFxyXG5cdFx0XHRcdC8vXHRcdFx0XHRcdE91dHB1dFJvbVtsb2MgKyA1XSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldFVuaWZvcm1Mb2Moc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCByZXQgPSAtMTtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IC0xICYmIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldCA9IEJpbGxzVW5pZm9ybUxvYyArICh0ZWFtSW5kZXggKiAweGEpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRHYW1lVW5pZm9ybShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IHN0cmluZy5FbXB0eTtcclxuXHRcdFx0Ly9cdFx0XHRyZXQgPSBzdHJpbmcuRm9ybWF0KFwiezB9LHsxfVwiLCBHZXRIb21lVW5pZm9ybSh0ZWFtKSwgR2V0QXdheVVuaWZvcm0odGVhbSkpO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0RGl2Q2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0sIHN0cmluZyBjb2xvclN0cmluZylcclxuXHRcdHtcclxuXHRcdH1cclxuXHRcdHB1YmxpYyB2b2lkIFNldFVuaWZvcm1Vc2FnZShzdHJpbmcgdGVhbSwgc3RyaW5nIHVzYWdlKVxyXG5cdFx0e1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0VW5pZm9ybVVzYWdlKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gU3RyaW5nLkVtcHR5O1xyXG5cdFx0fVxyXG5cdFx0cHVibGljIHZpcnR1YWwgdm9pZCBTZXRDb25mQ2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0sIHN0cmluZyBjb2xvclN0cmluZylcclxuXHRcdHtcclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0RGl2Q2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0gKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyB2aXJ0dWFsIHN0cmluZyBHZXRDb25mQ2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0gKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgcmV0ID0gc3RyaW5nLkVtcHR5O1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBzdHJpbmcgR2V0Q2hhbXBDb2xvcnMoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdHN0cmluZyByZXQgPSBzdHJpbmcuRW1wdHk7XHJcbi8vXHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiezB9LCB7MX1cIixcclxuLy9cdFx0XHRcdEdldERpdkNoYW1wQ29sb3JzKHRlYW0pLFxyXG4vL1x0XHRcdFx0R2V0Q29uZkNoYW1wQ29sb3JzKHRlYW0pXHJcbi8vXHRcdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiY29uZlwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicHJvQm93bFBvc1wiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgU3RyaW5nIEdldFByb0Jvd2xQbGF5ZXIoQ29uZmVyZW5jZSBjb25mLCBTdHJpbmcgcHJvQm93bFBvcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZyByZXQgPSBcIlwiO1xyXG4gICAgICAgICAgICBpbnQgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgaWYgKGNvbmYgPT0gQ29uZmVyZW5jZS5ORkMpXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMHg0ODsgLy8oMzAgc3BvdHMgKiAyIGJ5dGVzKTtcclxuXHJcbiAgICAgICAgICAgIGludCBwb3NJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHByb0Jvd2xQb3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRVQxXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zSW5kZXggPSBwb3NpdGlvbk5hbWVzLkxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSRVQyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zSW5kZXggPSBwb3NpdGlvbk5hbWVzLkxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVUM1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5MZW5ndGggKyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBwb3NJbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocHJvQm93bFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW50IGxvYyA9IG1Qcm93Ym93bFN0YXJ0aW5nTG9jICsgb2Zmc2V0ICsgKDIgKiAoaW50KXBvc0luZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGludCB0ZWFtSW5kZXggPSBPdXRwdXRSb21bbG9jKzFdO1xyXG4gICAgICAgICAgICBpbnQgcG9zID0gT3V0cHV0Um9tW2xvYyBdO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0gPSBUZWNtb1Rvb2wuVGVhbXNbdGVhbUluZGV4XTtcclxuICAgICAgICAgICAgcmV0ID0gU3RyaW5nLkZvcm1hdChcInswfSx7MX0sezJ9LHszfVwiLCBjb25mLlRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICBwcm9Cb3dsUG9zLlRvU3RyaW5nKCksIHRlYW0sICgoVFNCUGxheWVyKXBvcykuVG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFN0cmluZyBHZXRDb25mZXJlbmNlUHJvQm93bFBsYXllcnMoQ29uZmVyZW5jZSBjb25mKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoNTAwKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBwb3NpdGlvbk5hbWVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRQcm9Cb3dsUGxheWVyKGNvbmYsIHBvc2l0aW9uTmFtZXNbaV0pKTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxyXFxuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldFByb0Jvd2xQbGF5ZXIoY29uZiwgXCJSRVQxXCIpKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCJcXHJcXG5cIik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldFByb0Jvd2xQbGF5ZXIoY29uZixcIlJFVDJcIikpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcclxcblwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0UHJvQm93bFBsYXllcihjb25mLCBcIlJFVDNcIikpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcclxcblwiKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU3RyaW5nIEdldFByb0Jvd2xQbGF5ZXJzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKDEwMDApO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIiMgQUZDIFByb0Jvd2wgcGxheWVyc1xcclxcblwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0Q29uZmVyZW5jZVByb0Jvd2xQbGF5ZXJzKENvbmZlcmVuY2UuQUZDKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxyXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCIjIE5GQyBQcm9Cb3dsIHBsYXllcnNcXHJcXG5cIik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldENvbmZlcmVuY2VQcm9Cb3dsUGxheWVycyhDb25mZXJlbmNlLk5GQykpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcclxcblwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cHVibGljIHZvaWQgUHJvY2Vzc1RleHQoc3RyaW5nIHRleHQpXHJcblx0XHR7XHJcblx0XHRcdElucHV0UGFyc2VyIHBhcnNlciA9IG5ldyBJbnB1dFBhcnNlcih0aGlzKTtcclxuXHRcdFx0dGV4dCA9IHRleHQuUmVwbGFjZShcIlxcclxcblwiLCBcIlxcblwiKTtcclxuXHRcdFx0c3RyaW5nW10gbGluZXMgPSB0ZXh0LlNwbGl0KFwiXFxuXCIuVG9DaGFyQXJyYXkoKSk7XHJcblx0XHRcdHBhcnNlci5Qcm9jZXNzTGluZXMobGluZXMpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sMlxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgU05FU19UU0IzX1NjaGVkdWxlSGVscGVyIDogU05FU19TY2hlZHVsZUhlbHBlclxyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgaW50W10gd2Vla3MgPSB7IFxyXG4gICAgICAgICAgICAweDE2RjAwQywgMHgxNkYwMkEsIDB4MTZGMDQ4LCAweDE2RjA2NiwgMHgxNkYwODQsIDB4MTZGMEEyLCAweDE2RjBDMCwgMHgxNkYwREUsIFxyXG4gICAgICAgICAgICAweDE2RjBGQywgMHgxNkYxMUEsIDB4MTZGMTM4LCAweDE2RjE1NiwgMHgxNkYxNzQsIDB4MTZGMTkyLCAxNTAzNjY0LCAweDE2RjFDRSwgXHJcbiAgICAgICAgICAgIDB4MTZGMUVDXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcHVibGljIFNORVNfVFNCM19TY2hlZHVsZUhlbHBlcihJVGVjbW9Ub29sIHRvb2wpOmJhc2UodG9vbCkgeyB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBpbnQgR2FtZUxvY2F0aW9uKGludCB3ZWVrLCBpbnQgZ2FtZU9md2VlaylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IHdlZWtzW3dlZWtdO1xyXG4gICAgICAgICAgICBpbnQgcmV0VmFsID0gbG9jYXRpb24gKyAoMiAqIGdhbWVPZndlZWspO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxudXNpbmcgU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zO1xyXG5cclxubmFtZXNwYWNlIFRTQlRvb2wyXHJcbntcclxuICAgIC8vIFFCIGF0dHJpYnV0ZXMgKG5pYmJsZXMpOlxyXG4gICAgLy8gUlMgUlAgTVMgSFAgX18gX18gUFMgUEMgUEEgQVIgX18gQ08gQkIgX19cclxuXHJcbiAgICAvLyBSQiBhdHRyaWJ1dGVzIChuaWJibGVzKTpcclxuICAgIC8vIFJTIFJQIE1TIEhQIF9fIF9fIEJDIFJDIEJCIF9fXHJcbiAgICAvLyBDdXJyZW50bHkgZm91bmQ6IFBsYXllciBuYW1lcywgcGxheWVyIGF0dHJpYnV0ZXMsIHRlYW0gc3RyaW5nYVxyXG4gICAgLy8gVE9ETzpcclxuICAgIC8vIDQuIE5GTCBSZWNvcmRzID9cclxuICAgIHB1YmxpYyBjbGFzcyBUU0IyVG9vbCA6IElUZWNtb1Rvb2wsIFRTQlRvb2wuSVRlY21vQ29udGVudFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1RlY21vU3VwZXJCb3dsMlJvbShieXRlW10gcm9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm9vbCByZXRWYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHJvbSAhPSBudWxsICYmIHJvbS5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBMaXN0PGxvbmc+IHJlc3VsdHMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkZpbmRTdHJpbmdJbkZpbGUoXCJDT05TRUNVVElWRVwiLCByb20sIDE4MjgwNjQsIDE4MzA2ODgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBieXRlW10gT3V0cHV0Um9tIHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIFNob3dQbGF5ZXJTaW1EYXRhID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgU2hvd1BsYXlib29rcyA9IHRydWU7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIFNob3dTY2hlZHVsZSA9IHRydWU7XHJcblxyXG4gICAgICAgICNyZWdpb24gU3BlY2lhbCBMb2NhdGlvbnMgU05FUyBUU0IyXHJcbiAgICAgICAgLy9odHRwczovL3RlY21vYm93bC5vcmcvZm9ydW1zL3RvcGljLzUzMDI4LXRlY21vLXN1cGVyLWJvd2wtaWktaGFja2luZ3Jlc291cmNlLWRvY3VtZW50YXRpb24vXHJcbiAgICAgICAgY29uc3QgaW50IEJZVEVTX1BFUl9QTEFZRVIgPSA1O1xyXG4gICAgICAgIHByb3RlY3RlZCBpbnQgQllURVNfUEVSX1FCID0gNjtcclxuXHJcbiAgICAgICAgY29uc3QgaW50IE5BTUVfVEFCTEVfU0laRSA9IDB4NDc5ODtcclxuXHJcbiAgICAgICAgY29uc3QgaW50IEJBTktfMV9QTEFZRVJfQVRUUklCVVRFU19TVEFSVCA9IDB4MWVjODAwO1xyXG4gICAgICAgIGNvbnN0IGludCBCQU5LXzJfUExBWUVSX0FUVFJJQlVURVNfU1RBUlQgPSAweDFmNDgwMDtcclxuICAgICAgICBjb25zdCBpbnQgQkFOS18zX1BMQVlFUl9BVFRSSUJVVEVTX1NUQVJUID0gMHgxZmM4MDA7XHJcblxyXG4gICAgICAgIC8vIG5hbWVfc3RyaW5nX3RhYmxlXzFcclxuICAgICAgICBwcm90ZWN0ZWQgaW50IHRzYjJfbmFtZV9zdHJpbmdfdGFibGVfMV9maXJzdF9wdHIgPSAweDFlODAzODtcclxuICAgICAgICBjb25zdCBpbnQgdHNiMl9uYW1lX3N0cmluZ190YWJsZV8xX29mZnNldCA9IDB4MWUwMDAwO1xyXG5cclxuICAgICAgICAvLyBuYW1lIHN0cmluZyB0YWJsZSAyXHJcbiAgICAgICAgY29uc3QgaW50IHRzYjJfbmFtZV9zdHJpbmdfdGFibGVfMl9maXJzdF9wdHIgPSAweDFmMDAzODtcclxuICAgICAgICBjb25zdCBpbnQgdHNiMl9uYW1lX3N0cmluZ190YWJsZV8yX29mZnNldCA9IDB4MWU4MDAwO1xyXG5cclxuICAgICAgICAvLyBuYW1lIHN0cmluZyB0YWJsZSAzXHJcbiAgICAgICAgY29uc3QgaW50IHRzYjJfbmFtZV9zdHJpbmdfdGFibGVfM19maXJzdF9wdHIgPSAweDFmODAzODtcclxuICAgICAgICBjb25zdCBpbnQgdHNiMl9uYW1lX3N0cmluZ190YWJsZV8zX29mZnNldCA9IDB4MWYwMDAwO1xyXG5cclxuICAgICAgICAvLyBUZWFtIG5hbWUgU3RyaW5nIHRhYmxlXHJcbiAgICAgICAgY29uc3QgaW50IHRzYjJfdGVhbV9uYW1lX3N0cmluZ190YWJsZV9maXJzdF9wdHIgPSAweDcwMDA7XHJcbiAgICAgICAgY29uc3QgaW50IHRzYjJfdGVhbV9uYW1lX3N0cmluZ190YWJsZV9vZmZzZXQgPSAtMzI3Njg7XHJcbiAgICAgICAgY29uc3QgaW50IFRFQU1fTkFNRV9TVFJJTkdfVEFCTEVfU0laRSA9IDB4NUMwO1xyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgY29uc3QgaW50IHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8xID0gMHgxNkYwMEM7IC8vZGF0YT0wNTBEMDYwMTE0MTMwQTBDMTkwMFxyXG4gICAgICAgIGNvbnN0IGludCBzY2hlZHVsZV9zdGFydF9zZWFzb25fMiA9IDB4MTZGMjA0OyAvL2RhdGE9MDMwMDA1MDYwMjAxMDkwNDE2MEIgXHJcbiAgICAgICAgY29uc3QgaW50IHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8zID0gMHgxNkY0MTg7IC8vZGF0YT0xMTE5MTgxNDA2MDUwRTA4MDcwMSBcclxuXHJcbiAgICAgICAgY29uc3QgaW50IHRlYW1fc2ltX3N0YXJ0X3NlYXNvbl8xID0gMHgxRUUwMDA7ICAvLyBwb2ludGVyc1xyXG4gICAgICAgIGNvbnN0IGludCB0ZWFtX3NpbV9zdGFydF9zZWFzb25fMiA9IDB4MUY2MDAwO1xyXG4gICAgICAgIGNvbnN0IGludCB0ZWFtX3NpbV9zdGFydF9zZWFzb25fMyA9IDB4MUZFMDAwO1xyXG5cclxuICAgICAgICBjb25zdCBpbnQgdGVhbV9zaW1fc2l6ZSA9IDEwMjtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIGludCBiaWxsc19rcl9sb2Nfc2Vhc29uXzEgPSAweEU1MURBOyAvLyAweEU1MEFBOyAvLyBUU0IzXHJcbiAgICAgICAgY29uc3QgaW50IGJpbGxzX2tyX2xvY19zZWFzb25fMiA9IDB4RTUyMTY7XHJcbiAgICAgICAgY29uc3QgaW50IGJpbGxzX2tyX2xvY19zZWFzb25fMyA9IDB4RTUyNTI7XHJcbiAgICAgICAgLy8gYmlsbHNfa3JfbG9jID0gMHhlNTBBQiBcclxuICAgICAgICAvLyBjb2x0c19rcl9sb2MgPSAweGU1MEFDIFxyXG4gICAgICAgIC8vIGNvbHRzX2tyX2xvYyA9IDB4ZTUwQURcclxuXHJcbiAgICAgICAgLy8gUGxheWJvb2tzIFxyXG4gICAgICAgIC8qICBUaGUgb3JkZXIgZ29lcyAgKiBGcm9tIEtub2JiZSBcclxuICAgICAgICAgICAgMjggdGVhbXMgZnJvbSA5MiAgOiAweEU1RDI3XHJcbiAgICAgICAgICAgIFBybyBCb3dsIFRlYW1zICAgIDpcclxuICAgICAgICAgICAgMjggdGVhbXMgZnJvbSA5MyAgOlxyXG4gICAgICAgICAgICAyOCB0ZWFtcyBmcm9tIDk0ICA6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgaW50IHBsYXlib29rX3RlYW1fc2l6ZSA9IDg7Ly8gYnl0ZXMsIDEgbmliYmxlIHBlciBwbGF5LCAxNiB0b3RhbCBwbGF5czsgTGVhZ3VlIHNpemUgPSBFMFxyXG4gICAgICAgIHByb3RlY3RlZCBpbnRbXSBwbGF5Ym9va19zdGFydCA9IHsgXHJcbiAgICAgICAgICAgIDB4RTVEMjYsLy8gMTk5MiBcclxuICAgICAgICAgICAgMHhFNUUxNixcclxuICAgICAgICAgICAgMHhFNUYwNlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgaW50IHByb19ib3dsX3B0cl9sb2NhdGlvbl9zZWFzb25fMSA9IDB4RTUwMDA7IC8vIHNlYXNvbiAxXHJcbiAgICAgICAgY29uc3QgaW50IHByb19ib3dsX3B0cl9sb2NhdGlvbl9zZWFzb25fMiA9IDB4RTUwMDI7IC8vIHNlYXNvbiAxXHJcbiAgICAgICAgY29uc3QgaW50IHByb19ib3dsX3B0cl9sb2NhdGlvbl9zZWFzb25fMyA9IDB4RTUwMDQ7IC8vIHNlYXNvbiAxXHJcbiAgICAgICAgXHJcbiAgICAgICAgcHJvdGVjdGVkIGludCBwcm9fYm93bF9wbGF5Ym9vayA9IDB4NUUwNztcclxuICAgICAgICAjZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxzdHJpbmc+IHBvc2l0aW9uTmFtZXMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxzdHJpbmc+KCksKF9vMSk9PntfbzEuQWRkKFwiUUIxXCIpO19vMS5BZGQoXCJRQjJcIik7X28xLkFkZChcIlJCMVwiKTtfbzEuQWRkKFwiUkIyXCIpO19vMS5BZGQoXCJSQjNcIik7X28xLkFkZChcIlJCNFwiKTtfbzEuQWRkKFwiV1IxXCIpO19vMS5BZGQoXCJXUjJcIik7X28xLkFkZChcIldSM1wiKTtfbzEuQWRkKFwiV1I0XCIpO19vMS5BZGQoXCJURTFcIik7X28xLkFkZChcIlRFMlwiKTtfbzEuQWRkKFwiQ1wiKTtfbzEuQWRkKFwiTEdcIik7X28xLkFkZChcIlJHXCIpO19vMS5BZGQoXCJMVFwiKTtfbzEuQWRkKFwiUlRcIik7X28xLkFkZChcIlJFXCIpO19vMS5BZGQoXCJOVFwiKTtfbzEuQWRkKFwiTEVcIik7X28xLkFkZChcIlJFMlwiKTtfbzEuQWRkKFwiTlQyXCIpO19vMS5BZGQoXCJMRTJcIik7X28xLkFkZChcIlJPTEJcIik7X28xLkFkZChcIlJJTEJcIik7X28xLkFkZChcIkxJTEJcIik7X28xLkFkZChcIkxPTEJcIik7X28xLkFkZChcIkxCNVwiKTtfbzEuQWRkKFwiUkNCXCIpO19vMS5BZGQoXCJMQ0JcIik7X28xLkFkZChcIkRCMVwiKTtfbzEuQWRkKFwiREIyXCIpO19vMS5BZGQoXCJGU1wiKTtfbzEuQWRkKFwiU1NcIik7X28xLkFkZChcIkRCM1wiKTtfbzEuQWRkKFwiS1wiKTtfbzEuQWRkKFwiUFwiKTtyZXR1cm4gX28xO30pO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIExpc3Q8c3RyaW5nPiB0ZWFtcyA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBMaXN0PHN0cmluZz4oKSwoX28yKT0+e19vMi5BZGQoXCJiaWxsc1wiKTtfbzIuQWRkKFwiY29sdHNcIik7X28yLkFkZChcImRvbHBoaW5zXCIpO19vMi5BZGQoXCJwYXRyaW90c1wiKTtfbzIuQWRkKFwiamV0c1wiKTtfbzIuQWRkKFwiYmVuZ2Fsc1wiKTtfbzIuQWRkKFwiYnJvd25zXCIpO19vMi5BZGQoXCJvaWxlcnNcIik7X28yLkFkZChcInN0ZWVsZXJzXCIpO19vMi5BZGQoXCJicm9uY29zXCIpO19vMi5BZGQoXCJjaGllZnNcIik7X28yLkFkZChcInJhaWRlcnNcIik7X28yLkFkZChcImNoYXJnZXJzXCIpO19vMi5BZGQoXCJzZWFoYXdrc1wiKTtfbzIuQWRkKFwiY293Ym95c1wiKTtfbzIuQWRkKFwiZ2lhbnRzXCIpO19vMi5BZGQoXCJlYWdsZXNcIik7X28yLkFkZChcImNhcmRpbmFsc1wiKTtfbzIuQWRkKFwicmVkc2tpbnNcIik7X28yLkFkZChcImJlYXJzXCIpO19vMi5BZGQoXCJsaW9uc1wiKTtfbzIuQWRkKFwicGFja2Vyc1wiKTtfbzIuQWRkKFwidmlraW5nc1wiKTtfbzIuQWRkKFwiYnVjY2FuZWVyc1wiKTtfbzIuQWRkKFwiZmFsY29uc1wiKTtfbzIuQWRkKFwicmFtc1wiKTtfbzIuQWRkKFwic2FpbnRzXCIpO19vMi5BZGQoXCI0OWVyc1wiKTtyZXR1cm4gX28yO30pO1xyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBTaG93T2ZmUHJlZiB7IGdldDsgc2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUU0IyVG9vbChieXRlW10gcm9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5PdXRwdXRSb20gPSByb207XHJcbiAgICAgICAgICAgIEluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIFRTQjJUb29sKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBJbml0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEJZVEVTX1BFUl9RQiA9IDY7XHJcbiAgICAgICAgICAgIC8vIG5hbWVfc3RyaW5nX3RhYmxlXzFcclxuICAgICAgICAgICAgdHNiMl9uYW1lX3N0cmluZ190YWJsZV8xX2ZpcnN0X3B0ciA9IDB4MWU4MDM4O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGVhbXMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxzdHJpbmc+KCksKF9vMSk9PntfbzEuQWRkKFwiYmlsbHNcIik7X28xLkFkZChcImNvbHRzXCIpO19vMS5BZGQoXCJkb2xwaGluc1wiKTtfbzEuQWRkKFwicGF0cmlvdHNcIik7X28xLkFkZChcImpldHNcIik7X28xLkFkZChcImJlbmdhbHNcIik7X28xLkFkZChcImJyb3duc1wiKTtfbzEuQWRkKFwib2lsZXJzXCIpO19vMS5BZGQoXCJzdGVlbGVyc1wiKTtfbzEuQWRkKFwiYnJvbmNvc1wiKTtfbzEuQWRkKFwiY2hpZWZzXCIpO19vMS5BZGQoXCJyYWlkZXJzXCIpO19vMS5BZGQoXCJjaGFyZ2Vyc1wiKTtfbzEuQWRkKFwic2VhaGF3a3NcIik7X28xLkFkZChcImNvd2JveXNcIik7X28xLkFkZChcImdpYW50c1wiKTtfbzEuQWRkKFwiZWFnbGVzXCIpO19vMS5BZGQoXCJjYXJkaW5hbHNcIik7X28xLkFkZChcInJlZHNraW5zXCIpO19vMS5BZGQoXCJiZWFyc1wiKTtfbzEuQWRkKFwibGlvbnNcIik7X28xLkFkZChcInBhY2tlcnNcIik7X28xLkFkZChcInZpa2luZ3NcIik7X28xLkFkZChcImJ1Y2NhbmVlcnNcIik7X28xLkFkZChcImZhbGNvbnNcIik7X28xLkFkZChcInJhbXNcIik7X28xLkFkZChcInNhaW50c1wiKTtfbzEuQWRkKFwiNDllcnNcIik7cmV0dXJuIF9vMTt9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIFRTQlRvb2wuUk9NX1RZUEUgUm9tVmVyc2lvbiB7IGdldCB7IHJldHVybiBUU0JUb29sLlJPTV9UWVBFLlNORVNfVFNCMjsgfSB9XHJcblxyXG4gICAgICAgIC8vIHVzZSB0aGlzIGluc3RlYWQgb2YgZGlyZWN0b3kgc2V0dGluZyBkYXRhIGluIE91dHB1dFJvbVxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldEJ5dGUoaW50IGxvY2F0aW9uLCBieXRlIGIpIFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICAgIHRoaXMuT3V0cHV0Um9tW2xvY2F0aW9uXSA9IGI7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNWYWxpZFBvc2l0aW9uKHN0cmluZyBwb3MpIHsgcmV0dXJuIHBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3MpID4gLTE7IH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnRbXSBlaWdodGVlbldlZWtzID0gbmV3IGludFtdIHsgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCB9O1xyXG4gICAgICAgIHByaXZhdGUgaW50W10gc2V2ZW50ZWVuV2Vla3MgPSBuZXcgaW50W10geyAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQsIDE0LCAxNCwgMTQgfTtcclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0U2NoZWR1bGUoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNORVNfU2NoZWR1bGVIZWxwZXIgaGVscGVyID0gbmV3IFNORVNfU2NoZWR1bGVIZWxwZXIodGhpcyk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2Vhc29uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IGhlbHBlci5TZXRXZWVrT25lTG9jYXRpb24oc2NoZWR1bGVfc3RhcnRfc2Vhc29uXzEsIHNldmVudGVlbldlZWtzLCB0ZWFtcyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBoZWxwZXIuU2V0V2Vla09uZUxvY2F0aW9uKHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8yLCBlaWdodGVlbldlZWtzLCB0ZWFtcyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiBoZWxwZXIuU2V0V2Vla09uZUxvY2F0aW9uKHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8zLCBzZXZlbnRlZW5XZWVrcywgdGVhbXMpOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaGVscGVyLkdldFNjaGVkdWxlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBHZXRQbGF5ZXJJbmRleChzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHRlYW1JbmRleCA9IHRlYW1zLkluZGV4T2YodGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NpdGlvbkluZGV4ID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaW50IHJldFZhbCA9IHRlYW1JbmRleCAqIHBvc2l0aW9uTmFtZXMuQ291bnQgKyBwb3NpdGlvbkluZGV4O1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgaW50IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcmV0VmFsID0gLTE7XHJcbiAgICAgICAgICAgIGludCBhdHRyaWJ1dGVTdGFydCA9IEJBTktfM19QTEFZRVJfQVRUUklCVVRFU19TVEFSVDtcclxuICAgICAgICAgICAgc3dpdGNoIChzZWFzb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogYXR0cmlidXRlU3RhcnQgPSBCQU5LXzFfUExBWUVSX0FUVFJJQlVURVNfU1RBUlQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBhdHRyaWJ1dGVTdGFydCA9IEJBTktfMl9QTEFZRVJfQVRUUklCVVRFU19TVEFSVDsgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW50IHRlYW1CeXRlU2l6ZSA9IDE4NTtcclxuICAgICAgICAgICAgaW50IHRlYW1JbmRleCA9IHRlYW1zLkluZGV4T2YodGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NpdGlvbkluZGV4ID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaW50IHRlYW1TdGFydCA9IGF0dHJpYnV0ZVN0YXJ0ICsgKHRlYW1JbmRleCAqIHRlYW1CeXRlU2l6ZSk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocG9zaXRpb25JbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXRWYWwgPSB0ZWFtU3RhcnQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXRWYWwgPSB0ZWFtU3RhcnQgKyA3OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIDExOiAvLyBza2lsbCBwbGF5ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0VmFsID0gdGVhbVN0YXJ0ICsgQllURVNfUEVSX1BMQVlFUiAqIHBvc2l0aW9uSW5kZXggKyA0Oy8vKDIgZXh0cmEgYnl0ZXMgZm9yIHFicylcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIE9mZmVuc2l2ZSBsaW5lbWVuXHJcbiAgICAgICAgICAgICAgICBjYXNlIDEyOiByZXRWYWwgPSB0ZWFtU3RhcnQgKyAweDQwOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldFZhbCA9IHRlYW1TdGFydCArIDB4NDQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNDogcmV0VmFsID0gdGVhbVN0YXJ0ICsgMHg0ODsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE1OiByZXRWYWwgPSB0ZWFtU3RhcnQgKyAweDRjOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMTY6IHJldFZhbCA9IHRlYW1TdGFydCArIDB4NTA7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNjogcmV0VmFsID0gdGVhbVN0YXJ0ICsgMTgwOyBicmVhazsvLyBwdW50ZXIgXHJcbiAgICAgICAgICAgICAgICAvLyBEZWZlbnNlICsgS2lja2VyXHJcbiAgICAgICAgICAgICAgICAvL2Nhc2UgMTc6IHJldFZhbCA9IHRlYW1TdGFydCArIDB4NTQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXRWYWwgPSB0ZWFtU3RhcnQgKyAweDU0ICsgNSAqIChwb3NpdGlvbkluZGV4IC0gMTcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAjcmVnaW9uIEdldCBzcGVjaWZpYyBBdHRyaWJ1dGVzXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIHN0cmluZyBHZXRRQkFiaWxpdGllcyhpbnQgc2Vhc29uLCAvLyAoc2Vhc29uID0gMS0zKVxyXG4gICAgICAgICAgICBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIHJwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuICAgICAgICAgICAgYnl0ZSBocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuICAgICAgICAgICAgYnl0ZSBwcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIHBjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIHBhID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYXIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgY28gPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDZdKTtcclxuICAgICAgICAgICAgYnl0ZSBzcCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDZdKTsgLy8gc2ltIHBvY2tldD8/XHJcblxyXG4gICAgICAgICAgICBieXRlW10gYXR0cnMgPSBuZXcgYnl0ZVtdIHsgcnMsIHJwLCBtcywgaHAsIGJiLCBwcywgcGMsIHBhLCBhciwgY28gfTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQXR0cmlidXRlcyhhdHRycyk7IC8vICtTdHJpbmcuRm9ybWF0KFwifHswOngyfSB7MTp4Mn0gezI6eDJ9IHszOngyfSB7NDp4Mn0gezU6eDJ9IHs2OngyfSBcIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDVdLCBPdXRwdXRSb21bbG9jYXRpb24gKyA2XSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93UGxheWVyU2ltRGF0YSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24gPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHJldFZhbCArPSBTdHJpbmcuRm9ybWF0KFwiW3swOlgyfSx7MTpYMn0sezI6WDJ9XVwiLCBPdXRwdXRSb21bbG9jYXRpb25dLCBPdXRwdXRSb21bbG9jYXRpb24gKyAxXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIFNldFFCQWJpbGl0aWVzKGludCBzZWFzb24sXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZWFtLCBzdHJpbmcgcWIsIGJ5dGVbXSBhYmlsaXRpZXMpXHJcbiAgICAgICAgICAgIC8vYnl0ZSBydW5uaW5nU3BlZWQsIGJ5dGUgcnVzaGluZ1Bvd2VyLCBcclxuICAgICAgICAgICAgLy9ieXRlIG1heFNwZWVkLCBieXRlIGhpdHRpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIGJvZHlCYWxhbmNlLFxyXG4gICAgICAgICAgICAvL2J5dGUgcGFzc2luZ1NwZWVkLCBieXRlIHBhc3NDb250cm9sLCBcclxuICAgICAgICAgICAgLy9ieXRlIGFjY3VyYWN5LCBieXRlIGF2b2lkUnVzaCwgXHJcbiAgICAgICAgICAgIC8vYnl0ZSBjb29sbmVzcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpZiAocWIgIT0gXCJRQjFcIiAmJiBxYiAhPSBcIlFCMlwiKSB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oXCJJbnZhbGlkIHFiIHBvc2l0aW9uIFwiICsgcWIpO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBxYik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnNfcnAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1swXSwgYWJpbGl0aWVzWzFdKTtcclxuICAgICAgICAgICAgYnl0ZSBtc19ocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzJdLCBhYmlsaXRpZXNbM10pO1xyXG4gICAgICAgICAgICBieXRlIHBzX3BjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNV0sIGFiaWxpdGllc1s2XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcGFfYXIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s3XSwgYWJpbGl0aWVzWzhdKTtcclxuICAgICAgICAgICAgYnl0ZSB1bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgdW5rMV9jbyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXModW5rMSwgYWJpbGl0aWVzWzldKTtcclxuICAgICAgICAgICAgYnl0ZSB1bmsyID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNl0pO1xyXG4gICAgICAgICAgICBieXRlIGJiX3VuazIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s0XSwgdW5rMik7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24sIHJzX3JwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDEsIG1zX2hwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDMsIHBzX3BjKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDQsIHBhX2FyKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDUsIHVuazFfY28pO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgNiwgYmJfdW5rMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCBzdHJpbmcgR2V0T0xQbGF5ZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgLy8gKHNlYXNvbiA9IDEtMylcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIG1zID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDNdKTtcclxuXHJcbiAgICAgICAgICAgIGJ5dGVbXSBhdHRycyA9IG5ldyBieXRlW10geyBycywgcnAsIG1zLCBocCwgYmIgfTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQXR0cmlidXRlcyhhdHRycyk7Ly8gK1N0cmluZy5Gb3JtYXQoXCJ8ezA6eDJ9IHsxOngyfSB7Mjp4Mn0gezM6eDJ9XCIsIE91dHB1dFJvbVtsb2NhdGlvbl0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDFdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAyXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXRPTFBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcywgYnl0ZVtdIGFiaWxpdGllcylcclxuICAgICAgICAgICAgLy9ieXRlIHJ1bm5pbmdTcGVlZCwgYnl0ZSBydXNoaW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBtYXhTcGVlZCwgYnl0ZSBoaXR0aW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBib2R5QmFsYW5jZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpbnQgcG9zSW5kZXggPSBwb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zKTtcclxuICAgICAgICAgICAgaWYgKHBvc0luZGV4IDwgMTIgfHwgcG9zSW5kZXggPiAxNikgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBwb3NpdGlvbiBhcmd1bWVudCEgKHRha2VzIEMsUkcsUlQsTEcsTFQpIFwiICsgcG9zKTtcclxuXHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgdW5rMSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDNdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl91bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNF0sIHVuazEpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAzLCBiYl91bmsxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIHN0cmluZyBHZXRLaWNrZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgLy8gKHNlYXNvbiA9IDEtMylcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIG1zID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUga3AgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAzXSk7XHJcbiAgICAgICAgICAgIGJ5dGUga2EgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgYnl0ZSBhYiA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYiA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNV0pO1xyXG5cclxuICAgICAgICAgICAgYnl0ZVtdIGF0dHJzID0gbmV3IGJ5dGVbXSB7IHJzLCBycCwgbXMsIGhwLCBiYiwga3AsIGthLCBhYiB9O1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gVFNCVG9vbC5TdGF0aWNVdGlscy5NYXBBdHRyaWJ1dGVzKGF0dHJzKTsgLy8gK1N0cmluZy5Gb3JtYXQoXCJ8ezA6eDJ9IHsxOngyfSB7Mjp4Mn0gezM6eDJ9IHs0OngyfSB7NTp4Mn1cIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDVdKTtcclxuICAgICAgICAgICAgaWYgKFNob3dQbGF5ZXJTaW1EYXRhKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IEdldFNpbUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsICs9IFN0cmluZy5Gb3JtYXQoXCJbezA6WH1dXCIsIChPdXRwdXRSb21bbG9jYXRpb25dID4+IDQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXRLaWNrZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbixieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgICAgICAvL2J5dGUgcnVubmluZ1NwZWVkLCBieXRlIHJ1c2hpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIG1heFNwZWVkLCBieXRlIGhpdHRpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIGJvZHlCYWxhbmNlLFxyXG4gICAgICAgICAgICAvL2J5dGUga2lja2luZ1Bvd2VyLFxyXG4gICAgICAgICAgICAvL2J5dGUga2lja2luZ0FjY3VyYWN5LCBieXRlIGF2b2lkQmxvY2spXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3Moc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9IFwiS1wiKSB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oXCJJbnZhbGlkIHBvc2l0aW9uIGFyZ3VtZW50ISAodGFrZXMgSykgXCIgKyBwb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgdW5rMSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIHVuazFfa3AgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKHVuazEsIGFiaWxpdGllc1s1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUga2FfYWIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s2XSwgYWJpbGl0aWVzWzddKTtcclxuICAgICAgICAgICAgYnl0ZSB1bmsyID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNV0pO1xyXG4gICAgICAgICAgICBieXRlIGJiX3VuazIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s0XSwgdW5rMik7XHJcblxyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAzLCB1bmsxX2twKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDQsIGthX2FiKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDUsIGJiX3VuazIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgc3RyaW5nIEdldFB1bnRlckFiaWxpdGllcyhpbnQgc2Vhc29uLCAvLyAoc2Vhc29uID0gMS0zKVxyXG4gICAgICAgICAgICBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIHJwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuICAgICAgICAgICAgYnl0ZSBocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuICAgICAgICAgICAgYnl0ZSBrcCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIGFiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIGJiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcblxyXG4gICAgICAgICAgICBieXRlW10gYXR0cnMgPSBuZXcgYnl0ZVtdIHsgcnMsIHJwLCBtcywgaHAsIGJiLCBrcCwgYWIgfTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQXR0cmlidXRlcyhhdHRycyk7Ly8gK1N0cmluZy5Gb3JtYXQoXCJ8ezA6eDJ9IHsxOngyfSB7Mjp4Mn0gezM6eDJ9IHs0OngyfVwiLCBPdXRwdXRSb21bbG9jYXRpb25dLCBPdXRwdXRSb21bbG9jYXRpb24gKyAxXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDNdLCBPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93UGxheWVyU2ltRGF0YSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24gPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHJldFZhbCArPSBTdHJpbmcuRm9ybWF0KFwiW3swOlh9XVwiLCAoT3V0cHV0Um9tW2xvY2F0aW9uXSAmIDB4MEYpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXRQdW50ZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgYnl0ZVtdIGFiaWxpdGllcylcclxuICAgICAgICAgICAgLy9ieXRlIHJ1bm5pbmdTcGVlZCwgYnl0ZSBydXNoaW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBtYXhTcGVlZCwgYnl0ZSBoaXR0aW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBib2R5QmFsYW5jZSxcclxuICAgICAgICAgICAgLy9ieXRlIGtpY2tpbmdQb3dlciwgYnl0ZSBhdm9pZEJsb2NrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiAhPSBcIlBcIikgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBwb3NpdGlvbiBhcmd1bWVudCEgKHRha2VzIFApIFwiICsgcG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnNfcnAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1swXSwgYWJpbGl0aWVzWzFdKTtcclxuICAgICAgICAgICAgYnl0ZSBtc19ocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzJdLCBhYmlsaXRpZXNbM10pO1xyXG4gICAgICAgICAgICBieXRlIGtwX2FiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNV0sIGFiaWxpdGllc1s2XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgdW5rMSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl91bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNF0sIHVuazEpO1xyXG5cclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiwgcnNfcnApO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgMSwgbXNfaHApO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgMywga3BfYWIpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgNCwgYmJfdW5rMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0UGxheWVyQWJpbGl0aWVzKGludCBzZWFzb24sIC8vIChzZWFzb24gPSAxLTMpXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBvc2l0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIxXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUUIyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEdldFFCQWJpbGl0aWVzKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSR1wiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxHXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUlRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMVFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHZXRPTFBsYXllckFiaWxpdGllcyhzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJLXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEdldEtpY2tlckFiaWxpdGllcyhzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEdldFB1bnRlckFiaWxpdGllcyhzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gR2V0U2tpbGxfRGVmUGxheWVyQWJpbGl0aWVzKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpcnR1YWwgc3RyaW5nIEdldFNraWxsX0RlZlBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gUkIgYXR0cmlidXRlcyAobmliYmxlcyk6XHJcbiAgICAgICAgICAgIC8vIFJTIFJQIE1TIEhQIF9fIF9fIEJDIFJDIEJCIF9fXHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIG1zID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcblxyXG4gICAgICAgICAgICBieXRlIGJjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAzXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcmVjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgM10pO1xyXG4gICAgICAgICAgICBieXRlIGJiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcblxyXG4gICAgICAgICAgICBieXRlW10gYXR0cnMgPSBuZXcgYnl0ZVtdIHsgcnMsIHJwLCBtcywgaHAsIGJiLCBiYywgcmVjIH07XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLk1hcEF0dHJpYnV0ZXMoYXR0cnMpOy8vICtTdHJpbmcuRm9ybWF0KFwifHswOngyfSB7MTp4Mn0gezI6eDJ9IHszOngyfSB7NDp4Mn1cIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBpZiAoU2hvd1BsYXllclNpbURhdGEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gR2V0U2ltTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgKz0gU3RyaW5nLkZvcm1hdChcIlt7MDpYMn0sezE6WDJ9LHsyOlgyfVwiLCBPdXRwdXRSb21bbG9jYXRpb25dLCBPdXRwdXRSb21bbG9jYXRpb24gKyAxXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3NpdGlvbikgPCAxMylcclxuICAgICAgICAgICAgICAgICAgICByZXRWYWwgKz0gKFwiLFwiICsgT3V0cHV0Um9tW2xvY2F0aW9uICsgM10uVG9TdHJpbmcoXCJYMlwiKSk7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgKz0gXCJdXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0U2tpbGxQbGF5ZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgLy8gKHNlYXNvbiA9IDEtMylcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgYnl0ZVtdIGFiaWxpdGllcylcclxuICAgICAgICAgICAgLy9ieXRlIHJ1bm5pbmdTcGVlZCwgYnl0ZSBydXNoaW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBtYXhTcGVlZCwgYnl0ZSBoaXR0aW5nUG93ZXIsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBib2R5QmFsYW5jZSxcclxuICAgICAgICAgICAgLy9ieXRlIGJhbGxDb250cm9sLCBieXRlIHJlY2VwdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3Moc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgaW50IHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTsgLy8yLTExXHJcbiAgICAgICAgICAgIGlmIChwb3NJbmRleCA8IDIgfHwgcG9zSW5kZXggPiAxMSkgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBwb3NpdGlvbiBhcmd1bWVudCEgKHRha2VzIFJCMT1URTIpXCIgKyBwb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmNfcmVjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNV0sIGFiaWxpdGllc1s2XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgdW5rMSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl91bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNF0sIHVuazEpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAzLCBiY19yZWMpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgNCwgYmJfdW5rMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIFNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLGJ5dGVbXSBhYmlsaXRpZXMpXHJcbiAgICAgICAgICAgIC8vYnl0ZSBydW5uaW5nU3BlZWQsIGJ5dGUgcnVzaGluZ1Bvd2VyLFxyXG4gICAgICAgICAgICAvL2J5dGUgbWF4U3BlZWQsIGJ5dGUgaGl0dGluZ1Bvd2VyLFxyXG4gICAgICAgICAgICAvL2J5dGUgYm9keUJhbGFuY2UsXHJcbiAgICAgICAgICAgIC8vYnl0ZSBpbnRlcmNlcHRpb25zLCBieXRlIHF1aWNrbmVzcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpbnQgcG9zSW5kZXggPSBwb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zaXRpb24pOyAvLzE3LTM0XHJcbiAgICAgICAgICAgIGlmIChwb3NJbmRleCA8IDE3IHx8IHBvc0luZGV4ID4gMzQpIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIkludmFsaWQgcG9zaXRpb24gYXJndW1lbnQhICh0YWtlcyBSRS1EQjMpXCIgKyBwb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcGlfcXUgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s1XSwgYWJpbGl0aWVzWzZdKTtcclxuICAgICAgICAgICAgYnl0ZSB1bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBieXRlIGJiX3VuazEgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s0XSwgdW5rMSk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24sIHJzX3JwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDEsIG1zX2hwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDMsIHBpX3F1KTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDQsIGJiX3VuazEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAjZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIC8vIGNhbGxlZCAnR2V0RmFjZSgpJyBmb3IgaGlzdG9yaWNhbCBwdXJwb3NlLCBmaXJzdCBuaWJibGUgaXMgcmFjZSAoMD13aGl0ZSwgOD1ibGFjayk7IG5vdCBzdXJlIHdoYXQgdGhlIHNlY29uZCBuaWJibGUgaXNcclxuICAgICAgICBwcm90ZWN0ZWQgdmlydHVhbCBieXRlIEdldEZhY2UoaW50IHNlYXNvbixcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pICsgMjtcclxuICAgICAgICAgICAgYnl0ZSByZXRWYWwgPSBPdXRwdXRSb21bbG9jYXRpb25dO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBTZXRGYWNlKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24sIGludCBmYWNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKSArIDI7XHJcbiAgICAgICAgICAgIGJ5dGUgbG93TmliYmxlID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaGlnaE5pYmJsZSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoKGJ5dGUpZmFjZSk7XHJcbiAgICAgICAgICAgIGJ5dGUgZmFjZV9iID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhoaWdoTmliYmxlLCBsb3dOaWJibGUpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCBmYWNlX2IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRQbGF5ZXJOYW1lKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24sIG91dCBieXRlIHBsYXllck51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBcImZha2VORVdTISEhXCI7XHJcbiAgICAgICAgICAgIGludCBmaXJzdF9wdHIgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzFfZmlyc3RfcHRyO1xyXG4gICAgICAgICAgICBpbnQgb2Zmc2V0ID0gdHNiMl9uYW1lX3N0cmluZ190YWJsZV8xX29mZnNldDtcclxuICAgICAgICAgICAgc3dpdGNoIChzZWFzb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdF9wdHIgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzJfZmlyc3RfcHRyO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRzYjJfbmFtZV9zdHJpbmdfdGFibGVfMl9vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfcHRyID0gdHNiMl9uYW1lX3N0cmluZ190YWJsZV8zX2ZpcnN0X3B0cjtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzNfb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGludCBwbGF5ZXJJbmRleCA9IEdldFBsYXllckluZGV4KHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgc3RyaW5nIG5hbWUgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFN0cmluZ1RhYmxlU3RyaW5nKE91dHB1dFJvbSwgcGxheWVySW5kZXgsIGZpcnN0X3B0ciwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgcGxheWVyTnVtYmVyID0gKGJ5dGUpbmFtZVswXTtcclxuICAgICAgICAgICAgaWYgKChjaGFyKXBsYXllck51bWJlciA9PSAnKicpIC8vIHRyaWNreSBsaXR0bGUgdHJpY2s7IHdlIHJlcGxhY2UgdGhlICdudWxsJyBieXRlIHdpdGggYSAnKicgYW5kIG5vdyBoYXZlIHRvIGNoZWNrIGZvciBpdC5cclxuICAgICAgICAgICAgICAgIHBsYXllck51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLlN1YnN0cmluZygxKTsgLy8gdHJpbSBvZmYgcGxheWVyIG51bWJlclxyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG5hbWUuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICBpZiAoQ2hhci5Jc1VwcGVyKG5hbWVbaV0pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IG5hbWUuU3Vic3RyaW5nKDAsIGkpICsgXCIgXCIgKyBuYW1lLlN1YnN0cmluZyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEluc2VydFBsYXllck5hbWUoaW50IHNlYXNvbiwgc3RyaW5nIGN1cnJlbnRUZWFtLCBzdHJpbmcgcG9zaXRpb24sIHN0cmluZyBmbmFtZSwgc3RyaW5nIGxuYW1lLCBieXRlIGplcnNleU51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBmaXJzdF9wdHIgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzFfZmlyc3RfcHRyO1xyXG4gICAgICAgICAgICBpbnQgb2Zmc2V0ID0gdHNiMl9uYW1lX3N0cmluZ190YWJsZV8xX29mZnNldDtcclxuICAgICAgICAgICAgc3dpdGNoIChzZWFzb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdF9wdHIgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzJfZmlyc3RfcHRyO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRzYjJfbmFtZV9zdHJpbmdfdGFibGVfMl9vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfcHRyID0gdHNiMl9uYW1lX3N0cmluZ190YWJsZV8zX2ZpcnN0X3B0cjtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzNfb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGludCBwbGF5ZXJJbmRleCA9IEdldFBsYXllckluZGV4KGN1cnJlbnRUZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHN0cmluZyBpbnNlcnRUaGlzID0gKGNoYXIpamVyc2V5TnVtYmVyICsgZm5hbWUuVG9Mb3dlcigpICsgbG5hbWUuVG9VcHBlcigpO1xyXG4gICAgICAgICAgICBpbnQgc3RyaW5nc0luVGFibGUgPSB0ZWFtcy5Db3VudCAqIHBvc2l0aW9uTmFtZXMuQ291bnQ7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2V0U3RyaW5nVGFibGVTdHJpbmcoT3V0cHV0Um9tLCBwbGF5ZXJJbmRleCwgaW5zZXJ0VGhpcywgZmlyc3RfcHRyLCBvZmZzZXQsIHN0cmluZ3NJblRhYmxlLCBOQU1FX1RBQkxFX1NJWkUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0cmluZyBHZXRUZWFtcyhpbnQgc2Vhc29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBidWlsZGVyID0gbmV3IFN0cmluZ0J1aWxkZXIoKTtcclxuICAgICAgICAgICAgZm9yZWFjaChzdHJpbmcgdGVhbSBpbiB0ZWFtcylcclxuICAgICAgICAgICAgICAgIEdldFRlYW0oc2Vhc29uLCB0ZWFtLCBidWlsZGVyKTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0UHJvQm93bFBsYXllcnMoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgICAgIEdldFByb0Jvd2xUZWFtKHNlYXNvbiwgQ29uZmVyZW5jZS5BRkMsIGJ1aWxkZXIpO1xyXG4gICAgICAgICAgICBHZXRQcm9Cb3dsVGVhbShzZWFzb24sIENvbmZlcmVuY2UuTkZDLCBidWlsZGVyKTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBHZXRUZWFtKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgaSA9IHRlYW1zLkluZGV4T2YodGVhbSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiVEVBTSA9IFwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQodGVhbSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0VGVhbVNpbURhdGEoc2Vhc29uLCB0ZWFtKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICBpZiAoU2hvd1BsYXlib29rcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0UGxheWJvb2soc2Vhc29uLCB0ZWFtKSk7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChTdHJpbmcuRm9ybWF0KFwiVEVBTV9BQkI9ezB9LFRFQU1fQ0lUWT17MX0sVEVBTV9OQU1FPXsyfVxcblwiLFxyXG4gICAgICAgICAgICAgICAgR2V0VGVhbUFiYnJldmlhdGlvbihpKSwgR2V0VGVhbUNpdHkoaSksIEdldFRlYW1OYW1lKGkpKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldFRlYW1QbGF5ZXJzKHNlYXNvbiwgdGVhbSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUUIxLDAwNEEgICg3NCkgIE1hcmlubyBpcyB0aGUgNzR0aCBwbGF5ZXJcclxuICAgICAgICAvLyBjb25mLCBwcm9Cb3dsUG9zLCB0ZWFtLCBwb3NcclxuICAgICAgICAvLyBBRkMsUUIyLG9pbGVycyxRQjFcclxuICAgICAgICBwcml2YXRlIHZvaWQgR2V0UHJvQm93bFRlYW0oaW50IHNlYXNvbiwgQ29uZmVyZW5jZSBjb25mLCBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQcm9ib3dsVGVhbUxvY2F0aW9uKHNlYXNvbiwgY29uZik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFN0cmluZy5Gb3JtYXQoXCIjIHswfSBQcm9Cb3dsIHBsYXllcnNcXG5cIiwgY29uZi5Ub1N0cmluZygpKSk7XHJcbiAgICAgICAgICAgIHN0cmluZyB0ZWFtID0gXCJcIjtcclxuICAgICAgICAgICAgc3RyaW5nIHBsYXllclBvcyA9IFwiXCI7XHJcbiAgICAgICAgICAgIGludCBwbGF5ZXJQb3NpdGlvbkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIGludCBwbGF5ZXJJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBpbnQgdGVhbUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHN0cmluZyBwb3MgaW4gcG9zaXRpb25OYW1lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGxheWVySW5kZXggPSAoT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0gPDwgOCkgKyBPdXRwdXRSb21bbG9jYXRpb25dO1xyXG4gICAgICAgICAgICAgICAgdGVhbUluZGV4ID0gcGxheWVySW5kZXggLyBwb3NpdGlvbk5hbWVzLkNvdW50O1xyXG4gICAgICAgICAgICAgICAgcGxheWVyUG9zaXRpb25JbmRleCA9IHBsYXllckluZGV4ICUgcG9zaXRpb25OYW1lcy5Db3VudDtcclxuICAgICAgICAgICAgICAgIHBsYXllclBvcyA9IHBvc2l0aW9uTmFtZXNbcGxheWVyUG9zaXRpb25JbmRleF07XHJcbiAgICAgICAgICAgICAgICB0ZWFtID0gdGVhbXNbdGVhbUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKHN0cmluZy5Gb3JtYXQoXCJ7MH0sezF9LHsyfSx7M31cXG5cIiwgY29uZi5Ub1N0cmluZygpLHBvcyx0ZWFtLHBsYXllclBvcykpO1xyXG4gICAgICAgICAgICAgICAgLy9idWlsZGVyLkFwcGVuZChTdHJpbmcuRm9ybWF0KFwiezB9LHsxOlgyfXsyOlgyfSAgKHszfSlcXG5cIixwb3MsIE91dHB1dFJvbVtsb2NhdGlvbiArIDFdLCBPdXRwdXRSb21bbG9jYXRpb25dLChPdXRwdXRSb21bbG9jYXRpb24gKyAxXTw8OCkgKyBPdXRwdXRSb21bbG9jYXRpb25dKSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbiArPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0UHJvQm93bFBsYXllcihpbnQgc2Vhc29uLCBDb25mZXJlbmNlIGNvbmYsIFN0cmluZyBwcm9Cb3dsUG9zLCBTdHJpbmcgZnJvbVRlYW0sIFRTQlBsYXllciBmcm9tVGVhbVBvcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBwbGF5ZXJJbmRleCA9IHRlYW1zLkluZGV4T2YoZnJvbVRlYW0pICogcG9zaXRpb25OYW1lcy5Db3VudCArIChpbnQpZnJvbVRlYW1Qb3M7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFByb2Jvd2xUZWFtTG9jYXRpb24oc2Vhc29uLCBjb25mKSArIDIgKiBwb3NpdGlvbk5hbWVzLkluZGV4T2YocHJvQm93bFBvcyk7XHJcbiAgICAgICAgICAgIC8vIHBpOjB4MDA0YSA9PT4gNGEgMDBcclxuICAgICAgICAgICAgYnl0ZSBiMSA9IChieXRlKShwbGF5ZXJJbmRleCA+PiA4KTtcclxuICAgICAgICAgICAgYnl0ZSBiMiA9IChieXRlKShwbGF5ZXJJbmRleCAmIDB4MDBGRik7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24sIGIyKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDEsIGIxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW50IEdldFByb2Jvd2xUZWFtTG9jYXRpb24oaW50IHNlYXNvbiwgQ29uZmVyZW5jZSBjb25mKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHB0cl9sb2NhdGlvbiA9IHByb19ib3dsX3B0cl9sb2NhdGlvbl9zZWFzb25fMTtcclxuICAgICAgICAgICAgc3dpdGNoIChzZWFzb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogcHRyX2xvY2F0aW9uID0gcHJvX2Jvd2xfcHRyX2xvY2F0aW9uX3NlYXNvbl8yOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcHRyX2xvY2F0aW9uID0gcHJvX2Jvd2xfcHRyX2xvY2F0aW9uX3NlYXNvbl8zOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29uZiA9PSBDb25mZXJlbmNlLk5GQylcclxuICAgICAgICAgICAgICAgIHB0cl9sb2NhdGlvbiArPSA2O1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSAoT3V0cHV0Um9tW3B0cl9sb2NhdGlvbiArIDFdIDw8IDgpICsgT3V0cHV0Um9tW3B0cl9sb2NhdGlvbl07XHJcbiAgICAgICAgICAgIGludCBvZmZzZXQgPSAweEQ4MDAwOyAvLzB4ZDAxMiArIG9mZnNldCA9IDB4ZTUwMTI6IFxyXG4gICAgICAgICAgICBsb2NhdGlvbiArPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBpbnQgR2V0U2ltTG9jYXRpb24oaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpbnQgaW5kZXggPSB0ZWFtcy5JbmRleE9mKHRlYW0pO1xyXG4gICAgICAgICAgICAvL2ludCBsb2NhdGlvbiA9IGluZGV4ICogdGVhbV9zaW1fc2l6ZTtcclxuICAgICAgICAgICAgaW50IHB0cl9sb2NhdGlvbiA9IGluZGV4ICogMjtcclxuICAgICAgICAgICAgc3dpdGNoIChzZWFzb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcHRyX2xvY2F0aW9uICs9IHRlYW1fc2ltX3N0YXJ0X3NlYXNvbl8xOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogcHRyX2xvY2F0aW9uICs9IHRlYW1fc2ltX3N0YXJ0X3NlYXNvbl8yOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcHRyX2xvY2F0aW9uICs9IHRlYW1fc2ltX3N0YXJ0X3NlYXNvbl8zOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSAweDFlMDAwMCArIChPdXRwdXRSb21bcHRyX2xvY2F0aW9uICsgMV0gPDwgOCkgKyBPdXRwdXRSb21bcHRyX2xvY2F0aW9uXTtcclxuICAgICAgICAgICAgc3dpdGNoIChwb3NpdGlvbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlFCMVwiOiBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJRQjJcIjogbG9jYXRpb24gKz0gMzsgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJCMVwiOiBsb2NhdGlvbiArPSA2OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJSQjJcIjogbG9jYXRpb24gKz0gMTA7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJCM1wiOiBsb2NhdGlvbiArPSAxNDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkI0XCI6IGxvY2F0aW9uICs9IDE4OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXUjFcIjogbG9jYXRpb24gKz0gMjI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldSMlwiOiBsb2NhdGlvbiArPSAyNjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV1IzXCI6IGxvY2F0aW9uICs9IDMwOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXUjRcIjogbG9jYXRpb24gKz0gMzQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlRFMVwiOiBsb2NhdGlvbiArPSAzODsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVEUyXCI6IGxvY2F0aW9uICs9IDQyOyBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkVcIjogIGxvY2F0aW9uICs9IDQ2OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJOVFwiOiAgbG9jYXRpb24gKz0gNDk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxFXCI6ICBsb2NhdGlvbiArPSA1MjsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUkUyXCI6IGxvY2F0aW9uICs9IDU1OyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJOVDJcIjogbG9jYXRpb24gKz0gNTg7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxFMlwiOiBsb2NhdGlvbiArPSA2MTsgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxPTEJcIjogbG9jYXRpb24gKz0gNjQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxJTEJcIjogbG9jYXRpb24gKz0gNjc7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJJTEJcIjogbG9jYXRpb24gKz0gNzA7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJPTEJcIjogbG9jYXRpb24gKz0gNzM7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxCNVwiOiAgbG9jYXRpb24gKz0gNzY7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlJDQlwiOiAgbG9jYXRpb24gKz0gNzk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxDQlwiOiAgbG9jYXRpb24gKz0gODI7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRCMVwiOiAgbG9jYXRpb24gKz0gODU7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRCMlwiOiAgbG9jYXRpb24gKz0gODg7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkZTXCI6ICAgbG9jYXRpb24gKz0gOTE7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNTXCI6ICAgbG9jYXRpb24gKz0gOTQ7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRCM1wiOiAgbG9jYXRpb24gKz0gOTc7IGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJLXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUFwiOiBsb2NhdGlvbiArPSAxMDA7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDEwMSA9IHJ1c2hEICYgcGFzc0RcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vICB8MDEyMzQ1fFxyXG4gICAgICAgIC8vLyAgNCA9IHBhc3NpbmdcclxuICAgICAgICAvLy8gIDUgPSBzY3JhbWJsZVxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwiZGF0YVwiPkFycmF5IG9mIGJ5dGVzPC9wYXJhbT5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRRQlNpbURhdGEoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgaW50W10gZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2MgPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBkYXRhLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXRCeXRlKGxvYyArIGksIChieXRlKWRhdGFbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIFNldFNraWxsU2ltRGF0YShpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcywgaW50W10gZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2MgPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvcyk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgZGF0YS5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2V0Qnl0ZShsb2MgKyBpLCAoYnl0ZSlkYXRhW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0RGVmZW5zaXZlU2ltRGF0YShpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvcywgaW50W10gZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2MgPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvcyk7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgZGF0YS5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2V0Qnl0ZShsb2MgKyBpLCAoYnl0ZSlkYXRhW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gMXN0IG5pYmJsZSBcclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRLaWNraW5nU2ltRGF0YShpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgYnl0ZSBkYXRhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxvYyA9IEdldFNpbUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgXCJLXCIpO1xyXG4gICAgICAgICAgICBieXRlIGN1cnJlbnQgPSAoYnl0ZSkoIE91dHB1dFJvbVtsb2NdICYgMHgwRik7XHJcbiAgICAgICAgICAgIGRhdGEgPSAoYnl0ZSkoZGF0YSA8PCA0KTtcclxuICAgICAgICAgICAgZGF0YSArPSBjdXJyZW50O1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvYywgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAybmQgbmliYmxlXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0UHVudGluZ1NpbURhdGEoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIGJ5dGUgZGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2MgPSBHZXRTaW1Mb2NhdGlvbihzZWFzb24sIHRlYW0sIFwiUFwiKTtcclxuICAgICAgICAgICAgYnl0ZSBjdXJyZW50ID0oYnl0ZSkgKE91dHB1dFJvbVtsb2NdICYgMHhGMCk7XHJcbiAgICAgICAgICAgIGRhdGEgKz0gY3VycmVudDtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2MsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgR2V0VGVhbVNpbURhdGEoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3Moc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0U2ltTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBcIktcIikgKyAxO1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gXCJTaW1EYXRhPTB4XCIgKyBPdXRwdXRSb21bbG9jYXRpb25dLlRvU3RyaW5nKFwiWDJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRUZWFtU2ltRGF0YShpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIGRhdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3Moc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgYnl0ZVtdIHRoZUJ5dGVzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRIZXhCeXRlcyhkYXRhKTtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0U2ltTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBcIktcIikgKyAxO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCB0aGVCeXRlc1swXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldFRlYW1QbGF5ZXJzKGludCBzZWFzb24sIHN0cmluZyB0ZWFtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcblxyXG4gICAgICAgICAgICBmb3JlYWNoIChzdHJpbmcgcG9zaXRpb24gaW4gcG9zaXRpb25OYW1lcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgR2V0UGxheWVyKHNlYXNvbiwgdGVhbSwgYnVpbGRlciwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiS1IsXCIpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRLaWNrUmV0dXJuZXIoc2Vhc29uLCB0ZWFtKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuUFIsXCIpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRQdW50UmV0dXJuZXIoc2Vhc29uLCB0ZWFtKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXFxuXCIpO1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZpcnR1YWwgdm9pZCBHZXRQbGF5ZXIoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIFN0cmluZ0J1aWxkZXIgYnVpbGRlciwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYnl0ZSBwbGF5ZXJOdW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBieXRlIGZhY2UgPSAwO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0UGxheWVyTmFtZShzZWFzb24sIHRlYW0sIHBvc2l0aW9uLCBvdXQgcGxheWVyTnVtYmVyKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiLFwiKTtcclxuICAgICAgICAgICAgZmFjZSA9IEdldEZhY2Uoc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFN0cmluZy5Gb3JtYXQoXCJGYWNlPTB4ezA6eDJ9LCN7MTp4fSxcIiwgZmFjZSwgcGxheWVyTnVtYmVyKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKEdldFBsYXllckFiaWxpdGllcyhzZWFzb24sIHRlYW0sIHBvc2l0aW9uKSk7XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXFxuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1OYW1lKGludCB0ZWFtSW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTdHJpbmdUYWJsZVN0cmluZyhPdXRwdXRSb20sIHRlYW1JbmRleCwgdHNiMl90ZWFtX25hbWVfc3RyaW5nX3RhYmxlX2ZpcnN0X3B0cixcclxuICAgICAgICAgICAgICAgIHRzYjJfdGVhbV9uYW1lX3N0cmluZ190YWJsZV9vZmZzZXQpO1xyXG4gICAgICAgICAgICBpbnQgbGFzdFNwYWNlID0gcmV0VmFsLkxhc3RJbmRleE9mKCcgJyk7XHJcbiAgICAgICAgICAgIHJldFZhbCA9IHJldFZhbC5TdWJzdHJpbmcobGFzdFNwYWNlICsgMSkuUmVwbGFjZShcIipcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIC8vcmV0VmFsID0gcmV0VmFsLlN1YnN0cmluZygwLCByZXRWYWwuTGVuZ3RoIC0gMSk7Ly8gdHJpbSBvZmYgdHJhaWxpbmcgbnVsbCBieXRlXHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0VGVhbUNpdHkoaW50IHRlYW1JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFN0cmluZ1RhYmxlU3RyaW5nKE91dHB1dFJvbSwgdGVhbUluZGV4LCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfZmlyc3RfcHRyLCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfb2Zmc2V0KS5TdWJzdHJpbmcoNSk7XHJcbiAgICAgICAgICAgIGludCBsYXN0U3BhY2UgPSByZXRWYWwuTGFzdEluZGV4T2YoJyAnKTtcclxuICAgICAgICAgICAgaWYgKGxhc3RTcGFjZSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gcmV0VmFsLlN1YnN0cmluZygwLCBsYXN0U3BhY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgc3RyaW5nIEdldFRlYW1BYmJyZXZpYXRpb24oaW50IHRlYW1JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFN0cmluZ1RhYmxlU3RyaW5nKE91dHB1dFJvbSwgdGVhbUluZGV4LCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfZmlyc3RfcHRyLCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfb2Zmc2V0KTtcclxuICAgICAgICAgICAgcmV0VmFsID0gcmV0VmFsLlN1YnN0cmluZygwLCA0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0VGVhbUFiYnJldmlhdGlvbihpbnQgdGVhbUluZGV4LCBzdHJpbmcgYWJiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGFiYiAhPSBudWxsICYmIGFiYi5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgdGVhbVN0cmluZyA9IFN0cmluZy5Gb3JtYXQoXCJ7MH0qezF9IHsyfSpcIiwgYWJiLCBHZXRUZWFtQ2l0eSh0ZWFtSW5kZXgpLCBHZXRUZWFtTmFtZSh0ZWFtSW5kZXgpKTtcclxuICAgICAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuU2V0U3RyaW5nVGFibGVTdHJpbmcoT3V0cHV0Um9tLCB0ZWFtSW5kZXgsIHRlYW1TdHJpbmcsIHRzYjJfdGVhbV9uYW1lX3N0cmluZ190YWJsZV9maXJzdF9wdHIsIHRzYjJfdGVhbV9uYW1lX3N0cmluZ190YWJsZV9vZmZzZXQsIDMwLCBURUFNX05BTUVfU1RSSU5HX1RBQkxFX1NJWkUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIFNldFRlYW1OYW1lKGludCB0ZWFtSW5kZXgsIHN0cmluZyBuYW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiBuYW1lLkxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyB0ZWFtU3RyaW5nID0gU3RyaW5nLkZvcm1hdChcInswfSp7MX0gezJ9KlwiLCBHZXRUZWFtQWJicmV2aWF0aW9uKHRlYW1JbmRleCksIEdldFRlYW1DaXR5KHRlYW1JbmRleCksIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5TZXRTdHJpbmdUYWJsZVN0cmluZyhPdXRwdXRSb20sIHRlYW1JbmRleCwgdGVhbVN0cmluZywgdHNiMl90ZWFtX25hbWVfc3RyaW5nX3RhYmxlX2ZpcnN0X3B0ciwgdHNiMl90ZWFtX25hbWVfc3RyaW5nX3RhYmxlX29mZnNldCwgMzAsIFRFQU1fTkFNRV9TVFJJTkdfVEFCTEVfU0laRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2V0VGVhbUNpdHkoaW50IHRlYW1JbmRleCwgc3RyaW5nIGNpdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoY2l0eSAhPSBudWxsICYmIGNpdHkuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nIHRlYW1TdHJpbmcgPSBTdHJpbmcuRm9ybWF0KFwiezB9KnsxfSB7Mn0qXCIsIEdldFRlYW1BYmJyZXZpYXRpb24odGVhbUluZGV4KSwgY2l0eSwgR2V0VGVhbU5hbWUodGVhbUluZGV4KSk7XHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNldFN0cmluZ1RhYmxlU3RyaW5nKE91dHB1dFJvbSwgdGVhbUluZGV4LCB0ZWFtU3RyaW5nLCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfZmlyc3RfcHRyLCB0c2IyX3RlYW1fbmFtZV9zdHJpbmdfdGFibGVfb2Zmc2V0LCAzMCwgVEVBTV9OQU1FX1NUUklOR19UQUJMRV9TSVpFKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgR2V0VGVhbUluZGV4KHN0cmluZyB0ZWFtKSB7IHJldHVybiB0ZWFtcy5JbmRleE9mKHRlYW0pOyB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0VGVhbUZyb21JbmRleChpbnQgaSkgeyByZXR1cm4gdGVhbXNbaV07IH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgaW50IEdldFBsYXlib29rTG9jYXRpb24oaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgcGxheWJvb2tMb2NhdGlvbiA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGVhbS5Ub1VwcGVyKCkgPT0gXCJBRkNcIilcclxuICAgICAgICAgICAgICAgIHBsYXlib29rTG9jYXRpb24gPSBwbGF5Ym9va19zdGFydFswXSArIDI4ICogcGxheWJvb2tfdGVhbV9zaXplO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0ZWFtLlRvVXBwZXIoKSA9PSBcIk5GQ1wiKVxyXG4gICAgICAgICAgICAgICAgcGxheWJvb2tMb2NhdGlvbiA9IHBsYXlib29rX3N0YXJ0WzBdICsgMjkgKiBwbGF5Ym9va190ZWFtX3NpemU7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgICAgICBwbGF5Ym9va0xvY2F0aW9uID0gcGxheWJvb2tfc3RhcnRbc2Vhc29uIC0gMV0gKyB0ZWFtcy5JbmRleE9mKHRlYW0pICogcGxheWJvb2tfdGVhbV9zaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwbGF5Ym9va0xvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBydW5zID0gcjEyMzQ1Njc4XHJcbiAgICAgICAgLy8vIHBhc3MgPSBwMTIzNDU2NzhcclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldFBsYXlib29rKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcnVucywgc3RyaW5nIHBhc3NlcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBwbGF5Ym9va0xvY2F0aW9uID0gR2V0UGxheWJvb2tMb2NhdGlvbihzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBieXRlW10gcnVuQnl0ZXMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEhleEJ5dGVzKHJ1bnMuU3Vic3RyaW5nKDEpKTtcclxuICAgICAgICAgICAgYnl0ZVtdIHBhc3NCeXRlcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0SGV4Qnl0ZXMocGFzc2VzLlN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgICAgIC8vIHBsYXlib29rIDFcclxuICAgICAgICAgICAgaWYgKHJ1bkJ5dGVzLkxlbmd0aCA+IDEgJiYgcGFzc0J5dGVzLkxlbmd0aCA+IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFNldEJ5dGUocGxheWJvb2tMb2NhdGlvbiwgcnVuQnl0ZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgU2V0Qnl0ZShwbGF5Ym9va0xvY2F0aW9uICsgMSwgcnVuQnl0ZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgU2V0Qnl0ZShwbGF5Ym9va0xvY2F0aW9uICsgMiwgcGFzc0J5dGVzWzBdKTtcclxuICAgICAgICAgICAgICAgIFNldEJ5dGUocGxheWJvb2tMb2NhdGlvbiArIDMsIHBhc3NCeXRlc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9wbGF5Ym9vayAyXHJcbiAgICAgICAgICAgICAgICBpZiAocnVuQnl0ZXMuTGVuZ3RoID4gMyAmJiBwYXNzQnl0ZXMuTGVuZ3RoID4gMylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBTZXRCeXRlKHBsYXlib29rTG9jYXRpb24gKyA0LCBydW5CeXRlc1syXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Qnl0ZShwbGF5Ym9va0xvY2F0aW9uICsgNSwgcnVuQnl0ZXNbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIFNldEJ5dGUocGxheWJvb2tMb2NhdGlvbiArIDYsIHBhc3NCeXRlc1syXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0Qnl0ZShwbGF5Ym9va0xvY2F0aW9uICsgNywgcGFzc0J5dGVzWzNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJFUlJPUiBTZXR0aW5ncyBwbGF5Ym9vayBmb3Igc2Vhc29uOnswfSB0ZWFtOnsxfSBkYXRhPXsyfSB7M31cIixcclxuICAgICAgICAgICAgICAgICAgICBzZWFzb24sdGVhbSwgcnVucywgcGFzc2VzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RyaW5nIEdldFBsYXlib29rKGludCBzZWFzb24sIHN0cmluZyB0ZWFtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHBsYXlib29rTG9jYXRpb24gPSBHZXRQbGF5Ym9va0xvY2F0aW9uKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBzdHJpbmcuRm9ybWF0KFwiUExBWUJPT0sgUnswOlgyfXsxOlgyfXsyOlgyfXszOlgyfSwgUHs0OlgyfXs1OlgyfXs2OlgyfXs3OlgyfSBcIixcclxuICAgICAgICAgICAgICAgIE91dHB1dFJvbVtwbGF5Ym9va0xvY2F0aW9uXSwgICAgT3V0cHV0Um9tW3BsYXlib29rTG9jYXRpb24gKyAxXSwgLy8gcnVuc1xyXG4gICAgICAgICAgICAgICAgT3V0cHV0Um9tW3BsYXlib29rTG9jYXRpb24gKyA0XSxPdXRwdXRSb21bcGxheWJvb2tMb2NhdGlvbiArIDVdLFxyXG4gICAgICAgICAgICAgICAgT3V0cHV0Um9tW3BsYXlib29rTG9jYXRpb24gKyAyXSxPdXRwdXRSb21bcGxheWJvb2tMb2NhdGlvbiArIDNdLCAvL3Bhc3Nlc1xyXG4gICAgICAgICAgICAgICAgT3V0cHV0Um9tW3BsYXlib29rTG9jYXRpb24gKyA2XSxPdXRwdXRSb21bcGxheWJvb2tMb2NhdGlvbiArIDddXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0WWVhcihzdHJpbmcgeWVhcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vVE9ETyA/Pz9cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0S2V5KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcuRm9ybWF0KFxyXG5AXCIjIFRTQlRvb2wgRm9ydW06IGh0dHBzOi8vdGVjbW9ib3dsLm9yZy9mb3J1bXMvdG9waWMvMTExMDYtdHNiLWVkaXRvci10c2J0b29sLXN1cHJlbWUtc2Vhc29uLWdlbmVyYXRvci9cclxuIyBUU0JUb29sMiBGb3J1bTogaHR0cHM6Ly90ZWNtb2Jvd2wub3JnL2ZvcnVtcy90b3BpYy83MTA3Mi10c2JpaS10c2JpaWktZWRpdG9yLXRzYnRvb2wyL1xyXG4jIFRTQjIgSGFja2luZyBkb2N1bWVudGF0aW9uOiBodHRwczovL3RlY21vYm93bC5vcmcvZm9ydW1zL3RvcGljLzUzMDI4LXRlY21vLXN1cGVyLWJvd2wtaWktaGFja2luZ3Jlc291cmNlLWRvY3VtZW50YXRpb24vXHJcbiMgRWRpdGluZzogVGVjbW8gU3VwZXIgQm93bCBJSSAoc25lcykgW3swfV1cclxuIyBLZXkgXHJcbiMgJ1NFVCcgY29tbWFuZHMgYXJlIHN1cHBvcnRlZFxyXG4jIERvdWJsZSBjbGljayBvbiBhIHRlYW0gbmFtZSAob3IgcGxheWJvb2spIHRvIGJyaW5nIHVwIHRoZSBlZGl0IFRlYW0gR1VJLlxyXG4jIERvdWJsZSBjbGljayBvbiBhIHBsYXllciB0byBicmluZyB1cCB0aGUgZWRpdCBwbGF5ZXIgR1VJIChDbGljayAnU2ltIERhdGEnXHJcbiMgICBidXR0b24gdG8gZmluZCBvdXQgbW9yZSBvbiBTaW0gRGF0YSkuXHJcbiMgQXR0cmlidXRlIE9yZGVyXHJcbiMgUUJzICAgUlMgUlAgTVMgSFAgQkIgUFMgUEMgUEEgQVIgQ08gW3NpbSB2YWxzXVxyXG4jIFNraWxsIFJTIFJQIE1TIEhQIEJCIEJDIFJDIFtzaW0gdmFsc11cclxuIyBPTCAgICBSUyBSUCBNUyBIUCBCQlxyXG4jIERFRiAgIFJTIFJQIE1TIEhQIEJCIFBJIFFVIFtzaW0gdmFsc11cclxuIyBLICAgICBSUyBSUCBNUyBIUCBCQiBLUCBLQSBBQiBbc2ltIHZhbF1cclxuIyBQICAgICBSUyBSUCBNUyBIUCBCQiBLUCBBQiBbc2ltIHZhbF1cclxuXCIsIHRoaXMuUm9tVmVyc2lvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0QWxsKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgYnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKDEwMDAwKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCJTRUFTT04gMVxcblwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0VGVhbXMoMSkpO1xyXG4gICAgICAgICAgICBpZihTaG93U2NoZWR1bGUpXHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRTY2hlZHVsZSgxKSk7XHJcblxyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlNFQVNPTiAyXFxuXCIpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRUZWFtcygyKSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93U2NoZWR1bGUpXHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRTY2hlZHVsZSgyKSk7XHJcblxyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlNFQVNPTiAzXFxuXCIpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRUZWFtcygzKSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93U2NoZWR1bGUpXHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRTY2hlZHVsZSgzKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCBzdHJpbmcgR2V0QWxsKGludCBzZWFzb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcig1MDAwKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCJTRUFTT04gXCIpO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChzZWFzb24pO1xyXG4gICAgICAgICAgICBidWlsZGVyLkFwcGVuZChcIlxcblwiKTtcclxuICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoR2V0VGVhbXMoc2Vhc29uKSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93U2NoZWR1bGUpXHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLkFwcGVuZChHZXRTY2hlZHVsZShzZWFzb24pKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuVG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCB2aXJ0dWFsIGludCBHZXRLaWNrUmV0dXJuTG9jYXRpb24oaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBiaWxsc19rcl9sb2Nfc2Vhc29uXzE7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2Vhc29uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IGxvY2F0aW9uID0gYmlsbHNfa3JfbG9jX3NlYXNvbl8yOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogbG9jYXRpb24gPSBiaWxsc19rcl9sb2Nfc2Vhc29uXzM7IGJyZWFrOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2NhdGlvbiArPSAoMiAqIHRlYW1zLkluZGV4T2YodGVhbSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTZXRLaWNrUmV0dXJuZXIoaW50IHNlYXNvbiwgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldEtpY2tSZXR1cm5Mb2NhdGlvbihzZWFzb24sIHRlYW0pO1xyXG4gICAgICAgICAgICBpbnQgcG9zX251bSA9IHBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24sIChieXRlKXBvc19udW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2V0UHVudFJldHVybmVyKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSAxICsgR2V0S2lja1JldHVybkxvY2F0aW9uKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NfbnVtID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiwgKGJ5dGUpcG9zX251bSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgc3RyaW5nIEdldFB1bnRSZXR1cm5lcihpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IDEgKyBHZXRLaWNrUmV0dXJuTG9jYXRpb24oc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgaW50IHBvc19udW0gPSBPdXRwdXRSb21bbG9jYXRpb25dO1xyXG4gICAgICAgICAgICBzdHJpbmcgcG9zID0gcG9zaXRpb25OYW1lc1twb3NfbnVtXTtcclxuICAgICAgICAgICAgcmV0dXJuIHBvcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBzdHJpbmcgR2V0S2lja1JldHVybmVyKGludCBzZWFzb24sIHN0cmluZyB0ZWFtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0S2lja1JldHVybkxvY2F0aW9uKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NfbnVtID0gT3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuICAgICAgICAgICAgc3RyaW5nIHBvcyA9IHBvc2l0aW9uTmFtZXNbcG9zX251bV07XHJcbiAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIEFwcGx5U2NoZWR1bGUoaW50IHNlYXNvbiwgTGlzdDxzdHJpbmc+IHNjaGVkdWxlTGlzdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNORVNfU2NoZWR1bGVIZWxwZXIgaGVscGVyID0gbmV3IFNORVNfU2NoZWR1bGVIZWxwZXIodGhpcyk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2Vhc29uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IGhlbHBlci5TZXRXZWVrT25lTG9jYXRpb24oc2NoZWR1bGVfc3RhcnRfc2Vhc29uXzEsIHNldmVudGVlbldlZWtzLCB0ZWFtcyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiBoZWxwZXIuU2V0V2Vla09uZUxvY2F0aW9uKHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8yLCBlaWdodGVlbldlZWtzLCB0ZWFtcyk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiBoZWxwZXIuU2V0V2Vla09uZUxvY2F0aW9uKHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8zLCBzZXZlbnRlZW5XZWVrcywgdGVhbXMpOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoZWxwZXIuQXBwbHlTY2hlZHVsZShzY2hlZHVsZUxpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQXBwbHlTZXQoc3RyaW5nIGxpbmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkFwcGx5U2ltcGxlU2V0KGxpbmUsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUHJvY2Vzc1RleHQoc3RyaW5nIHRleHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBJbnB1dFBhcnNlciBwYXJzZXIgPSBuZXcgSW5wdXRQYXJzZXIodGhpcyk7XHJcbiAgICAgICAgICAgIHBhcnNlci5Qcm9jZXNzVGV4dCh0ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2aXJ0dWFsIHZvaWQgU2F2ZVJvbShzdHJpbmcgZmlsZU5hbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLlNhdmVSb20oZmlsZU5hbWUsIE91dHB1dFJvbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLklPO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnM7XHJcblxyXG51c2luZyBTeXN0ZW0uV2luZG93cy5Gb3JtcztcclxuI2lmICFCUklER0VfUFJPSkVDVFxyXG51c2luZyBTeXN0ZW0uQ29uZmlndXJhdGlvbjtcclxuI2VuZGlmXHJcblxyXG4vLyBkZWZlY3QgaGFwcGVucyB3aGVuIHNhdmluZyBwbGF5ZXIgYXR0cmlidXRlcyBmb3IgNDllcnMgK1xyXG4vLyBuZWVkIHRvIGZpbmQgb3V0IHdoZXJlIDQ5ZXJzIFFCMSBhdHRyaWJ1dGVzIHN0YXJ0LiAtPT4gMHgzQ0RDXHJcbi8qXHJcbiBjeHJvbSBwb3N0ZWQgdGhpcyBhIGNvdXBsZSB3ZWVrcyBhZ286XHJcblxyXG50aGlzIGlzIGFsbCBmb3IgdGhlIE5GQy1XZXN0OlxyXG5cclxudGhlIG51bWJlcnMgaW4gXCIoKVwiIGFyZSBsZW5ndGggcGVyIHRlYW0gYW5kIFwiW11cIiBpcyB0b3RhbCBsZW5ndGggZm9yIGFsbCA0IHRlYW1zXHJcblxyXG4weDE5OUMxIC0gc2ltIGRhdGEgKCQzMClbJEMwXVxyXG4weDIzRkYwIC0gbGFyZ2UgaGVsbWV0IHBhbGV0dGVzICgkMDgpWyQyMF1cclxuMHgyN0ZEQiAtIHJ1bi9wYXNzIHJhdGlvICgkMDEpWyQwNF1cclxuMHgyQ0Y4MiAtIGluIGdhbWUgamVyc2V5IGNvbG9ycyAoJDBBKVskMjhdXHJcbjB4MzQ4RjcgLSBhY3Rpb24gc2VxdWVuY2UgcGFsZXR0ZXMgKCQwOClbJDIwXVxyXG4weDM0OTUzIC0gZGl2aXNpb24gY2hhbXAgc2NyZWVuIHBhbGV0dGVzICgkMDUpWyQxNF1cclxuMHgzNDlEMiAtIGNvbmZlcmVuY2UgY2hhbXAgc2NyZWVuIHBhbGV0dGVzICgkMDQpWyQxMF1cclxuXHJcbiAqL1xyXG5uYW1lc3BhY2UgVFNCVG9vbFxyXG57XHJcblx0Ly8vIDxzdW1tYXJ5PlxyXG5cdC8vLyBTdW1tYXJ5IGRlc2NyaXB0aW9uIGZvciBDWFJvbVRTQlRvb2wuXHJcblx0Ly8vICAgU3RpbGwgaGF2aW5nIHByb2JsZW1zIHdpdGggcGxheWJvb2tzLlxyXG5cdC8vLyAgIFxyXG5cdC8vLyBEb25lOlxyXG5cdC8vLyAxLiBOYW1lcyBhbmQgbnVtYmVyc1xyXG5cdC8vLyAyLiBub3JtYWwgYXR0cmlidXRlcy5cclxuXHQvLy8gMy4gRmFjZXNcclxuXHQvLy8gNC4gcGxheWVyIFNpbSBhdHRyaWJ1dGVzXHJcblx0Ly8vIDUuIHRlYW0gc2ltIGF0dHJpYnV0ZXNcclxuXHQvLy8gNi4gVGVhbSBQbGF5Ym9va3MuXHJcblx0Ly8vIDcuIHRlYW0gb2ZmZW5zaXZlIHByZWZlcmVuY2UuXHJcblx0Ly8vIDguIHRlYW0gb2ZmZW5zaXZlIGZvcm1hdGlvblxyXG5cdC8vLyA8L3N1bW1hcnk+XHJcblx0cHVibGljIGNsYXNzIENYUm9tVFNCVG9vbCA6IFRlY21vVG9vbFxyXG5cdHtcclxuXHRcdC8vIGV4dHJhIHRlYW1zICh0ZWFtIGluZGV4KVxyXG5cdFx0Ly8gZm9ydHlOaW5lcnMgPSAweDFFLCByYW1zID0gMHgxRiwgc2VhaGF3a3MgPSAweDIwLCBjYXJkaW5hbHMgPSAweDIxXHJcblxyXG5cdFx0Ly8gZXh0cmEgdGVhbXMnIG5hbWUgcG9pbnRlcnMgb2NjdXIgYXQgMHgzRUIwXHJcblx0XHQvLyBmaW5kIG91dCB3aGVyZSBBdHRyaWJ1dGVzIGFyZSBmb3IgbmV3IHRlYW1zLlxyXG5cdFx0XHJcblx0XHRwcml2YXRlIGNvbnN0IGludCBGT1JUWV9OSU5FUlNfUExBWUJPT0tfU1RBUlQgPSAweDFEMzkwO1xyXG5cclxuXHRcdHByaXZhdGUgYm9vbCBEb1NjaGVkdWxlID0gdHJ1ZTtcclxuXHRcdC8vIHBsYXllciBzaW0gYXR0cmlidXRlc1xyXG5cdFx0Ly8weDE5OUJGIC0gMHgxOTlDNjogcG9pbnRlcnMgdG8gc2ltIGF0dHJpYnV0ZXMgKDggYnl0ZXM6MiBlYWNoKVxyXG5cdFx0Ly8weDE5OUMxIC0gMHgxOUE4MDogc2ltIGF0dHJpYnV0ZXMgKGFsbCB0ZWFtcylcclxuXHRcdCBpbnQgZm9ydHlOaW5lcnNRQjFTaW1BdHRyU3RhcnQgPSAweDE5OUMxOy8vMHgxOTlDNztcclxuXHRcdCBpbnQgZm9ydHlOaW5lcnNSRVNpbUxvYyA9IDB4MTk5RDk7Ly8weDE5OURGO1xyXG5cclxuXHRcdC8vY29uc3QgaW50IGZvcnR5TmluZXJzUnVuUGFzc1ByZWZlcmVuY2VMb2MgPSAweDI3NTI2OyAvLyBkZWZlY3RcclxuXHRcdHByaXZhdGUgaW50IGZvcnR5TmluZXJzUnVuUGFzc1ByZWZlcmVuY2VMb2MgICA9IDE2MzgwMztcclxuXHRcdFxyXG5cdFx0cHJpdmF0ZSAgaW50ICBGT1JUWV9OSU5FUlNfUUIxX1BPSU5URVIgICA9IDE2MDQ4O1xyXG5cclxuICAgICAgICAvKiB2MS4xMSBcclxuICAgICAgICAgKiBpZiggb3V0cHV0Um9tLmxlbmd0aCA9PSA3ODY0NDgpe1xyXG4gICAgICAgICAqICAgRk9SVFlfTklORVJTX1FCMV9QT0lOVEVSID0gMHgzZTA1NFxyXG4gICAgICAgICAqICAgbUdldERhdGFQb3NpdGlvbk9mZnNldCA9IDB4MzYwMTA7XHJcbiAgICAgICAgICogfVxyXG4gICAgICAgICAqIFRPRE86XHJcbiAgICAgICAgICogQ3VycmVudGx5IG5lZWRzIGZpeGluZyB2MS4xMTogXHJcbiAgICAgICAgICogICAxLiBPZmZlbnNpdmUgZm9ybWF0aW9ucyAoYWxsKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaW50IG1HZXREYXRhUG9zaXRpb25PZmZzZXQgPSAxOTY2MjQ7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgRk9SVFlfTklORVJTX0tSX1BSX0xPQyA9IDIwODA1MDtcclxuICAgICAgICBwcml2YXRlIGludCBGT1JUWV9OSU5FUlNfS1JfUFJfTE9DXzEgPSAweDNGOTNDO1x0XHRcclxuXHRcdHByaXZhdGUgIGludCAgICBtX0V4cGFuc2lvblNlZ21lbnRFbmQgPSAweDNmZmYwO1xyXG5cdFx0cHJpdmF0ZSBieXRlW10gbV9Sb21WZXJzaW9uRGF0YSA9IG51bGw7XHJcblxyXG4gICAgICAgIHByaXZhdGUgUk9NX1RZUEUgbVJvbVR5cGUgPSBST01fVFlQRS5DWFJPTV92MTA1O1xyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgdGhlIHJvbSB2ZXJzaW9uIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIFJPTV9UWVBFIFJvbVZlcnNpb24geyAgZ2V0IHsgcmV0dXJuIG1Sb21UeXBlOyB9ICB9XHJcblxyXG5cdFx0cHVibGljIENYUm9tVFNCVG9vbChieXRlW10gcm9tLCBST01fVFlQRSB0eXBlKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBtUm9tVHlwZSA9IHR5cGU7XHJcblx0XHRcdEluaXQocm9tKTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgXHJcblxyXG5cdFx0cHJpdmF0ZSB2b2lkIFNldHVwRm9yQ3hST00oKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBpZiAobVJvbVR5cGUgPT0gUk9NX1RZUEUuQ1hST01fdjExMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLyogVmVyc2lvbiAxLjExKi9cclxuICAgICAgICAgICAgICAgIEZPUlRZX05JTkVSU19RQjFfUE9JTlRFUiA9IDB4M2UwNTQ7XHJcbiAgICAgICAgICAgICAgICBtR2V0RGF0YVBvc2l0aW9uT2Zmc2V0ID0gMHgzNjAxMDtcclxuICAgICAgICAgICAgICAgIGZvcnR5TmluZXJzUnVuUGFzc1ByZWZlcmVuY2VMb2MgPSAweDI3ZmQ2O1xyXG4gICAgICAgICAgICAgICAgLy9LUi9QUiBcclxuICAgICAgICAgICAgICAgIEZPUlRZX05JTkVSU19LUl9QUl9MT0MgPSAweDMyQ0M3O1xyXG4gICAgICAgICAgICAgICAgRk9SVFlfTklORVJTX0tSX1BSX0xPQ18xID0gMHg3RkQ1MTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtVGVhbUZvcm1hdGlvbnNTdGFydGluZ0xvYyA9IDB4M2Y5NDA7XHJcbiAgICAgICAgICAgIG5hbWVQb2ludGVyc1N0YXJ0ID0gMHg0OCArIDEyO1xyXG4gICAgICAgICAgICBsYXN0UGxheWVyTmFtZVBvaW50ZXIgPSAweDA2ZTQ7Ly8weDZkOSArIDEyO1xyXG5cclxuI2lmICFCUklER0VfUFJPSkVDVFxyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0cmluZyB0ZXN0ID0gQ29uZmlndXJhdGlvblNldHRpbmdzLkFwcFNldHRpbmdzW1wiQ1hST01fRXhwYW5zaW9uTmFtZVNlZ21lbnRFbmRcIl07XHJcblx0XHRcdFx0aWYoIHRlc3QgIT0gbnVsbCAmJiB0ZXN0Lkxlbmd0aCA+IDEgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1fRXhwYW5zaW9uU2VnbWVudEVuZCA9IEludDMyLlBhcnNlKCB0ZXN0LFxyXG5cdFx0XHRcdFx0XHRTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0ZXN0ID0gQ29uZmlndXJhdGlvblNldHRpbmdzLkFwcFNldHRpbmdzW1wiQ1hST01fRk9SVFlfTklORVJTX1FCMV9QT0lOVEVSXCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRGT1JUWV9OSU5FUlNfUUIxX1BPSU5URVIgPSBJbnQzMi5QYXJzZSggdGVzdCxcclxuXHRcdFx0XHRcdFx0U3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGVzdCA9IENvbmZpZ3VyYXRpb25TZXR0aW5ncy5BcHBTZXR0aW5nc1tcIkNYUk9NX0ZvcnR5TmluZXJzUUIxU2ltQXR0clN0YXJ0XCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRmb3J0eU5pbmVyc1FCMVNpbUF0dHJTdGFydCA9IEludDMyLlBhcnNlKCB0ZXN0LFxyXG5cdFx0XHRcdFx0XHRTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXIpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQ29sb3JzIHN0dWZmXHJcblx0XHRcdFx0dGVzdCA9IENvbmZpZ3VyYXRpb25TZXR0aW5ncy5BcHBTZXR0aW5nc1tcIkNYUk9NX0ZvcnR5TmluZXJzVW5pZm9ybUNvbG9yTG9jXCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRtRm9ydHlOaW5lcnNVbmlmb3JtTG9jICAgID0gSW50MzIuUGFyc2UoIHRlc3QsXHJcblx0XHRcdFx0XHRcdFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRlc3QgPSBDb25maWd1cmF0aW9uU2V0dGluZ3MuQXBwU2V0dGluZ3NbXCJDWFJPTV9Gb3J0eU5pbmVyc0FjdGlvblNlcUNvbG9yTG9jXCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRtRm9ydHlOaW5lcnNBY3Rpb25TZXFMb2MgICA9IEludDMyLlBhcnNlKCB0ZXN0LFxyXG5cdFx0XHRcdFx0XHRTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0ZXN0ID0gQ29uZmlndXJhdGlvblNldHRpbmdzLkFwcFNldHRpbmdzW1wiQ1hST01fRm9ydHlOaW5lcnNEaXZDaGFtcENvbG9yTG9jXCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRtNDllcnNEaXZDaGFtcExvYyAgPSBJbnQzMi5QYXJzZSggdGVzdCxcclxuXHRcdFx0XHRcdFx0U3lzdGVtLkdsb2JhbGl6YXRpb24uTnVtYmVyU3R5bGVzLkFsbG93SGV4U3BlY2lmaWVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGVzdCA9IENvbmZpZ3VyYXRpb25TZXR0aW5ncy5BcHBTZXR0aW5nc1tcIkNYUk9NX0ZvcnR5aU5lcnNDb25mQ2hhbXBDb2xvckxvY1wiXTtcclxuXHRcdFx0XHRpZiggdGVzdCAhPSBudWxsICYmIHRlc3QuTGVuZ3RoID4gMSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bTQ5ZXJzQ29uZkNoYW1wTG9jICAgID0gSW50MzIuUGFyc2UoIHRlc3QsXHJcblx0XHRcdFx0XHRcdFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRlc3QgPSBDb25maWd1cmF0aW9uU2V0dGluZ3MuQXBwU2V0dGluZ3NbXCJDWFJPTV9CaWxsc0RpdkNoYW1wQ29sb3JMb2NcIl07XHJcblx0XHRcdFx0aWYoIHRlc3QgIT0gbnVsbCAmJiB0ZXN0Lkxlbmd0aCA+IDEgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdEJpbGxzRGl2Q2hhbXBMb2MgID0gSW50MzIuUGFyc2UoIHRlc3QsXHJcblx0XHRcdFx0XHRcdFN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlclN0eWxlcy5BbGxvd0hleFNwZWNpZmllcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRlc3QgPSBDb25maWd1cmF0aW9uU2V0dGluZ3MuQXBwU2V0dGluZ3NbXCJDWFJPTV9CaWxsc0NvbmZDaGFtcENvbG9yTG9jXCJdO1xyXG5cdFx0XHRcdGlmKCB0ZXN0ICE9IG51bGwgJiYgdGVzdC5MZW5ndGggPiAxIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRCaWxsc0NvbmZDaGFtcExvYyAgICA9IEludDMyLlBhcnNlKCB0ZXN0LFxyXG5cdFx0XHRcdFx0XHRTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJTdHlsZXMuQWxsb3dIZXhTcGVjaWZpZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvL200OWVyc0NvbmZDaGFtcExvYyA9IDB4MzQ5RDI7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2goRXhjZXB0aW9uICApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5TaG93RXJyb3IoXHJcblx0XHRcdFx0XHRcIkVycm9yIHJlYWRpbmcgQ29uZmlnIGZpbGUgb3B0aW9ucywgZG8geW91IGhhdmUgVFNCVG9vbFN1cHJlbWUuZXhlLmNvbmZpZyBpbiB0aGUgc2FtZSBkaXJlY3Rvcnk/XCIpO1xyXG5cdFx0XHR9XHJcbiNlbmRpZlxyXG5cdFx0XHRmYWNlVGVhbU9mZnNldHM9IG5ldyBpbnRbXVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHQweDMwMTIsIDB4MzA4NywgMHgzMEZDLCAweDMxNzEsIDB4MzFFNixcdDEyODkxLCAweDMyRDAsIDB4MzM0NSwgMTMyNDIsIDB4MzQyRiwgMHgzNEE0LCAweDM1MTksIDB4MzU4ZSwgMHgzNjAzLFxyXG5cdFx0XHRcdDB4Mzg0QywgMHgzNmVkLCAweDM3NjIsIDB4MzdENywgMHgzNjc4LCAweDM4QzEsIDB4MzkzNiwgMTQ3NjMsIDB4M0EyMCwgMHgzQTk1LCAxNTExNCwgMTUyMzEsXHQxNTM0OCwgMHgzQzY5IFxyXG5cclxuXHRcdFx0XHRcdCwweDM4NEMsIDB4MzZlZCwgMHgzNzYyLCAweDM3RDcsIDB4MzY3OCwgMHgzOEMxXHJcblx0XHRcdFx0fTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgYm9vbCBtQWRkZWRGb3JtYXRpb25Sb21FcnJvciA9IGZhbHNlO1xyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldHMgdGhlIHRlYW0ncyBvZmZlbnNpdmUgZm9ybWF0aW9uLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwiZm9ybWF0aW9uXCI+PC9wYXJhbT5cclxuXHRcdHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24oIHN0cmluZyB0ZWFtLCBzdHJpbmcgZm9ybWF0aW9uKVxyXG5cdFx0e1xyXG4gICAgICAgICAgICBpZiAoUm9tVmVyc2lvbiA9PSBST01fVFlQRS5DWFJPTV92MTExKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1BZGRlZEZvcm1hdGlvblJvbUVycm9yKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1BZGRlZEZvcm1hdGlvblJvbUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihcIlNldHRpbmcgb2ZmZW5zaXZlIGZvcm1hdGlvbiBvbiBDWFJPTV92MS4xMSBST00gaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAtMSAmJiB0ZWFtSW5kZXggPCAzNCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gID0gbVRlYW1Gb3JtYXRpb25zU3RhcnRpbmdMb2MgICsgdGVhbUluZGV4O1xyXG4vL1x0XHRcdFx0aW50IGxvY2F0aW9uMiA9IG1UZWFtRm9ybWF0aW9uc1N0YXJ0aW5nTG9jMiArIHRlYW1JbmRleDtcclxuXHJcblx0XHRcdFx0c3dpdGNoKCBmb3JtYXRpb24gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgbTJSQl8yV1JfMVRFOlxyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24gXSA9IChieXRlKTB4MDA7XHJcbi8vXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uMl0gPSAoYnl0ZSkweDAwO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgbTFSQl8zV1JfMVRFOlxyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24gXSA9IChieXRlKTB4MDI7XHJcbi8vXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uMl0gPSAoYnl0ZSkweDAyO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgbTFSQl80V1I6XHJcblx0XHRcdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbiBdID0gKGJ5dGUpMHgwMTtcclxuLy9cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24yXSA9IChieXRlKTB4MDE7IFxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXHJcblx0XHRcdFx0XHRcdFx0XCJFUlJPUiEgRm9ybWF0aW9uIHswfSBmb3IgdGVhbSAnezF9JyBpcyBpbnZhbGlkLlwiLGZvcm1hdGlvbiwgdGVhbSkpO1xyXG5cdFx0XHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiICBWYWxpZCBmb3JtYXRpb25zIGFyZTpcXG4gIHswfVxcbiAgezF9XFxuICB7Mn1cIixcclxuXHRcdFx0XHRcdFx0XHRtMlJCXzJXUl8xVEUsIG0xUkJfM1dSXzFURSwgbTFSQl80V1IgKSk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIFRlYW0gJ3swfScgaXMgaW52YWxpZCwgT2ZmZW5zaXZlIEZvcm1hdGlvbiBub3Qgc2V0XCIsdGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBsZW4gdGhlIGxlbmd0aCBvZiB0aGUgUk9NXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIGlmIGl0J3MgdGhlIGNvcnJlY3QgbGVuZ3RoLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgSXNWYWxpZFJvbVNpemUobG9uZyBsZW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib29sIHJldCA9IGZhbHNlOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiggbGVuID09IFRlY21vVG9vbEZhY3RvcnkuQ1hST01fVjEwNV9MRU4gfHwgbGVuID09IFRlY21vVG9vbEZhY3RvcnkuQ1hST01fVjExMV9MRU4pXHJcbiAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgYm9vbCBJbml0Um9tKGJ5dGVbXSByb20pXHJcblx0XHR7XHJcblx0XHRcdGJvb2wgcmV0ID0gZmFsc2U7XHJcblx0XHRcdHJldCA9IGJhc2UuSW5pdFJvbSAocm9tKTtcclxuXHRcdFx0aWYoIHJldCApXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIFNldHVwRm9yQ3hST00oKTtcclxuXHRcdFx0XHRtX1JvbVZlcnNpb25EYXRhID0gbmV3IGJ5dGVbMTRdO1xyXG5cdFx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCBtX1JvbVZlcnNpb25EYXRhLkxlbmd0aDsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1fUm9tVmVyc2lvbkRhdGFbaV0gPSBvdXRwdXRSb21baSttX0V4cGFuc2lvblNlZ21lbnRFbmRdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgYm9vbCBDaGVja1JPTVZlcnNpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHRib29sIHJldCA9IHRydWU7XHJcblx0XHRcdGlmKCBvdXRwdXRSb20uTGVuZ3RoID4gbV9FeHBhbnNpb25TZWdtZW50RW5kICsyMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvcihpbnQgaSA9IDA7IGkgPCBtX1JvbVZlcnNpb25EYXRhLkxlbmd0aDsgaSsrIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZiggb3V0cHV0Um9tW2krbV9FeHBhbnNpb25TZWdtZW50RW5kXSAhPSBtX1JvbVZlcnNpb25EYXRhW2ldIClcclxuXHRcdFx0XHRcdHtcclxuXHJcblx0XHRcdFx0XHRcdHJldCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIG92ZXJ3cm90ZSBhbnkgUk9NIGRhdGEgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgZXhwYW5zaW9uXHJcblx0XHQvLy8gbmFtZSBzZWdtZW50LiBJZiB3ZSBhcmUgaW4gR1VJIG1vZGUsIHByb21wdCB0aGUgdXNlciB0byBjb25maXJtIHRoYXQgdGhleSB3YW50IHRvIHNhdmUgdGhlXHJcblx0XHQvLy8gZGF0YS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJmaWxlbmFtZVwiPjwvcGFyYW0+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgdm9pZCBTYXZlUm9tKHN0cmluZyBmaWxlbmFtZSlcclxuXHRcdHtcclxuXHRcdFx0aWYoIENoZWNrUk9NVmVyc2lvbigpIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGJhc2UuU2F2ZVJvbSAoZmlsZW5hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLlNob3dFcnJvcihcclxuXHRcdFx0XHRcIldBUk5JTkchISBFeHBhbnNpb24gdGVhbSBuYW1lIHNlY3Rpb24gaGFzIGJlZW4gb3ZlcndyaXR0ZW4sIFJPTSBjb3VsZCBiZSBtZXNzZWQgdXAuXCIpO1xyXG5cdFx0XHRcdGlmKCBNYWluQ2xhc3MuR1VJX01PREUgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKCBNZXNzYWdlQm94LlNob3cobnVsbCwgIFwiUk9NIGNvdWxkIGJlIG1lc3NlZCB1cCwgZG8geW91IHdhbnQgdG8gc2F2ZSBhbnl3YXk/XCIsIFwiRVJST1IhXCIsXHJcblx0XHRcdFx0XHRcdE1lc3NhZ2VCb3hCdXR0b25zLlllc05vLCBNZXNzYWdlQm94SWNvbi5RdWVzdGlvbikgPT0gRGlhbG9nUmVzdWx0LlllcylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0YmFzZS5TYXZlUm9tKGZpbGVuYW1lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGJhc2UuU2F2ZVJvbShmaWxlbmFtZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgcG9zaXRpb24gd2hvIHJldHVybnMgcHVudHMuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRQdW50UmV0dXJuZXIoc3RyaW5nIHRlYW0pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gYmFzZS5HZXRQdW50UmV0dXJuZXIodGVhbSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RyaW5nIHJldCA9XCJcIjtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBGT1JUWV9OSU5FUlNfS1JfUFJfTE9DICsgdGVhbUluZGV4LTMwO1xyXG5cdFx0XHRcdGludCBiID0gb3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuXHRcdFx0XHRiID0gYiAmIDB4MEY7XHJcblx0XHRcdFx0cmV0ID0gcG9zaXRpb25OYW1lc1tiXTtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEdldHMgdGhlIHBvc2l0aW9uIHdobyByZXR1cm5zIGtpY2tzLlxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgR2V0S2lja1JldHVybmVyKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIGJhc2UuR2V0S2lja1JldHVybmVyKHRlYW0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0cmluZyByZXQgPSBcIlwiO1xyXG5cdFx0XHRcdGludCBsb2NhdGlvbiA9IEZPUlRZX05JTkVSU19LUl9QUl9MT0MgKyB0ZWFtSW5kZXgtMzA7XHJcblx0XHRcdFx0aW50IGIgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRcdGIgPSBiICYgMHhGMDtcclxuXHRcdFx0XHRiID0gYiA+PiA0O1xyXG5cdFx0XHRcdHJldCA9IHBvc2l0aW9uTmFtZXNbYl07XHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldFB1bnRSZXR1cm5lcihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YmFzZS5TZXRQdW50UmV0dXJuZXIgKHRlYW0sIHBvc2l0aW9uKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IGxvY2F0aW9uICA9IEZPUlRZX05JTkVSU19LUl9QUl9MT0MgICArIEdldFRlYW1JbmRleCh0ZWFtKS0zMDtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24xID0gRk9SVFlfTklORVJTX0tSX1BSX0xPQ18xICsgR2V0VGVhbUluZGV4KHRlYW0pLTMwO1xyXG5cdFx0XHRcdHN3aXRjaChwb3NpdGlvbilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYXNlIFwiUUIxXCI6IGNhc2UgXCJRQjJcIjogY2FzZSBcIkNcIjogY2FzZSBcIkxHXCI6IC8vIHRoZXNlIGd1eXMgY2FuIHJldHVybiBwdW50cy9raWNrcyB0b28uXHJcblx0XHRcdFx0XHRjYXNlIFwiUkIxXCI6IGNhc2UgXCJSQjJcIjogY2FzZSBcIlJCM1wiOiBjYXNlIFwiUkI0XCI6IFxyXG5cdFx0XHRcdFx0Y2FzZSBcIldSMVwiOiBjYXNlIFwiV1IyXCI6IGNhc2UgXCJXUjNcIjogY2FzZSBcIldSNFwiOiBcclxuXHRcdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOlxyXG5cdFx0XHRcdFx0XHRpbnQgcG9zID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTtcclxuXHRcdFx0XHRcdFx0aW50IGIgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRcdFx0XHRiID0gYiAmIDB4RjA7XHJcblx0XHRcdFx0XHRcdGIgPSBiICsgcG9zO1xyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb25dID0gKGJ5dGUpYjtcclxuXHRcdFx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uMV0gPSAoYnl0ZSliO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJDYW5ub3QgYXNzaWduICd7MH0nIGFzIGEgcHVudCByZXR1cm5lclwiLHBvc2l0aW9uKSk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdFxyXG5cdFx0cHVibGljIG92ZXJyaWRlIHZvaWQgU2V0S2lja1JldHVybmVyKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLlNldEtpY2tSZXR1cm5lciAodGVhbSwgcG9zaXRpb24pO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSBGT1JUWV9OSU5FUlNfS1JfUFJfTE9DICsgR2V0VGVhbUluZGV4KHRlYW0pLTMwO1xyXG5cdFx0XHRcdGludCBsb2NhdGlvbjIgPSBGT1JUWV9OSU5FUlNfS1JfUFJfTE9DXzEgKyBHZXRUZWFtSW5kZXgodGVhbSktMzA7XHJcblx0XHRcdFx0c3dpdGNoKHBvc2l0aW9uKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhc2UgXCJRQjFcIjogY2FzZSBcIlFCMlwiOiBjYXNlIFwiQ1wiOiBjYXNlIFwiTEdcIjogIC8vIHRoZXNlIGd1eXMgY2FuIHJldHVybiBwdW50cy9raWNrcyB0b28uXHJcblx0XHRcdFx0XHRjYXNlIFwiUkIxXCI6IGNhc2UgXCJSQjJcIjogY2FzZSBcIlJCM1wiOiBjYXNlIFwiUkI0XCI6IFxyXG5cdFx0XHRcdFx0Y2FzZSBcIldSMVwiOiBjYXNlIFwiV1IyXCI6IGNhc2UgXCJXUjNcIjogY2FzZSBcIldSNFwiOiBcclxuXHRcdFx0XHRcdGNhc2UgXCJURTFcIjogY2FzZSBcIlRFMlwiOlxyXG5cdFx0XHRcdFx0XHRpbnQgcG9zID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTtcclxuXHRcdFx0XHRcdFx0aW50IGIgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHRcdFx0XHRiID0gYiAmIDB4MEY7XHJcblx0XHRcdFx0XHRcdGIgPSBiICsgKCBwb3MgPDwgNCk7XHJcblx0XHRcdFx0XHRcdG91dHB1dFJvbVtsb2NhdGlvbl0gPSAoYnl0ZSliO1xyXG5cdFx0XHRcdFx0XHRvdXRwdXRSb21bbG9jYXRpb24yXSA9IChieXRlKWI7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIkNhbm5vdCBhc3NpZ24gJ3swfScgYXMgYSBraWNrIHJldHVybmVyXCIscG9zaXRpb24pKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRBbGwoKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgdGVhbTtcclxuXHRcdFx0U3RyaW5nQnVpbGRlciBhbGwgPSBuZXcgU3RyaW5nQnVpbGRlcigzMCo0MSpwb3NpdGlvbk5hbWVzLkNvdW50KTtcclxuXHRcdFx0c3RyaW5nIHllYXIgPSBzdHJpbmcuRm9ybWF0KFwiWUVBUj17MH1cXG5cIixHZXRZZWFyKCkpO1xyXG5cdFx0XHRhbGwuQXBwZW5kKHllYXIpO1xyXG5cdFx0XHRpbnQgbm9ybWFsVGVhbUVuZCA9IDI4O1xyXG5cdFx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbm9ybWFsVGVhbUVuZDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGVhbSA9IHRlYW1zW2ldO1xyXG5cdFx0XHRcdGFsbC5BcHBlbmQoR2V0VGVhbVBsYXllcnModGVhbSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0cmluZyBleHBhbnNpb25UZWFtcyA9IEdldEV4cGFuc2lvblRlYW1zKCk7XHJcblx0XHRcdGFsbC5BcHBlbmQoZXhwYW5zaW9uVGVhbXMpO1xyXG5cclxuXHRcdFx0cmV0dXJuIGFsbC5Ub1N0cmluZygpO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIEdldFRlYW1OYW1lKGludCB0ZWFtSW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCArIDY4KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgR2V0VGVhbUNpdHkoaW50IHRlYW1JbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBHZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4ICsgMzQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRUZWFtQWJicmV2aWF0aW9uKGludCB0ZWFtSW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gR2V0VGVhbVN0cmluZ1RhYmxlU3RyaW5nKHRlYW1JbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBTZXRUZWFtQWJicmV2aWF0aW9uKGludCB0ZWFtSW5kZXgsIHN0cmluZyBhYmIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoYWJiICE9IG51bGwgJiYgYWJiLkxlbmd0aCA9PSA0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4LCBhYmIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJFcnJvciBzZXR0aW5nIHRlYW0gYWJicmV2aWF0aW9uLCB0ZWFtSW5kZXg9ezB9OyB2YWx1ZSBsZW5ndGggbXVzdCA9PSA0OyB7MX1cIixcclxuICAgICAgICAgICAgICAgICAgICB0ZWFtSW5kZXgsIGFiYikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0VGVhbU5hbWUoaW50IHRlYW1JbmRleCwgc3RyaW5nIG5hbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4ICsgNjgsIG5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0VGVhbUNpdHkoaW50IHRlYW1JbmRleCwgc3RyaW5nIGNpdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTZXRUZWFtU3RyaW5nVGFibGVTdHJpbmcodGVhbUluZGV4ICsgMzQsIGNpdHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGludCBOdW1iZXJPZlN0cmluZ3NJblRlYW1TdHJpbmdUYWJsZSB7IGdldCB7IHJldHVybiAxMjM7IH0gfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIE9mZmVuc2l2ZSBmb3JtYXRpb24gaXMgbWVzc2VkIHVwIGluIENYUk9NIFxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIEdldFRlYW1PZmZlbnNpdmVGb3JtYXRpb24oc3RyaW5nIHRlYW0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTdHJpbmcgcmV0VmFsID0gXCJcIjtcclxuICAgICAgICAgICAgLy9pZiAob3V0cHV0Um9tLkxlbmd0aCAhPSBST01fU0laRV92MV8xMSlcclxuICAgICAgICAgICAgaWYoIHRoaXMubVJvbVR5cGUgIT0gUk9NX1RZUEUuQ1hST01fdjExMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsID0gYmFzZS5HZXRUZWFtT2ZmZW5zaXZlRm9ybWF0aW9uKHRlYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdHByaXZhdGUgc3RyaW5nIEdldEV4cGFuc2lvblRlYW1zKClcclxuXHRcdHtcclxuXHRcdFx0U3RyaW5nQnVpbGRlciByZXQgPSBuZXcgU3RyaW5nQnVpbGRlcigyMDAwKTtcclxuXHRcdFx0XHJcblx0XHRcdHJldC5BcHBlbmQoR2V0VGVhbVBsYXllcnModGVhbXNbMzBdKSk7IC8vIGZvcnR5TmluZXJzXHJcblx0XHRcdHJldC5BcHBlbmQoR2V0VGVhbVBsYXllcnModGVhbXNbMzFdKSk7IC8vIHJhbXNcclxuXHRcdFx0cmV0LkFwcGVuZChHZXRUZWFtUGxheWVycyh0ZWFtc1szMl0pKTsgLy8gc2VhaGF3a3NcclxuXHRcdFx0cmV0LkFwcGVuZChHZXRUZWFtUGxheWVycyh0ZWFtc1szM10pKTsgLy8gY2FyZGluYWxzXHJcblxyXG5cdFx0XHRzdHJpbmcgcmVzdWx0ID0gcmV0LlRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldHMgdGhlIHRlYW0gc2ltIG9mZmVuc2UgdGVuZGVuY3kgLiBcclxuXHRcdC8vLyAwMCA9IExpdHRsZSBtb3JlIHJ1c2hpbmcsIDAxID0gSGVhdnkgUnVzaGluZywgXHJcblx0XHQvLy8gMDIgPSBsaXR0bGUgbW9yZSBwYXNzaW5nLCAwMyA9IEhlYXZ5IFBhc3NpbmcuIFxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj50aGUgdGVhbSBuYW1lPC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInZhbFwiPnRoZSBudW1iZXIgdG8gc2V0IGl0IHRvLjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+dHJ1ZSBpZiBzZXQsIGZhbGVzIGlmIGNvdWxkIG5vdCBzZXQgaXQuPC9yZXR1cm5zPlxyXG5cdFx0cHVibGljIG92ZXJyaWRlIGJvb2wgU2V0VGVhbVNpbU9mZmVuc2VQcmVmKHN0cmluZyB0ZWFtLCBpbnQgdmFsKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHRcdHJldHVybiBiYXNlLlNldFRlYW1TaW1PZmZlbnNlUHJlZiggdGVhbSwgdmFsKTtcclxuXHJcblx0XHRcdGlmKCB2YWwgPiAtMSAmJiB2YWwgPCA0ICYmIHRlYW1JbmRleCAhPSAtMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBsb2MgPSBmb3J0eU5pbmVyc1J1blBhc3NQcmVmZXJlbmNlTG9jICsgdGVhbUluZGV4IC0gMzA7XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY10gPSAoYnl0ZSkgdmFsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHRlYW1JbmRleCAhPSAtMSlcclxuXHRcdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJDYW4ndCBzZXQgb2ZmZW5zaXZlIHByZWYgdG8gJ3swfScgdmFsaWQgdmFsdWVzIGFyZSAwLTMuXFxuXCIsdmFsKSk7XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlRlYW0gJ3swfScgaXMgaW52YWxpZFxcblwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gU2V0cyB0aGUgdGVhbSBzaW0gb2ZmZW5zZSB0ZW5kZW5jeSAuIFxyXG5cdFx0Ly8vIDAwID0gTGl0dGxlIG1vcmUgcnVzaGluZywgMDEgPSBIZWF2eSBSdXNoaW5nLCBcclxuXHRcdC8vLyAwMiA9IGxpdHRsZSBtb3JlIHBhc3NpbmcsIDAzID0gSGVhdnkgUGFzc2luZy4gXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRlaCB0ZWFtIG5hbWUuPC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz50aGVpciBzaW0gb2ZmZW5zZSBwcmVmICgwIC0gMyk8L3JldHVybnM+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgaW50IEdldFRlYW1TaW1PZmZlbnNlUHJlZihzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0XHRyZXR1cm4gYmFzZS5HZXRUZWFtU2ltT2ZmZW5zZVByZWYodGVhbSk7XHJcblxyXG5cdFx0XHRpbnQgdmFsID0gLTE7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAtMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBsb2MgPSBmb3J0eU5pbmVyc1J1blBhc3NQcmVmZXJlbmNlTG9jICsgdGVhbUluZGV4IC0gMzA7XHJcblx0XHRcdFx0dmFsID0gb3V0cHV0Um9tW2xvY107XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlRlYW0gJ3swfScgaXMgaW52YWxpZFxcblwiLHRlYW0pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgaW50IEdldE9mZmVuc2l2ZVBsYXllclNpbURhdGFMb2NhdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSAtNDtcclxuXHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsb2NhdGlvbiA9IGJhc2UuR2V0T2ZmZW5zaXZlUGxheWVyU2ltRGF0YUxvY2F0aW9uKHRlYW0sIHBvc2l0aW9uKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKCB0ZWFtSW5kZXggPiAyOSApXHJcblx0XHRcdHtcclxuXHJcblx0XHRcdFx0aW50IHBvc2l0aW9uSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0XHRsb2NhdGlvbiA9ICh0ZWFtSW5kZXggLTMwICkqdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4KjIpICtmb3J0eU5pbmVyc1FCMVNpbUF0dHJTdGFydDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbG9jYXRpb247XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIGludCBHZXREZWZpbnNpdmVQbGF5ZXJTaW1EYXRhTG9jYXRpb24oc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aW50IGxvY2F0aW9uID0gLTQ7XHJcblx0XHRcdFxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bG9jYXRpb24gPSBiYXNlLkdldERlZmluc2l2ZVBsYXllclNpbURhdGFMb2NhdGlvbih0ZWFtLCBwb3NpdGlvbik7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggdGVhbUluZGV4ID4gMjkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHBvc2l0aW9uSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0XHRsb2NhdGlvbiA9ICh0ZWFtSW5kZXggLTMwKSogdGVhbVNpbU9mZnNldCArIChwb3NpdGlvbkluZGV4IC0gMTcpKyBmb3J0eU5pbmVyc1JFU2ltTG9jO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBsb2NhdGlvbjtcclxuXHRcdH1cclxuXHJcblx0XHRcclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBpbnQgR2V0UHVua0tpY2tTaW1EYXRhTG9jYXRpb24oaW50IHRlYW1JbmRleClcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0XHRyZXQgPSBiYXNlLkdldFB1bmtLaWNrU2ltRGF0YUxvY2F0aW9uKHRlYW1JbmRleCk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXQgPSAodGVhbUluZGV4IC0zMCApKnRlYW1TaW1PZmZzZXQgKyBmb3J0eU5pbmVyc1FCMVNpbUF0dHJTdGFydCsgMHgyRTtcclxuXHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgdGhlIHNpbXVsYXRpb24gZGF0YSBmb3IgdGhlIGdpdmVuIHRlYW0uXHJcblx0XHQvLy8gU2ltdWxhdGlvbiBkYXRhIGlzIG9mIHRoZSBmb3JtICcweE5OJyB3aGVyZSBOIGlzIGEgbnVtYmVyIDEtRiAoaGV4KS5cclxuXHRcdC8vLyBBIHRlYW0ncyBzaW0gZGF0YSBvZiAnMHg1Nycgc2lnbmlmaWVzIHRoYXQgdGhlIHRlYW0gaGFzIGEgc2ltdWxhdGlvbiBmaWd1cmUgb2ZcclxuXHRcdC8vLyAnNScgZm9yIG9mZmVuc2UsIGFuZCAnNycgZm9yIGRlZmVuc2UuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRoZSB0ZWFtIG9mIGludGVyZXN0PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgYnl0ZSBHZXRUZWFtU2ltRGF0YShzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0XHRyZXR1cm4gYmFzZS5HZXRUZWFtU2ltRGF0YSh0ZWFtKTtcclxuXHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAyOSAmJiB0ZWFtSW5kZXggPCAzNCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSAodGVhbUluZGV4LTMwKSp0ZWFtU2ltT2Zmc2V0ICsgZm9ydHlOaW5lcnNRQjFTaW1BdHRyU3RhcnQgKzB4MmY7XHJcblx0XHRcdFx0cmV0dXJuIG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIDB4MDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFNldHMgdGhlIGdpdmVuIHRlYW0ncyBvZmZlbnNlIGFuZCBkZWZlbnNlIHNpbSB2YWx1ZXMuXHJcblx0XHQvLy8gU2ltdWxhdGlvbiBkYXRhIGlzIG9mIHRoZSBmb3JtICcweE5OJyB3aGVyZSBOIGlzIGEgbnVtYmVyIDEtRiAoaGV4KS5cclxuXHRcdC8vLyBBIHRlYW0ncyBzaW0gZGF0YSBvZiAnMHg1Nycgc2lnbmlmaWVzIHRoYXQgdGhlIHRlYW0gaGFzIGEgc2ltdWxhdGlvbiBmaWd1cmUgb2ZcclxuXHRcdC8vLyAnNScgZm9yIG9mZmVuc2UsIGFuZCAnNycgZm9yIGRlZmVuc2UuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPlRoZSB0ZWFtIHRvIHNldC48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidmFsdWVzXCI+VGhlIHZhbHVlIHRvIHNldCBpdCB0by48L3BhcmFtPlxyXG5cdFx0cHVibGljIG92ZXJyaWRlIHZvaWQgU2V0VGVhbVNpbURhdGEoc3RyaW5nIHRlYW0sIGJ5dGUgdmFsdWVzKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pICApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRTdGF0aWNVdGlscy5BZGRFcnJvcihzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIFNldFRlYW1TaW1EYXRhOjogdGVhbSB7MH0gaXMgaW52YWxpZCBcIix0ZWFtKSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YmFzZS5TZXRUZWFtU2ltRGF0YSh0ZWFtLCB2YWx1ZXMpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vIG5vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gY3hyb20ncyByb21cclxuXHRcdFx0XHRpbnQgbG9jYXRpb24gPSAodGVhbUluZGV4LTMwKSp0ZWFtU2ltT2Zmc2V0ICsgZm9ydHlOaW5lcnNRQjFTaW1BdHRyU3RhcnQgKzB4MmY7XHJcblx0XHRcdFx0aW50IGN1cnJlbnRWYWx1ZSA9IG91dHB1dFJvbVtsb2NhdGlvbl07XHJcblx0XHRcdFx0b3V0cHV0Um9tW2xvY2F0aW9uXSA9IHZhbHVlcztcclxuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBvdXRwdXRSb21bbG9jYXRpb25dO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgcG9pbnQgaW4gdGhlIHBsYXllciBudW1iZXIgbmFtZSBkYXRhIHRoYXQgYSBwbGF5ZXIncyBkYXRhIGJlZ2lucy5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgaW50IEdldERhdGFQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldERhdGFQb3NpdGlvbjo6IGVpdGhlciB0ZWFtIHswfSBvciBwb3NpdGlvbiB7MX0gaXMgaW52YWxpZC5cIiwgdGVhbSwgcG9zaXRpb24pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ICAgICA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBiYXNlLkdldERhdGFQb3NpdGlvbih0ZWFtLCBwb3NpdGlvbiApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPiAyOSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgcG9zaXRpb25JbmRleCA9IEdldFBvc2l0aW9uSW5kZXgocG9zaXRpb24pO1xyXG5cdFx0XHRcdC8vIHRoZSBwbGF5ZXJzIHRvdGFsIGluZGV4IChRQjEgYmlsbHM9MCwgUUIyIGJpbGxzPTIgLi4uKVxyXG5cdFx0XHRcdGludCBwb2ludGVyTG9jYXRpb24gPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvaW50ZXJMb2NhdGlvbiA9ICh0ZWFtSW5kZXggLSAzMCkgKiAweDNjICsgRk9SVFlfTklORVJTX1FCMV9QT0lOVEVSXHJcbiAgICAgICAgICAgICAgICAgICArIChwb3NpdGlvbkluZGV4ICogMik7XHJcblxyXG5cdFx0XHRcdGJ5dGUgbG93Qnl0ZSA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb25dO1xyXG5cdFx0XHRcdGludCAgaGlCeXRlICA9IG91dHB1dFJvbVtwb2ludGVyTG9jYXRpb24rMV07XHJcblx0XHRcdFx0aGlCeXRlID0gIGhpQnl0ZSA8PCA4O1xyXG5cdFx0XHRcdGhpQnl0ZSA9IGhpQnl0ZSArIGxvd0J5dGU7XHJcblxyXG5cdFx0XHRcdC8vaW50IHJldCA9IGhpQnl0ZSAtIDB4ODAwMCArIDB4MDEwO1xyXG5cdFx0XHRcdC8vcmV0ID0gaGlCeXRlICsgMHgzMDAwMCArIDB4MDEwO1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gaGlCeXRlICsgbUdldERhdGFQb3NpdGlvbk9mZnNldDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0IHRoZSBzdGFydGluZyBwb2ludCBvZiB0aGUgZ3V5IEFGVEVSIHRoZSBvbmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLlxyXG5cdFx0Ly8vIFRoaXMgaXMgaGFja2VkIHVwIHRvIHdvcmsgd2l0aCBDWFJPTSdzIHJvbS5cclxuXHRcdC8vLyA8L3N1bW1hcnk+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJ0ZWFtXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInBvc2l0aW9uXCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgaW50IEdldE5leHREYXRhUG9zaXRpb24oc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuXHRcdHtcclxuXHRcdFx0aW50IHBvaW50ZXJMb2NhdGlvbiA9IDA7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblxyXG5cdFx0XHRpZiggdGVhbUluZGV4ID4gMjkgJiYgcG9zaXRpb24gPT0gXCJQXCIgKVxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBwb2ludGVyTG9jYXRpb24gPSBGT1JUWV9OSU5FUlNfUUIxX1BPSU5URVIgKyAweDNjICsgKHRlYW1JbmRleCAtIDMwKSAqIDB4M2M7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiggdGVhbUluZGV4ID4gMjkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aW50IHBvc2l0aW9uSW5kZXggPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKSsxO1xyXG4gICAgICAgICAgICAgICAgcG9pbnRlckxvY2F0aW9uID0gKHRlYW1JbmRleCAtIDMwKSAqIDB4M2MgKyBGT1JUWV9OSU5FUlNfUUIxX1BPSU5URVJcclxuICAgICAgICAgICAgICAgICAgICArIChwb3NpdGlvbkluZGV4ICogMik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKCBwb2ludGVyTG9jYXRpb24gIT0gMCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRieXRlIGxvd0J5dGUgPSBvdXRwdXRSb21bcG9pbnRlckxvY2F0aW9uXTtcclxuXHRcdFx0XHRpbnQgIGhpQnl0ZSAgPSBvdXRwdXRSb21bcG9pbnRlckxvY2F0aW9uKzFdO1xyXG5cdFx0XHRcdGhpQnl0ZSA9ICBoaUJ5dGUgPDwgODtcclxuXHRcdFx0XHRoaUJ5dGUgPSBoaUJ5dGUgKyBsb3dCeXRlO1xyXG5cclxuXHRcdFx0XHQvL2ludCByZXQgPSBoaUJ5dGUgLSAweDgwMDAgKyAweDAxMDtcclxuICAgICAgICAgICAgICAgIC8vaW50IHJldCA9IGhpQnl0ZSArIDB4MzAwMDAgKyAweDAxMDtcclxuICAgICAgICAgICAgICAgIGludCByZXQgPSBoaUJ5dGUgKyBtR2V0RGF0YVBvc2l0aW9uT2Zmc2V0O1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBiYXNlLkdldE5leHREYXRhUG9zaXRpb24odGVhbSwgcG9zaXRpb24pO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgaW50IEdldFBvaW50ZXJQb3NpdGlvbihzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTQ7XHJcblx0XHRcdGlmKCAhSXNWYWxpZFRlYW0odGVhbSkgfHwgIUlzVmFsaWRQb3NpdGlvbiggcG9zaXRpb24gKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRocm93IG5ldyBFeGNlcHRpb24oXHJcblx0XHRcdFx0XHRzdHJpbmcuRm9ybWF0KFwiRVJST1IhIChsb3cgbGV2ZWwpIEdldFBvaW50ZXJQb3NpdGlvbjo6IGVpdGhlciB0ZWFtIHswfSBvciBwb3NpdGlvbiB7MX0gaXMgaW52YWxpZC5cIiwgdGVhbSwgcG9zaXRpb24pKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgdGVhbUluZGV4ICAgICA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBiYXNlLkdldFBvaW50ZXJQb3NpdGlvbih0ZWFtLCBwb3NpdGlvbik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoIHRlYW1JbmRleCA+IDI5IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGludCBwb3NpdGlvbkluZGV4ID0gR2V0UG9zaXRpb25JbmRleChwb3NpdGlvbik7XHJcblx0XHRcdFx0aW50IHBsYXllclNwb3QgICAgPSAodGVhbUluZGV4IC0gMzAgKSogIHBvc2l0aW9uTmFtZXMuQ291bnQgKyBwb3NpdGlvbkluZGV4O1xyXG5cdFx0XHRcdGlmKHBvc2l0aW9uSW5kZXggPCAwKVxyXG5cdFx0XHRcdHtcclxuICAgICAgICAgICAgICAgICAgICBTdHJpbmdCdWlsZGVyIGJ1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcig1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiRVJST1IhIChsb3cgbGV2ZWwpIFBvc2l0aW9uICd7MH0nIGRvZXMgbm90IGV4aXN0LiBWYWxpZCBwb3NpdGlvbnMgYXJlOiBbXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAxOyBpIDw9IHBvc2l0aW9uTmFtZXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKHBvc2l0aW9uTmFtZXNbaSAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5BcHBlbmQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLlJlbW92ZShidWlsZGVyLkxlbmd0aCAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuQXBwZW5kKFwiXVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBTdGF0aWNVdGlscy5BZGRFcnJvcihidWlsZGVyLlRvU3RyaW5nKCkpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXQgPSBGT1JUWV9OSU5FUlNfUUIxX1BPSU5URVIgKyAoMipwbGF5ZXJTcG90KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSB2b2lkIFNoaWZ0RGF0YUFmdGVyKHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24sIGludCBzaGlmdEFtb3VudClcclxuXHRcdHtcclxuXHRcdFx0aW50IHRlYW1JbmRleCA9IEdldFRlYW1JbmRleCh0ZWFtKTtcclxuXHRcdFx0aWYodGVhbUluZGV4ID09IDI3ICYmIHBvc2l0aW9uID09IFwiUFwiKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLlNoaWZ0RGF0YUFmdGVyKHRlYW0sIHBvc2l0aW9uLCBzaGlmdEFtb3VudCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiggIUlzVmFsaWRUZWFtKHRlYW0pIHx8ICFJc1ZhbGlkUG9zaXRpb24oIHBvc2l0aW9uICkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXhjZXB0aW9uKFxyXG5cdFx0XHRcdFx0c3RyaW5nLkZvcm1hdChcIkVSUk9SISAobG93IGxldmVsKSBTaGlmdERhdGFBZnRlcjo6IGVpdGhlciB0ZWFtIHswfSBvciBwb3NpdGlvbiB7MX0gaXMgaW52YWxpZC5cIiwgdGVhbSwgcG9zaXRpb24pKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYodGVhbSA9PSB0ZWFtc1t0ZWFtcy5Db3VudC0xXSAmJiBwb3NpdGlvbiA9PSBcIlBcIilcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRpbnQgc3RhcnRQb3NpdGlvbiA9IHRoaXMuR2V0TmV4dERhdGFQb3NpdGlvbih0ZWFtLHBvc2l0aW9uKTtcclxuXHRcdFx0aW50IGVuZFBvc2l0aW9uID0gbV9FeHBhbnNpb25TZWdtZW50RW5kLTE3Oy8vIC0xNyB0byBjb21wZW5zYXRlIGZvciBzaGlmdGluZyBkb3duXHJcblx0XHRcdFxyXG5cdFx0XHRpZihzaGlmdEFtb3VudCA8IDApXHJcblx0XHRcdFx0U2hpZnREYXRhVXAoc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIHNoaWZ0QW1vdW50LCBvdXRwdXRSb20pO1xyXG5cdFx0XHRlbHNlIGlmKHNoaWZ0QW1vdW50ID4gMClcclxuXHRcdFx0XHRTaGlmdERhdGFEb3duKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBzaGlmdEFtb3VudCwgb3V0cHV0Um9tKTtcclxuXHRcdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBBZGp1c3REYXRhUG9pbnRlcnMoaW50IHBvcywgaW50IGNoYW5nZSwgaW50IGxhc3RQb2ludGVyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiAocG9zID49IEdldFRlYW1TdHJpbmdUYWJsZVN0YXJ0KCkpIC8vIGRvaW5nIFRlYW0gU3RyaW5nIHRhYmxlIHN0dWZmXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLkFkanVzdERhdGFQb2ludGVycyhwb3MsIGNoYW5nZSwgbGFzdFBvaW50ZXIpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiggcG9zID09IGxhc3RQbGF5ZXJOYW1lUG9pbnRlci0yKS8vMHgwNmUyKSAvLyBwYW50aGVyJ3MgcHVudGVyXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpbnQgcG9pbnRlckxvYyA9IHBvcysyO1xyXG5cdFx0XHRcdGJ5dGUgbG8gPSBvdXRwdXRSb21bcG9pbnRlckxvY107XHJcblx0XHRcdFx0Ynl0ZSBoaSA9IG91dHB1dFJvbVtwb2ludGVyTG9jKzFdO1xyXG5cdFx0XHRcdGludCBwVmFsID0gaGk7XHJcblx0XHRcdFx0cFZhbCA9IHBWYWwgPDwgODtcclxuXHRcdFx0XHRwVmFsICs9IGxvO1xyXG5cdFx0XHRcdHBWYWwgKz0gY2hhbmdlO1xyXG5cclxuXHRcdFx0XHRsbyAgPSAgKGJ5dGUpKHBWYWwgJiAweDAwZmYpO1xyXG5cdFx0XHRcdHBWYWwgPSAgcFZhbCA+PiA4O1xyXG5cdFx0XHRcdGhpICAgPSAgKGJ5dGUpcFZhbDtcclxuXHRcdFx0XHRvdXRwdXRSb21bcG9pbnRlckxvY10gICA9IGxvO1xyXG5cdFx0XHRcdG91dHB1dFJvbVtwb2ludGVyTG9jKzFdID0gaGk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAoIHBvcyA8IGxhc3RQbGF5ZXJOYW1lUG9pbnRlciArMSApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLkFkanVzdERhdGFQb2ludGVycyhwb3MsIGNoYW5nZSwgYmFzZS5sYXN0UGxheWVyTmFtZVBvaW50ZXIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGJ5dGUgbG93LCBoaTtcclxuXHRcdFx0XHRpbnQgIHdvcmQ7XHJcblx0XHRcdFx0Ly8gbGFzdCBwb2ludGVyIGlzIGF0IDB4NjlkIEZvciBORVNcclxuXHRcdFx0XHQvLyBzbmVzIGlzIGxhc3Rwb2ludGVyKzEgKDB4MTc4NzM4KzEpXHJcblxyXG5cdFx0XHRcdGludCBzdGFydCA9IHBvcysyO1xyXG5cdFx0XHRcdGludCBpPTA7XHJcblx0XHRcdFx0aW50IGVuZCA9IC8vLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQ0FSRElOQUxTX1BVTlRFUl9QT0lOVEVSICsgMjsgLy8gY2FyZHMgYXJlIHRlYW0gIzMzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZPUlRZX05JTkVSU19RQjFfUE9JTlRFUiArIDB4M2MgKyAoMzMgLSAzMCkgKiAweDNjICsgMjtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRmb3IoIGkgPSBzdGFydDsgaSA8IGVuZDsgaSs9MilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRsb3cgID0gIG91dHB1dFJvbVtpXTtcclxuXHRcdFx0XHRcdGhpICAgPSAgb3V0cHV0Um9tW2krMV07XHJcblx0XHRcdFx0XHR3b3JkID0gIGhpO1xyXG5cdFx0XHRcdFx0d29yZCA9ICB3b3JkIDw8IDg7XHJcblx0XHRcdFx0XHR3b3JkICs9IGxvdztcclxuXHRcdFx0XHRcdHdvcmQgKz0gY2hhbmdlO1xyXG5cdFx0XHRcdFx0bG93ICA9ICAoYnl0ZSkod29yZCAmIDB4MDBmZik7XHJcblx0XHRcdFx0XHR3b3JkID0gIHdvcmQgPj4gODtcclxuXHRcdFx0XHRcdGhpICAgPSAgKGJ5dGUpd29yZDtcclxuXHRcdFx0XHRcdG91dHB1dFJvbVtpXSA9IGxvdztcclxuXHRcdFx0XHRcdG91dHB1dFJvbVtpKzFdID0gaGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIEdldCB0aGUgZmFjZSBudW1iZXIgZnJvbSB0aGUgZ2l2ZW4gdGVhbS9wb3NpdGlvblxyXG5cdFx0Ly8vIDwvc3VtbWFyeT5cclxuXHRcdC8vLyA8cGFyYW0gbmFtZT1cInRlYW1cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwicG9zaXRpb25cIj48L3BhcmFtPlxyXG5cdFx0Ly8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuXHRcdHB1YmxpYyBvdmVycmlkZSBpbnQgR2V0RmFjZShzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHRcdHJldHVybiBiYXNlLkdldEZhY2UodGVhbSwgcG9zaXRpb24pO1xyXG5cdFx0XHRpbnQgcG9zaXRpb25PZmZzZXQgPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHBvc2l0aW9uT2Zmc2V0IDwgMCB8fCB0ZWFtSW5kZXggPCAwIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFN0YXRpY1V0aWxzLkFkZEVycm9yKHN0cmluZy5Gb3JtYXQoXCJHZXRGYWNlIEVycm9yIGdldHRpbmcgZmFjZSBmb3IgezB9IHsxfVwiLHRlYW0scG9zaXRpb24pKTtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdFx0dGVhbUluZGV4IC09IDI7XHJcblx0XHRcdGludCBsb2MgPSAweDMwMTIgKyBmYWNlT2Zmc2V0c1twb3NpdGlvbk9mZnNldF0gKyB0ZWFtSW5kZXgqMHg3NTtcclxuXHRcdFx0aW50IHJldCA9IG91dHB1dFJvbVtsb2NdO1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vLyA8c3VtbWFyeT5cclxuXHRcdC8vLyBTZXRzIHRoZSBmYWNlIGZvciB0aGUgZ3V5IGF0IHBvc2l0aW9uICdwb3NpdGlvbicgb24gdGVhbSAndGVhbScuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJwb3NpdGlvblwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHBhcmFtIG5hbWU9XCJmYWNlXCI+PC9wYXJhbT5cclxuXHRcdHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldEZhY2Uoc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbiwgaW50IGZhY2UpXHJcblx0XHR7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiYXNlLlNldEZhY2UodGVhbSwgcG9zaXRpb24sIGZhY2UpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpbnQgcG9zaXRpb25PZmZzZXQgPSBHZXRQb3NpdGlvbkluZGV4KHBvc2l0aW9uKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHBvc2l0aW9uT2Zmc2V0IDwgMCB8fCB0ZWFtSW5kZXggPCAwIHx8IGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlNldEZhY2UgRXJyb3Igc2V0dGluZyBmYWNlIGZvciB7MH0gezF9IGZhY2U9ezJ9XCIsdGVhbSxwb3NpdGlvbixmYWNlKSk7XHJcblx0XHRcdFx0aWYoIGZhY2UgPCAweDAwIHwgZmFjZSA+IDB4RDQgKVxyXG5cdFx0XHRcdFx0U3RhdGljVXRpbHMuQWRkRXJyb3Ioc3RyaW5nLkZvcm1hdChcIlZhbGlkIEZhY2UgbnVtYmVycyBhcmUgMHgwMCAtIDB4RDRcIikpO1xyXG5cdFx0XHRcdHJldHVybiA7XHJcblx0XHRcdH1cclxuXHRcdFx0dGVhbUluZGV4IC09IDI7XHJcblx0XHRcdGludCBsb2MgPSAweDMwMTIgKyBmYWNlT2Zmc2V0c1twb3NpdGlvbk9mZnNldF0gKyB0ZWFtSW5kZXgqMHg3NTtcclxuXHRcdFx0b3V0cHV0Um9tW2xvY10gPSAoYnl0ZSlmYWNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBpbnQgR2V0QXR0cmlidXRlTG9jYXRpb24oaW50IHRlYW1JbmRleCwgaW50IHBvc0luZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgbG9jYXRpb24gPSAtMTtcclxuXHRcdFx0aWYoIHRlYW1JbmRleCA8IDI4IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxvY2F0aW9uID0gYmFzZS5HZXRBdHRyaWJ1dGVMb2NhdGlvbiAodGVhbUluZGV4LCBwb3NJbmRleCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bG9jYXRpb24gPSBiYXNlLkdldEF0dHJpYnV0ZUxvY2F0aW9uICh0ZWFtSW5kZXgtMiwgcG9zSW5kZXgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBsb2NhdGlvbjtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ly8vIDxzdW1tYXJ5PlxyXG5cdFx0Ly8vIFJldHVybnMgYW4gQXJyYXlMaXN0IG9mIGVycm9ycyB0aGF0IHdlcmUgZW5jb3VudGVyZWQgZHVyaW5nIHRoZSBvcGVyYXRpb24uXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwic2NoZWR1bGVMaXN0XCI+PC9wYXJhbT5cclxuXHRcdC8vLyA8cmV0dXJucz48L3JldHVybnM+XHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgdm9pZCBBcHBseVNjaGVkdWxlKFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3Q8c3RyaW5nPiBzY2hlZHVsZUxpc3QgKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggc2NoZWR1bGVMaXN0ICE9IG51bGwgJiYgb3V0cHV0Um9tICE9IG51bGwgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Q1hSb21TY2hlZHVsZUhlbHBlciBzY2ggPSBuZXcgQ1hSb21TY2hlZHVsZUhlbHBlciggb3V0cHV0Um9tICk7XHJcblx0XHRcdFx0c2NoLkFwcGx5U2NoZWR1bGUoIHNjaGVkdWxlTGlzdCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIGludCBHZXRQbGF5Ym9va0xvY2F0aW9uKGludCB0ZWFtX2luZGV4KVxyXG5cdFx0e1xyXG5cdFx0XHRpZiggdGVhbV9pbmRleCAgPCAyOCApXHJcblx0XHRcdFx0cmV0dXJuIGJhc2UuR2V0UGxheWJvb2tMb2NhdGlvbiggdGVhbV9pbmRleCApO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0ZWFtX2luZGV4IC09IDMwO1xyXG5cdFx0XHRcdHJldHVybiAgRk9SVFlfTklORVJTX1BMQVlCT09LX1NUQVJUICsgdGVhbV9pbmRleCAqIDQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIEdldFNjaGVkdWxlKClcclxuXHRcdHtcclxuXHRcdFx0c3RyaW5nIHJldCA9IFwiXCI7XHJcblx0XHRcdGlmKCBvdXRwdXRSb20gIT0gbnVsbCAmJiBEb1NjaGVkdWxlIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdENYUm9tU2NoZWR1bGVIZWxwZXIgc2gyID0gbmV3IENYUm9tU2NoZWR1bGVIZWxwZXIoIG91dHB1dFJvbSApO1xyXG5cdFx0XHRcdHJldCA9IHNoMi5HZXRTY2hlZHVsZSgpO1xyXG4gICAgICAgICAgICAgICAgU3RhdGljVXRpbHMuU2hvd0Vycm9ycygpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuI3JlZ2lvbiBVbmlmb3JtIENvbG9yIFN0dWZmXHJcblx0XHRwcml2YXRlIGludCBtRm9ydHlOaW5lcnNVbmlmb3JtTG9jID0gMHgyY2Y4MjtcclxuXHRcdFxyXG5cdFx0cHJvdGVjdGVkIG92ZXJyaWRlIGludCBHZXRVbmlmb3JtTG9jKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBiYXNlLkdldFVuaWZvcm1Mb2ModGVhbSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGVhbUluZGV4IC09IDMwO1xyXG5cdFx0XHRcdHJldCA9IG1Gb3J0eU5pbmVyc1VuaWZvcm1Mb2MgKyAodGVhbUluZGV4ICogMHhhKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgaW50IG1Gb3J0eU5pbmVyc0FjdGlvblNlcUxvYyA9IDB4MzQ4Zjc7XHJcblx0XHQvLy8gPHN1bW1hcnk+XHJcblx0XHQvLy8gR2V0cyB0aGUgbG9jYXRpb24gb2YgdGhlIGdpdmVuIHRlYW0ncyB1bmlmb3JtIGRhdGEuXHJcblx0XHQvLy8gPC9zdW1tYXJ5PlxyXG5cdFx0Ly8vIDxwYXJhbSBuYW1lPVwidGVhbVwiPjwvcGFyYW0+XHJcblx0XHQvLy8gPHJldHVybnM+VGhlIGxvY2F0aW9uIG9mIHRoZSBnaXZlbiB0ZWFtJ3MgdW5pZm9ybSBkYXRhLCAtMSBvbiBlcnJvcjwvcmV0dXJucz5cclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBpbnQgR2V0QWN0aW9uU2VxVW5pZm9ybUxvYyhzdHJpbmcgdGVhbSlcclxuXHRcdHtcclxuXHRcdFx0aW50IHJldCA9IC0xO1xyXG5cdFx0XHRpbnQgdGVhbUluZGV4ID0gR2V0VGVhbUluZGV4KHRlYW0pO1xyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjggKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0ID0gYmFzZS5HZXRBY3Rpb25TZXFVbmlmb3JtTG9jKHRlYW0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRlYW1JbmRleCAtPSAzMDtcclxuXHRcdFx0XHRyZXQgPSBtRm9ydHlOaW5lcnNBY3Rpb25TZXFMb2MgKyAodGVhbUluZGV4ICogMHg4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHByaXZhdGUgaW50IG00OWVyc0RpdkNoYW1wTG9jID0gMHgzNDk0ZjsvLzsgMHgzNDk1MztcclxuXHJcblx0XHRwcm90ZWN0ZWQgb3ZlcnJpZGUgaW50IEdldERpdkNoYW1wTG9jKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblx0XHRcdGlmKCB0ZWFtSW5kZXggPCAyOClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldCA9IGJhc2UuR2V0RGl2Q2hhbXBMb2ModGVhbSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGVhbUluZGV4IC09IDMwO1xyXG5cdFx0XHRcdHJldCA9IG00OWVyc0RpdkNoYW1wTG9jICsgKHRlYW1JbmRleCAqIDB4NSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiByZXQ7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHByaXZhdGUgaW50IG00OWVyc0NvbmZDaGFtcExvYyA9IDB4MzQ5Y2Y7Ly8weDM0OUQyO1xyXG5cclxuXHRcdHByb3RlY3RlZCBvdmVycmlkZSBpbnQgR2V0Q29uZkNoYW1wTG9jKHN0cmluZyB0ZWFtKVxyXG5cdFx0e1xyXG5cdFx0XHRpbnQgcmV0ID0gLTE7XHJcblx0XHRcdGludCB0ZWFtSW5kZXggPSBHZXRUZWFtSW5kZXgodGVhbSk7XHJcblxyXG5cdFx0XHRpZiggdGVhbUluZGV4IDwgMjgpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXQgPSBiYXNlLkdldENvbmZDaGFtcExvYyh0ZWFtKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0ZWFtSW5kZXggLT0gMzA7XHJcblx0XHRcdFx0cmV0ID0gbTQ5ZXJzQ29uZkNoYW1wTG9jICsgKHRlYW1JbmRleCAqIDB4NCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuI2VuZHJlZ2lvblxyXG5cdH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBUU0JUb29sMlxyXG57XHJcbiAgICAvLyBUT0RPOiBcclxuICAgIC8vIGhhbmRsZSBQbGF5ZXIgUGhvdG9zXHJcbiAgICBwdWJsaWMgY2xhc3MgVFNCM1Rvb2wgOiBUU0JUb29sMi5UU0IyVG9vbFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1RlY21vU3VwZXJCb3dsM1JvbShieXRlW10gcm9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm9vbCByZXRWYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHJvbSAhPSBudWxsICYmIHJvbS5MZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBMaXN0PGxvbmc+IHJlc3VsdHMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkZpbmRTdHJpbmdJbkZpbGUoXCJURUNNTyBTVVBFUkJPV0wgM1wiLCByb20sIDE4MjgyMDgsIDE4MzMxNTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUU0IzVG9vbChieXRlW10gcm9tKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5PdXRwdXRSb20gPSByb207XHJcbiAgICAgICAgICAgIEluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIFRTQjNUb29sKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0YXRpYyBMaXN0PHN0cmluZz4gc2NoZWR1bGVUZWFtT3JkZXIgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxzdHJpbmc+KCksKF9vMSk9PntfbzEuQWRkKFwiZG9scGhpbnNcIik7X28xLkFkZChcInBhdHJpb3RzXCIpO19vMS5BZGQoXCJjb2x0c1wiKTtfbzEuQWRkKFwiYmlsbHNcIik7X28xLkFkZChcImpldHNcIik7X28xLkFkZChcInN0ZWVsZXJzXCIpO19vMS5BZGQoXCJicm93bnNcIik7X28xLkFkZChcImJlbmdhbHNcIik7X28xLkFkZChcIm9pbGVyc1wiKTtfbzEuQWRkKFwiamFndWFyc1wiKTtfbzEuQWRkKFwiY2hhcmdlcnNcIik7X28xLkFkZChcImNoaWVmc1wiKTtfbzEuQWRkKFwicmFpZGVyc1wiKTtfbzEuQWRkKFwiYnJvbmNvc1wiKTtfbzEuQWRkKFwic2VhaGF3a3NcIik7X28xLkFkZChcImNvd2JveXNcIik7X28xLkFkZChcImdpYW50c1wiKTtfbzEuQWRkKFwiY2FyZGluYWxzXCIpO19vMS5BZGQoXCJlYWdsZXNcIik7X28xLkFkZChcInJlZHNraW5zXCIpO19vMS5BZGQoXCJ2aWtpbmdzXCIpO19vMS5BZGQoXCJwYWNrZXJzXCIpO19vMS5BZGQoXCJsaW9uc1wiKTtfbzEuQWRkKFwiYmVhcnNcIik7X28xLkFkZChcImJ1Y2NhbmVlcnNcIik7X28xLkFkZChcIjQ5ZXJzXCIpO19vMS5BZGQoXCJzYWludHNcIik7X28xLkFkZChcImZhbGNvbnNcIik7X28xLkFkZChcInJhbXNcIik7X28xLkFkZChcInBhbnRoZXJzXCIpO3JldHVybiBfbzE7fSk7XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gT3ZlcnJpZGVzIGZvciBzZXR0aW5nIHVwIGxvY2F0aW9uc1xyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIEluaXQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQllURVNfUEVSX1FCID0gNztcclxuICAgICAgICAgICAgLy8gbmFtZV9zdHJpbmdfdGFibGVfMVxyXG4gICAgICAgICAgICB0c2IyX25hbWVfc3RyaW5nX3RhYmxlXzFfZmlyc3RfcHRyID0gMHgxZTgwMzggKyA4O1xyXG4gICAgICAgICAgICBiaWxsc19rcl9sb2Nfc2Vhc29uXzEgPSAgMHhFNTBBQTsgLy8gVFNCM1xyXG5cclxuICAgICAgICAgICAgdGVhbXMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgTGlzdDxzdHJpbmc+KCksKF9vMSk9PntfbzEuQWRkKFwiYmlsbHNcIik7X28xLkFkZChcImNvbHRzXCIpO19vMS5BZGQoXCJkb2xwaGluc1wiKTtfbzEuQWRkKFwicGF0cmlvdHNcIik7X28xLkFkZChcImpldHNcIik7X28xLkFkZChcImJlbmdhbHNcIik7X28xLkFkZChcImJyb3duc1wiKTtfbzEuQWRkKFwib2lsZXJzXCIpO19vMS5BZGQoXCJqYWd1YXJzXCIpO19vMS5BZGQoXCJzdGVlbGVyc1wiKTtfbzEuQWRkKFwiYnJvbmNvc1wiKTtfbzEuQWRkKFwiY2hpZWZzXCIpO19vMS5BZGQoXCJyYWlkZXJzXCIpO19vMS5BZGQoXCJjaGFyZ2Vyc1wiKTtfbzEuQWRkKFwic2VhaGF3a3NcIik7X28xLkFkZChcImNhcmRpbmFsc1wiKTtfbzEuQWRkKFwiY293Ym95c1wiKTtfbzEuQWRkKFwiZ2lhbnRzXCIpO19vMS5BZGQoXCJlYWdsZXNcIik7X28xLkFkZChcInJlZHNraW5zXCIpO19vMS5BZGQoXCJiZWFyc1wiKTtfbzEuQWRkKFwibGlvbnNcIik7X28xLkFkZChcInBhY2tlcnNcIik7X28xLkFkZChcInZpa2luZ3NcIik7X28xLkFkZChcImJ1Y2NhbmVlcnNcIik7X28xLkFkZChcImZhbGNvbnNcIik7X28xLkFkZChcInBhbnRoZXJzXCIpO19vMS5BZGQoXCJzYWludHNcIik7X28xLkFkZChcInJhbXNcIik7X28xLkFkZChcIjQ5ZXJzXCIpO19vMS5BZGQoXCJmcmVlQWdlbnRzXCIpO19vMS5BZGQoXCJhbGxUaW1lXCIpO3JldHVybiBfbzE7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRLZXkoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXHJcbkBcIiMgVFNCVG9vbCBGb3J1bTogaHR0cHM6Ly90ZWNtb2Jvd2wub3JnL2ZvcnVtcy90b3BpYy8xMTEwNi10c2ItZWRpdG9yLXRzYnRvb2wtc3VwcmVtZS1zZWFzb24tZ2VuZXJhdG9yL1xyXG4jIFRTQlRvb2wyIEZvcnVtOiBodHRwczovL3RlY21vYm93bC5vcmcvZm9ydW1zL3RvcGljLzcxMDcyLXRzYmlpLXRzYmlpaS1lZGl0b3ItdHNidG9vbDIvXHJcbiMgRWRpdGluZzogVGVjbW8gU3VwZXIgQm93bCBJSUkgKHNuZXMpIFt7MH1dXHJcbiMgVFNCSUlJIEhhY2tpbmcgZG9jdW1lbnRhdGlvbjogaHR0cHM6Ly90ZWNtb2Jvd2wub3JnL2ZvcnVtcy90b3BpYy81MzAyOS10ZWNtby1zdXBlci1ib3dsLWlpaS1oYWNraW5ncmVzb3VyY2UtZG9jdW1lbnRhdGlvbi9cclxuIyBLZXkgXHJcbiMgJ1NFVCcgY29tbWFuZHMgYXJlIHN1cHBvcnRlZFxyXG4jIERvdWJsZSBjbGljayBvbiBhIHRlYW0gbmFtZSAob3IgcGxheWJvb2spIHRvIGJyaW5nIHVwIHRoZSBlZGl0IFRlYW0gR1VJLlxyXG4jIERvdWJsZSBjbGljayBvbiBhIHBsYXllciB0byBicmluZyB1cCB0aGUgZWRpdCBwbGF5ZXIgR1VJIChDbGljayAnU2ltIERhdGEnXHJcbiMgICBidXR0b24gdG8gZmluZCBvdXQgbW9yZSBvbiBTaW0gRGF0YSkuXHJcbiMgQXR0cmlidXRlIE9yZGVyXHJcbiMgUUJzICAgUlMgUlAgTVMgSFAgQkIgQUcgUFMgUEMgUEEgQVIgQ08gW3NpbSB2YWxzXVxyXG4jIFNraWxsIFJTIFJQIE1TIEhQIEJCIEFHIEJDIFJDIFtzaW0gdmFsc11cclxuIyBPTCAgICBSUyBSUCBNUyBIUCBCQiBBRyBcclxuIyBERUYgICBSUyBSUCBNUyBIUCBCQiBBRyBQSSBRVSBbc2ltIHZhbHNdXHJcbiMgSyAgICAgUlMgUlAgTVMgSFAgQkIgQUcgS1AgS0EgQUIgW3NpbSB2YWxdXHJcbiMgUCAgICAgUlMgUlAgTVMgSFAgQkIgQUcgS1AgQUIgW3NpbSB2YWxdXHJcblwiLCB0aGlzLlJvbVZlcnNpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpbnRlcm5hbCBvdmVycmlkZSB2b2lkIEdldFBsYXllcihpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgU3RyaW5nQnVpbGRlciBidWlsZGVyLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkdldFBsYXllcigxLCB0ZWFtLCBidWlsZGVyLCBwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgYnl0ZSBHZXRGYWNlKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbihzZWFzb24sIHRlYW0sIHBvc2l0aW9uKSArIDM7XHJcbiAgICAgICAgICAgIGJ5dGUgcmV0VmFsID0gT3V0cHV0Um9tW2xvY2F0aW9uXTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0RmFjZShpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBpbnQgZmFjZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRTQlRvb2wuU3RhdGljVXRpbHMuQ2hlY2tUU0IyQXJncyhzZWFzb24sIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oc2Vhc29uLCB0ZWFtLCBwb3NpdGlvbikgKyAzO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uLCAoYnl0ZSlmYWNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBzdHJpbmcgR2V0UUJBYmlsaXRpZXMoaW50IHNlYXNvbiwgLy8gKHNlYXNvbiA9IDEtMylcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKHNlYXNvbiwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIG1zID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDJdKTtcclxuICAgICAgICAgICAgYnl0ZSBhZyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDJdKTtcclxuICAgICAgICAgICAgYnl0ZSBwcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBieXRlIHBjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBieXRlIHBhID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYXIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgY28gPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDZdKTtcclxuICAgICAgICAgICAgYnl0ZSBzcCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDZdKTsgLy9zaW0gcG9ja2V0PyBtYXliZSBkbyBtb3JlIHJlc2VhcmNoIGZvciB0aGlzIG9uZS5cclxuXHJcbiAgICAgICAgICAgIGJ5dGVbXSBhdHRycyA9IG5ldyBieXRlW10geyBycywgcnAsIG1zLCBocCwgYmIsIGFnLCBwcywgcGMsIHBhLCBhciwgY28gfTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQXR0cmlidXRlcyhhdHRycyk7IC8vICtTdHJpbmcuRm9ybWF0KFwifHswOngyfSB7MTp4Mn0gezI6eDJ9IHszOngyfSB7NDp4Mn0gezU6eDJ9IHs2OngyfSBcIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDVdLCBPdXRwdXRSb21bbG9jYXRpb24gKyA2XSk7XHJcbiAgICAgICAgICAgIGlmIChTaG93UGxheWVyU2ltRGF0YSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24gPSBHZXRTaW1Mb2NhdGlvbigxLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgKz0gU3RyaW5nLkZvcm1hdChcIlt7MDpYMn0sezE6WDJ9LHsyOlgyfV1cIixPdXRwdXRSb21bbG9jYXRpb25dLCBPdXRwdXRSb21bbG9jYXRpb24gKyAxXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhYmlsaXRpZXMgc2hvdWxkIGJlIGluIHRoZSBvcmRlciB0aGV5IGFyZSBsaXN0ZWQgaW4gdGhlIGdhbWVcclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBTZXRRQkFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHFiLCBieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGlmIChxYiAhPSBcIlFCMVwiICYmIHFiICE9IFwiUUIyXCIpIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIkludmFsaWQgcWIgcG9zaXRpb24gXCIgKyBxYik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbigxLCB0ZWFtLCBxYik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnNfcnAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1swXSwgYWJpbGl0aWVzWzFdKTtcclxuICAgICAgICAgICAgYnl0ZSBtc19ocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzJdLCBhYmlsaXRpZXNbM10pO1xyXG4gICAgICAgICAgICBieXRlIGJiX2FnID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNF0sIGFiaWxpdGllc1s1XSk7XHJcblxyXG4gICAgICAgICAgICBieXRlIHBzX3BjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNl0sIGFiaWxpdGllc1s3XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcGFfYXIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s4XSwgYWJpbGl0aWVzWzldKTtcclxuICAgICAgICAgICAgYnl0ZSB1bmsxID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNl0pO1xyXG4gICAgICAgICAgICBieXRlIGNvX3VuazEgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1sxMF0sIHVuazEpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiAgICAsIHJzX3JwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDEsIG1zX2hwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDIsIGJiX2FnKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDQsIHBzX3BjKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDUsIHBhX2FyKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDYsIGNvX3VuazEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIG92ZXJyaWRlIHN0cmluZyBHZXRPTFBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCAvLyAoc2Vhc29uID0gMSlcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKDEsIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSBycyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcnAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBtcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0pO1xyXG4gICAgICAgICAgICBieXRlIGhwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0pO1xyXG4gICAgICAgICAgICBieXRlIGJiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAyXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYWcgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAyXSk7XHJcblxyXG4gICAgICAgICAgICBieXRlW10gYXR0cnMgPSBuZXcgYnl0ZVtdIHsgcnMsIHJwLCBtcywgaHAsIGJiLCBhZyB9O1xyXG4gICAgICAgICAgICBzdHJpbmcgcmV0VmFsID0gVFNCVG9vbC5TdGF0aWNVdGlscy5NYXBBdHRyaWJ1dGVzKGF0dHJzKTsvLyArU3RyaW5nLkZvcm1hdChcInx7MDp4Mn0gezE6eDJ9IHsyOngyfSB7Mzp4Mn1cIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFiaWxpdGllcyBzaG91bGQgYmUgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGxpc3RlZCBpbiB0aGUgZ2FtZVxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldE9MUGxheWVyQWJpbGl0aWVzKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zLCBieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NJbmRleCA9IHBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3MpO1xyXG4gICAgICAgICAgICBpZiAocG9zSW5kZXggPCAxMiB8fCBwb3NJbmRleCA+IDE2KSB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oXCJJbnZhbGlkIHBvc2l0aW9uIGFyZ3VtZW50ISAodGFrZXMgQyxSRyxSVCxMRyxMVCkgXCIgKyBwb3MpO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oMSwgdGVhbSwgcG9zKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmJfYWcgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s0XSwgYWJpbGl0aWVzWzVdKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiAgICAsIHJzX3JwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDEsIG1zX2hwKTtcclxuICAgICAgICAgICAgU2V0Qnl0ZShsb2NhdGlvbiArIDIsIGJiX2FnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBzdHJpbmcgR2V0S2lja2VyQWJpbGl0aWVzKGludCBzZWFzb24sIC8vIChzZWFzb24gPSAxKVxyXG4gICAgICAgICAgICBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIG1zID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAxXSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBieXRlIGJiID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAyXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYWcgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyAyXSk7XHJcblxyXG4gICAgICAgICAgICBieXRlIGtwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGJ5dGUga2EgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYWIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDVdKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGJ5dGVbXSBhdHRycyA9IG5ldyBieXRlW10geyBycywgcnAsIG1zLCBocCwgYmIsIGFnLCBrcCwga2EsIGFiIH07XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLk1hcEF0dHJpYnV0ZXMoYXR0cnMpOyAvLyArU3RyaW5nLkZvcm1hdChcInx7MDp4Mn0gezE6eDJ9IHsyOngyfSB7Mzp4Mn0gezQ6eDJ9IHs1OngyfVwiLCBPdXRwdXRSb21bbG9jYXRpb25dLCBPdXRwdXRSb21bbG9jYXRpb24gKyAxXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDNdLCBPdXRwdXRSb21bbG9jYXRpb24gKyA0XSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNV0pO1xyXG4gICAgICAgICAgICBpZiAoU2hvd1BsYXllclNpbURhdGEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gR2V0U2ltTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsICs9IFN0cmluZy5Gb3JtYXQoXCJbezA6WH1dXCIsIChPdXRwdXRSb21bbG9jYXRpb25dID4+IDQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWJpbGl0aWVzIHNob3VsZCBiZSBpbiB0aGUgb3JkZXIgdGhleSBhcmUgbGlzdGVkIGluIHRoZSBnYW1lXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgU2V0S2lja2VyQWJpbGl0aWVzKGludCBzZWFzb24sIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24sIGJ5dGVbXSBhYmlsaXRpZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3MoMSwgdGVhbSk7XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiAhPSBcIktcIikgdGhyb3cgbmV3IEFyZ3VtZW50RXhjZXB0aW9uKFwiSW52YWxpZCBwb3NpdGlvbiBhcmd1bWVudCEgKHRha2VzIEspIFwiICsgcG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzX3JwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMF0sIGFiaWxpdGllc1sxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXNfaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1syXSwgYWJpbGl0aWVzWzNdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl9hZyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzRdLCBhYmlsaXRpZXNbNV0pO1xyXG4gICAgICAgICAgICBieXRlIGtwX2thID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNl0sIGFiaWxpdGllc1s3XSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBieXRlIHVuazEgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA1XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYWJfdW5rMSA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzhdLCB1bmsxKTtcclxuXHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gICAgLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAyLCBiYl9hZyk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyA0LCBrcF9rYSk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyA1LCBhYl91bmsxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBvdmVycmlkZSBzdHJpbmcgR2V0UHVudGVyQWJpbGl0aWVzKGludCBzZWFzb24sIC8vIChzZWFzb24gPSAxLTMpXHJcbiAgICAgICAgICAgIHN0cmluZyB0ZWFtLCBzdHJpbmcgcG9zaXRpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbG9jYXRpb24gPSBHZXRQbGF5ZXJBdHRyaWJ1dGVMb2NhdGlvbigxLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGJ5dGUgcnMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbl0pO1xyXG4gICAgICAgICAgICBieXRlIHJwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXMgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuICAgICAgICAgICAgYnl0ZSBocCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDFdKTtcclxuXHJcbiAgICAgICAgICAgIGJ5dGUgYmIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDJdKTtcclxuICAgICAgICAgICAgYnl0ZSBhZyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDJdKTtcclxuXHJcbiAgICAgICAgICAgIGJ5dGUga3AgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldEZpcnN0TmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgYnl0ZSBhYiA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0U2Vjb25kTmliYmxlKE91dHB1dFJvbVtsb2NhdGlvbiArIDRdKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGJ5dGVbXSBhdHRycyA9IG5ldyBieXRlW10geyBycywgcnAsIG1zLCBocCwgYmIsIGFnLCBrcCwgYWIgfTtcclxuICAgICAgICAgICAgc3RyaW5nIHJldFZhbCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuTWFwQXR0cmlidXRlcyhhdHRycyk7XHJcbiAgICAgICAgICAgIGlmIChTaG93UGxheWVyU2ltRGF0YSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24gPSBHZXRTaW1Mb2NhdGlvbigxLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICByZXRWYWwgKz0gU3RyaW5nLkZvcm1hdChcIlt7MDpYfV1cIiwgKE91dHB1dFJvbVtsb2NhdGlvbl0gJiAweDBGKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldFB1bnRlckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKDEsIHRlYW0pO1xyXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gIT0gXCJQXCIpIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIkludmFsaWQgcG9zaXRpb24gYXJndW1lbnQhICh0YWtlcyBQKSBcIiArIHBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKDEsIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSByc19ycCA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzBdLCBhYmlsaXRpZXNbMV0pO1xyXG4gICAgICAgICAgICBieXRlIG1zX2hwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMl0sIGFiaWxpdGllc1szXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgYmJfYWcgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s0XSwgYWJpbGl0aWVzWzVdKTtcclxuXHJcbiAgICAgICAgICAgIGJ5dGUga3BfYWIgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1s2XSwgYWJpbGl0aWVzWzddKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gICAgLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAyLCBiYl9hZyk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyA0LCBrcF9hYik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBHZXRQbGF5ZXJBYmlsaXRpZXMoaW50IHNlYXNvbiwgLy8gKHNlYXNvbiA9IDEtMylcclxuICAgICAgICAgICAgc3RyaW5nIHRlYW0sIHN0cmluZyBwb3NpdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBiYXNlLkdldFBsYXllckFiaWxpdGllcygxLCB0ZWFtLCBwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgc3RyaW5nIEdldFNraWxsX0RlZlBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gUkIgYXR0cmlidXRlcyAobmliYmxlcyk6XHJcbiAgICAgICAgICAgIC8vIFJTIFJQIE1TIEhQIEJCIEFHIEJDIFJFQyBSYWNlID8/XHJcbiAgICAgICAgICAgIGludCBsb2NhdGlvbiA9IEdldFBsYXllckF0dHJpYnV0ZUxvY2F0aW9uKDEsIHRlYW0sIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgYnl0ZSBycyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcnAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkdldFNlY29uZE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb25dKTtcclxuICAgICAgICAgICAgYnl0ZSBtcyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0pO1xyXG4gICAgICAgICAgICBieXRlIGhwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0pO1xyXG5cclxuICAgICAgICAgICAgYnl0ZSBiYiA9IFRTQlRvb2wuU3RhdGljVXRpbHMuR2V0Rmlyc3ROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0pO1xyXG4gICAgICAgICAgICBieXRlIGFnID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgMl0pO1xyXG4gICAgICAgICAgICBieXRlIGJjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRGaXJzdE5pYmJsZShPdXRwdXRSb21bbG9jYXRpb24gKyA0XSk7XHJcbiAgICAgICAgICAgIGJ5dGUgcmVjID0gVFNCVG9vbC5TdGF0aWNVdGlscy5HZXRTZWNvbmROaWJibGUoT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGJ5dGVbXSBhdHRycyA9IG5ldyBieXRlW10geyBycywgcnAsIG1zLCBocCwgYmIsIGFnLCBiYywgcmVjIH07XHJcbiAgICAgICAgICAgIHN0cmluZyByZXRWYWwgPSBUU0JUb29sLlN0YXRpY1V0aWxzLk1hcEF0dHJpYnV0ZXMoYXR0cnMpOy8vICtTdHJpbmcuRm9ybWF0KFwifHswOngyfSB7MTp4Mn0gezI6eDJ9IHszOngyfSB7NDp4Mn1cIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdLCBPdXRwdXRSb21bbG9jYXRpb24gKyAzXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgNF0pO1xyXG4gICAgICAgICAgICBpZiAoU2hvd1BsYXllclNpbURhdGEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gR2V0U2ltTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsICs9IFN0cmluZy5Gb3JtYXQoXCJbezA6WDJ9LHsxOlgyfSx7MjpYMn1cIiwgT3V0cHV0Um9tW2xvY2F0aW9uXSwgT3V0cHV0Um9tW2xvY2F0aW9uICsgMV0sIE91dHB1dFJvbVtsb2NhdGlvbiArIDJdKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbk5hbWVzLkluZGV4T2YocG9zaXRpb24pIDwgMTMpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0VmFsICs9IChcIixcIiArIE91dHB1dFJvbVtsb2NhdGlvbiArIDNdLlRvU3RyaW5nKFwiWDJcIikpO1xyXG4gICAgICAgICAgICAgICAgcmV0VmFsICs9IFwiXVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBTZXRTa2lsbFBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCAvLyAoc2Vhc29uID0gMS0zKVxyXG4gICAgICAgICAgICBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgICAgICAvL2J5dGUgcnVubmluZ1NwZWVkLCBieXRlIHJ1c2hpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIG1heFNwZWVkLCBieXRlIGhpdHRpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIGJvZHlCYWxhbmNlLCBhZ2lsaXR5XHJcbiAgICAgICAgICAgIC8vYnl0ZSBiYWxsQ29udHJvbCwgYnl0ZSByZWNlcHRpb25zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVFNCVG9vbC5TdGF0aWNVdGlscy5DaGVja1RTQjJBcmdzKHNlYXNvbiwgdGVhbSk7XHJcbiAgICAgICAgICAgIGludCBwb3NJbmRleCA9IHBvc2l0aW9uTmFtZXMuSW5kZXhPZihwb3NpdGlvbik7IC8vMi0xMVxyXG4gICAgICAgICAgICBpZiAocG9zSW5kZXggPCAyIHx8IHBvc0luZGV4ID4gMTEpIHRocm93IG5ldyBBcmd1bWVudEV4Y2VwdGlvbihcIkludmFsaWQgcG9zaXRpb24gYXJndW1lbnQhICh0YWtlcyBSQjE9VEUyKVwiICsgcG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzX3JwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMF0sIGFiaWxpdGllc1sxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXNfaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1syXSwgYWJpbGl0aWVzWzNdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl9hZyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzRdLCBhYmlsaXRpZXNbNV0pO1xyXG4gICAgICAgICAgICBieXRlIGJjX3JlYyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzZdLCBhYmlsaXRpZXNbN10pO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICAgICwgcnNfcnApO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgMSwgbXNfaHApO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgMiwgYmJfYWcpO1xyXG4gICAgICAgICAgICBTZXRCeXRlKGxvY2F0aW9uICsgNCwgYmNfcmVjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFNldERlZmVuc2l2ZVBsYXllckFiaWxpdGllcyhpbnQgc2Vhc29uLCBzdHJpbmcgdGVhbSwgc3RyaW5nIHBvc2l0aW9uLCBieXRlW10gYWJpbGl0aWVzKVxyXG4gICAgICAgICAgICAvL2J5dGUgcnVubmluZ1NwZWVkLCBieXRlIHJ1c2hpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIG1heFNwZWVkLCBieXRlIGhpdHRpbmdQb3dlcixcclxuICAgICAgICAgICAgLy9ieXRlIGJvZHlCYWxhbmNlLFxyXG4gICAgICAgICAgICAvL2J5dGUgaW50ZXJjZXB0aW9ucywgYnl0ZSBxdWlja25lc3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUU0JUb29sLlN0YXRpY1V0aWxzLkNoZWNrVFNCMkFyZ3Moc2Vhc29uLCB0ZWFtKTtcclxuICAgICAgICAgICAgaW50IHBvc0luZGV4ID0gcG9zaXRpb25OYW1lcy5JbmRleE9mKHBvc2l0aW9uKTsgLy8xNy0zNFxyXG4gICAgICAgICAgICBpZiAocG9zSW5kZXggPCAxNyB8fCBwb3NJbmRleCA+IDM0KSB0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oXCJJbnZhbGlkIHBvc2l0aW9uIGFyZ3VtZW50ISAodGFrZXMgUkUtREIzKVwiICsgcG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaW50IGxvY2F0aW9uID0gR2V0UGxheWVyQXR0cmlidXRlTG9jYXRpb24oMSwgdGVhbSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBieXRlIHJzX3JwID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbMF0sIGFiaWxpdGllc1sxXSk7XHJcbiAgICAgICAgICAgIGJ5dGUgbXNfaHAgPSBUU0JUb29sLlN0YXRpY1V0aWxzLkNvbWJpbmVOaWJibGVzKGFiaWxpdGllc1syXSwgYWJpbGl0aWVzWzNdKTtcclxuICAgICAgICAgICAgYnl0ZSBiYl9hZyA9IFRTQlRvb2wuU3RhdGljVXRpbHMuQ29tYmluZU5pYmJsZXMoYWJpbGl0aWVzWzRdLCBhYmlsaXRpZXNbNV0pO1xyXG4gICAgICAgICAgICBieXRlIHBpX3F1ID0gVFNCVG9vbC5TdGF0aWNVdGlscy5Db21iaW5lTmliYmxlcyhhYmlsaXRpZXNbNl0sIGFiaWxpdGllc1s3XSk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gICAgLCByc19ycCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAxLCBtc19ocCk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyAyLCBiYl9hZyk7XHJcbiAgICAgICAgICAgIFNldEJ5dGUobG9jYXRpb24gKyA0LCBwaV9xdSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludFtdIHNldmVudGVlbldlZWtzID0gbmV3IGludFtdIHsgMTUsIDE1LCAxNSwgMTIsIDEzLCAxMywgMTMsIDEzLCAxMywgMTQsIDE0LCAxNSwgMTUsIDE1LCAxNSwgMTUsIDE1IH07XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgR2V0U2NoZWR1bGUoaW50IHNlYXNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNORVNfVFNCM19TY2hlZHVsZUhlbHBlciBoZWxwZXIgPSBuZXcgU05FU19UU0IzX1NjaGVkdWxlSGVscGVyKHRoaXMpO1xyXG4gICAgICAgICAgICBoZWxwZXIuU2V0V2Vla09uZUxvY2F0aW9uKHNjaGVkdWxlX3N0YXJ0X3NlYXNvbl8xLCBzZXZlbnRlZW5XZWVrcywgc2NoZWR1bGVUZWFtT3JkZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gaGVscGVyLkdldFNjaGVkdWxlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBBcHBseVNjaGVkdWxlKGludCBzZWFzb24sIExpc3Q8c3RyaW5nPiBzY2hlZHVsZUxpc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTTkVTX1RTQjNfU2NoZWR1bGVIZWxwZXIgaGVscGVyID0gbmV3IFNORVNfVFNCM19TY2hlZHVsZUhlbHBlcih0aGlzKTtcclxuICAgICAgICAgICAgaGVscGVyLlNldFdlZWtPbmVMb2NhdGlvbihzY2hlZHVsZV9zdGFydF9zZWFzb25fMSwgc2V2ZW50ZWVuV2Vla3MsIHNjaGVkdWxlVGVhbU9yZGVyKTtcclxuICAgICAgICAgICAgaGVscGVyLkFwcGx5U2NoZWR1bGUoc2NoZWR1bGVMaXN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgR2V0QWxsKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZXRBbGwoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgc3RyaW5nIEdldEFsbChpbnQgc2Vhc29uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2UuR2V0QWxsKDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIFRTQlRvb2wuUk9NX1RZUEUgUm9tVmVyc2lvbiB7IGdldCB7IHJldHVybiBUU0JUb29sLlJPTV9UWVBFLlNORVNfVFNCMzsgfSB9XHJcbiAgICB9XHJcbn1cclxuIl0KfQo=
